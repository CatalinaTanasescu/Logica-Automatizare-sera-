
Licenta_testBun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b274  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005dbc  0802b518  0802b518  0002c518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080312d4  080312d4  000322d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080312dc  080312dc  000322dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080312e0  080312e0  000322e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000238  24000000  080312e4  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000238  0803151c  00033238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004bbc  08035e9f  00037bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004c1c  08035eff  00037c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006b04  24004c80  08035f5f  00037c80  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2400b784  08035f5f  00038784  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00037c7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ef92  00000000  00000000  00037caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000072bd  00000000  00000000  00076c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d40  00000000  00000000  0007df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002585  00000000  00000000  00080c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047a41  00000000  00000000  000831c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047b42  00000000  00000000  000cac06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017e4e6  00000000  00000000  00112748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00290c2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d768  00000000  00000000  00290c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0029e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004c80 	.word	0x24004c80
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802b4fc 	.word	0x0802b4fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004c84 	.word	0x24004c84
 80002dc:	0802b4fc 	.word	0x0802b4fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP180_ReadReg>:
    uint8_t data[2] = { reg, cmd };
    HAL_I2C_Master_Transmit(&hi2c1, BMP180_WRITE, data, 2, 1000);
}

// Read a single byte from a BMP180 register
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Master_Transmit(&hi2c1, BMP180_WRITE, &reg, 1, 1000);
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	21ee      	movs	r1, #238	@ 0xee
 8000696:	4809      	ldr	r0, [pc, #36]	@ (80006bc <BMP180_ReadReg+0x3c>)
 8000698:	f014 fefe 	bl	8015498 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, BMP180_READ, &value, 1, 1000);
 800069c:	f107 020f 	add.w	r2, r7, #15
 80006a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	21ef      	movs	r1, #239	@ 0xef
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <BMP180_ReadReg+0x3c>)
 80006ac:	f015 f80c 	bl	80156c8 <HAL_I2C_Master_Receive>
    return value;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	24004c9c 	.word	0x24004c9c

080006c0 <SendCalibrationData>:

void SendCalibrationData(Bmp180CalibrationData *calibrationData) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    char buffer[50];

    // Send each calibration value
    snprintf(buffer, sizeof(buffer), "Calibration Data:\r\n");
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4a88      	ldr	r2, [pc, #544]	@ (80008f0 <SendCalibrationData+0x230>)
 80006ce:	2132      	movs	r1, #50	@ 0x32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f028 fec1 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fe50 	bl	8000380 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	4881      	ldr	r0, [pc, #516]	@ (80008f4 <SendCalibrationData+0x234>)
 80006ee:	f019 f983 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac1 = %d\r\n", calibrationData->ac1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f8:	f107 000c 	add.w	r0, r7, #12
 80006fc:	4a7e      	ldr	r2, [pc, #504]	@ (80008f8 <SendCalibrationData+0x238>)
 80006fe:	2132      	movs	r1, #50	@ 0x32
 8000700:	f028 feaa 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe39 	bl	8000380 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f107 010c 	add.w	r1, r7, #12
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	4876      	ldr	r0, [pc, #472]	@ (80008f4 <SendCalibrationData+0x234>)
 800071c:	f019 f96c 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac2 = %d\r\n", calibrationData->ac2);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000726:	f107 000c 	add.w	r0, r7, #12
 800072a:	4a74      	ldr	r2, [pc, #464]	@ (80008fc <SendCalibrationData+0x23c>)
 800072c:	2132      	movs	r1, #50	@ 0x32
 800072e:	f028 fe93 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fe22 	bl	8000380 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f107 010c 	add.w	r1, r7, #12
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	486a      	ldr	r0, [pc, #424]	@ (80008f4 <SendCalibrationData+0x234>)
 800074a:	f019 f955 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac3 = %d\r\n", calibrationData->ac3);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000754:	f107 000c 	add.w	r0, r7, #12
 8000758:	4a69      	ldr	r2, [pc, #420]	@ (8000900 <SendCalibrationData+0x240>)
 800075a:	2132      	movs	r1, #50	@ 0x32
 800075c:	f028 fe7c 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fe0b 	bl	8000380 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	f107 010c 	add.w	r1, r7, #12
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	485f      	ldr	r0, [pc, #380]	@ (80008f4 <SendCalibrationData+0x234>)
 8000778:	f019 f93e 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac4 = %u\r\n", calibrationData->ac4);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	88db      	ldrh	r3, [r3, #6]
 8000780:	f107 000c 	add.w	r0, r7, #12
 8000784:	4a5f      	ldr	r2, [pc, #380]	@ (8000904 <SendCalibrationData+0x244>)
 8000786:	2132      	movs	r1, #50	@ 0x32
 8000788:	f028 fe66 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fdf5 	bl	8000380 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	4854      	ldr	r0, [pc, #336]	@ (80008f4 <SendCalibrationData+0x234>)
 80007a4:	f019 f928 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac5 = %u\r\n", calibrationData->ac5);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	891b      	ldrh	r3, [r3, #8]
 80007ac:	f107 000c 	add.w	r0, r7, #12
 80007b0:	4a55      	ldr	r2, [pc, #340]	@ (8000908 <SendCalibrationData+0x248>)
 80007b2:	2132      	movs	r1, #50	@ 0x32
 80007b4:	f028 fe50 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fddf 	bl	8000380 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f107 010c 	add.w	r1, r7, #12
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	4849      	ldr	r0, [pc, #292]	@ (80008f4 <SendCalibrationData+0x234>)
 80007d0:	f019 f912 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "ac6 = %u\r\n", calibrationData->ac6);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	895b      	ldrh	r3, [r3, #10]
 80007d8:	f107 000c 	add.w	r0, r7, #12
 80007dc:	4a4b      	ldr	r2, [pc, #300]	@ (800090c <SendCalibrationData+0x24c>)
 80007de:	2132      	movs	r1, #50	@ 0x32
 80007e0:	f028 fe3a 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fdc9 	bl	8000380 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f107 010c 	add.w	r1, r7, #12
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	483e      	ldr	r0, [pc, #248]	@ (80008f4 <SendCalibrationData+0x234>)
 80007fc:	f019 f8fc 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "b1 = %d\r\n", calibrationData->b1);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	4a41      	ldr	r2, [pc, #260]	@ (8000910 <SendCalibrationData+0x250>)
 800080c:	2132      	movs	r1, #50	@ 0x32
 800080e:	f028 fe23 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fdb2 	bl	8000380 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 010c 	add.w	r1, r7, #12
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	4832      	ldr	r0, [pc, #200]	@ (80008f4 <SendCalibrationData+0x234>)
 800082a:	f019 f8e5 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "b2 = %d\r\n", calibrationData->b2);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000834:	f107 000c 	add.w	r0, r7, #12
 8000838:	4a36      	ldr	r2, [pc, #216]	@ (8000914 <SendCalibrationData+0x254>)
 800083a:	2132      	movs	r1, #50	@ 0x32
 800083c:	f028 fe0c 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fd9b 	bl	8000380 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f107 010c 	add.w	r1, r7, #12
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	4827      	ldr	r0, [pc, #156]	@ (80008f4 <SendCalibrationData+0x234>)
 8000858:	f019 f8ce 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "mb = %d\r\n", calibrationData->mb);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000862:	f107 000c 	add.w	r0, r7, #12
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <SendCalibrationData+0x258>)
 8000868:	2132      	movs	r1, #50	@ 0x32
 800086a:	f028 fdf5 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd84 	bl	8000380 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	481b      	ldr	r0, [pc, #108]	@ (80008f4 <SendCalibrationData+0x234>)
 8000886:	f019 f8b7 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "mc = %d\r\n", calibrationData->mc);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000890:	f107 000c 	add.w	r0, r7, #12
 8000894:	4a21      	ldr	r2, [pc, #132]	@ (800091c <SendCalibrationData+0x25c>)
 8000896:	2132      	movs	r1, #50	@ 0x32
 8000898:	f028 fdde 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fd6d 	bl	8000380 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	4810      	ldr	r0, [pc, #64]	@ (80008f4 <SendCalibrationData+0x234>)
 80008b4:	f019 f8a0 	bl	80199f8 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "md = %d\r\n", calibrationData->md);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008be:	f107 000c 	add.w	r0, r7, #12
 80008c2:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <SendCalibrationData+0x260>)
 80008c4:	2132      	movs	r1, #50	@ 0x32
 80008c6:	f028 fdc7 	bl	8029458 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd56 	bl	8000380 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f107 010c 	add.w	r1, r7, #12
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <SendCalibrationData+0x234>)
 80008e2:	f019 f889 	bl	80199f8 <HAL_UART_Transmit>
}
 80008e6:	bf00      	nop
 80008e8:	3740      	adds	r7, #64	@ 0x40
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	0802b518 	.word	0x0802b518
 80008f4:	24004cf0 	.word	0x24004cf0
 80008f8:	0802b52c 	.word	0x0802b52c
 80008fc:	0802b538 	.word	0x0802b538
 8000900:	0802b544 	.word	0x0802b544
 8000904:	0802b550 	.word	0x0802b550
 8000908:	0802b55c 	.word	0x0802b55c
 800090c:	0802b568 	.word	0x0802b568
 8000910:	0802b574 	.word	0x0802b574
 8000914:	0802b580 	.word	0x0802b580
 8000918:	0802b58c 	.word	0x0802b58c
 800091c:	0802b598 	.word	0x0802b598
 8000920:	0802b5a4 	.word	0x0802b5a4

08000924 <BMP180_ReadCalibrationData>:
// Read calibration data from BMP180 E2PROM
void BMP180_ReadCalibrationData(Bmp180CalibrationData *data) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    data->ac1 = (BMP180_ReadReg(0xAA) << 8) | BMP180_ReadReg(0xAB);
 800092c:	20aa      	movs	r0, #170	@ 0xaa
 800092e:	f7ff fea7 	bl	8000680 <BMP180_ReadReg>
 8000932:	4603      	mov	r3, r0
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21c      	sxth	r4, r3
 8000938:	20ab      	movs	r0, #171	@ 0xab
 800093a:	f7ff fea1 	bl	8000680 <BMP180_ReadReg>
 800093e:	4603      	mov	r3, r0
 8000940:	b21b      	sxth	r3, r3
 8000942:	4323      	orrs	r3, r4
 8000944:	b21a      	sxth	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	801a      	strh	r2, [r3, #0]
    data->ac2 = (BMP180_ReadReg(0xAC) << 8) | BMP180_ReadReg(0xAD);
 800094a:	20ac      	movs	r0, #172	@ 0xac
 800094c:	f7ff fe98 	bl	8000680 <BMP180_ReadReg>
 8000950:	4603      	mov	r3, r0
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21c      	sxth	r4, r3
 8000956:	20ad      	movs	r0, #173	@ 0xad
 8000958:	f7ff fe92 	bl	8000680 <BMP180_ReadReg>
 800095c:	4603      	mov	r3, r0
 800095e:	b21b      	sxth	r3, r3
 8000960:	4323      	orrs	r3, r4
 8000962:	b21a      	sxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	805a      	strh	r2, [r3, #2]
    data->ac3 = (BMP180_ReadReg(0xAE) << 8) | BMP180_ReadReg(0xAF);
 8000968:	20ae      	movs	r0, #174	@ 0xae
 800096a:	f7ff fe89 	bl	8000680 <BMP180_ReadReg>
 800096e:	4603      	mov	r3, r0
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21c      	sxth	r4, r3
 8000974:	20af      	movs	r0, #175	@ 0xaf
 8000976:	f7ff fe83 	bl	8000680 <BMP180_ReadReg>
 800097a:	4603      	mov	r3, r0
 800097c:	b21b      	sxth	r3, r3
 800097e:	4323      	orrs	r3, r4
 8000980:	b21a      	sxth	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	809a      	strh	r2, [r3, #4]
    data->ac4 = (BMP180_ReadReg(0xB0) << 8) | BMP180_ReadReg(0xB1);
 8000986:	20b0      	movs	r0, #176	@ 0xb0
 8000988:	f7ff fe7a 	bl	8000680 <BMP180_ReadReg>
 800098c:	4603      	mov	r3, r0
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21c      	sxth	r4, r3
 8000992:	20b1      	movs	r0, #177	@ 0xb1
 8000994:	f7ff fe74 	bl	8000680 <BMP180_ReadReg>
 8000998:	4603      	mov	r3, r0
 800099a:	b21b      	sxth	r3, r3
 800099c:	4323      	orrs	r3, r4
 800099e:	b21b      	sxth	r3, r3
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	80da      	strh	r2, [r3, #6]
    data->ac5 = (BMP180_ReadReg(0xB2) << 8) | BMP180_ReadReg(0xB3);
 80009a6:	20b2      	movs	r0, #178	@ 0xb2
 80009a8:	f7ff fe6a 	bl	8000680 <BMP180_ReadReg>
 80009ac:	4603      	mov	r3, r0
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21c      	sxth	r4, r3
 80009b2:	20b3      	movs	r0, #179	@ 0xb3
 80009b4:	f7ff fe64 	bl	8000680 <BMP180_ReadReg>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4323      	orrs	r3, r4
 80009be:	b21b      	sxth	r3, r3
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	811a      	strh	r2, [r3, #8]
    data->ac6 = (BMP180_ReadReg(0xB4) << 8) | BMP180_ReadReg(0xB5);
 80009c6:	20b4      	movs	r0, #180	@ 0xb4
 80009c8:	f7ff fe5a 	bl	8000680 <BMP180_ReadReg>
 80009cc:	4603      	mov	r3, r0
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21c      	sxth	r4, r3
 80009d2:	20b5      	movs	r0, #181	@ 0xb5
 80009d4:	f7ff fe54 	bl	8000680 <BMP180_ReadReg>
 80009d8:	4603      	mov	r3, r0
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4323      	orrs	r3, r4
 80009de:	b21b      	sxth	r3, r3
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	815a      	strh	r2, [r3, #10]
    data->b1  = (BMP180_ReadReg(0xB6) << 8) | BMP180_ReadReg(0xB7);
 80009e6:	20b6      	movs	r0, #182	@ 0xb6
 80009e8:	f7ff fe4a 	bl	8000680 <BMP180_ReadReg>
 80009ec:	4603      	mov	r3, r0
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b21c      	sxth	r4, r3
 80009f2:	20b7      	movs	r0, #183	@ 0xb7
 80009f4:	f7ff fe44 	bl	8000680 <BMP180_ReadReg>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4323      	orrs	r3, r4
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	819a      	strh	r2, [r3, #12]
    data->b2  = (BMP180_ReadReg(0xB8) << 8) | BMP180_ReadReg(0xB9);
 8000a04:	20b8      	movs	r0, #184	@ 0xb8
 8000a06:	f7ff fe3b 	bl	8000680 <BMP180_ReadReg>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21c      	sxth	r4, r3
 8000a10:	20b9      	movs	r0, #185	@ 0xb9
 8000a12:	f7ff fe35 	bl	8000680 <BMP180_ReadReg>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	4323      	orrs	r3, r4
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	81da      	strh	r2, [r3, #14]
    data->mb  = (BMP180_ReadReg(0xBa) << 8) | BMP180_ReadReg(0xBB);
 8000a22:	20ba      	movs	r0, #186	@ 0xba
 8000a24:	f7ff fe2c 	bl	8000680 <BMP180_ReadReg>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	b21c      	sxth	r4, r3
 8000a2e:	20bb      	movs	r0, #187	@ 0xbb
 8000a30:	f7ff fe26 	bl	8000680 <BMP180_ReadReg>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	821a      	strh	r2, [r3, #16]
    data->mc  = (BMP180_ReadReg(0xBC) << 8) | BMP180_ReadReg(0xBD);
 8000a40:	20bc      	movs	r0, #188	@ 0xbc
 8000a42:	f7ff fe1d 	bl	8000680 <BMP180_ReadReg>
 8000a46:	4603      	mov	r3, r0
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b21c      	sxth	r4, r3
 8000a4c:	20bd      	movs	r0, #189	@ 0xbd
 8000a4e:	f7ff fe17 	bl	8000680 <BMP180_ReadReg>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4323      	orrs	r3, r4
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	825a      	strh	r2, [r3, #18]
    data->md  = (BMP180_ReadReg(0xBE) << 8) | BMP180_ReadReg(0xBF);
 8000a5e:	20be      	movs	r0, #190	@ 0xbe
 8000a60:	f7ff fe0e 	bl	8000680 <BMP180_ReadReg>
 8000a64:	4603      	mov	r3, r0
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21c      	sxth	r4, r3
 8000a6a:	20bf      	movs	r0, #191	@ 0xbf
 8000a6c:	f7ff fe08 	bl	8000680 <BMP180_ReadReg>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	4323      	orrs	r3, r4
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	829a      	strh	r2, [r3, #20]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <cbuff_new>:
}

// Circular Buffer Functions

// Initialize circular buffer
void cbuff_new(cbuff_t *cb, uint16_t size) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
    cb->start = 0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	721a      	strb	r2, [r3, #8]
    cb->end = 0;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	725a      	strb	r2, [r3, #9]
    cb->count = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	729a      	strb	r2, [r3, #10]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f011 fe9f 	bl	80127f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f82d 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 f921 	bl	8000d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ac2:	f000 f893 	bl	8000bec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ac6:	f000 f8d1 	bl	8000c6c <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000aca:	f01a fcff 	bl	801b4cc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  BMP180_ReadCalibrationData(&calibrationData);
 8000ace:	480f      	ldr	r0, [pc, #60]	@ (8000b0c <main+0x5c>)
 8000ad0:	f7ff ff28 	bl	8000924 <BMP180_ReadCalibrationData>
  SendCalibrationData(&calibrationData);  // Send calibration data over UART
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <main+0x5c>)
 8000ad6:	f7ff fdf3 	bl	80006c0 <SendCalibrationData>
  cbuff_new(&temperature_buffer, MAX_NO_TEMP);
 8000ada:	2104      	movs	r1, #4
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <main+0x60>)
 8000ade:	f7ff ffd1 	bl	8000a84 <cbuff_new>

  print_ip_address();  // Afișează adresa IP obținută
 8000ae2:	f011 fa2f 	bl	8011f44 <print_ip_address>
  mqtt_init();         // Inițializează managerul MQTT
 8000ae6:	f011 f99d 	bl	8011e24 <mqtt_init>
	  	      HAL_UART_Transmit(&huart1, (uint8_t *)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
	  	    // Delay before next measurement
	  	   	  HAL_Delay(1000);*/


	      float temperature = 25.0; // Valoare simulată pentru test
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <main+0x64>)
 8000aec:	607b      	str	r3, [r7, #4]
	      mqtt_publish_message(temperature);  // Publică mesajul
 8000aee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000af2:	f011 f9d3 	bl	8011e9c <mqtt_publish_message>
	      mqtt_poll(1000);                    // Procesează evenimentele MQTT
 8000af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afa:	f011 fa15 	bl	8011f28 <mqtt_poll>
	      HAL_Delay(5000);                    // Publică la fiecare 5 secunde
 8000afe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b02:	f011 ff0b 	bl	801291c <HAL_Delay>
  {
 8000b06:	bf00      	nop
 8000b08:	e7ef      	b.n	8000aea <main+0x3a>
 8000b0a:	bf00      	nop
 8000b0c:	24004d84 	.word	0x24004d84
 8000b10:	24004d9c 	.word	0x24004d9c
 8000b14:	41c80000 	.word	0x41c80000

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09c      	sub	sp, #112	@ 0x70
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	224c      	movs	r2, #76	@ 0x4c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f028 fdcc 	bl	80296c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f028 fdc6 	bl	80296c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f016 f8c1 	bl	8016cc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <SystemClock_Config+0xcc>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b46:	4a27      	ldr	r2, [pc, #156]	@ (8000be4 <SystemClock_Config+0xcc>)
 8000b48:	f023 0301 	bic.w	r3, r3, #1
 8000b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <SystemClock_Config+0xcc>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b74:	bf00      	nop
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b82:	d1f8      	bne.n	8000b76 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f016 f8cb 	bl	8016d34 <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ba4:	f000 f968 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	233f      	movs	r3, #63	@ 0x3f
 8000baa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f016 fd0b 	bl	80175e8 <HAL_RCC_ClockConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bd8:	f000 f94e 	bl	8000e78 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3770      	adds	r7, #112	@ 0x70
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58000400 	.word	0x58000400
 8000be8:	58024800 	.word	0x58024800

08000bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c64 <MX_I2C1_Init+0x78>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <MX_I2C1_Init+0x7c>)
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c26:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c28:	f014 fb9a 	bl	8015360 <HAL_I2C_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c32:	f000 f921 	bl	8000e78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c3a:	f015 ffa9 	bl	8016b90 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c44:	f000 f918 	bl	8000e78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_I2C1_Init+0x74>)
 8000c4c:	f015 ffeb 	bl	8016c26 <HAL_I2CEx_ConfigDigitalFilter>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f90f 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24004c9c 	.word	0x24004c9c
 8000c64:	40005400 	.word	0x40005400
 8000c68:	10707dbc 	.word	0x10707dbc

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <MX_USART1_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cb6:	f018 fe4f 	bl	8019958 <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f8da 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cc8:	f01a fb36 	bl	801b338 <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f000 f8d1 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cda:	f01a fb6b 	bl	801b3b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f8c8 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cea:	f01a faec 	bl	801b2c6 <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f8c0 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24004cf0 	.word	0x24004cf0
 8000d00:	40011000 	.word	0x40011000

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a50      	ldr	r2, [pc, #320]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d38:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a49      	ldr	r2, [pc, #292]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b46      	ldr	r3, [pc, #280]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a41      	ldr	r2, [pc, #260]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b3f      	ldr	r3, [pc, #252]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b3b      	ldr	r3, [pc, #236]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b37      	ldr	r3, [pc, #220]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a32      	ldr	r2, [pc, #200]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_GPIO_Init+0x160>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000dd4:	4824      	ldr	r0, [pc, #144]	@ (8000e68 <MX_GPIO_Init+0x164>)
 8000dd6:	f014 faa9 	bl	801532c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4823      	ldr	r0, [pc, #140]	@ (8000e6c <MX_GPIO_Init+0x168>)
 8000de0:	f014 faa4 	bl	801532c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <MX_GPIO_Init+0x16c>)
 8000dfa:	f014 f8e7 	bl	8014fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dfe:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <MX_GPIO_Init+0x164>)
 8000e18:	f014 f8d8 	bl	8014fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <MX_GPIO_Init+0x170>)
 8000e3a:	f014 f8c7 	bl	8014fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_GPIO_Init+0x168>)
 8000e56:	f014 f8b9 	bl	8014fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3730      	adds	r7, #48	@ 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58021000 	.word	0x58021000
 8000e70:	58020800 	.word	0x58020800
 8000e74:	58020c00 	.word	0x58020c00

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e002      	b.n	8000e9a <mg_dns_free+0x16>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d1f7      	bne.n	8000e94 <mg_dns_free+0x10>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	601a      	str	r2, [r3, #0]
  free(d);
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f027 fba9 	bl	8028604 <free>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	3330      	adds	r3, #48	@ 0x30
 8000ec8:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e00d      	b.n	8000eee <mg_resolve_cancel+0x34>
    tmp = d->next;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d103      	bne.n	8000eea <mg_resolve_cancel+0x30>
 8000ee2:	6979      	ldr	r1, [r7, #20]
 8000ee4:	6938      	ldr	r0, [r7, #16]
 8000ee6:	f7ff ffcd 	bl	8000e84 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1ee      	bne.n	8000ed2 <mg_resolve_cancel+0x18>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b08c      	sub	sp, #48	@ 0x30
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8000f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <mg_dns_parse_name_depth+0x24>
 8000f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <mg_dns_parse_name_depth+0x24>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	f340 8084 	ble.w	8001032 <mg_dns_parse_name_depth+0x134>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e093      	b.n	8001056 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	4413      	add	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <mg_dns_parse_name_depth+0x4c>
      i++;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
      break;
 8000f48:	e07b      	b.n	8001042 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d02f      	beq.n	8000fb4 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	440a      	add	r2, r1
 8000f62:	3201      	adds	r2, #1
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	440a      	add	r2, r1
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d919      	bls.n	8000fac <mg_dns_parse_name_depth+0xae>
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d111      	bne.n	8000fac <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8000f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff ffae 	bl	8000efe <mg_dns_parse_name_depth>
 8000fa2:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <mg_dns_parse_name_depth+0xae>
        return 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e054      	b.n	8001056 <mg_dns_parse_name_depth+0x158>
      i += 2;
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	61fb      	str	r3, [r7, #28]
      break;
 8000fb2:	e046      	b.n	8001042 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	441a      	add	r2, r3
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d801      	bhi.n	8000fca <mg_dns_parse_name_depth+0xcc>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e045      	b.n	8001056 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8000fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00b      	beq.n	8000fe8 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8000fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d204      	bcs.n	8000fe2 <mg_dns_parse_name_depth+0xe4>
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fdc:	4413      	add	r3, r2
 8000fde:	222e      	movs	r2, #46	@ 0x2e
 8000fe0:	701a      	strb	r2, [r3, #0]
      j++;
 8000fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8000fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4413      	add	r3, r2
 8000fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d90c      	bls.n	800100e <mg_dns_parse_name_depth+0x110>
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff8:	18d0      	adds	r0, r2, r3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	3301      	adds	r3, #1
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4619      	mov	r1, r3
 800100a:	f028 fc20 	bl	802984e <memcpy>
    j += n;
 800100e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4413      	add	r3, r2
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	4413      	add	r3, r2
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001024:	429a      	cmp	r2, r3
 8001026:	d204      	bcs.n	8001032 <mg_dns_parse_name_depth+0x134>
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	4413      	add	r3, r2
 8001038:	3301      	adds	r3, #1
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	f63f af76 	bhi.w	8000f2e <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8001042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <mg_dns_parse_name_depth+0x156>
 8001048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104a:	3b01      	subs	r3, #1
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  return i;
 8001054:	69fb      	ldr	r3, [r7, #28]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b088      	sub	sp, #32
 8001062:	af04      	add	r7, sp, #16
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 800106c:	2300      	movs	r3, #0
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2300      	movs	r3, #0
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff ff3d 	bl	8000efe <mg_dns_parse_name_depth>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b088      	sub	sp, #32
 8001092:	af02      	add	r7, sp, #8
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80010ac:	2208      	movs	r2, #8
 80010ae:	2100      	movs	r1, #0
 80010b0:	6a38      	ldr	r0, [r7, #32]
 80010b2:	f028 fb07 	bl	80296c4 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2b0b      	cmp	r3, #11
 80010ba:	d801      	bhi.n	80010c0 <mg_dns_parse_rr+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	e074      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c6:	d901      	bls.n	80010cc <mg_dns_parse_rr+0x3e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e06e      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d301      	bcc.n	80010d8 <mg_dns_parse_rr+0x4a>
 80010d4:	2300      	movs	r3, #0
 80010d6:	e068      	b.n	80011aa <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff ffbb 	bl	800105e <mg_dns_parse_name>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <mg_dns_parse_rr+0x6e>
    return 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e056      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	3304      	adds	r3, #4
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d901      	bls.n	8001114 <mg_dns_parse_rr+0x86>
 8001110:	2300      	movs	r3, #0
 8001112:	e04a      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3b04      	subs	r3, #4
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3b03      	subs	r3, #3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3b02      	subs	r3, #2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3b01      	subs	r3, #1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <mg_dns_parse_rr+0xcc>
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	e027      	b.n	80011aa <mg_dns_parse_rr+0x11c>

  s += 6;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3306      	adds	r3, #6
 800115e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d901      	bls.n	800116c <mg_dns_parse_rr+0xde>
 8001168:	2300      	movs	r3, #0
 800116a:	e01e      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3b02      	subs	r3, #2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3b01      	subs	r3, #1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	88db      	ldrh	r3, [r3, #6]
 800118c:	461a      	mov	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d201      	bcs.n	800119c <mg_dns_parse_rr+0x10e>
 8001198:	2300      	movs	r3, #0
 800119a:	e006      	b.n	80011aa <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	88db      	ldrh	r3, [r3, #6]
 80011a6:	4413      	add	r3, r2
 80011a8:	330a      	adds	r3, #10
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	@ 0x38
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80011c4:	230c      	movs	r3, #12
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80011c8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80011cc:	2100      	movs	r1, #0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f028 fa78 	bl	80296c4 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b0b      	cmp	r3, #11
 80011d8:	d801      	bhi.n	80011de <mg_dns_parse+0x2a>
 80011da:	2300      	movs	r3, #0
 80011dc:	e0a9      	b.n	8001332 <mg_dns_parse+0x17e>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f010 f813 	bl	801120e <mg_ntohs>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d901      	bls.n	80011f2 <mg_dns_parse+0x3e>
 80011ee:	2300      	movs	r3, #0
 80011f0:	e09f      	b.n	8001332 <mg_dns_parse+0x17e>
  num_answers = mg_ntohs(h->num_answers);
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	88db      	ldrh	r3, [r3, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f010 f809 	bl	801120e <mg_ntohs>
 80011fc:	4603      	mov	r3, r0
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8001200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d90f      	bls.n	8001226 <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8001206:	4b4d      	ldr	r3, [pc, #308]	@ (800133c <mg_dns_parse+0x188>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	dd09      	ble.n	8001222 <mg_dns_parse+0x6e>
 800120e:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <mg_dns_parse+0x18c>)
 8001210:	22e1      	movs	r2, #225	@ 0xe1
 8001212:	494c      	ldr	r1, [pc, #304]	@ (8001344 <mg_dns_parse+0x190>)
 8001214:	2003      	movs	r0, #3
 8001216:	f001 fe0f 	bl	8002e38 <mg_log_prefix>
 800121a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800121c:	484a      	ldr	r0, [pc, #296]	@ (8001348 <mg_dns_parse+0x194>)
 800121e:	f001 fe5b 	bl	8002ed8 <mg_log>
    num_answers = 10;  // Sanity cap
 8001222:	230a      	movs	r3, #10
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f00f ffef 	bl	801120e <mg_ntohs>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123c:	e015      	b.n	800126a <mg_dns_parse+0xb6>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff ff1f 	bl	800108e <mg_dns_parse_rr>
 8001250:	61f8      	str	r0, [r7, #28]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <mg_dns_parse+0xa8>
 8001258:	2300      	movs	r3, #0
 800125a:	e06a      	b.n	8001332 <mg_dns_parse+0x17e>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 800125c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	4413      	add	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	3301      	adds	r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f00f ffcd 	bl	801120e <mg_ntohs>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127a:	4293      	cmp	r3, r2
 800127c:	d3df      	bcc.n	800123e <mg_dns_parse+0x8a>
  }
  for (i = 0; i < num_answers; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001282:	e051      	b.n	8001328 <mg_dns_parse+0x174>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fefc 	bl	800108e <mg_dns_parse_rr>
 8001296:	61f8      	str	r0, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <mg_dns_parse+0xee>
 800129e:	2300      	movs	r3, #0
 80012a0:	e047      	b.n	8001332 <mg_dns_parse+0x17e>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3318      	adds	r3, #24
 80012a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff fed4 	bl	800105e <mg_dns_parse_name>
    ofs += n;
 80012b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80012be:	8b7b      	ldrh	r3, [r7, #26]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d114      	bne.n	80012ee <mg_dns_parse+0x13a>
 80012c4:	8afb      	ldrh	r3, [r7, #22]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d111      	bne.n	80012ee <mg_dns_parse+0x13a>
 80012ca:	8b3b      	ldrh	r3, [r7, #24]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10e      	bne.n	80012ee <mg_dns_parse+0x13a>
      dm->addr.is_ip6 = false;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012dc:	3a04      	subs	r2, #4
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	440a      	add	r2, r1
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80012ec:	e020      	b.n	8001330 <mg_dns_parse+0x17c>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80012ee:	8b7b      	ldrh	r3, [r7, #26]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d116      	bne.n	8001322 <mg_dns_parse+0x16e>
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	2b1c      	cmp	r3, #28
 80012f8:	d113      	bne.n	8001322 <mg_dns_parse+0x16e>
 80012fa:	8b3b      	ldrh	r3, [r7, #24]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d110      	bne.n	8001322 <mg_dns_parse+0x16e>
      dm->addr.is_ip6 = true;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	1d18      	adds	r0, r3, #4
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	3b10      	subs	r3, #16
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	2210      	movs	r2, #16
 8001314:	4619      	mov	r1, r3
 8001316:	f028 fa9a 	bl	802984e <memcpy>
      dm->resolved = true;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001320:	e006      	b.n	8001330 <mg_dns_parse+0x17c>
  for (i = 0; i < num_answers; i++) {
 8001322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001324:	3301      	adds	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	429a      	cmp	r2, r3
 800132e:	d3a9      	bcc.n	8001284 <mg_dns_parse+0xd0>
    }
  }
  return true;
 8001330:	2301      	movs	r3, #1
}
 8001332:	4618      	mov	r0, r3
 8001334:	3730      	adds	r7, #48	@ 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24000000 	.word	0x24000000
 8001340:	08030aec 	.word	0x08030aec
 8001344:	0802b5b0 	.word	0x0802b5b0
 8001348:	0802b5c8 	.word	0x0802b5c8

0800134c <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b0d2      	sub	sp, #328	@ 0x148
 8001350:	af02      	add	r7, sp, #8
 8001352:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001356:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800135a:	6018      	str	r0, [r3, #0]
 800135c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001360:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001364:	6019      	str	r1, [r3, #0]
 8001366:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800136e:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001374:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	3330      	adds	r3, #48	@ 0x30
 800137e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8001382:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001386:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d12d      	bne.n	80013ec <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001390:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001394:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80013a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80013ac:	e019      	b.n	80013e2 <dns_cb+0x96>
      tmp = d->next;
 80013ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80013b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013c0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80013c4:	4290      	cmp	r0, r2
 80013c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80013ca:	d206      	bcs.n	80013da <dns_cb+0x8e>
 80013cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4992      	ldr	r1, [pc, #584]	@ (800161c <dns_cb+0x2d0>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fb37 	bl	8001a48 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80013da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80013e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e1      	bne.n	80013ae <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80013ea:	e112      	b.n	8001612 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80013ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	f040 80e4 	bne.w	80015c4 <dns_cb+0x278>
    int resolved = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8001402:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001406:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800140e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001412:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f107 0210 	add.w	r2, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fec8 	bl	80011b4 <mg_dns_parse>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01e      	beq.n	800146e <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8001430:	4b7b      	ldr	r3, [pc, #492]	@ (8001620 <dns_cb+0x2d4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dd09      	ble.n	800144c <dns_cb+0x100>
 8001438:	4b7a      	ldr	r3, [pc, #488]	@ (8001624 <dns_cb+0x2d8>)
 800143a:	f240 120f 	movw	r2, #271	@ 0x10f
 800143e:	497a      	ldr	r1, [pc, #488]	@ (8001628 <dns_cb+0x2dc>)
 8001440:	2001      	movs	r0, #1
 8001442:	f001 fcf9 	bl	8002e38 <mg_log_prefix>
 8001446:	4879      	ldr	r0, [pc, #484]	@ (800162c <dns_cb+0x2e0>)
 8001448:	f001 fd46 	bl	8002ed8 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 800144c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001450:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001458:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800145c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f001 fd6c 	bl	8002f44 <mg_hexdump>
 800146c:	e090      	b.n	8001590 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 800146e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001478:	e085      	b.n	8001586 <dns_cb+0x23a>
        tmp = d->next;
 800147a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8001484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001488:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001492:	8a1b      	ldrh	r3, [r3, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d171      	bne.n	800157c <dns_cb+0x230>
        if (d->c->is_resolving) {
 8001498:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d04a      	beq.n	8001542 <dns_cb+0x1f6>
          if (dm.resolved) {
 80014ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d038      	beq.n	800152c <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80014ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80014c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014ca:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80014cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014da:	f102 041c 	add.w	r4, r2, #28
 80014de:	1d1d      	adds	r5, r3, #4
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <dns_cb+0x2d4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	dd16      	ble.n	800151e <dns_cb+0x1d2>
 80014f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <dns_cb+0x2d8>)
 80014f2:	f240 121b 	movw	r2, #283	@ 0x11b
 80014f6:	494c      	ldr	r1, [pc, #304]	@ (8001628 <dns_cb+0x2dc>)
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fc9d 	bl	8002e38 <mg_log_prefix>
 80014fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001506:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	331c      	adds	r3, #28
 800150e:	f107 0210 	add.w	r2, r7, #16
 8001512:	3218      	adds	r2, #24
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <dns_cb+0x2e4>)
 8001518:	4846      	ldr	r0, [pc, #280]	@ (8001634 <dns_cb+0x2e8>)
 800151a:	f001 fcdd 	bl	8002ed8 <mg_log>
            mg_connect_resolved(d->c);
 800151e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f006 f881 	bl	800762c <mg_connect_resolved>
 800152a:	e01d      	b.n	8001568 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 800152c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001530:	6858      	ldr	r0, [r3, #4]
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	3318      	adds	r3, #24
 8001538:	461a      	mov	r2, r3
 800153a:	493f      	ldr	r1, [pc, #252]	@ (8001638 <dns_cb+0x2ec>)
 800153c:	f000 fa84 	bl	8001a48 <mg_error>
 8001540:	e012      	b.n	8001568 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8001542:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <dns_cb+0x2d4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd0e      	ble.n	8001568 <dns_cb+0x21c>
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <dns_cb+0x2d8>)
 800154c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001550:	4935      	ldr	r1, [pc, #212]	@ (8001628 <dns_cb+0x2dc>)
 8001552:	2001      	movs	r0, #1
 8001554:	f001 fc70 	bl	8002e38 <mg_log_prefix>
 8001558:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001560:	4619      	mov	r1, r3
 8001562:	4836      	ldr	r0, [pc, #216]	@ (800163c <dns_cb+0x2f0>)
 8001564:	f001 fcb8 	bl	8002ed8 <mg_log>
        mg_dns_free(head, d);
 8001568:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800156c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001570:	f7ff fc88 	bl	8000e84 <mg_dns_free>
        resolved = 1;
 8001574:	2301      	movs	r3, #1
 8001576:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800157a:	e000      	b.n	800157e <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 800157c:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 800157e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001582:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001586:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800158a:	2b00      	cmp	r3, #0
 800158c:	f47f af75 	bne.w	800147a <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8001590:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <dns_cb+0x268>
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <dns_cb+0x2d4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd09      	ble.n	80015b4 <dns_cb+0x268>
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <dns_cb+0x2d8>)
 80015a2:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80015a6:	4920      	ldr	r1, [pc, #128]	@ (8001628 <dns_cb+0x2dc>)
 80015a8:	2001      	movs	r0, #1
 80015aa:	f001 fc45 	bl	8002e38 <mg_log_prefix>
 80015ae:	4824      	ldr	r0, [pc, #144]	@ (8001640 <dns_cb+0x2f4>)
 80015b0:	f001 fc92 	bl	8002ed8 <mg_log>
    c->recv.len = 0;
 80015b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015c2:	e026      	b.n	8001612 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80015c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b09      	cmp	r3, #9
 80015d0:	d11f      	bne.n	8001612 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80015d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015dc:	e015      	b.n	800160a <dns_cb+0x2be>
      tmp = d->next;
 80015de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80015e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4915      	ldr	r1, [pc, #84]	@ (8001644 <dns_cb+0x2f8>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fa29 	bl	8001a48 <mg_error>
      mg_dns_free(head, d);
 80015f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80015fa:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80015fe:	f7ff fc41 	bl	8000e84 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8001602:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001606:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800160a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1e5      	bne.n	80015de <dns_cb+0x292>
}
 8001612:	bf00      	nop
 8001614:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001618:	46bd      	mov	sp, r7
 800161a:	bdb0      	pop	{r4, r5, r7, pc}
 800161c:	0802b5f4 	.word	0x0802b5f4
 8001620:	24000000 	.word	0x24000000
 8001624:	08030afc 	.word	0x08030afc
 8001628:	0802b5b0 	.word	0x0802b5b0
 800162c:	0802b600 	.word	0x0802b600
 8001630:	08007f23 	.word	0x08007f23
 8001634:	0802b61c 	.word	0x0802b61c
 8001638:	0802b62c 	.word	0x0802b62c
 800163c:	0802b644 	.word	0x0802b644
 8001640:	0802b65c 	.word	0x0802b65c
 8001644:	0802b66c 	.word	0x0802b66c

08001648 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b0cb      	sub	sp, #300	@ 0x12c
 800164c:	af00      	add	r7, sp, #0
 800164e:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8001652:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8001656:	6020      	str	r0, [r4, #0]
 8001658:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800165c:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8001660:	6001      	str	r1, [r0, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001668:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001672:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8001676:	460a      	mov	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f028 f81d 	bl	80296c4 <memset>
  pkt.header.txnid = mg_htons(txnid);
 800168a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800168e:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f00f fdba 	bl	801120e <mg_ntohs>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016a6:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80016a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016ac:	f00f fdaf 	bl	801120e <mg_ntohs>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016bc:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f00f fda5 	bl	801120e <mg_ntohs>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016d0:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016e0:	e054      	b.n	800178c <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80016e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80016f8:	d009      	beq.n	800170e <mg_dns_send+0xc6>
 80016fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800170a:	429a      	cmp	r2, r3
 800170c:	d32f      	bcc.n	800176e <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 800170e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001712:	b2da      	uxtb	r2, r3
 8001714:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001718:	b2db      	uxtb	r3, r3
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b2d9      	uxtb	r1, r3
 800171e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001722:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8001726:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800172a:	4413      	add	r3, r2
 800172c:	330c      	adds	r3, #12
 800172e:	460a      	mov	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8001732:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001736:	3301      	adds	r3, #1
 8001738:	f107 0214 	add.w	r2, r7, #20
 800173c:	3308      	adds	r3, #8
 800173e:	4413      	add	r3, r2
 8001740:	1d18      	adds	r0, r3, #4
 8001742:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001746:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001752:	18d1      	adds	r1, r2, r3
 8001754:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001758:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	461a      	mov	r2, r3
 8001760:	f028 f875 	bl	802984e <memcpy>
      n = i + 1;
 8001764:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 800176e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001772:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800177e:	429a      	cmp	r2, r3
 8001780:	d209      	bcs.n	8001796 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001782:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001786:	3301      	adds	r3, #1
 8001788:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800178c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001790:	2bfa      	cmp	r3, #250	@ 0xfa
 8001792:	d9a6      	bls.n	80016e2 <mg_dns_send+0x9a>
 8001794:	e000      	b.n	8001798 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8001796:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8001798:	f107 0214 	add.w	r2, r7, #20
 800179c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017a0:	3308      	adds	r3, #8
 80017a2:	4413      	add	r3, r2
 80017a4:	3304      	adds	r3, #4
 80017a6:	2205      	movs	r2, #5
 80017a8:	4916      	ldr	r1, [pc, #88]	@ (8001804 <mg_dns_send+0x1bc>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f028 f84f 	bl	802984e <memcpy>
  n += 5;
 80017b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017b4:	3305      	adds	r3, #5
 80017b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80017ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017be:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <mg_dns_send+0x194>
 80017c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017cc:	3b03      	subs	r3, #3
 80017ce:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80017d2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80017d6:	4413      	add	r3, r2
 80017d8:	221c      	movs	r2, #28
 80017da:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80017dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017e0:	f103 020c 	add.w	r2, r3, #12
 80017e4:	f107 0114 	add.w	r1, r7, #20
 80017e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f006 f9c9 	bl	8007b88 <mg_send>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	0802b678 	.word	0x0802b678

08001808 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8001808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180c:	b088      	sub	sp, #32
 800180e:	af02      	add	r7, sp, #8
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8001824:	494d      	ldr	r1, [pc, #308]	@ (800195c <mg_sendnsreq+0x154>)
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f90e 	bl	8001a48 <mg_error>
 800182c:	e017      	b.n	800185e <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d113      	bne.n	800185e <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6858      	ldr	r0, [r3, #4]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	2200      	movs	r2, #0
 8001842:	f002 fef3 	bl	800462c <mg_connect>
 8001846:	4602      	mov	r2, r0
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a41      	ldr	r2, [pc, #260]	@ (8001960 <mg_sendnsreq+0x158>)
 800185a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d104      	bne.n	8001870 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8001866:	493f      	ldr	r1, [pc, #252]	@ (8001964 <mg_sendnsreq+0x15c>)
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f8ed 	bl	8001a48 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 800186e:	e070      	b.n	8001952 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8001870:	2118      	movs	r1, #24
 8001872:	2001      	movs	r0, #1
 8001874:	f026 fea2 	bl	80285bc <calloc>
 8001878:	4603      	mov	r3, r0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 8001882:	4939      	ldr	r1, [pc, #228]	@ (8001968 <mg_sendnsreq+0x160>)
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f8df 	bl	8001a48 <mg_error>
}
 800188a:	e062      	b.n	8001952 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <mg_sendnsreq+0x9c>
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	8a1b      	ldrh	r3, [r3, #16]
 800189e:	3301      	adds	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	e000      	b.n	80018a6 <mg_sendnsreq+0x9e>
 80018a4:	2201      	movs	r2, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80018bc:	f010 fb52 	bl	8011f64 <mg_millis>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	17c8      	asrs	r0, r1, #31
 80018c8:	460c      	mov	r4, r1
 80018ca:	4605      	mov	r5, r0
 80018cc:	eb12 0804 	adds.w	r8, r2, r4
 80018d0:	eb43 0905 	adc.w	r9, r3, r5
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <mg_sendnsreq+0x164>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	dd18      	ble.n	8001928 <mg_sendnsreq+0x120>
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <mg_sendnsreq+0x168>)
 80018f8:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80018fc:	491d      	ldr	r1, [pc, #116]	@ (8001974 <mg_sendnsreq+0x16c>)
 80018fe:	2004      	movs	r0, #4
 8001900:	f001 fa9a 	bl	8002e38 <mg_log_prefix>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	461c      	mov	r4, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	8a12      	ldrh	r2, [r2, #16]
 800191a:	9201      	str	r2, [sp, #4]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	4622      	mov	r2, r4
 8001922:	4815      	ldr	r0, [pc, #84]	@ (8001978 <mg_sendnsreq+0x170>)
 8001924:	f001 fad8 	bl	8002ed8 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6858      	ldr	r0, [r3, #4]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	8a1a      	ldrh	r2, [r3, #16]
 8001930:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	f7ff fe87 	bl	8001648 <mg_dns_send>
 800193a:	4603      	mov	r3, r0
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	490c      	ldr	r1, [pc, #48]	@ (800197c <mg_sendnsreq+0x174>)
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f87b 	bl	8001a48 <mg_error>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195c:	0802b680 	.word	0x0802b680
 8001960:	0800134d 	.word	0x0800134d
 8001964:	0802b6ac 	.word	0x0802b6ac
 8001968:	0802b6b8 	.word	0x0802b6b8
 800196c:	24000000 	.word	0x24000000
 8001970:	08030b04 	.word	0x08030b04
 8001974:	0802b5b0 	.word	0x0802b5b0
 8001978:	0802b6c4 	.word	0x0802b6c4
 800197c:	0802b6e8 	.word	0x0802b6e8

08001980 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f00f fb2c 	bl	8010fee <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f00f fb5c 	bl	8011054 <mg_url_port>
 800199c:	4603      	mov	r3, r0
 800199e:	4618      	mov	r0, r3
 80019a0:	f00f fc35 	bl	801120e <mg_ntohs>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	331c      	adds	r3, #28
 80019b0:	461a      	mov	r2, r3
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019ba:	f002 fd68 	bl	800448e <mg_aton>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f005 fe31 	bl	800762c <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80019ca:	e019      	b.n	8001a00 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	7e1b      	ldrb	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <mg_resolve+0x5e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	330c      	adds	r3, #12
 80019dc:	e002      	b.n	80019e4 <mg_resolve+0x64>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	7e1b      	ldrb	r3, [r3, #24]
 80019f2:	f107 010c 	add.w	r1, r7, #12
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff04 	bl	8001808 <mg_sendnsreq>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <mg_call+0x24>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <mg_call+0x38>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	4798      	blx	r3
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001a48:	b40e      	push	{r1, r2, r3}
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b095      	sub	sp, #84	@ 0x54
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8001a52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a56:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	f107 0010 	add.w	r0, r7, #16
 8001a60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a62:	2140      	movs	r1, #64	@ 0x40
 8001a64:	f006 f974 	bl	8007d50 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <mg_error+0x74>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd0f      	ble.n	8001a90 <mg_error+0x48>
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <mg_error+0x78>)
 8001a72:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8001a76:	4913      	ldr	r1, [pc, #76]	@ (8001ac4 <mg_error+0x7c>)
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f001 f9dd 	bl	8002e38 <mg_log_prefix>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	480f      	ldr	r0, [pc, #60]	@ (8001ac8 <mg_error+0x80>)
 8001a8c:	f001 fa24 	bl	8002ed8 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffae 	bl	8001a08 <mg_call>
}
 8001aac:	bf00      	nop
 8001aae:	3754      	adds	r7, #84	@ 0x54
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ab6:	b003      	add	sp, #12
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	24000000 	.word	0x24000000
 8001ac0:	08030b14 	.word	0x08030b14
 8001ac4:	0802b5b0 	.word	0x0802b5b0
 8001ac8:	0802b6f4 	.word	0x0802b6f4

08001acc <is_digit>:
#endif




static bool is_digit(int c) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ad8:	dd04      	ble.n	8001ae4 <is_digit+0x18>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b39      	cmp	r3, #57	@ 0x39
 8001ade:	dc01      	bgt.n	8001ae4 <is_digit+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <is_digit+0x1a>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  int n = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	617a      	str	r2, [r7, #20]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	2265      	movs	r2, #101	@ 0x65
 8001b16:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	617a      	str	r2, [r7, #20]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b30:	dd01      	ble.n	8001b36 <addexp+0x3e>
 8001b32:	2300      	movs	r3, #0
 8001b34:	e057      	b.n	8001be6 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	dc07      	bgt.n	8001b4c <addexp+0x54>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	617a      	str	r2, [r7, #20]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	2230      	movs	r2, #48	@ 0x30
 8001b4a:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b63      	cmp	r3, #99	@ 0x63
 8001b50:	dd1c      	ble.n	8001b8c <addexp+0x94>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <addexp+0xfc>)
 8001b56:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5a:	1152      	asrs	r2, r2, #5
 8001b5c:	17db      	asrs	r3, r3, #31
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	6179      	str	r1, [r7, #20]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3230      	adds	r2, #48	@ 0x30
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <addexp+0xfc>)
 8001b78:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7c:	1151      	asrs	r1, r2, #5
 8001b7e:	17da      	asrs	r2, r3, #31
 8001b80:	1a8a      	subs	r2, r1, r2
 8001b82:	2164      	movs	r1, #100	@ 0x64
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	dd1d      	ble.n	8001bce <addexp+0xd6>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <addexp+0x100>)
 8001b96:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9a:	1092      	asrs	r2, r2, #2
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	6179      	str	r1, [r7, #20]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	440b      	add	r3, r1
 8001bae:	3230      	adds	r2, #48	@ 0x30
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <addexp+0x100>)
 8001bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bbc:	1099      	asrs	r1, r3, #2
 8001bbe:	17d3      	asrs	r3, r2, #31
 8001bc0:	1ac9      	subs	r1, r1, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	6179      	str	r1, [r7, #20]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	440b      	add	r3, r1
 8001bde:	3230      	adds	r2, #48	@ 0x30
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
  return n;
 8001be4:	697b      	ldr	r3, [r7, #20]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	66666667 	.word	0x66666667

08001bfc <xisinf>:

static int xisinf(double x) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4613      	mov	r3, r2
 8001c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c24:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <xisinf+0x4c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d106      	bne.n	8001c38 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8001c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <xisinf+0x3c>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <xisinf+0x3e>
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	7ff00000 	.word	0x7ff00000

08001c4c <xisnan>:

static int xisnan(double x) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	000a      	movs	r2, r1
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	4613      	mov	r3, r2
 8001c70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001c84:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001c86:	4a06      	ldr	r2, [pc, #24]	@ (8001ca0 <xisnan+0x54>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf8c      	ite	hi
 8001c8c:	2301      	movhi	r3, #1
 8001c8e:	2300      	movls	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	7ff00000 	.word	0x7ff00000
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0a0      	sub	sp, #128	@ 0x80
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	6178      	str	r0, [r7, #20]
 8001cb0:	6139      	str	r1, [r7, #16]
 8001cb2:	ed87 0b02 	vstr	d0, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001cc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d107      	bne.n	8001ce4 <mg_dtoa+0x3c>
 8001cd4:	4bb8      	ldr	r3, [pc, #736]	@ (8001fb8 <mg_dtoa+0x310>)
 8001cd6:	4ab9      	ldr	r2, [pc, #740]	@ (8001fbc <mg_dtoa+0x314>)
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f006 f860 	bl	8007da0 <mg_snprintf>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	e28d      	b.n	8002200 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001ce4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ce8:	f7ff ff88 	bl	8001bfc <xisinf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <mg_dtoa+0x6c>
 8001cf2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	dd01      	ble.n	8001d04 <mg_dtoa+0x5c>
 8001d00:	4baf      	ldr	r3, [pc, #700]	@ (8001fc0 <mg_dtoa+0x318>)
 8001d02:	e000      	b.n	8001d06 <mg_dtoa+0x5e>
 8001d04:	4baf      	ldr	r3, [pc, #700]	@ (8001fc4 <mg_dtoa+0x31c>)
 8001d06:	4aad      	ldr	r2, [pc, #692]	@ (8001fbc <mg_dtoa+0x314>)
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f006 f848 	bl	8007da0 <mg_snprintf>
 8001d10:	4603      	mov	r3, r0
 8001d12:	e275      	b.n	8002200 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001d14:	ed97 0b02 	vldr	d0, [r7, #8]
 8001d18:	f7ff ff98 	bl	8001c4c <xisnan>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <mg_dtoa+0x8a>
 8001d22:	4ba9      	ldr	r3, [pc, #676]	@ (8001fc8 <mg_dtoa+0x320>)
 8001d24:	4aa5      	ldr	r2, [pc, #660]	@ (8001fbc <mg_dtoa+0x314>)
 8001d26:	6939      	ldr	r1, [r7, #16]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f006 f839 	bl	8007da0 <mg_snprintf>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e266      	b.n	8002200 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001d32:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d50d      	bpl.n	8001d5c <mg_dtoa+0xb4>
 8001d40:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d44:	eeb1 7b47 	vneg.f64	d7, d7
 8001d48:	ed87 7b02 	vstr	d7, [r7, #8]
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d52:	3378      	adds	r3, #120	@ 0x78
 8001d54:	443b      	add	r3, r7
 8001d56:	222d      	movs	r2, #45	@ 0x2d
 8001d58:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8001d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d60:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <mg_dtoa+0x10c>
    mul = 1.0;
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b97      	ldr	r3, [pc, #604]	@ (8001fcc <mg_dtoa+0x324>)
 8001d70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001d74:	e007      	b.n	8001d86 <mg_dtoa+0xde>
 8001d76:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001d7a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d82:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001d86:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d8a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001d8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	db12      	blt.n	8001dbe <mg_dtoa+0x116>
 8001d98:	ed97 5b02 	vldr	d5, [r7, #8]
 8001d9c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001da0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001da4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001da8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	dae1      	bge.n	8001d76 <mg_dtoa+0xce>
 8001db2:	e00d      	b.n	8001dd0 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 8001db4:	a37e      	add	r3, pc, #504	@ (adr r3, 8001fb0 <mg_dtoa+0x308>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001dbe:	e007      	b.n	8001dd0 <mg_dtoa+0x128>
 8001dc0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001dc4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001dc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dcc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001dd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dd4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001dd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d80c      	bhi.n	8001dfc <mg_dtoa+0x154>
 8001de2:	ed97 5b02 	vldr	d5, [r7, #8]
 8001de6:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001dea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001df2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d9e1      	bls.n	8001dc0 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e00:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001e04:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8001e08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e0c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8001e10:	e00a      	b.n	8001e28 <mg_dtoa+0x180>
 8001e12:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001e16:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001e1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e1e:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8001e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e24:	3301      	adds	r3, #1
 8001e26:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e28:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <mg_dtoa+0x16a>

  d += t;
 8001e30:	ed97 6b02 	vldr	d6, [r7, #8]
 8001e34:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e3c:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b61      	ldr	r3, [pc, #388]	@ (8001fcc <mg_dtoa+0x324>)
 8001e46:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001e4a:	e00a      	b.n	8001e62 <mg_dtoa+0x1ba>
 8001e4c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001e50:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001e54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e58:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e5e:	3301      	adds	r3, #1
 8001e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e62:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e66:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001e6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	db0c      	blt.n	8001e8e <mg_dtoa+0x1e6>
 8001e74:	ed97 5b02 	vldr	d5, [r7, #8]
 8001e78:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001e7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e80:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001e84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	dade      	bge.n	8001e4c <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8001e8e:	e00a      	b.n	8001ea6 <mg_dtoa+0x1fe>
 8001e90:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001e94:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001e98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e9c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001ea0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ea6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001eaa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001eae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d50c      	bpl.n	8001ed2 <mg_dtoa+0x22a>
 8001eb8:	ed97 5b02 	vldr	d5, [r7, #8]
 8001ebc:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001ec0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ec4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001ec8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	d4de      	bmi.n	8001e90 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d031      	beq.n	8001f3c <mg_dtoa+0x294>
 8001ed8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	db2d      	blt.n	8001f3c <mg_dtoa+0x294>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	dd2a      	ble.n	8001f3c <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001ee6:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8001eea:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001eee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f107 0018 	add.w	r0, r7, #24
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	eeb0 0b45 	vmov.f64	d0, d5
 8001efe:	2128      	movs	r1, #40	@ 0x28
 8001f00:	f7ff fed2 	bl	8001ca8 <mg_dtoa>
 8001f04:	4603      	mov	r3, r0
 8001f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8001f08:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f107 0218 	add.w	r2, r7, #24
 8001f12:	4413      	add	r3, r2
 8001f14:	222b      	movs	r2, #43	@ 0x2b
 8001f16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fded 	bl	8001af8 <addexp>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f22:	4413      	add	r3, r2
 8001f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f2e:	4a28      	ldr	r2, [pc, #160]	@ (8001fd0 <mg_dtoa+0x328>)
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f005 ff34 	bl	8007da0 <mg_snprintf>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	e161      	b.n	8002200 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d048      	beq.n	8001fd4 <mg_dtoa+0x32c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	425b      	negs	r3, r3
 8001f46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dc43      	bgt.n	8001fd4 <mg_dtoa+0x32c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	dd40      	ble.n	8001fd4 <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001f52:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8001f56:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001f5a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f107 0018 	add.w	r0, r7, #24
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	eeb0 0b45 	vmov.f64	d0, d5
 8001f6a:	2128      	movs	r1, #40	@ 0x28
 8001f6c:	f7ff fe9c 	bl	8001ca8 <mg_dtoa>
 8001f70:	4603      	mov	r3, r0
 8001f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8001f74:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f78:	4413      	add	r3, r2
 8001f7a:	f107 0218 	add.w	r2, r7, #24
 8001f7e:	18d0      	adds	r0, r2, r3
 8001f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f82:	425b      	negs	r3, r3
 8001f84:	222d      	movs	r2, #45	@ 0x2d
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7ff fdb6 	bl	8001af8 <addexp>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f90:	4413      	add	r3, r2
 8001f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd0 <mg_dtoa+0x328>)
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f005 fefd 	bl	8007da0 <mg_snprintf>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e12a      	b.n	8002200 <mg_dtoa+0x558>
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w
 8001fb0:	9999999a 	.word	0x9999999a
 8001fb4:	3fb99999 	.word	0x3fb99999
 8001fb8:	0802b700 	.word	0x0802b700
 8001fbc:	0802b704 	.word	0x0802b704
 8001fc0:	0802b708 	.word	0x0802b708
 8001fc4:	0802b70c 	.word	0x0802b70c
 8001fc8:	0802b714 	.word	0x0802b714
 8001fcc:	3ff00000 	.word	0x3ff00000
 8001fd0:	0802b718 	.word	0x0802b718
  } else {
    int targ_width = width;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fe0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001fe4:	e037      	b.n	8002056 <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 8001fe6:	ed97 5b02 	vldr	d5, [r7, #8]
 8001fea:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001fee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ff2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ff6:	ee17 3a90 	vmov	r3, s15
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dc02      	bgt.n	8002008 <mg_dtoa+0x360>
 8002002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	dd0c      	ble.n	8002022 <mg_dtoa+0x37a>
 8002008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800200a:	b2da      	uxtb	r2, r3
 800200c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8002012:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002014:	440b      	add	r3, r1
 8002016:	3230      	adds	r2, #48	@ 0x30
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	3378      	adds	r3, #120	@ 0x78
 800201c:	443b      	add	r3, r7
 800201e:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8002022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800202c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8002030:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002034:	ed97 6b02 	vldr	d6, [r7, #8]
 8002038:	ee36 7b47 	vsub.f64	d7, d6, d7
 800203c:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002040:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8002044:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800204c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002052:	3301      	adds	r3, #1
 8002054:	677b      	str	r3, [r7, #116]	@ 0x74
 8002056:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800205a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800205e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	db04      	blt.n	8002072 <mg_dtoa+0x3ca>
 8002068:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800206a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800206c:	4413      	add	r3, r2
 800206e:	2b27      	cmp	r3, #39	@ 0x27
 8002070:	ddb9      	ble.n	8001fe6 <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d118      	bne.n	80020aa <mg_dtoa+0x402>
 8002078:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	673a      	str	r2, [r7, #112]	@ 0x70
 800207e:	3378      	adds	r3, #120	@ 0x78
 8002080:	443b      	add	r3, r7
 8002082:	2230      	movs	r2, #48	@ 0x30
 8002084:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8002088:	e00f      	b.n	80020aa <mg_dtoa+0x402>
 800208a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002090:	3378      	adds	r3, #120	@ 0x78
 8002092:	443b      	add	r3, r7
 8002094:	2230      	movs	r2, #48	@ 0x30
 8002096:	f803 2c60 	strb.w	r2, [r3, #-96]
 800209a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800209e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80020a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020a6:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80020aa:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80020ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80020b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	db04      	blt.n	80020c6 <mg_dtoa+0x41e>
 80020bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c0:	4413      	add	r3, r2
 80020c2:	2b27      	cmp	r3, #39	@ 0x27
 80020c4:	dde1      	ble.n	800208a <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80020c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ca:	4413      	add	r3, r2
 80020cc:	2b27      	cmp	r3, #39	@ 0x27
 80020ce:	dc09      	bgt.n	80020e4 <mg_dtoa+0x43c>
 80020d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	673a      	str	r2, [r7, #112]	@ 0x70
 80020d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020d8:	4413      	add	r3, r2
 80020da:	3378      	adds	r3, #120	@ 0x78
 80020dc:	443b      	add	r3, r7
 80020de:	222e      	movs	r2, #46	@ 0x2e
 80020e0:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <mg_dtoa+0x456>
 80020f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	dd03      	ble.n	80020fe <mg_dtoa+0x456>
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020fa:	4413      	add	r3, r2
 80020fc:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80020fe:	2300      	movs	r3, #0
 8002100:	677b      	str	r3, [r7, #116]	@ 0x74
 8002102:	a342      	add	r3, pc, #264	@ (adr r3, 800220c <mg_dtoa+0x564>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800210c:	e031      	b.n	8002172 <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 800210e:	ed97 5b02 	vldr	d5, [r7, #8]
 8002112:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8002116:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800211a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800211e:	ee17 3a90 	vmov	r3, s15
 8002122:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8002124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002126:	b2da      	uxtb	r2, r3
 8002128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800212e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002130:	440b      	add	r3, r1
 8002132:	3230      	adds	r2, #48	@ 0x30
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	3378      	adds	r3, #120	@ 0x78
 8002138:	443b      	add	r3, r7
 800213a:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800213e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002148:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800214c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002150:	ed97 6b02 	vldr	d6, [r7, #8]
 8002154:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002158:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800215c:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8002160:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002164:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002168:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800216c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216e:	3301      	adds	r3, #1
 8002170:	677b      	str	r3, [r7, #116]	@ 0x74
 8002172:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002176:	4413      	add	r3, r2
 8002178:	2b27      	cmp	r3, #39	@ 0x27
 800217a:	dc07      	bgt.n	800218c <mg_dtoa+0x4e4>
 800217c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	429a      	cmp	r2, r3
 8002182:	dbc4      	blt.n	800210e <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8002184:	e002      	b.n	800218c <mg_dtoa+0x4e4>
 8002186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002188:	3b01      	subs	r3, #1
 800218a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <mg_dtoa+0x504>
 8002192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002194:	2b00      	cmp	r3, #0
 8002196:	dd09      	ble.n	80021ac <mg_dtoa+0x504>
 8002198:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800219a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800219c:	4413      	add	r3, r2
 800219e:	3b01      	subs	r3, #1
 80021a0:	3378      	adds	r3, #120	@ 0x78
 80021a2:	443b      	add	r3, r7
 80021a4:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80021a8:	2b30      	cmp	r3, #48	@ 0x30
 80021aa:	d0ec      	beq.n	8002186 <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00f      	beq.n	80021d2 <mg_dtoa+0x52a>
 80021b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	dd0c      	ble.n	80021d2 <mg_dtoa+0x52a>
 80021b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80021ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021bc:	4413      	add	r3, r2
 80021be:	3b01      	subs	r3, #1
 80021c0:	3378      	adds	r3, #120	@ 0x78
 80021c2:	443b      	add	r3, r7
 80021c4:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80021c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80021ca:	d102      	bne.n	80021d2 <mg_dtoa+0x52a>
 80021cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ce:	3b01      	subs	r3, #1
 80021d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 80021d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021d6:	4413      	add	r3, r2
 80021d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80021da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021dc:	2b27      	cmp	r3, #39	@ 0x27
 80021de:	dd01      	ble.n	80021e4 <mg_dtoa+0x53c>
 80021e0:	2327      	movs	r3, #39	@ 0x27
 80021e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 80021e4:	f107 0218 	add.w	r2, r7, #24
 80021e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ea:	4413      	add	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <mg_dtoa+0x560>)
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f005 fdd1 	bl	8007da0 <mg_snprintf>
 80021fe:	4603      	mov	r3, r0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3778      	adds	r7, #120	@ 0x78
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	0802b704 	.word	0x0802b704
 800220c:	9999999a 	.word	0x9999999a
 8002210:	3fb99999 	.word	0x3fb99999

08002214 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <mg_lld+0x15c>)
 8002222:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002228:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002230:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <mg_lld+0x4a>
 8002238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0e      	bge.n	800225e <mg_lld+0x4a>
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	627a      	str	r2, [r7, #36]	@ 0x24
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	222d      	movs	r2, #45	@ 0x2d
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002252:	2100      	movs	r1, #0
 8002254:	4254      	negs	r4, r2
 8002256:	eb61 0503 	sbc.w	r5, r1, r3
 800225a:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 800225e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002262:	2b00      	cmp	r3, #0
 8002264:	d021      	beq.n	80022aa <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	e019      	b.n	80022a0 <mg_lld+0x8c>
 800226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	441a      	add	r2, r3
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	6239      	str	r1, [r7, #32]
 800227c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800227e:	440b      	add	r3, r1
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	440b      	add	r3, r1
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	0902      	lsrs	r2, r0, #4
 8002296:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800229a:	090b      	lsrs	r3, r1, #4
 800229c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80022a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022a4:	4313      	orrs	r3, r2
 80022a6:	d1e1      	bne.n	800226c <mg_lld+0x58>
 80022a8:	e025      	b.n	80022f6 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	e01e      	b.n	80022ee <mg_lld+0xda>
 80022b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022b4:	f04f 020a 	mov.w	r2, #10
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	f7fe f868 	bl	8000390 <__aeabi_uldivmod>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	441a      	add	r2, r3
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	6239      	str	r1, [r7, #32]
 80022ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022cc:	440b      	add	r3, r1
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	440b      	add	r3, r1
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022da:	f04f 020a 	mov.w	r2, #10
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	f7fe f855 	bl	8000390 <__aeabi_uldivmod>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80022ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022f2:	4313      	orrs	r3, r2
 80022f4:	d1dc      	bne.n	80022b0 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e022      	b.n	8002342 <mg_lld+0x12e>
    char t = buf[s + i];
 80022fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800230a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	441a      	add	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	441a      	add	r2, r3
 800231a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	440b      	add	r3, r1
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	440b      	add	r3, r1
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	441a      	add	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	7dfa      	ldrb	r2, [r7, #23]
 800233a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	3301      	adds	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3d7      	bcc.n	80022fc <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 800234c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002350:	4313      	orrs	r3, r2
 8002352:	d106      	bne.n	8002362 <mg_lld+0x14e>
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	623a      	str	r2, [r7, #32]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	2230      	movs	r2, #48	@ 0x30
 8002360:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	4413      	add	r3, r2
}
 8002368:	4618      	mov	r0, r3
 800236a:	3730      	adds	r7, #48	@ 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bdb0      	pop	{r4, r5, r7, pc}
 8002370:	0802b720 	.word	0x0802b720

08002374 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002386:	e009      	b.n	800239c <scpy+0x28>
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	617a      	str	r2, [r7, #20]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4610      	mov	r0, r2
 800239a:	4798      	blx	r3
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d205      	bcs.n	80023b0 <scpy+0x3c>
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1eb      	bne.n	8002388 <scpy+0x14>
  return i;
 80023b0:	697b      	ldr	r3, [r7, #20]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80023ba:	b40c      	push	{r2, r3}
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f809 	bl	80023f0 <mg_vxprintf>
 80023de:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ec:	b002      	add	sp, #8
 80023ee:	4770      	bx	lr

080023f0 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80023f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023f4:	b0a6      	sub	sp, #152	@ 0x98
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 800240c:	e383      	b.n	8002b16 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b25      	cmp	r3, #37	@ 0x25
 800241a:	f040 8369 	bne.w	8002af0 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 800241e:	2300      	movs	r3, #0
 8002420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002422:	2300      	movs	r3, #0
 8002424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002426:	2300      	movs	r3, #0
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002430:	2320      	movs	r3, #32
 8002432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002436:	2300      	movs	r3, #0
 8002438:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800243c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002440:	3301      	adds	r3, #1
 8002442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002454:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002458:	2b23      	cmp	r3, #35	@ 0x23
 800245a:	d10e      	bne.n	800247a <mg_vxprintf+0x8a>
 800245c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245e:	3301      	adds	r3, #1
 8002460:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002466:	3301      	adds	r3, #1
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 800247a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800247e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002480:	d110      	bne.n	80024a4 <mg_vxprintf+0xb4>
 8002482:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002486:	3301      	adds	r3, #1
 8002488:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002490:	3301      	adds	r3, #1
 8002492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80024a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80024a8:	2b30      	cmp	r3, #48	@ 0x30
 80024aa:	d127      	bne.n	80024fc <mg_vxprintf+0x10c>
 80024ac:	2330      	movs	r3, #48	@ 0x30
 80024ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80024b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b6:	3301      	adds	r3, #1
 80024b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80024ca:	e017      	b.n	80024fc <mg_vxprintf+0x10c>
 80024cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80024d8:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80024dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024de:	4413      	add	r3, r2
 80024e0:	3b30      	subs	r3, #48	@ 0x30
 80024e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e8:	3301      	adds	r3, #1
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f4:	4413      	add	r3, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80024fc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fae3 	bl	8001acc <is_digit>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1df      	bne.n	80024cc <mg_vxprintf+0xdc>
      if (c == '.') {
 800250c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002510:	2b2e      	cmp	r3, #46	@ 0x2e
 8002512:	d153      	bne.n	80025bc <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002518:	3301      	adds	r3, #1
 800251a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 800252c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002530:	2b2a      	cmp	r3, #42	@ 0x2a
 8002532:	d113      	bne.n	800255c <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1d19      	adds	r1, r3, #4
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6011      	str	r1, [r2, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8002542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002546:	3301      	adds	r3, #1
 8002548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800255a:	e02f      	b.n	80025bc <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002560:	e017      	b.n	8002592 <mg_vxprintf+0x1a2>
 8002562:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
 800256e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8002572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002574:	4413      	add	r3, r2
 8002576:	3b30      	subs	r3, #48	@ 0x30
 8002578:	673b      	str	r3, [r7, #112]	@ 0x70
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257e:	3301      	adds	r3, #1
 8002580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002592:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa98 	bl	8001acc <is_digit>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1df      	bne.n	8002562 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80025a2:	e00b      	b.n	80025bc <mg_vxprintf+0x1cc>
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a8:	3301      	adds	r3, #1
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80025bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025c0:	2b68      	cmp	r3, #104	@ 0x68
 80025c2:	d0ef      	beq.n	80025a4 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80025c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025c8:	2b6c      	cmp	r3, #108	@ 0x6c
 80025ca:	d121      	bne.n	8002610 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80025cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ce:	3301      	adds	r3, #1
 80025d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d6:	3301      	adds	r3, #1
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80025ea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025ee:	2b6c      	cmp	r3, #108	@ 0x6c
 80025f0:	d10e      	bne.n	8002610 <mg_vxprintf+0x220>
 80025f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025f4:	3301      	adds	r3, #1
 80025f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002610:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002614:	2b70      	cmp	r3, #112	@ 0x70
 8002616:	d103      	bne.n	8002620 <mg_vxprintf+0x230>
 8002618:	2301      	movs	r3, #1
 800261a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800261c:	2301      	movs	r3, #1
 800261e:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002620:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002624:	2b64      	cmp	r3, #100	@ 0x64
 8002626:	d018      	beq.n	800265a <mg_vxprintf+0x26a>
 8002628:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800262c:	2b75      	cmp	r3, #117	@ 0x75
 800262e:	d014      	beq.n	800265a <mg_vxprintf+0x26a>
 8002630:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002634:	2b78      	cmp	r3, #120	@ 0x78
 8002636:	d010      	beq.n	800265a <mg_vxprintf+0x26a>
 8002638:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800263c:	2b58      	cmp	r3, #88	@ 0x58
 800263e:	d00c      	beq.n	800265a <mg_vxprintf+0x26a>
 8002640:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002644:	2b70      	cmp	r3, #112	@ 0x70
 8002646:	d008      	beq.n	800265a <mg_vxprintf+0x26a>
 8002648:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800264c:	2b67      	cmp	r3, #103	@ 0x67
 800264e:	d004      	beq.n	800265a <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002650:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002654:	2b66      	cmp	r3, #102	@ 0x66
 8002656:	f040 816c 	bne.w	8002932 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800265a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800265e:	2b64      	cmp	r3, #100	@ 0x64
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800266a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800266e:	2b78      	cmp	r3, #120	@ 0x78
 8002670:	d007      	beq.n	8002682 <mg_vxprintf+0x292>
 8002672:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002676:	2b58      	cmp	r3, #88	@ 0x58
 8002678:	d003      	beq.n	8002682 <mg_vxprintf+0x292>
 800267a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800267e:	2b70      	cmp	r3, #112	@ 0x70
 8002680:	d101      	bne.n	8002686 <mg_vxprintf+0x296>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <mg_vxprintf+0x298>
 8002686:	2300      	movs	r3, #0
 8002688:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800268c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <mg_vxprintf+0x2b2>
 800269e:	2302      	movs	r3, #2
 80026a0:	e000      	b.n	80026a4 <mg_vxprintf+0x2b4>
 80026a2:	2300      	movs	r3, #0
 80026a4:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 80026a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026aa:	2b67      	cmp	r3, #103	@ 0x67
 80026ac:	d003      	beq.n	80026b6 <mg_vxprintf+0x2c6>
 80026ae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026b2:	2b66      	cmp	r3, #102	@ 0x66
 80026b4:	d124      	bne.n	8002700 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3307      	adds	r3, #7
 80026bc:	f023 0307 	bic.w	r3, r3, #7
 80026c0:	f103 0108 	add.w	r1, r3, #8
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6011      	str	r1, [r2, #0]
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80026d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d101      	bne.n	80026dc <mg_vxprintf+0x2ec>
 80026d8:	2306      	movs	r3, #6
 80026da:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80026dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80026de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026e2:	2b67      	cmp	r3, #103	@ 0x67
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f107 0014 	add.w	r0, r7, #20
 80026f0:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80026f4:	2128      	movs	r1, #40	@ 0x28
 80026f6:	f7ff fad7 	bl	8001ca8 <mg_dtoa>
 80026fa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80026fe:	e069      	b.n	80027d4 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002702:	2b02      	cmp	r3, #2
 8002704:	d11c      	bne.n	8002740 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3307      	adds	r3, #7
 800270c:	f023 0307 	bic.w	r3, r3, #7
 8002710:	f103 0108 	add.w	r1, r3, #8
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	6011      	str	r1, [r2, #0]
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8002720:	f107 0114 	add.w	r1, r7, #20
 8002724:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002734:	4608      	mov	r0, r1
 8002736:	f7ff fd6d 	bl	8002214 <mg_lld>
 800273a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800273e:	e049      	b.n	80027d4 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002742:	2b01      	cmp	r3, #1
 8002744:	d123      	bne.n	800278e <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	1d19      	adds	r1, r3, #4
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6011      	str	r1, [r2, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002754:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <mg_vxprintf+0x376>
 800275c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275e:	17da      	asrs	r2, r3, #31
 8002760:	461c      	mov	r4, r3
 8002762:	4615      	mov	r5, r2
 8002764:	e003      	b.n	800276e <mg_vxprintf+0x37e>
 8002766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002768:	2200      	movs	r2, #0
 800276a:	461c      	mov	r4, r3
 800276c:	4615      	mov	r5, r2
 800276e:	f107 0114 	add.w	r1, r7, #20
 8002772:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	4608      	mov	r0, r1
 8002784:	f7ff fd46 	bl	8002214 <mg_lld>
 8002788:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800278c:	e022      	b.n	80027d4 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1d19      	adds	r1, r3, #4
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6011      	str	r1, [r2, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 800279c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <mg_vxprintf+0x3be>
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a6:	17da      	asrs	r2, r3, #31
 80027a8:	4698      	mov	r8, r3
 80027aa:	4691      	mov	r9, r2
 80027ac:	e003      	b.n	80027b6 <mg_vxprintf+0x3c6>
 80027ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b0:	2200      	movs	r2, #0
 80027b2:	4698      	mov	r8, r3
 80027b4:	4691      	mov	r9, r2
 80027b6:	f107 0114 	add.w	r1, r7, #20
 80027ba:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4642      	mov	r2, r8
 80027c8:	464b      	mov	r3, r9
 80027ca:	4608      	mov	r0, r1
 80027cc:	f7ff fd22 	bl	8002214 <mg_lld>
 80027d0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027da:	e007      	b.n	80027ec <mg_vxprintf+0x3fc>
 80027dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027de:	3b01      	subs	r3, #1
 80027e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80027e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e6:	3301      	adds	r3, #1
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d202      	bcs.n	80027fc <mg_vxprintf+0x40c>
 80027f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ef      	bne.n	80027dc <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002802:	e011      	b.n	8002828 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002804:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8002808:	2301      	movs	r3, #1
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff fdb1 	bl	8002374 <scpy>
 8002812:	4602      	mov	r2, r0
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002818:	4413      	add	r3, r2
 800281a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 800281e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002822:	3301      	adds	r3, #1
 8002824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002828:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800282c:	2b20      	cmp	r3, #32
 800282e:	d110      	bne.n	8002852 <mg_vxprintf+0x462>
 8002830:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <mg_vxprintf+0x462>
 8002838:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800283c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283e:	429a      	cmp	r2, r3
 8002840:	d207      	bcs.n	8002852 <mg_vxprintf+0x462>
 8002842:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800284a:	4413      	add	r3, r2
 800284c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800284e:	429a      	cmp	r2, r3
 8002850:	d8d8      	bhi.n	8002804 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002854:	4ab7      	ldr	r2, [pc, #732]	@ (8002b34 <mg_vxprintf+0x744>)
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fd8b 	bl	8002374 <scpy>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002864:	4413      	add	r3, r2
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002870:	e011      	b.n	8002896 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8002872:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8002876:	2301      	movs	r3, #1
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff fd7a 	bl	8002374 <scpy>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002886:	4413      	add	r3, r2
 8002888:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800289a:	2b30      	cmp	r3, #48	@ 0x30
 800289c:	d10c      	bne.n	80028b8 <mg_vxprintf+0x4c8>
 800289e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d207      	bcs.n	80028b8 <mg_vxprintf+0x4c8>
 80028a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80028ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028b0:	4413      	add	r3, r2
 80028b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8dc      	bhi.n	8002872 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80028b8:	f107 0214 	add.w	r2, r7, #20
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fd56 	bl	8002374 <scpy>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028ce:	4413      	add	r3, r2
 80028d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028da:	e011      	b.n	8002900 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80028dc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80028e0:	2301      	movs	r3, #1
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fd45 	bl	8002374 <scpy>
 80028ea:	4602      	mov	r2, r0
 80028ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028f0:	4413      	add	r3, r2
 80028f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80028f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002904:	2b20      	cmp	r3, #32
 8002906:	f040 80ea 	bne.w	8002ade <mg_vxprintf+0x6ee>
 800290a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80e5 	beq.w	8002ade <mg_vxprintf+0x6ee>
 8002914:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800291a:	429a      	cmp	r2, r3
 800291c:	f080 80df 	bcs.w	8002ade <mg_vxprintf+0x6ee>
 8002920:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002928:	4413      	add	r3, r2
 800292a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800292c:	429a      	cmp	r2, r3
 800292e:	d8d5      	bhi.n	80028dc <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002930:	e0d5      	b.n	8002ade <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002932:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002936:	2b6d      	cmp	r3, #109	@ 0x6d
 8002938:	d003      	beq.n	8002942 <mg_vxprintf+0x552>
 800293a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800293e:	2b4d      	cmp	r3, #77	@ 0x4d
 8002940:	d128      	bne.n	8002994 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1d19      	adds	r1, r3, #4
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6011      	str	r1, [r2, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8002950:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002954:	2b6d      	cmp	r3, #109	@ 0x6d
 8002956:	d103      	bne.n	8002960 <mg_vxprintf+0x570>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	2022      	movs	r0, #34	@ 0x22
 800295e:	4798      	blx	r3
        n += f(out, param, ap);
 8002960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	4798      	blx	r3
 800296a:	4602      	mov	r2, r0
 800296c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002970:	4413      	add	r3, r2
 8002972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8002976:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800297a:	2b6d      	cmp	r3, #109	@ 0x6d
 800297c:	f040 80b1 	bne.w	8002ae2 <mg_vxprintf+0x6f2>
 8002980:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002984:	3302      	adds	r3, #2
 8002986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	2022      	movs	r0, #34	@ 0x22
 8002990:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8002992:	e0a6      	b.n	8002ae2 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002994:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002998:	2b63      	cmp	r3, #99	@ 0x63
 800299a:	d112      	bne.n	80029c2 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1d19      	adds	r1, r3, #4
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 80029aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4610      	mov	r0, r2
 80029b4:	4798      	blx	r3
        n++;
 80029b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ba:	3301      	adds	r3, #1
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029c0:	e090      	b.n	8002ae4 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80029c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80029c6:	2b73      	cmp	r3, #115	@ 0x73
 80029c8:	d16b      	bne.n	8002aa2 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1d19      	adds	r1, r3, #4
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6011      	str	r1, [r2, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80029d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d109      	bne.n	80029f4 <mg_vxprintf+0x604>
 80029e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <mg_vxprintf+0x600>
 80029e6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80029e8:	f7fd fcca 	bl	8000380 <strlen>
 80029ec:	4603      	mov	r3, r0
 80029ee:	e000      	b.n	80029f2 <mg_vxprintf+0x602>
 80029f0:	2300      	movs	r3, #0
 80029f2:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029fa:	e011      	b.n	8002a20 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80029fc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8002a00:	2301      	movs	r3, #1
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff fcb5 	bl	8002374 <scpy>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a10:	4413      	add	r3, r2
 8002a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <mg_vxprintf+0x64e>
 8002a28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d206      	bcs.n	8002a3e <mg_vxprintf+0x64e>
 8002a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002a34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a36:	4413      	add	r3, r2
 8002a38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d8de      	bhi.n	80029fc <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff fc95 	bl	8002374 <scpy>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a50:	4413      	add	r3, r2
 8002a52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a5c:	e011      	b.n	8002a82 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8002a5e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8002a62:	2301      	movs	r3, #1
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fc84 	bl	8002374 <scpy>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a72:	4413      	add	r3, r2
 8002a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02c      	beq.n	8002ae4 <mg_vxprintf+0x6f4>
 8002a8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d228      	bcs.n	8002ae4 <mg_vxprintf+0x6f4>
 8002a92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a98:	4413      	add	r3, r2
 8002a9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8de      	bhi.n	8002a5e <mg_vxprintf+0x66e>
 8002aa0:	e020      	b.n	8002ae4 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8002aa2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002aa6:	2b25      	cmp	r3, #37	@ 0x25
 8002aa8:	d109      	bne.n	8002abe <mg_vxprintf+0x6ce>
        out('%', param);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	2025      	movs	r0, #37	@ 0x25
 8002ab0:	4798      	blx	r3
        n++;
 8002ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002abc:	e012      	b.n	8002ae4 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	2025      	movs	r0, #37	@ 0x25
 8002ac4:	4798      	blx	r3
        out(c, param);
 8002ac6:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4798      	blx	r3
        n += 2;
 8002ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002adc:	e002      	b.n	8002ae4 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8002ae2:	bf00      	nop
      }
      i++;
 8002ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002aee:	e012      	b.n	8002b16 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	4413      	add	r3, r2
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4610      	mov	r0, r2
 8002b00:	4798      	blx	r3
 8002b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f ac74 	bne.w	800240e <mg_vxprintf+0x1e>
    }
  }
  return n;
 8002b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3790      	adds	r7, #144	@ 0x90
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b34:	0802b734 	.word	0x0802b734

08002b38 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <roundup+0x26>
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	e000      	b.n	8002b60 <roundup+0x28>
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8002b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af02      	add	r7, sp, #8
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6838      	ldr	r0, [r7, #0]
 8002b84:	f7ff ffd8 	bl	8002b38 <roundup>
 8002b88:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d117      	bne.n	8002bc0 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f00e fabe 	bl	801111c <mg_bzero>
    free(io->buf);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f025 fd2d 	bl	8028604 <free>
    io->buf = NULL;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	e053      	b.n	8002c68 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d04e      	beq.n	8002c68 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f025 fcf5 	bl	80285bc <calloc>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4293      	cmp	r3, r2
 8002be4:	bf28      	it	cs
 8002be6:	4613      	movcs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <mg_iobuf_resize+0x9a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <mg_iobuf_resize+0x9a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6938      	ldr	r0, [r7, #16]
 8002c02:	f026 fd45 	bl	8029690 <memmove>
      mg_bzero(io->buf, io->size);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f00e fa83 	bl	801111c <mg_bzero>
      free(io->buf);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f025 fcf2 	bl	8028604 <free>
      io->buf = (unsigned char *) p;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	e01c      	b.n	8002c68 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <mg_iobuf_resize+0x108>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dd16      	ble.n	8002c68 <mg_iobuf_resize+0xfc>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <mg_iobuf_resize+0x10c>)
 8002c3c:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 8002c40:	490e      	ldr	r1, [pc, #56]	@ (8002c7c <mg_iobuf_resize+0x110>)
 8002c42:	2001      	movs	r0, #1
 8002c44:	f000 f8f8 	bl	8002e38 <mg_log_prefix>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4698      	mov	r8, r3
 8002c50:	4691      	mov	r9, r2
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	461c      	mov	r4, r3
 8002c58:	4615      	mov	r5, r2
 8002c5a:	e9cd 4500 	strd	r4, r5, [sp]
 8002c5e:	4642      	mov	r2, r8
 8002c60:	464b      	mov	r3, r9
 8002c62:	4807      	ldr	r0, [pc, #28]	@ (8002c80 <mg_iobuf_resize+0x114>)
 8002c64:	f000 f938 	bl	8002ed8 <mg_log>
    }
  }
  return ok;
 8002c68:	697b      	ldr	r3, [r7, #20]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c74:	24000000 	.word	0x24000000
 8002c78:	08030b20 	.word	0x08030b20
 8002c7c:	0802b5b0 	.word	0x0802b5b0
 8002c80:	0802c2d4 	.word	0x0802c2d4

08002c84 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	441a      	add	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f7ff ff49 	bl	8002b38 <roundup>
 8002ca6:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8002ca8:	6979      	ldr	r1, [r7, #20]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff5e 	bl	8002b6c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <mg_iobuf_add+0x3a>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d210      	bcs.n	8002cea <mg_iobuf_add+0x66>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	440b      	add	r3, r1
 8002cd2:	18d0      	adds	r0, r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	18d1      	adds	r1, r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f026 fcd3 	bl	8029690 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <mg_iobuf_add+0x7e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f026 fcc7 	bl	8029690 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d902      	bls.n	8002d12 <mg_iobuf_add+0x8e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	609a      	str	r2, [r3, #8]
  io->len += len;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	441a      	add	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	609a      	str	r2, [r3, #8]
  return len;
 8002d1e:	683b      	ldr	r3, [r7, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d902      	bls.n	8002d44 <mg_iobuf_del+0x1c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	441a      	add	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d904      	bls.n	8002d5c <mg_iobuf_del+0x34>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <mg_iobuf_del+0x62>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	18d0      	adds	r0, r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	440b      	add	r3, r1
 8002d76:	18d1      	adds	r1, r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1ad2      	subs	r2, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f026 fc83 	bl	8029690 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <mg_iobuf_del+0x80>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	1acb      	subs	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00e f9ba 	bl	801111c <mg_bzero>
  io->len -= len;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
  return len;
 8002db4:	687b      	ldr	r3, [r7, #4]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fecf 	bl	8002b6c <mg_iobuf_resize>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <logc+0x20>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <logc+0x24>)
 8002de8:	6811      	ldr	r1, [r2, #0]
 8002dea:	79fa      	ldrb	r2, [r7, #7]
 8002dec:	4610      	mov	r0, r2
 8002dee:	4798      	blx	r3
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	24000004 	.word	0x24000004
 8002dfc:	24004da8 	.word	0x24004da8

08002e00 <logs>:

static void logs(const char *buf, size_t len) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e009      	b.n	8002e24 <logs+0x24>
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ffdd 	bl	8002dd8 <logc>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3301      	adds	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3f1      	bcc.n	8002e10 <logs+0x10>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b099      	sub	sp, #100	@ 0x64
 8002e3c:	af06      	add	r7, sp, #24
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8002e46:	212f      	movs	r1, #47	@ 0x2f
 8002e48:	68b8      	ldr	r0, [r7, #8]
 8002e4a:	f026 fc62 	bl	8029712 <strrchr>
 8002e4e:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8002e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <mg_log_prefix+0x28>
 8002e56:	215c      	movs	r1, #92	@ 0x5c
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f026 fc5a 	bl	8029712 <strrchr>
 8002e5e:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8002e60:	f00f f880 	bl	8011f64 <mg_millis>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d002      	beq.n	8002e74 <mg_log_prefix+0x3c>
 8002e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e70:	3101      	adds	r1, #1
 8002e72:	e000      	b.n	8002e76 <mg_log_prefix+0x3e>
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	f107 0414 	add.w	r4, r7, #20
 8002e7a:	6838      	ldr	r0, [r7, #0]
 8002e7c:	9005      	str	r0, [sp, #20]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	9004      	str	r0, [sp, #16]
 8002e82:	9103      	str	r1, [sp, #12]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	9102      	str	r1, [sp, #8]
 8002e88:	e9cd 2300 	strd	r2, r3, [sp]
 8002e8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <mg_log_prefix+0x9c>)
 8002e8e:	2129      	movs	r1, #41	@ 0x29
 8002e90:	4620      	mov	r0, r4
 8002e92:	f004 ff85 	bl	8007da0 <mg_snprintf>
 8002e96:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8002e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9a:	2b27      	cmp	r3, #39	@ 0x27
 8002e9c:	d90a      	bls.n	8002eb4 <mg_log_prefix+0x7c>
 8002e9e:	2327      	movs	r3, #39	@ 0x27
 8002ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8002ea2:	e007      	b.n	8002eb4 <mg_log_prefix+0x7c>
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eaa:	3348      	adds	r3, #72	@ 0x48
 8002eac:	443b      	add	r3, r7
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f803 2c34 	strb.w	r2, [r3, #-52]
 8002eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb6:	2b28      	cmp	r3, #40	@ 0x28
 8002eb8:	d9f4      	bls.n	8002ea4 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff9b 	bl	8002e00 <logs>
}
 8002eca:	bf00      	nop
 8002ecc:	374c      	adds	r7, #76	@ 0x4c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	0802c30c 	.word	0x0802c30c

08002ed8 <mg_log>:

void mg_log(const char *fmt, ...) {
 8002ed8:	b40f      	push	{r0, r1, r2, r3}
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <mg_log+0x34>)
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <mg_log+0x38>)
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	f7ff fa7d 	bl	80023f0 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4806      	ldr	r0, [pc, #24]	@ (8002f14 <mg_log+0x3c>)
 8002efa:	f7ff ff81 	bl	8002e00 <logs>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f08:	b004      	add	sp, #16
 8002f0a:	4770      	bx	lr
 8002f0c:	24000004 	.word	0x24000004
 8002f10:	24004da8 	.word	0x24004da8
 8002f14:	0802b780 	.word	0x0802b780

08002f18 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	d804      	bhi.n	8002f30 <nibble+0x18>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3330      	adds	r3, #48	@ 0x30
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e003      	b.n	8002f38 <nibble+0x20>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3357      	adds	r3, #87	@ 0x57
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	e07a      	b.n	8003054 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13a      	bne.n	8002fde <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00f      	beq.n	8002f8e <mg_hexdump+0x4a>
 8002f6e:	2102      	movs	r1, #2
 8002f70:	484c      	ldr	r0, [pc, #304]	@ (80030a4 <mg_hexdump+0x160>)
 8002f72:	f7ff ff45 	bl	8002e00 <logs>
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff3f 	bl	8002e00 <logs>
 8002f82:	200a      	movs	r0, #10
 8002f84:	f7ff ff28 	bl	8002dd8 <logc>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	0b1b      	lsrs	r3, r3, #12
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ffbe 	bl	8002f18 <nibble>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff1a 	bl	8002dd8 <logc>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ffb3 	bl	8002f18 <nibble>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff0f 	bl	8002dd8 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ffa8 	bl	8002f18 <nibble>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff04 	bl	8002dd8 <logc>
 8002fd0:	2030      	movs	r0, #48	@ 0x30
 8002fd2:	f7ff ff01 	bl	8002dd8 <logc>
 8002fd6:	2103      	movs	r1, #3
 8002fd8:	4833      	ldr	r0, [pc, #204]	@ (80030a8 <mg_hexdump+0x164>)
 8002fda:	f7ff ff11 	bl	8002e00 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff94 	bl	8002f18 <nibble>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fef0 	bl	8002dd8 <logc>
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff87 	bl	8002f18 <nibble>
 800300a:	4603      	mov	r3, r0
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fee3 	bl	8002dd8 <logc>
    logc(' ');                                         // Space after hex number
 8003012:	2020      	movs	r0, #32
 8003014:	f7ff fee0 	bl	8002dd8 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b1f      	cmp	r3, #31
 8003022:	d90a      	bls.n	800303a <mg_hexdump+0xf6>
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b7e      	cmp	r3, #126	@ 0x7e
 800302e:	d804      	bhi.n	800303a <mg_hexdump+0xf6>
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	4413      	add	r3, r2
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	e000      	b.n	800303c <mg_hexdump+0xf8>
 800303a:	222e      	movs	r2, #46	@ 0x2e
 800303c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8003046:	3328      	adds	r3, #40	@ 0x28
 8003048:	443b      	add	r3, r7
 800304a:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	3301      	adds	r3, #1
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d380      	bcc.n	8002f5e <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800305c:	e00d      	b.n	800307a <mg_hexdump+0x136>
 800305e:	2103      	movs	r1, #3
 8003060:	4811      	ldr	r0, [pc, #68]	@ (80030a8 <mg_hexdump+0x164>)
 8003062:	f7ff fecd 	bl	8002e00 <logs>
 8003066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003070:	3328      	adds	r3, #40	@ 0x28
 8003072:	443b      	add	r3, r7
 8003074:	2220      	movs	r2, #32
 8003076:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800307e:	2b0f      	cmp	r3, #15
 8003080:	d9ed      	bls.n	800305e <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8003082:	2102      	movs	r1, #2
 8003084:	4807      	ldr	r0, [pc, #28]	@ (80030a4 <mg_hexdump+0x160>)
 8003086:	f7ff febb 	bl	8002e00 <logs>
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	2110      	movs	r1, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff feb5 	bl	8002e00 <logs>
 8003096:	200a      	movs	r0, #10
 8003098:	f7ff fe9e 	bl	8002dd8 <logc>
}
 800309c:	bf00      	nop
 800309e:	3728      	adds	r7, #40	@ 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0802c320 	.word	0x0802c320
 80030a8:	0802c324 	.word	0x0802c324

080030ac <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	72fb      	strb	r3, [r7, #11]
 80030ba:	4613      	mov	r3, r2
 80030bc:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	3301      	adds	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	b25a      	sxtb	r2, r3
 80030cc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	09db      	lsrs	r3, r3, #7
 80030ea:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <mg_mqtt_send_header+0x54>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	701a      	strb	r2, [r3, #0]
    vlen++;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <mg_mqtt_send_header+0x6c>
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	3305      	adds	r3, #5
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3df      	bcc.n	80030d8 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	461a      	mov	r2, r3
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f004 fd2d 	bl	8007b88 <mg_send>
}
 800312e:	bf00      	nop
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 8003142:	1cbb      	adds	r3, r7, #2
 8003144:	2202      	movs	r2, #2
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f004 fd1d 	bl	8007b88 <mg_send>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8003160:	463b      	mov	r3, r7
 8003162:	2204      	movs	r2, #4
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f004 fd0e 	bl	8007b88 <mg_send>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <varint_size>:

static uint8_t varint_size(size_t length) {
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	3301      	adds	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	09db      	lsrs	r3, r3, #7
 800318a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f6      	bne.n	8003180 <varint_size+0xc>
  return bytes_needed;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b6:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	09db      	lsrs	r3, r3, #7
 80031bc:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <encode_varint+0x2c>
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031ca:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	60fa      	str	r2, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	7afa      	ldrb	r2, [r7, #11]
 80031d8:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e6      	bne.n	80031ae <encode_varint+0xe>

  return len;
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80031ee:	b480      	push	{r7}
 80031f0:	b089      	sub	sp, #36	@ 0x24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
  *value = 0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e01c      	b.n	8003244 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800321e:	69f9      	ldr	r1, [r7, #28]
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	441a      	add	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	01db      	lsls	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8003230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db02      	blt.n	800323e <decode_varint+0x50>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	3301      	adds	r3, #1
 800323c:	e00a      	b.n	8003254 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3301      	adds	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d803      	bhi.n	8003252 <decode_varint+0x64>
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d3db      	bcc.n	800320a <decode_varint+0x1c>
  }

  return 0;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3724      	adds	r7, #36	@ 0x24
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 800326a:	231b      	movs	r3, #27
 800326c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e00f      	b.n	8003294 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8003274:	4a0d      	ldr	r2, [pc, #52]	@ (80032ac <mqtt_prop_type_by_id+0x4c>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800327c:	79fa      	ldrb	r2, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	d105      	bne.n	800328e <mqtt_prop_type_by_id+0x2e>
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <mqtt_prop_type_by_id+0x4c>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	e008      	b.n	80032a0 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3301      	adds	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3eb      	bcc.n	8003274 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	080308d4 	.word	0x080308d4

080032b0 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e07a      	b.n	80033ba <get_properties_length+0x10a>
    size++;  // identifier
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ffbf 	bl	8003260 <mqtt_prop_type_by_id>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d863      	bhi.n	80033b0 <get_properties_length+0x100>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <get_properties_length+0x40>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	080033a9 	.word	0x080033a9
 80032f4:	0800333d 	.word	0x0800333d
 80032f8:	0800330d 	.word	0x0800330d
 80032fc:	08003359 	.word	0x08003359
 8003300:	08003375 	.word	0x08003375
 8003304:	08003399 	.word	0x08003399
 8003308:	080033a1 	.word	0x080033a1
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	6959      	ldr	r1, [r3, #20]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	18ca      	adds	r2, r1, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 800333a:	e03b      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	3302      	adds	r3, #2
 8003354:	60bb      	str	r3, [r7, #8]
        break;
 8003356:	e02d      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	3302      	adds	r3, #2
 8003370:	60bb      	str	r3, [r7, #8]
        break;
 8003372:	e01f      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fef4 	bl	8003174 <varint_size>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4413      	add	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
        break;
 8003396:	e00d      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3304      	adds	r3, #4
 800339c:	60bb      	str	r3, [r7, #8]
        break;
 800339e:	e009      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3302      	adds	r3, #2
 80033a4:	60bb      	str	r3, [r7, #8]
        break;
 80033a6:	e005      	b.n	80033b4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
        break;
 80033ae:	e001      	b.n	80033b4 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	e007      	b.n	80033c4 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d380      	bcc.n	80032c4 <get_properties_length+0x14>
    }
  }

  return size;
 80033c2:	68bb      	ldr	r3, [r7, #8]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff69 	bl	80032b0 <get_properties_length>
 80033de:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff fec7 	bl	8003174 <varint_size>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  return size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f7ff ff50 	bl	80032b0 <get_properties_length>
 8003410:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	6a39      	ldr	r1, [r7, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff febd 	bl	80031a0 <encode_varint>
 8003426:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	4619      	mov	r1, r3
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f004 fba9 	bl	8007b88 <mg_send>
  for (i = 0; i < nprops; i++) {
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
 800343a:	e11f      	b.n	800367c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 800343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4413      	add	r3, r2
 800344c:	2201      	movs	r2, #1
 800344e:	4619      	mov	r1, r3
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f004 fb99 	bl	8007b88 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8003456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fef9 	bl	8003260 <mqtt_prop_type_by_id>
 800346e:	4603      	mov	r3, r0
 8003470:	2b06      	cmp	r3, #6
 8003472:	f200 8100 	bhi.w	8003676 <mg_send_mqtt_properties+0x27a>
 8003476:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <mg_send_mqtt_properties+0x80>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800353b 	.word	0x0800353b
 8003480:	080035a3 	.word	0x080035a3
 8003484:	08003499 	.word	0x08003499
 8003488:	080035f5 	.word	0x080035f5
 800348c:	08003647 	.word	0x08003647
 8003490:	0800357f 	.word	0x0800357f
 8003494:	08003559 	.word	0x08003559
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4413      	add	r3, r2
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	f00d feae 	bl	801120e <mg_ntohs>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4619      	mov	r1, r3
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff fe3d 	bl	8003136 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80034bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4413      	add	r3, r2
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4413      	add	r3, r2
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f004 fb50 	bl	8007b88 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80034e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4413      	add	r3, r2
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00d fe86 	bl	801120e <mg_ntohs>
 8003502:	4603      	mov	r3, r0
 8003504:	4619      	mov	r1, r3
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff fe15 	bl	8003136 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	461a      	mov	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4413      	add	r3, r2
 800351c:	6919      	ldr	r1, [r3, #16]
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	461a      	mov	r2, r3
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f004 fb28 	bl	8007b88 <mg_send>
        break;
 8003538:	e09d      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	2201      	movs	r2, #1
 800354e:	4619      	mov	r1, r3
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f004 fb19 	bl	8007b88 <mg_send>
        break;
 8003556:	e08e      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8003558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4413      	add	r3, r2
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	f00d fe4e 	bl	801120e <mg_ntohs>
 8003572:	4603      	mov	r3, r0
 8003574:	4619      	mov	r1, r3
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff fddd 	bl	8003136 <mg_send_u16>
        break;
 800357c:	e07b      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	f00d fe23 	bl	80111dc <mg_ntohl>
 8003596:	4603      	mov	r3, r0
 8003598:	4619      	mov	r1, r3
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fddb 	bl	8003156 <mg_send_u32>
        break;
 80035a0:	e069      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00d fe29 	bl	801120e <mg_ntohs>
 80035bc:	4603      	mov	r3, r0
 80035be:	4619      	mov	r1, r3
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fdb8 	bl	8003136 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80035c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f004 facb 	bl	8007b88 <mg_send>
        break;
 80035f2:	e040      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80035f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4413      	add	r3, r2
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	b29b      	uxth	r3, r3
 8003608:	4618      	mov	r0, r3
 800360a:	f00d fe00 	bl	801120e <mg_ntohs>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff fd8f 	bl	8003136 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4413      	add	r3, r2
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	461a      	mov	r2, r3
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f004 faa2 	bl	8007b88 <mg_send>
        break;
 8003644:	e017      	b.n	8003676 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	461a      	mov	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fd9e 	bl	80031a0 <encode_varint>
 8003664:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4619      	mov	r1, r3
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f004 fa8a 	bl	8007b88 <mg_send>
        break;
 8003674:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	3301      	adds	r3, #1
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
 800367c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	f4ff aedb 	bcc.w	800343c <mg_send_mqtt_properties+0x40>
    }
  }
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	3728      	adds	r7, #40	@ 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b08e      	sub	sp, #56	@ 0x38
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	3210      	adds	r2, #16
 80036a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a6:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 80036aa:	230c      	movs	r3, #12
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80036ae:	2300      	movs	r3, #0
 80036b0:	733b      	strb	r3, [r7, #12]
 80036b2:	2304      	movs	r3, #4
 80036b4:	737b      	strb	r3, [r7, #13]
 80036b6:	234d      	movs	r3, #77	@ 0x4d
 80036b8:	73bb      	strb	r3, [r7, #14]
 80036ba:	2351      	movs	r3, #81	@ 0x51
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	2354      	movs	r3, #84	@ 0x54
 80036c0:	743b      	strb	r3, [r7, #16]
 80036c2:	2354      	movs	r3, #84	@ 0x54
 80036c4:	747b      	strb	r3, [r7, #17]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80036cc:	74bb      	strb	r3, [r7, #18]
 80036ce:	2300      	movs	r3, #0
 80036d0:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d110      	bne.n	80036fa <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	2114      	movs	r1, #20
 80036de:	4618      	mov	r0, r3
 80036e0:	f00d fd36 	bl	8011150 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	f107 021c 	add.w	r2, r7, #28
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f005 fa0c 	bl	8008b12 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80036fa:	7cbb      	ldrb	r3, [r7, #18]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <mg_mqtt_login+0x74>
 8003700:	2304      	movs	r3, #4
 8003702:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8003704:	7cbb      	ldrb	r3, [r7, #18]
 8003706:	2b05      	cmp	r3, #5
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8003716:	f361 0382 	bfi	r3, r1, #2, #1
 800371a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0318 	and.w	r3, r3, #24
 800372c:	b2db      	uxtb	r3, r3
 800372e:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373e:	4413      	add	r3, r2
 8003740:	3302      	adds	r3, #2
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800374a:	b2db      	uxtb	r3, r3
 800374c:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	4413      	add	r3, r2
 800375e:	3302      	adds	r3, #2
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003768:	b2db      	uxtb	r3, r3
 800376a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	441a      	add	r2, r3
 800377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	b2db      	uxtb	r3, r3
 800378e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <mg_mqtt_login+0x110>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <mg_mqtt_login+0x11a>
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <mg_mqtt_login+0x12e>
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037c2:	4413      	add	r3, r2
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01c      	beq.n	8003810 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f7ff fdf3 	bl	80033cc <get_props_size>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	4413      	add	r3, r2
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7ff fde2 	bl	80033cc <get_props_size>
 8003808:	4602      	mov	r2, r0
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	4413      	add	r3, r2
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	2200      	movs	r2, #0
 8003814:	2101      	movs	r1, #1
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fc48 	bl	80030ac <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	2208      	movs	r2, #8
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f004 f9af 	bl	8007b88 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	4618      	mov	r0, r3
 8003830:	f00d fced 	bl	801120e <mg_ntohs>
 8003834:	4603      	mov	r3, r0
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fc7c 	bl	8003136 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <mg_mqtt_login+0x1ce>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	461a      	mov	r2, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fdcf 	bl	80033fc <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	b29b      	uxth	r3, r3
 8003862:	4618      	mov	r0, r3
 8003864:	f00d fcd3 	bl	801120e <mg_ntohs>
 8003868:	4603      	mov	r3, r0
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff fc62 	bl	8003136 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 f985 	bl	8007b88 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d035      	beq.n	80038f4 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	461a      	mov	r2, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fdaa 	bl	80033fc <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f00d fcad 	bl	801120e <mg_ntohs>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fc3c 	bl	8003136 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	461a      	mov	r2, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f004 f95d 	bl	8007b88 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00d fc9a 	bl	801120e <mg_ntohs>
 80038da:	4603      	mov	r3, r0
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fc29 	bl	8003136 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6a19      	ldr	r1, [r3, #32]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	461a      	mov	r2, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f004 f94a 	bl	8007b88 <mg_send>
  }
  if (opts->user.len > 0) {
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b29b      	uxth	r3, r3
 8003902:	4618      	mov	r0, r3
 8003904:	f00d fc83 	bl	801120e <mg_ntohs>
 8003908:	4603      	mov	r3, r0
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fc12 	bl	8003136 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	461a      	mov	r2, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f004 f933 	bl	8007b88 <mg_send>
  }
  if (opts->pass.len > 0) {
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	f00d fc6c 	bl	801120e <mg_ntohs>
 8003936:	4603      	mov	r3, r0
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fbfb 	bl	8003136 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	461a      	mov	r2, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f004 f91c 	bl	8007b88 <mg_send>
  }
}
 8003950:	bf00      	nop
 8003952:	3738      	adds	r7, #56	@ 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b087      	sub	sp, #28
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003966:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	b25b      	sxtb	r3, r3
 8003972:	f003 0306 	and.w	r3, r3, #6
 8003976:	b25b      	sxtb	r3, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800397e:	2a00      	cmp	r2, #0
 8003980:	d001      	beq.n	8003986 <mg_mqtt_pub+0x2e>
 8003982:	2201      	movs	r2, #1
 8003984:	e000      	b.n	8003988 <mg_mqtt_pub+0x30>
 8003986:	2200      	movs	r2, #0
 8003988:	4313      	orrs	r3, r2
 800398a:	b25b      	sxtb	r3, r3
 800398c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	4413      	add	r3, r2
 8003998:	3302      	adds	r3, #2
 800399a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 800399c:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <mg_mqtt_pub+0x18c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	dd19      	ble.n	80039d8 <mg_mqtt_pub+0x80>
 80039a4:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <mg_mqtt_pub+0x190>)
 80039a6:	f640 52ee 	movw	r2, #3566	@ 0xdee
 80039aa:	4950      	ldr	r1, [pc, #320]	@ (8003aec <mg_mqtt_pub+0x194>)
 80039ac:	2003      	movs	r0, #3
 80039ae:	f7ff fa43 	bl	8002e38 <mg_log_prefix>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	461c      	mov	r4, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	4618      	mov	r0, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	9000      	str	r0, [sp, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	4622      	mov	r2, r4
 80039d2:	4847      	ldr	r0, [pc, #284]	@ (8003af0 <mg_mqtt_pub+0x198>)
 80039d4:	f7ff fa80 	bl	8002ed8 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <mg_mqtt_pub+0x90>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3302      	adds	r3, #2
 80039e6:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00b      	beq.n	8003a10 <mg_mqtt_pub+0xb8>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7ff fce2 	bl	80033cc <get_props_size>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <mg_mqtt_pub+0xd0>
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <mg_mqtt_pub+0xd0>
 8003a20:	7b7b      	ldrb	r3, [r7, #13]
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8003a28:	7b7a      	ldrb	r2, [r7, #13]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2103      	movs	r1, #3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fb3c 	bl	80030ac <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f00d fbe7 	bl	801120e <mg_ntohs>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fb76 	bl	8003136 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f004 f897 	bl	8007b88 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01e      	beq.n	8003aa2 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d112      	bne.n	8003a90 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a70:	3201      	adds	r2, #1
 8003a72:	b292      	uxth	r2, r2
 8003a74:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8003a76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <mg_mqtt_pub+0x130>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a82:	3201      	adds	r2, #1
 8003a84:	b292      	uxth	r2, r2
 8003a86:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a8e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f00d fbbb 	bl	801120e <mg_ntohs>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fb4a 	bl	8003136 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <mg_mqtt_pub+0x16a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	461a      	mov	r2, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fc9d 	bl	80033fc <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <mg_mqtt_pub+0x182>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6a19      	ldr	r1, [r3, #32]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f004 f857 	bl	8007b88 <mg_send>
  return id;
 8003ada:	89fb      	ldrh	r3, [r7, #14]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}
 8003ae4:	24000000 	.word	0x24000000
 8003ae8:	08030b30 	.word	0x08030b30
 8003aec:	0802b5b0 	.word	0x0802b5b0
 8003af0:	0802c32c 	.word	0x0802c32c

08003af4 <mg_mqtt_parse>:
  mg_send(c, opts->topic.buf, opts->topic.len);
  mg_send(c, &qos_, sizeof(qos_));
}

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 8003b12:	2228      	movs	r2, #40	@ 0x28
 8003b14:	2100      	movs	r1, #0
 8003b16:	6838      	ldr	r0, [r7, #0]
 8003b18:	f025 fdd4 	bl	80296c4 <memset>
  m->dgram.buf = (char *) buf;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d801      	bhi.n	8003b2c <mg_mqtt_parse+0x38>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e104      	b.n	8003d36 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8003b58:	e01f      	b.n	8003b9a <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	623a      	str	r2, [r7, #32]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8003b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b6a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	4413      	add	r3, r2
 8003b80:	61fb      	str	r3, [r7, #28]
    len_len++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8003b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	da0c      	bge.n	8003baa <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d901      	bls.n	8003b9a <mg_mqtt_parse+0xa6>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0cd      	b.n	8003d36 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d8d8      	bhi.n	8003b5a <mg_mqtt_parse+0x66>
 8003ba8:	e000      	b.n	8003bac <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8003baa:	bf00      	nop
  }
  end = p + n;
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8003bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	db05      	blt.n	8003bc8 <mg_mqtt_parse+0xd4>
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <mg_mqtt_parse+0xd8>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b4      	b.n	8003d36 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	7e9b      	ldrb	r3, [r3, #26]
 8003bdc:	2b0b      	cmp	r3, #11
 8003bde:	f300 80a8 	bgt.w	8003d32 <mg_mqtt_parse+0x23e>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	da10      	bge.n	8003c08 <mg_mqtt_parse+0x114>
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d002      	beq.n	8003bf0 <mg_mqtt_parse+0xfc>
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d024      	beq.n	8003c38 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 8003bee:	e0a0      	b.n	8003d32 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	dc01      	bgt.n	8003bfe <mg_mqtt_parse+0x10a>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e09b      	b.n	8003d36 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	785a      	ldrb	r2, [r3, #1]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	771a      	strb	r2, [r3, #28]
      break;
 8003c06:	e095      	b.n	8003d34 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d201      	bcs.n	8003c16 <mg_mqtt_parse+0x122>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e08f      	b.n	8003d36 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	3301      	adds	r3, #1
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	831a      	strh	r2, [r3, #24]
      p += 2;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	3302      	adds	r3, #2
 8003c34:	623b      	str	r3, [r7, #32]
      break;
 8003c36:	e07d      	b.n	8003d34 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d201      	bcs.n	8003c46 <mg_mqtt_parse+0x152>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e077      	b.n	8003d36 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	3301      	adds	r3, #1
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b21b      	sxth	r3, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	4413      	add	r3, r2
 8003c74:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8003c76:	6a3a      	ldr	r2, [r7, #32]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d901      	bls.n	8003c82 <mg_mqtt_parse+0x18e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e059      	b.n	8003d36 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	7edb      	ldrb	r3, [r3, #27]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d201      	bcs.n	8003c98 <mg_mqtt_parse+0x1a4>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e04e      	b.n	8003d36 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	b21a      	sxth	r2, r3
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	b21b      	sxth	r3, r3
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	831a      	strh	r2, [r3, #24]
        p += 2;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d901      	bls.n	8003cc4 <mg_mqtt_parse+0x1d0>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e038      	b.n	8003d36 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d123      	bne.n	8003d12 <mg_mqtt_parse+0x21e>
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d91e      	bls.n	8003d12 <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	3324      	adds	r3, #36	@ 0x24
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6a38      	ldr	r0, [r7, #32]
 8003ce4:	f7ff fa83 	bl	80031ee <decode_varint>
 8003ce8:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <mg_mqtt_parse+0x200>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e020      	b.n	8003d36 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	4413      	add	r3, r2
 8003d10:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d901      	bls.n	8003d1e <mg_mqtt_parse+0x22a>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e00b      	b.n	8003d36 <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
      break;
 8003d30:	e000      	b.n	8003d34 <mg_mqtt_parse+0x240>
      break;
 8003d32:	bf00      	nop
  }
  return MQTT_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	@ 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b099      	sub	sp, #100	@ 0x64
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b07      	cmp	r3, #7
 8003d50:	f040 8124 	bne.w	8003f9c <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <mqtt_cb+0x28>
 8003d64:	2305      	movs	r3, #5
 8003d66:	e000      	b.n	8003d6a <mqtt_cb+0x2a>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8003d7e:	f7ff feb9 	bl	8003af4 <mg_mqtt_parse>
 8003d82:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 8003d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d118      	bne.n	8003dbc <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8003d8a:	4b86      	ldr	r3, [pc, #536]	@ (8003fa4 <mqtt_cb+0x264>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	dd0c      	ble.n	8003dac <mqtt_cb+0x6c>
 8003d92:	4b85      	ldr	r3, [pc, #532]	@ (8003fa8 <mqtt_cb+0x268>)
 8003d94:	f640 6263 	movw	r2, #3683	@ 0xe63
 8003d98:	4984      	ldr	r1, [pc, #528]	@ (8003fac <mqtt_cb+0x26c>)
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f7ff f84c 	bl	8002e38 <mg_log_prefix>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	4619      	mov	r1, r3
 8003da6:	4882      	ldr	r0, [pc, #520]	@ (8003fb0 <mqtt_cb+0x270>)
 8003da8:	f7ff f896 	bl	8002ed8 <mg_log>
        c->is_closing = 1;
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 8003dba:	e0ef      	b.n	8003f9c <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 8003dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 80eb 	bne.w	8003f9a <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8003dc4:	4b77      	ldr	r3, [pc, #476]	@ (8003fa4 <mqtt_cb+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	dd17      	ble.n	8003dfc <mqtt_cb+0xbc>
 8003dcc:	4b76      	ldr	r3, [pc, #472]	@ (8003fa8 <mqtt_cb+0x268>)
 8003dce:	f640 6267 	movw	r2, #3687	@ 0xe67
 8003dd2:	4976      	ldr	r1, [pc, #472]	@ (8003fac <mqtt_cb+0x26c>)
 8003dd4:	2004      	movs	r0, #4
 8003dd6:	f7ff f82f 	bl	8002e38 <mg_log_prefix>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003de2:	4618      	mov	r0, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	461c      	mov	r4, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	461a      	mov	r2, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	9200      	str	r2, [sp, #0]
 8003df2:	4623      	mov	r3, r4
 8003df4:	4602      	mov	r2, r0
 8003df6:	486f      	ldr	r0, [pc, #444]	@ (8003fb4 <mqtt_cb+0x274>)
 8003df8:	f7ff f86e 	bl	8002ed8 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 8003dfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e00:	3b02      	subs	r3, #2
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	f200 80ba 	bhi.w	8003f7c <mqtt_cb+0x23c>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <mqtt_cb+0xd0>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e99 	.word	0x08003e99
 8003e18:	08003f7d 	.word	0x08003f7d
 8003e1c:	08003f23 	.word	0x08003f23
 8003e20:	08003f4f 	.word	0x08003f4f
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	331c      	adds	r3, #28
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2111      	movs	r1, #17
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7fd fdea 	bl	8001a08 <mg_call>
            if (mm.ack == 0) {
 8003e34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 8003e3c:	4b59      	ldr	r3, [pc, #356]	@ (8003fa4 <mqtt_cb+0x264>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f340 809a 	ble.w	8003f7a <mqtt_cb+0x23a>
 8003e46:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <mqtt_cb+0x268>)
 8003e48:	f640 626d 	movw	r2, #3693	@ 0xe6d
 8003e4c:	4957      	ldr	r1, [pc, #348]	@ (8003fac <mqtt_cb+0x26c>)
 8003e4e:	2003      	movs	r0, #3
 8003e50:	f7fe fff2 	bl	8002e38 <mg_log_prefix>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4857      	ldr	r0, [pc, #348]	@ (8003fb8 <mqtt_cb+0x278>)
 8003e5c:	f7ff f83c 	bl	8002ed8 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 8003e60:	e08b      	b.n	8003f7a <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8003e62:	4b50      	ldr	r3, [pc, #320]	@ (8003fa4 <mqtt_cb+0x264>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	dd0e      	ble.n	8003e88 <mqtt_cb+0x148>
 8003e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa8 <mqtt_cb+0x268>)
 8003e6c:	f640 626f 	movw	r2, #3695	@ 0xe6f
 8003e70:	494e      	ldr	r1, [pc, #312]	@ (8003fac <mqtt_cb+0x26c>)
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fe ffe0 	bl	8002e38 <mg_log_prefix>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003e80:	4619      	mov	r1, r3
 8003e82:	484e      	ldr	r0, [pc, #312]	@ (8003fbc <mqtt_cb+0x27c>)
 8003e84:	f7ff f828 	bl	8002ed8 <mg_log>
              c->is_closing = 1;
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8003e8e:	f043 0320 	orr.w	r3, r3, #32
 8003e92:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 8003e96:	e070      	b.n	8003f7a <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 8003e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d038      	beq.n	8003f12 <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 8003ea0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00d f9b3 	bl	801120e <mg_ntohs>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 8003eae:	2302      	movs	r3, #2
 8003eb0:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <mqtt_cb+0x188>
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 8003ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d101      	bne.n	8003ed4 <mqtt_cb+0x194>
 8003ed0:	2105      	movs	r1, #5
 8003ed2:	e000      	b.n	8003ed6 <mqtt_cb+0x196>
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed8:	2200      	movs	r2, #0
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff f8e6 	bl	80030ac <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 8003ee0:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f003 fe4d 	bl	8007b88 <mg_send>

              if (c->is_mqtt5) {
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 8003f04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f003 fe3b 	bl	8007b88 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	461a      	mov	r2, r3
 8003f18:	2110      	movs	r1, #16
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7fd fd74 	bl	8001a08 <mg_call>
            break;
 8003f20:	e02c      	b.n	8003f7c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8003f22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f24:	4618      	mov	r0, r3
 8003f26:	f00d f972 	bl	801120e <mg_ntohs>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 8003f2e:	2302      	movs	r3, #2
 8003f30:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8003f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f34:	2202      	movs	r2, #2
 8003f36:	2106      	movs	r1, #6
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff f8b7 	bl	80030ac <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8003f3e:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8003f42:	2202      	movs	r2, #2
 8003f44:	4619      	mov	r1, r3
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f003 fe1e 	bl	8007b88 <mg_send>
            break;
 8003f4c:	e016      	b.n	8003f7c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8003f4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f50:	4618      	mov	r0, r3
 8003f52:	f00d f95c 	bl	801120e <mg_ntohs>
 8003f56:	4603      	mov	r3, r0
 8003f58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	2200      	movs	r2, #0
 8003f62:	2107      	movs	r1, #7
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff f8a1 	bl	80030ac <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8003f6a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4619      	mov	r1, r3
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f003 fe08 	bl	8007b88 <mg_send>
            break;
 8003f78:	e000      	b.n	8003f7c <mqtt_cb+0x23c>
            break;
 8003f7a:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	461a      	mov	r2, r3
 8003f82:	210f      	movs	r1, #15
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7fd fd3f 	bl	8001a08 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3338      	adds	r3, #56	@ 0x38
 8003f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fec8 	bl	8002d28 <mg_iobuf_del>
    for (;;) {
 8003f98:	e6dc      	b.n	8003d54 <mqtt_cb+0x14>
      } else {
        break;
 8003f9a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8003f9c:	bf00      	nop
 8003f9e:	375c      	adds	r7, #92	@ 0x5c
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}
 8003fa4:	24000000 	.word	0x24000000
 8003fa8:	08030b3c 	.word	0x08030b3c
 8003fac:	0802b5b0 	.word	0x0802b5b0
 8003fb0:	0802c344 	.word	0x0802c344
 8003fb4:	0802c360 	.word	0x0802c360
 8003fb8:	0802c380 	.word	0x0802c380
 8003fbc:	0802c390 	.word	0x0802c390

08003fc0 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b096      	sub	sp, #88	@ 0x58
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8003fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fb29 	bl	800462c <mg_connect>
 8003fda:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d015      	beq.n	800400e <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	2240      	movs	r2, #64	@ 0x40
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f025 fb6a 	bl	80296c4 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <mg_mqtt_connect+0x3c>
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	e000      	b.n	8003ffe <mg_mqtt_connect+0x3e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4619      	mov	r1, r3
 8004000:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004002:	f7ff fb45 	bl	8003690 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	4a03      	ldr	r2, [pc, #12]	@ (8004018 <mg_mqtt_connect+0x58>)
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 800400e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8004010:	4618      	mov	r0, r3
 8004012:	3758      	adds	r7, #88	@ 0x58
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	08003d41 	.word	0x08003d41

0800401c <mg_atonl>:
  len = mg_vprintf(c, fmt, &ap);
  va_end(ap);
  return len;
}

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	e883 0003 	stmia.w	r3, {r0, r1}
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800402c:	4811      	ldr	r0, [pc, #68]	@ (8004074 <mg_atonl+0x58>)
 800402e:	f00d f8d5 	bl	80111dc <mg_ntohl>
 8004032:	4603      	mov	r3, r0
 8004034:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8004036:	f107 0318 	add.w	r3, r7, #24
 800403a:	490f      	ldr	r1, [pc, #60]	@ (8004078 <mg_atonl+0x5c>)
 800403c:	4618      	mov	r0, r3
 800403e:	f004 fd68 	bl	8008b12 <mg_str_s>
 8004042:	f107 0318 	add.w	r3, r7, #24
 8004046:	cb0c      	ldmia	r3, {r2, r3}
 8004048:	f107 0108 	add.w	r1, r7, #8
 800404c:	c903      	ldmia	r1, {r0, r1}
 800404e:	f004 fdaa 	bl	8008ba6 <mg_strcasecmp>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <mg_atonl+0x40>
 8004058:	2300      	movs	r3, #0
 800405a:	e006      	b.n	800406a <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	74da      	strb	r2, [r3, #19]
  return true;
 8004068:	2301      	movs	r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	7f000001 	.word	0x7f000001
 8004078:	0802c3b0 	.word	0x0802c3b0

0800407c <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	e883 0003 	stmia.w	r3, {r0, r1}
 800408a:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <mg_atone+0x1a>
 8004092:	2300      	movs	r3, #0
 8004094:	e009      	b.n	80040aa <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2210      	movs	r2, #16
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f025 fb11 	bl	80296c4 <memset>
  addr->is_ip6 = false;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	74da      	strb	r2, [r3, #19]
  return true;
 80040a8:	2301      	movs	r3, #1
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80040b2:	b480      	push	{r7}
 80040b4:	b089      	sub	sp, #36	@ 0x24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80040c0:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	e049      	b.n	8004164 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80040da:	d925      	bls.n	8004128 <mg_aton4+0x76>
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b39      	cmp	r3, #57	@ 0x39
 80040e6:	d81f      	bhi.n	8004128 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80040e8:	f107 0210 	add.w	r2, r7, #16
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4619      	mov	r1, r3
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3b30      	subs	r3, #48	@ 0x30
 8004108:	440b      	add	r3, r1
 800410a:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2bff      	cmp	r3, #255	@ 0xff
 8004110:	dd01      	ble.n	8004116 <mg_aton4+0x64>
 8004112:	2300      	movs	r3, #0
 8004114:	e03d      	b.n	8004192 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	b2d9      	uxtb	r1, r3
 800411a:	f107 0210 	add.w	r2, r7, #16
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4413      	add	r3, r2
 8004122:	460a      	mov	r2, r1
 8004124:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8004126:	e01a      	b.n	800415e <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b2e      	cmp	r3, #46	@ 0x2e
 8004132:	d112      	bne.n	800415a <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d809      	bhi.n	800414e <mg_aton4+0x9c>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <mg_aton4+0x9c>
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3b01      	subs	r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b2e      	cmp	r3, #46	@ 0x2e
 800414c:	d101      	bne.n	8004152 <mg_aton4+0xa0>
 800414e:	2300      	movs	r3, #0
 8004150:	e01f      	b.n	8004192 <mg_aton4+0xe0>
      num_dots++;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	3301      	adds	r3, #1
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e001      	b.n	800415e <mg_aton4+0xac>
    } else {
      return false;
 800415a:	2300      	movs	r3, #0
 800415c:	e019      	b.n	8004192 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3301      	adds	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	429a      	cmp	r2, r3
 800416a:	d3b1      	bcc.n	80040d0 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d106      	bne.n	8004180 <mg_aton4+0xce>
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3b01      	subs	r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b2e      	cmp	r3, #46	@ 0x2e
 800417e:	d101      	bne.n	8004184 <mg_aton4+0xd2>
 8004180:	2300      	movs	r3, #0
 8004182:	e006      	b.n	8004192 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	74da      	strb	r2, [r3, #19]
  return true;
 8004190:	2301      	movs	r3, #1
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800419e:	b580      	push	{r7, lr}
 80041a0:	b088      	sub	sp, #32
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80041ac:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b0d      	cmp	r3, #13
 80041b2:	d801      	bhi.n	80041b8 <mg_v4mapped+0x1a>
 80041b4:	2300      	movs	r3, #0
 80041b6:	e056      	b.n	8004266 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80041be:	d109      	bne.n	80041d4 <mg_v4mapped+0x36>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3301      	adds	r3, #1
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80041c8:	d104      	bne.n	80041d4 <mg_v4mapped+0x36>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3306      	adds	r3, #6
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80041d2:	d001      	beq.n	80041d8 <mg_v4mapped+0x3a>
 80041d4:	2300      	movs	r3, #0
 80041d6:	e046      	b.n	8004266 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 80041d8:	2302      	movs	r3, #2
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e010      	b.n	8004200 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b66      	cmp	r3, #102	@ 0x66
 80041e8:	d007      	beq.n	80041fa <mg_v4mapped+0x5c>
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b46      	cmp	r3, #70	@ 0x46
 80041f4:	d001      	beq.n	80041fa <mg_v4mapped+0x5c>
 80041f6:	2300      	movs	r3, #0
 80041f8:	e035      	b.n	8004266 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b05      	cmp	r3, #5
 8004204:	ddeb      	ble.n	80041de <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1dd9      	adds	r1, r3, #7
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1fda      	subs	r2, r3, #7
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4618      	mov	r0, r3
 8004214:	f004 fc9a 	bl	8008b4c <mg_str_n>
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004222:	f7ff ff46 	bl	80040b2 <mg_aton4>
 8004226:	4603      	mov	r3, r0
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <mg_v4mapped+0x98>
 8004232:	2300      	movs	r3, #0
 8004234:	e017      	b.n	8004266 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2210      	movs	r2, #16
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f025 fa3e 	bl	80296c4 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	22ff      	movs	r2, #255	@ 0xff
 800424c:	72da      	strb	r2, [r3, #11]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7ada      	ldrb	r2, [r3, #11]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	330c      	adds	r3, #12
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	74da      	strb	r2, [r3, #19]
  return true;
 8004264:	2301      	movs	r3, #1
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800426e:	b580      	push	{r7, lr}
 8004270:	b090      	sub	sp, #64	@ 0x40
 8004272:	af02      	add	r7, sp, #8
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	e883 0003 	stmia.w	r3, {r0, r1}
 800427c:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800427e:	2300      	movs	r3, #0
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004286:	232a      	movs	r3, #42	@ 0x2a
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d909      	bls.n	80042aa <mg_aton6+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b5b      	cmp	r3, #91	@ 0x5b
 800429c:	d105      	bne.n	80042aa <mg_aton6+0x3c>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b02      	subs	r3, #2
 80042a8:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	f107 0308 	add.w	r3, r7, #8
 80042b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042b4:	f7ff ff73 	bl	800419e <mg_v4mapped>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <mg_aton6+0x54>
 80042be:	2301      	movs	r3, #1
 80042c0:	e0e1      	b.n	8004486 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c6:	e0b0      	b.n	800442a <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	4413      	add	r3, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80042d2:	d905      	bls.n	80042e0 <mg_aton6+0x72>
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d8:	4413      	add	r3, r2
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b39      	cmp	r3, #57	@ 0x39
 80042de:	d917      	bls.n	8004310 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d905      	bls.n	80042f8 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	4413      	add	r3, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b66      	cmp	r3, #102	@ 0x66
 80042f6:	d90b      	bls.n	8004310 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d933      	bls.n	800436c <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	4413      	add	r3, r2
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b46      	cmp	r3, #70	@ 0x46
 800430e:	d82d      	bhi.n	800436c <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	3303      	adds	r3, #3
 8004318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800431a:	429a      	cmp	r2, r3
 800431c:	d901      	bls.n	8004322 <mg_aton6+0xb4>
 800431e:	2300      	movs	r3, #0
 8004320:	e0b1      	b.n	8004486 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	f107 0318 	add.w	r3, r7, #24
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fc09 	bl	8008b4c <mg_str_n>
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	2204      	movs	r2, #4
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	2210      	movs	r2, #16
 8004344:	f107 0118 	add.w	r1, r7, #24
 8004348:	c903      	ldmia	r1, {r0, r1}
 800434a:	f004 fd67 	bl	8008e1c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b2d9      	uxtb	r1, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	4413      	add	r3, r2
 800435a:	460a      	mov	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004362:	3301      	adds	r3, #1
 8004364:	b2d1      	uxtb	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800436a:	e05b      	b.n	8004424 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004370:	4413      	add	r3, r2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b3a      	cmp	r3, #58	@ 0x3a
 8004376:	d134      	bne.n	80043e2 <mg_aton6+0x174>
      j = i + 1;
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	3301      	adds	r3, #1
 800437c:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800437e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004380:	2b00      	cmp	r3, #0
 8004382:	d014      	beq.n	80043ae <mg_aton6+0x140>
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	3b01      	subs	r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b3a      	cmp	r3, #58	@ 0x3a
 8004390:	d10d      	bne.n	80043ae <mg_aton6+0x140>
        dc = n;  // Double colon
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8004396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004398:	2b01      	cmp	r3, #1
 800439a:	d90f      	bls.n	80043bc <mg_aton6+0x14e>
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a0:	3b02      	subs	r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80043a8:	d108      	bne.n	80043bc <mg_aton6+0x14e>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e06b      	b.n	8004486 <mg_aton6+0x218>
      } else if (i > 0) {
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <mg_aton6+0x150>
        n += 2;
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	3302      	adds	r3, #2
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ba:	e000      	b.n	80043be <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80043bc:	bf00      	nop
      }
      if (n > 14) return false;
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	2b0e      	cmp	r3, #14
 80043c2:	d901      	bls.n	80043c8 <mg_aton6+0x15a>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e05e      	b.n	8004486 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	3301      	adds	r3, #1
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	2100      	movs	r1, #0
 80043d0:	54d1      	strb	r1, [r2, r3]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	5cd1      	ldrb	r1, [r2, r3]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	4413      	add	r3, r2
 80043dc:	460a      	mov	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e020      	b.n	8004424 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b25      	cmp	r3, #37	@ 0x25
 80043ec:	d118      	bne.n	8004420 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	3301      	adds	r3, #1
 80043f4:	18d1      	adds	r1, r2, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	1e5a      	subs	r2, r3, #1
 80043fe:	f107 0320 	add.w	r3, r7, #32
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fba2 	bl	8008b4c <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800440c:	2201      	movs	r2, #1
 800440e:	9200      	str	r2, [sp, #0]
 8004410:	220a      	movs	r2, #10
 8004412:	f107 0120 	add.w	r1, r7, #32
 8004416:	c903      	ldmia	r1, {r0, r1}
 8004418:	f004 fd00 	bl	8008e1c <mg_str_to_num>
 800441c:	4603      	mov	r3, r0
 800441e:	e032      	b.n	8004486 <mg_aton6+0x218>
    } else {
      return false;
 8004420:	2300      	movs	r3, #0
 8004422:	e030      	b.n	8004486 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	3301      	adds	r3, #1
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800442e:	429a      	cmp	r2, r3
 8004430:	f4ff af4a 	bcc.w	80042c8 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	2b0d      	cmp	r3, #13
 8004438:	d804      	bhi.n	8004444 <mg_aton6+0x1d6>
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	2b2a      	cmp	r3, #42	@ 0x2a
 800443e:	d101      	bne.n	8004444 <mg_aton6+0x1d6>
 8004440:	2300      	movs	r3, #0
 8004442:	e020      	b.n	8004486 <mg_aton6+0x218>
  if (n < 14) {
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	2b0d      	cmp	r3, #13
 8004448:	d819      	bhi.n	800447e <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800444a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	330e      	adds	r3, #14
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	18d0      	adds	r0, r2, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	18d1      	adds	r1, r2, r3
 800445c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	3302      	adds	r3, #2
 8004464:	461a      	mov	r2, r3
 8004466:	f025 f913 	bl	8029690 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	18d0      	adds	r0, r2, r3
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	f1c3 030e 	rsb	r3, r3, #14
 8004476:	461a      	mov	r2, r3
 8004478:	2100      	movs	r1, #0
 800447a:	f025 f923 	bl	80296c4 <memset>
  }

  addr->is_ip6 = true;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	74da      	strb	r2, [r3, #19]
  return true;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	3738      	adds	r7, #56	@ 0x38
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	f107 0308 	add.w	r3, r7, #8
 8004498:	e883 0003 	stmia.w	r3, {r0, r1}
 800449c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044a8:	f7ff fde8 	bl	800407c <mg_atone>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <mg_aton+0x60>
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	f107 0308 	add.w	r3, r7, #8
 80044b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044bc:	f7ff fdae 	bl	800401c <mg_atonl>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d113      	bne.n	80044ee <mg_aton+0x60>
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044d0:	f7ff fdef 	bl	80040b2 <mg_aton4>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <mg_aton+0x60>
         mg_aton6(str, addr);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	f107 0308 	add.w	r3, r7, #8
 80044e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044e4:	f7ff fec3 	bl	800426e <mg_aton6>
 80044e8:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <mg_aton+0x64>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <mg_aton+0x66>
 80044f2:	2300      	movs	r3, #0
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	b2db      	uxtb	r3, r3
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	33b0      	adds	r3, #176	@ 0xb0
 8004510:	4619      	mov	r1, r3
 8004512:	2001      	movs	r0, #1
 8004514:	f024 f852 	bl	80285bc <calloc>
 8004518:	4603      	mov	r3, r0
 800451a:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800452e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	@ 0x44
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	61da      	str	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc fca8 	bl	8000eba <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e002      	b.n	8004578 <mg_close_conn+0x1c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d1f7      	bne.n	8004572 <mg_close_conn+0x16>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d103      	bne.n	800459e <mg_close_conn+0x42>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d103      	bne.n	80045b2 <mg_close_conn+0x56>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2109      	movs	r1, #9
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fa26 	bl	8001a08 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80045bc:	4b17      	ldr	r3, [pc, #92]	@ (800461c <mg_close_conn+0xc0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	dd0e      	ble.n	80045e2 <mg_close_conn+0x86>
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <mg_close_conn+0xc4>)
 80045c6:	f44f 6276 	mov.w	r2, #3936	@ 0xf60
 80045ca:	4916      	ldr	r1, [pc, #88]	@ (8004624 <mg_close_conn+0xc8>)
 80045cc:	2003      	movs	r0, #3
 80045ce:	f7fe fc33 	bl	8002e38 <mg_log_prefix>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	461a      	mov	r2, r3
 80045dc:	4812      	ldr	r0, [pc, #72]	@ (8004628 <mg_close_conn+0xcc>)
 80045de:	f7fe fc7b 	bl	8002ed8 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f007 faeb 	bl	800bbbe <mg_tls_free>
  mg_iobuf_free(&c->recv);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3338      	adds	r3, #56	@ 0x38
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fbe6 	bl	8002dbe <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3348      	adds	r3, #72	@ 0x48
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fbe1 	bl	8002dbe <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3368      	adds	r3, #104	@ 0x68
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fbdc 	bl	8002dbe <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8004606:	21b0      	movs	r1, #176	@ 0xb0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f00c fd87 	bl	801111c <mg_bzero>
  free(c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f023 fff8 	bl	8028604 <free>
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	24000000 	.word	0x24000000
 8004620:	08030b44 	.word	0x08030b44
 8004624:	0802b5b0 	.word	0x0802b5b0
 8004628:	0802c3bc 	.word	0x0802c3bc

0800462c <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <mg_connect+0x20>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10e      	bne.n	800466a <mg_connect+0x3e>
    MG_ERROR(("null url"));
 800464c:	4b37      	ldr	r3, [pc, #220]	@ (800472c <mg_connect+0x100>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	dd66      	ble.n	8004722 <mg_connect+0xf6>
 8004654:	4b36      	ldr	r3, [pc, #216]	@ (8004730 <mg_connect+0x104>)
 8004656:	f44f 6277 	mov.w	r2, #3952	@ 0xf70
 800465a:	4936      	ldr	r1, [pc, #216]	@ (8004734 <mg_connect+0x108>)
 800465c:	2001      	movs	r0, #1
 800465e:	f7fe fbeb 	bl	8002e38 <mg_log_prefix>
 8004662:	4835      	ldr	r0, [pc, #212]	@ (8004738 <mg_connect+0x10c>)
 8004664:	f7fe fc38 	bl	8002ed8 <mg_log>
 8004668:	e05b      	b.n	8004722 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff49 	bl	8004502 <mg_alloc_conn>
 8004670:	6178      	str	r0, [r7, #20]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10e      	bne.n	8004696 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 8004678:	4b2c      	ldr	r3, [pc, #176]	@ (800472c <mg_connect+0x100>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dd50      	ble.n	8004722 <mg_connect+0xf6>
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <mg_connect+0x104>)
 8004682:	f640 7272 	movw	r2, #3954	@ 0xf72
 8004686:	492b      	ldr	r1, [pc, #172]	@ (8004734 <mg_connect+0x108>)
 8004688:	2001      	movs	r0, #1
 800468a:	f7fe fbd5 	bl	8002e38 <mg_log_prefix>
 800468e:	482b      	ldr	r0, [pc, #172]	@ (800473c <mg_connect+0x110>)
 8004690:	f7fe fc22 	bl	8002ed8 <mg_log>
 8004694:	e045      	b.n	8004722 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80046a4:	2204      	movs	r2, #4
 80046a6:	4926      	ldr	r1, [pc, #152]	@ (8004740 <mg_connect+0x114>)
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f025 f820 	bl	80296ee <strncmp>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2d9      	uxtb	r1, r3
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80046c0:	f361 0300 	bfi	r3, r1, #0, #1
 80046c4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f04f 32ff 	mov.w	r2, #4294967295
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80046ea:	4b10      	ldr	r3, [pc, #64]	@ (800472c <mg_connect+0x100>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	dd0e      	ble.n	8004710 <mg_connect+0xe4>
 80046f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <mg_connect+0x104>)
 80046f4:	f640 727a 	movw	r2, #3962	@ 0xf7a
 80046f8:	490e      	ldr	r1, [pc, #56]	@ (8004734 <mg_connect+0x108>)
 80046fa:	2003      	movs	r0, #3
 80046fc:	f7fe fb9c 	bl	8002e38 <mg_log_prefix>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	480e      	ldr	r0, [pc, #56]	@ (8004744 <mg_connect+0x118>)
 800470c:	f7fe fbe4 	bl	8002ed8 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	2101      	movs	r1, #1
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f7fd f977 	bl	8001a08 <mg_call>
    mg_resolve(c, url);
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	6978      	ldr	r0, [r7, #20]
 800471e:	f7fd f92f 	bl	8001980 <mg_resolve>
  }
  return c;
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	24000000 	.word	0x24000000
 8004730:	08030b54 	.word	0x08030b54
 8004734:	0802b5b0 	.word	0x0802b5b0
 8004738:	0802c3cc 	.word	0x0802c3cc
 800473c:	0802c3d8 	.word	0x0802c3d8
 8004740:	0802c3dc 	.word	0x0802c3dc
 8004744:	0802b6f4 	.word	0x0802b6f4

08004748 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8004750:	2248      	movs	r2, #72	@ 0x48
 8004752:	2100      	movs	r1, #0
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f024 ffb5 	bl	80296c4 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 8004762:	4b23      	ldr	r3, [pc, #140]	@ (80047f0 <mg_mgr_init+0xa8>)
 8004764:	2204      	movs	r2, #4
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <mg_mgr_init+0xa8>)
 800476a:	2200      	movs	r2, #0
 800476c:	711a      	strb	r2, [r3, #4]
 800476e:	2000      	movs	r0, #0
 8004770:	f00c fd34 	bl	80111dc <mg_ntohl>
 8004774:	4603      	mov	r3, r0
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <mg_mgr_init+0xac>)
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	2000      	movs	r0, #0
 800477c:	f00c fd2e 	bl	80111dc <mg_ntohl>
 8004780:	4603      	mov	r3, r0
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <mg_mgr_init+0xac>)
 8004784:	60d3      	str	r3, [r2, #12]
 8004786:	2000      	movs	r0, #0
 8004788:	f00c fd28 	bl	80111dc <mg_ntohl>
 800478c:	4603      	mov	r3, r0
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <mg_mgr_init+0xac>)
 8004790:	6113      	str	r3, [r2, #16]
 8004792:	4b18      	ldr	r3, [pc, #96]	@ (80047f4 <mg_mgr_init+0xac>)
 8004794:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <mg_mgr_init+0xb0>)
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
 8004798:	4b16      	ldr	r3, [pc, #88]	@ (80047f4 <mg_mgr_init+0xac>)
 800479a:	4a15      	ldr	r2, [pc, #84]	@ (80047f0 <mg_mgr_init+0xa8>)
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28
 800479e:	4915      	ldr	r1, [pc, #84]	@ (80047f4 <mg_mgr_init+0xac>)
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f002 fe0f 	bl	80073c4 <mg_tcpip_init>
 80047a6:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <mg_mgr_init+0xb4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	dd0b      	ble.n	80047c6 <mg_mgr_init+0x7e>
 80047ae:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <mg_mgr_init+0xb8>)
 80047b0:	f640 72dc 	movw	r2, #4060	@ 0xfdc
 80047b4:	4913      	ldr	r1, [pc, #76]	@ (8004804 <mg_mgr_init+0xbc>)
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fe fb3e 	bl	8002e38 <mg_log_prefix>
 80047bc:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <mg_mgr_init+0xac>)
 80047be:	4912      	ldr	r1, [pc, #72]	@ (8004808 <mg_mgr_init+0xc0>)
 80047c0:	4812      	ldr	r0, [pc, #72]	@ (800480c <mg_mgr_init+0xc4>)
 80047c2:	f7fe fb89 	bl	8002ed8 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80047d4:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <mg_mgr_init+0xc8>)
 80047da:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <mg_mgr_init+0xcc>)
 80047e0:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f007 faaf 	bl	800bd46 <mg_tls_ctx_init>
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	24007e88 	.word	0x24007e88
 80047f4:	24007e90 	.word	0x24007e90
 80047f8:	24000028 	.word	0x24000028
 80047fc:	24000000 	.word	0x24000000
 8004800:	08030b60 	.word	0x08030b60
 8004804:	0802b5b0 	.word	0x0802b5b0
 8004808:	08007fb9 	.word	0x08007fb9
 800480c:	0802c41c 	.word	0x0802c41c
 8004810:	0802c434 	.word	0x0802c434
 8004814:	0802c448 	.word	0x0802c448

08004818 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <mg_tcpip_call+0x20>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	4798      	blx	r3
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	441a      	add	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	461a      	mov	r2, r3
 800485a:	68fc      	ldr	r4, [r7, #12]
 800485c:	463b      	mov	r3, r7
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4618      	mov	r0, r3
 8004862:	f004 f973 	bl	8008b4c <mg_str_n>
 8004866:	f104 0308 	add.w	r3, r4, #8
 800486a:	463a      	mov	r2, r7
 800486c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004870:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}

0800487c <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e014      	b.n	80048bc <csumup+0x40>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <csumup+0x2a>
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	4413      	add	r3, r2
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	e004      	b.n	80048b0 <csumup+0x34>
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4413      	add	r3, r2
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	3301      	adds	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3e6      	bcc.n	8004892 <csumup+0x16>
  return sum;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 80048da:	e005      	b.n	80048e8 <csumfin+0x16>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	4413      	add	r3, r2
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f5      	bne.n	80048dc <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4618      	mov	r0, r3
 80048fa:	f00c fc88 	bl	801120e <mg_ntohs>
 80048fe:	4603      	mov	r3, r0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	2000      	movs	r0, #0
 8004918:	f7ff ffb0 	bl	800487c <csumup>
 800491c:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff ffd7 	bl	80048d2 <csumfin>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8004930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af02      	add	r7, sp, #8
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	33b0      	adds	r3, #176	@ 0xb0
 800494a:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d013      	beq.n	800497a <settmout+0x4a>
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d00e      	beq.n	8004976 <settmout+0x46>
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d008      	beq.n	8004970 <settmout+0x40>
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d102      	bne.n	800496a <settmout+0x3a>
 8004964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004968:	e008      	b.n	800497c <settmout+0x4c>
 800496a:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800496e:	e005      	b.n	800497c <settmout+0x4c>
 8004970:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004974:	e002      	b.n	800497c <settmout+0x4c>
 8004976:	2364      	movs	r3, #100	@ 0x64
 8004978:	e000      	b.n	800497c <settmout+0x4c>
 800497a:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800497c:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	2000      	movs	r0, #0
 8004988:	460c      	mov	r4, r1
 800498a:	4605      	mov	r5, r0
 800498c:	eb12 0804 	adds.w	r8, r2, r4
 8004990:	eb43 0905 	adc.w	r9, r3, r5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80049a0:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <settmout+0xa8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	dd12      	ble.n	80049ce <settmout+0x9e>
 80049a8:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <settmout+0xac>)
 80049aa:	f241 029a 	movw	r2, #4250	@ 0x109a
 80049ae:	490c      	ldr	r1, [pc, #48]	@ (80049e0 <settmout+0xb0>)
 80049b0:	2004      	movs	r0, #4
 80049b2:	f7fe fa41 	bl	8002e38 <mg_log_prefix>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049ba:	78f8      	ldrb	r0, [r7, #3]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049c2:	e9cd 2300 	strd	r2, r3, [sp]
 80049c6:	4602      	mov	r2, r0
 80049c8:	4806      	ldr	r0, [pc, #24]	@ (80049e4 <settmout+0xb4>)
 80049ca:	f7fe fa85 	bl	8002ed8 <mg_log>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049d8:	24000000 	.word	0x24000000
 80049dc:	08030b6c 	.word	0x08030b6c
 80049e0:	0802b5b0 	.word	0x0802b5b0
 80049e4:	0802c468 	.word	0x0802c468

080049e8 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6950      	ldr	r0, [r2, #20]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	4798      	blx	r3
 8004a02:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d104      	bne.n	8004a16 <ether_output+0x2e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	330e      	adds	r3, #14
 8004a36:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2206      	movs	r2, #6
 8004a3c:	21ff      	movs	r1, #255	@ 0xff
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f024 fe40 	bl	80296c4 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3306      	adds	r3, #6
 8004a48:	68f9      	ldr	r1, [r7, #12]
 8004a4a:	2206      	movs	r2, #6
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f024 fefe 	bl	802984e <memcpy>
  eth->type = mg_htons(0x806);
 8004a52:	f640 0006 	movw	r0, #2054	@ 0x806
 8004a56:	f00c fbda 	bl	801120e <mg_ntohs>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8004a62:	221c      	movs	r2, #28
 8004a64:	2100      	movs	r1, #0
 8004a66:	6938      	ldr	r0, [r7, #16]
 8004a68:	f024 fe2c 	bl	80296c4 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f00c fbce 	bl	801120e <mg_ntohs>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004a7e:	f00c fbc6 	bl	801120e <mg_ntohs>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	805a      	strh	r2, [r3, #2]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2206      	movs	r2, #6
 8004a8e:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2204      	movs	r2, #4
 8004a94:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8004a96:	2001      	movs	r0, #1
 8004a98:	f00c fbb9 	bl	801120e <mg_ntohs>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	80da      	strh	r2, [r3, #6]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	619a      	str	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	2206      	movs	r2, #6
 8004abc:	4618      	mov	r0, r3
 8004abe:	f024 fec6 	bl	802984e <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <mg_tcpip_arp_request+0xb6>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3312      	adds	r3, #18
 8004acc:	2206      	movs	r2, #6
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f024 febc 	bl	802984e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f103 021c 	add.w	r2, r3, #28
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff ff80 	bl	80049e8 <ether_output>
}
 8004ae8:	bf00      	nop
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d135      	bne.n	8004b6e <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8004b02:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <onstatechange+0x128>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	dd0d      	ble.n	8004b26 <onstatechange+0x36>
 8004b0a:	4b44      	ldr	r3, [pc, #272]	@ (8004c1c <onstatechange+0x12c>)
 8004b0c:	f241 02b4 	movw	r2, #4276	@ 0x10b4
 8004b10:	4943      	ldr	r1, [pc, #268]	@ (8004c20 <onstatechange+0x130>)
 8004b12:	2002      	movs	r0, #2
 8004b14:	f7fe f990 	bl	8002e38 <mg_log_prefix>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4941      	ldr	r1, [pc, #260]	@ (8004c24 <onstatechange+0x134>)
 8004b20:	4841      	ldr	r0, [pc, #260]	@ (8004c28 <onstatechange+0x138>)
 8004b22:	f7fe f9d9 	bl	8002ed8 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8004b26:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <onstatechange+0x128>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	dd0d      	ble.n	8004b4a <onstatechange+0x5a>
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c1c <onstatechange+0x12c>)
 8004b30:	f241 02b5 	movw	r2, #4277	@ 0x10b5
 8004b34:	493a      	ldr	r1, [pc, #232]	@ (8004c20 <onstatechange+0x130>)
 8004b36:	2002      	movs	r0, #2
 8004b38:	f7fe f97e 	bl	8002e38 <mg_log_prefix>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3310      	adds	r3, #16
 8004b40:	461a      	mov	r2, r3
 8004b42:	4938      	ldr	r1, [pc, #224]	@ (8004c24 <onstatechange+0x134>)
 8004b44:	4839      	ldr	r0, [pc, #228]	@ (8004c2c <onstatechange+0x13c>)
 8004b46:	f7fe f9c7 	bl	8002ed8 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8004b4a:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <onstatechange+0x128>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	dd57      	ble.n	8004c02 <onstatechange+0x112>
 8004b52:	4b32      	ldr	r3, [pc, #200]	@ (8004c1c <onstatechange+0x12c>)
 8004b54:	f241 02b6 	movw	r2, #4278	@ 0x10b6
 8004b58:	4931      	ldr	r1, [pc, #196]	@ (8004c20 <onstatechange+0x130>)
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	f7fe f96c 	bl	8002e38 <mg_log_prefix>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	4932      	ldr	r1, [pc, #200]	@ (8004c30 <onstatechange+0x140>)
 8004b66:	4833      	ldr	r0, [pc, #204]	@ (8004c34 <onstatechange+0x144>)
 8004b68:	f7fe f9b6 	bl	8002ed8 <mg_log>
 8004b6c:	e049      	b.n	8004c02 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d115      	bne.n	8004ba4 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 8004b78:	4b27      	ldr	r3, [pc, #156]	@ (8004c18 <onstatechange+0x128>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dd09      	ble.n	8004b94 <onstatechange+0xa4>
 8004b80:	4b26      	ldr	r3, [pc, #152]	@ (8004c1c <onstatechange+0x12c>)
 8004b82:	f241 02b8 	movw	r2, #4280	@ 0x10b8
 8004b86:	4926      	ldr	r1, [pc, #152]	@ (8004c20 <onstatechange+0x130>)
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fe f955 	bl	8002e38 <mg_log_prefix>
 8004b8e:	482a      	ldr	r0, [pc, #168]	@ (8004c38 <onstatechange+0x148>)
 8004b90:	f7fe f9a2 	bl	8002ed8 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff3f 	bl	8004a20 <mg_tcpip_arp_request>
 8004ba2:	e02e      	b.n	8004c02 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d116      	bne.n	8004bdc <onstatechange+0xec>
    MG_ERROR(("Link up"));
 8004bae:	4b1a      	ldr	r3, [pc, #104]	@ (8004c18 <onstatechange+0x128>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dd09      	ble.n	8004bca <onstatechange+0xda>
 8004bb6:	4b19      	ldr	r3, [pc, #100]	@ (8004c1c <onstatechange+0x12c>)
 8004bb8:	f241 02bb 	movw	r2, #4283	@ 0x10bb
 8004bbc:	4918      	ldr	r1, [pc, #96]	@ (8004c20 <onstatechange+0x130>)
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f7fe f93a 	bl	8002e38 <mg_log_prefix>
 8004bc4:	481d      	ldr	r0, [pc, #116]	@ (8004c3c <onstatechange+0x14c>)
 8004bc6:	f7fe f987 	bl	8002ed8 <mg_log>
    srand((unsigned int) mg_millis());
 8004bca:	f00d f9cb 	bl	8011f64 <mg_millis>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f023 fdcb 	bl	8028770 <srand>
 8004bda:	e012      	b.n	8004c02 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <onstatechange+0x128>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd09      	ble.n	8004c02 <onstatechange+0x112>
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <onstatechange+0x12c>)
 8004bf0:	f241 02be 	movw	r2, #4286	@ 0x10be
 8004bf4:	490a      	ldr	r1, [pc, #40]	@ (8004c20 <onstatechange+0x130>)
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	f7fe f91e 	bl	8002e38 <mg_log_prefix>
 8004bfc:	4810      	ldr	r0, [pc, #64]	@ (8004c40 <onstatechange+0x150>)
 8004bfe:	f7fe f96b 	bl	8002ed8 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	337c      	adds	r3, #124	@ 0x7c
 8004c06:	461a      	mov	r2, r3
 8004c08:	2100      	movs	r1, #0
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fe04 	bl	8004818 <mg_tcpip_call>
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	24000000 	.word	0x24000000
 8004c1c:	08030b78 	.word	0x08030b78
 8004c20:	0802b5b0 	.word	0x0802b5b0
 8004c24:	08007ef5 	.word	0x08007ef5
 8004c28:	0802c478 	.word	0x0802c478
 8004c2c:	0802c488 	.word	0x0802c488
 8004c30:	08007fb9 	.word	0x08007fb9
 8004c34:	0802c498 	.word	0x0802c498
 8004c38:	0802c4a8 	.word	0x0802c4a8
 8004c3c:	0802c4b0 	.word	0x0802c4b0
 8004c40:	0802c4b8 	.word	0x0802c4b8

08004c44 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	330e      	adds	r3, #14
 8004c5e:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2206      	movs	r2, #6
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f024 fdf1 	bl	802984e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	3306      	adds	r3, #6
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	2206      	movs	r2, #6
 8004c74:	4618      	mov	r0, r3
 8004c76:	f024 fdea 	bl	802984e <memcpy>
  eth->type = mg_htons(0x800);
 8004c7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004c7e:	f00c fac6 	bl	801120e <mg_ntohs>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8004c8a:	2214      	movs	r2, #20
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f024 fd18 	bl	80296c4 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2245      	movs	r2, #69	@ 0x45
 8004c98:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 8004c9a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004c9e:	f00c fab6 	bl	801120e <mg_ntohs>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3314      	adds	r3, #20
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f00c faab 	bl	801120e <mg_ntohs>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2240      	movs	r2, #64	@ 0x40
 8004cc4:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	79fa      	ldrb	r2, [r7, #7]
 8004cca:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8004cd8:	2114      	movs	r1, #20
 8004cda:	6938      	ldr	r0, [r7, #16]
 8004cdc:	f7ff fe14 	bl	8004908 <ipcsum>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	815a      	strh	r2, [r3, #10]
  return ip;
 8004ce8:	693b      	ldr	r3, [r7, #16]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b08a      	sub	sp, #40	@ 0x28
 8004cf6:	af02      	add	r7, sp, #8
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d02:	3308      	adds	r3, #8
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2211      	movs	r2, #17
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ff97 	bl	8004c44 <tx_ip>
 8004d16:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004d28:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3308      	adds	r3, #8
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	f00c fa6b 	bl	801120e <mg_ntohs>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2200      	movs	r2, #0
 8004d44:	719a      	strb	r2, [r3, #6]
 8004d46:	2200      	movs	r2, #0
 8004d48:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	69b9      	ldr	r1, [r7, #24]
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7ff fd94 	bl	800487c <csumup>
 8004d54:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8004d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff fd8e 	bl	800487c <csumup>
 8004d60:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	330c      	adds	r3, #12
 8004d66:	2204      	movs	r2, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff fd86 	bl	800487c <csumup>
 8004d70:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	3310      	adds	r3, #16
 8004d76:	2204      	movs	r2, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff fd7e 	bl	800487c <csumup>
 8004d80:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	7a5b      	ldrb	r3, [r3, #9]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8a:	441a      	add	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3308      	adds	r3, #8
 8004d92:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8004d94:	6978      	ldr	r0, [r7, #20]
 8004d96:	f7ff fd9c 	bl	80048d2 <csumfin>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3308      	adds	r3, #8
 8004da6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004da8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004daa:	4618      	mov	r0, r3
 8004dac:	f024 fc70 	bl	8029690 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8004db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db2:	332a      	adds	r3, #42	@ 0x2a
 8004db4:	4619      	mov	r1, r3
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff fe16 	bl	80049e8 <ether_output>
}
 8004dbc:	bf00      	nop
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8004dc4:	b5b0      	push	{r4, r5, r7, lr}
 8004dc6:	b0cc      	sub	sp, #304	@ 0x130
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8004dce:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8004dd2:	6020      	str	r0, [r4, #0]
 8004dd4:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8004dd8:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8004ddc:	6001      	str	r1, [r0, #0]
 8004dde:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8004de2:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8004de6:	600a      	str	r2, [r1, #0]
 8004de8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8004dec:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8004df0:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8004df2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004df6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004dfa:	4a38      	ldr	r2, [pc, #224]	@ (8004edc <tx_dhcp+0x118>)
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	4611      	mov	r1, r2
 8004e00:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004e04:	461a      	mov	r2, r3
 8004e06:	f024 fd22 	bl	802984e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8004e0a:	4835      	ldr	r0, [pc, #212]	@ (8004ee0 <tx_dhcp+0x11c>)
 8004e0c:	f00c f9e6 	bl	80111dc <mg_ntohl>
 8004e10:	4602      	mov	r2, r0
 8004e12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e1a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8004e1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004e26:	6819      	ldr	r1, [r3, #0]
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	331c      	adds	r3, #28
 8004e2e:	2206      	movs	r2, #6
 8004e30:	4618      	mov	r0, r3
 8004e32:	f024 fd0c 	bl	802984e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8004e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3302      	adds	r3, #2
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e4e:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	33f0      	adds	r3, #240	@ 0xf0
 8004e56:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004e5a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f024 fcf5 	bl	802984e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8004e64:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <tx_dhcp+0xbc>
 8004e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e74:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8004e78:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8004e80:	2044      	movs	r0, #68	@ 0x44
 8004e82:	f00c f9c4 	bl	801120e <mg_ntohs>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461d      	mov	r5, r3
 8004e8a:	2043      	movs	r0, #67	@ 0x43
 8004e8c:	f00c f9bf 	bl	801120e <mg_ntohs>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461c      	mov	r4, r3
 8004e94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e98:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8004e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ea0:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 8004ea4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ea8:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8004eac:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004eb0:	9303      	str	r3, [sp, #12]
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	9401      	str	r4, [sp, #4]
 8004eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ebe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	6809      	ldr	r1, [r1, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f7ff ff10 	bl	8004cf2 <tx_udp>
         sizeof(dhcp));
}
 8004ed2:	bf00      	nop
 8004ed4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bdb0      	pop	{r4, r5, r7, pc}
 8004edc:	0802c4c4 	.word	0x0802c4c4
 8004ee0:	63825363 	.word	0x63825363

08004ee4 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8004ee4:	b5b0      	push	{r4, r5, r7, lr}
 8004ee6:	b090      	sub	sp, #64	@ 0x40
 8004ee8:	af04      	add	r7, sp, #16
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8004ef0:	4b31      	ldr	r3, [pc, #196]	@ (8004fb8 <tx_dhcp_request_sel+0xd4>)
 8004ef2:	f107 0414 	add.w	r4, r7, #20
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f00:	c403      	stmia	r4!, {r0, r1}
 8004f02:	8022      	strh	r2, [r4, #0]
 8004f04:	3402      	adds	r4, #2
 8004f06:	0c13      	lsrs	r3, r2, #16
 8004f08:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	330a      	adds	r3, #10
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	3310      	adds	r3, #16
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	7fdb      	ldrb	r3, [r3, #31]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <tx_dhcp_request_sel+0x5e>
 8004f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004f36:	3318      	adds	r3, #24
 8004f38:	3330      	adds	r3, #48	@ 0x30
 8004f3a:	443b      	add	r3, r7
 8004f3c:	2206      	movs	r2, #6
 8004f3e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <tx_dhcp_request_sel+0x7e>
 8004f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004f56:	3318      	adds	r3, #24
 8004f58:	3330      	adds	r3, #48	@ 0x30
 8004f5a:	443b      	add	r3, r7
 8004f5c:	222a      	movs	r2, #42	@ 0x2a
 8004f5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 8004f62:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004f66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f6a:	4413      	add	r3, r2
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8004f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f76:	3319      	adds	r3, #25
 8004f78:	2200      	movs	r2, #0
 8004f7a:	9202      	str	r2, [sp, #8]
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	f107 0314 	add.w	r3, r7, #20
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	f04f 33ff 	mov.w	r3, #4294967295
 8004f88:	2200      	movs	r2, #0
 8004f8a:	490c      	ldr	r1, [pc, #48]	@ (8004fbc <tx_dhcp_request_sel+0xd8>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff ff19 	bl	8004dc4 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <tx_dhcp_request_sel+0xdc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	dd09      	ble.n	8004fae <tx_dhcp_request_sel+0xca>
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <tx_dhcp_request_sel+0xe0>)
 8004f9c:	f241 1210 	movw	r2, #4368	@ 0x1110
 8004fa0:	4909      	ldr	r1, [pc, #36]	@ (8004fc8 <tx_dhcp_request_sel+0xe4>)
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	f7fd ff48 	bl	8002e38 <mg_log_prefix>
 8004fa8:	4808      	ldr	r0, [pc, #32]	@ (8004fcc <tx_dhcp_request_sel+0xe8>)
 8004faa:	f7fd ff95 	bl	8002ed8 <mg_log>
}
 8004fae:	bf00      	nop
 8004fb0:	3730      	adds	r7, #48	@ 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0802c5e4 	.word	0x0802c5e4
 8004fbc:	0803090c 	.word	0x0803090c
 8004fc0:	24000000 	.word	0x24000000
 8004fc4:	08030b88 	.word	0x08030b88
 8004fc8:	0802b5b0 	.word	0x0802b5b0
 8004fcc:	0802c5d4 	.word	0x0802c5d4

08004fd0 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	@ 0x28
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <tx_dhcp_request_re+0x50>)
 8004fe0:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	9302      	str	r3, [sp, #8]
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	f107 0314 	add.w	r3, r7, #20
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fee4 	bl	8004dc4 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <tx_dhcp_request_re+0x54>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b02      	cmp	r3, #2
 8005002:	dd09      	ble.n	8005018 <tx_dhcp_request_re+0x48>
 8005004:	4b08      	ldr	r3, [pc, #32]	@ (8005028 <tx_dhcp_request_re+0x58>)
 8005006:	f241 121b 	movw	r2, #4379	@ 0x111b
 800500a:	4908      	ldr	r1, [pc, #32]	@ (800502c <tx_dhcp_request_re+0x5c>)
 800500c:	2003      	movs	r0, #3
 800500e:	f7fd ff13 	bl	8002e38 <mg_log_prefix>
 8005012:	4807      	ldr	r0, [pc, #28]	@ (8005030 <tx_dhcp_request_re+0x60>)
 8005014:	f7fd ff60 	bl	8002ed8 <mg_log>
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	ff030135 	.word	0xff030135
 8005024:	24000000 	.word	0x24000000
 8005028:	08030b9c 	.word	0x08030b9c
 800502c:	0802b5b0 	.word	0x0802b5b0
 8005030:	0802c5d4 	.word	0x0802c5d4

08005034 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af04      	add	r7, sp, #16
 800503a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <tx_dhcp_discover+0x5c>)
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005046:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800504a:	2300      	movs	r3, #0
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	2308      	movs	r3, #8
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	2200      	movs	r2, #0
 800505e:	490d      	ldr	r1, [pc, #52]	@ (8005094 <tx_dhcp_discover+0x60>)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff feaf 	bl	8004dc4 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8005066:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <tx_dhcp_discover+0x64>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	dd0c      	ble.n	8005088 <tx_dhcp_discover+0x54>
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <tx_dhcp_discover+0x68>)
 8005070:	f241 1225 	movw	r2, #4389	@ 0x1125
 8005074:	490a      	ldr	r1, [pc, #40]	@ (80050a0 <tx_dhcp_discover+0x6c>)
 8005076:	2003      	movs	r0, #3
 8005078:	f7fd fede 	bl	8002e38 <mg_log_prefix>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	461a      	mov	r2, r3
 8005080:	4908      	ldr	r1, [pc, #32]	@ (80050a4 <tx_dhcp_discover+0x70>)
 8005082:	4809      	ldr	r0, [pc, #36]	@ (80050a8 <tx_dhcp_discover+0x74>)
 8005084:	f7fd ff28 	bl	8002ed8 <mg_log>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	0802c620 	.word	0x0802c620
 8005094:	0803090c 	.word	0x0803090c
 8005098:	24000000 	.word	0x24000000
 800509c:	08030bb0 	.word	0x08030bb0
 80050a0:	0802b5b0 	.word	0x0802b5b0
 80050a4:	08007fb9 	.word	0x08007fb9
 80050a8:	0802c600 	.word	0x0802c600

080050ac <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e057      	b.n	8005176 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <getpeer+0x4c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f103 000e 	add.w	r0, r3, #14
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	331c      	adds	r3, #28
 80050ea:	2204      	movs	r2, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	f024 fabf 	bl	8029670 <memcmp>
 80050f2:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d042      	beq.n	800517e <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <getpeer+0x74>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <getpeer+0x74>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	8b1a      	ldrh	r2, [r3, #24]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	885b      	ldrh	r3, [r3, #2]
 800511a:	b29b      	uxth	r3, r3
 800511c:	429a      	cmp	r2, r3
 800511e:	d030      	beq.n	8005182 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11f      	bne.n	8005170 <getpeer+0xc4>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <getpeer+0xc4>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	8b1a      	ldrh	r2, [r3, #24]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005140:	885b      	ldrh	r3, [r3, #2]
 8005142:	b29b      	uxth	r3, r3
 8005144:	429a      	cmp	r2, r3
 8005146:	d113      	bne.n	8005170 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800514e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005152:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	429a      	cmp	r2, r3
 8005158:	d10a      	bne.n	8005170 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d111      	bne.n	8005184 <getpeer+0xd8>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	429a      	cmp	r2, r3
 800516e:	d009      	beq.n	8005184 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1a4      	bne.n	80050c6 <getpeer+0x1a>
 800517c:	e002      	b.n	8005184 <getpeer+0xd8>
      break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8005182:	bf00      	nop
      break;
  }
  return c;
 8005184:	697b      	ldr	r3, [r7, #20]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005190:	b5b0      	push	{r4, r5, r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	88db      	ldrh	r3, [r3, #6]
 80051a0:	b29c      	uxth	r4, r3
 80051a2:	2001      	movs	r0, #1
 80051a4:	f00c f833 	bl	801120e <mg_ntohs>
 80051a8:	4603      	mov	r3, r0
 80051aa:	429c      	cmp	r4, r3
 80051ac:	d176      	bne.n	800529c <rx_arp+0x10c>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d16f      	bne.n	800529c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	330e      	adds	r3, #14
 80051c6:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80051c8:	6978      	ldr	r0, [r7, #20]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	3306      	adds	r3, #6
 80051d0:	2206      	movs	r2, #6
 80051d2:	4619      	mov	r1, r3
 80051d4:	f024 fb3b 	bl	802984e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3306      	adds	r3, #6
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	2206      	movs	r2, #6
 80051e0:	4618      	mov	r0, r3
 80051e2:	f024 fb34 	bl	802984e <memcpy>
    eth->type = mg_htons(0x806);
 80051e6:	f640 0006 	movw	r0, #2054	@ 0x806
 80051ea:	f00c f810 	bl	801120e <mg_ntohs>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6814      	ldr	r4, [r2, #0]
 80051fe:	6850      	ldr	r0, [r2, #4]
 8005200:	6891      	ldr	r1, [r2, #8]
 8005202:	68d5      	ldr	r5, [r2, #12]
 8005204:	601c      	str	r4, [r3, #0]
 8005206:	6058      	str	r0, [r3, #4]
 8005208:	6099      	str	r1, [r3, #8]
 800520a:	60dd      	str	r5, [r3, #12]
 800520c:	6914      	ldr	r4, [r2, #16]
 800520e:	6950      	ldr	r0, [r2, #20]
 8005210:	6991      	ldr	r1, [r2, #24]
 8005212:	611c      	str	r4, [r3, #16]
 8005214:	6158      	str	r0, [r3, #20]
 8005216:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8005218:	2002      	movs	r0, #2
 800521a:	f00b fff8 	bl	801120e <mg_ntohs>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f103 0012 	add.w	r0, r3, #18
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	3308      	adds	r3, #8
 8005232:	2206      	movs	r2, #6
 8005234:	4619      	mov	r1, r3
 8005236:	f024 fb0a 	bl	802984e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3308      	adds	r3, #8
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	2206      	movs	r2, #6
 8005242:	4618      	mov	r0, r3
 8005244:	f024 fb03 	bl	802984e <memcpy>
    arp->tpa = pkt->arp->spa;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800525e:	4b4e      	ldr	r3, [pc, #312]	@ (8005398 <rx_arp+0x208>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b02      	cmp	r3, #2
 8005264:	dd10      	ble.n	8005288 <rx_arp+0xf8>
 8005266:	4b4d      	ldr	r3, [pc, #308]	@ (800539c <rx_arp+0x20c>)
 8005268:	f241 1249 	movw	r2, #4425	@ 0x1149
 800526c:	494c      	ldr	r1, [pc, #304]	@ (80053a0 <rx_arp+0x210>)
 800526e:	2003      	movs	r0, #3
 8005270:	f7fd fde2 	bl	8002e38 <mg_log_prefix>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f103 0218 	add.w	r2, r3, #24
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <rx_arp+0x214>)
 8005280:	4949      	ldr	r1, [pc, #292]	@ (80053a8 <rx_arp+0x218>)
 8005282:	484a      	ldr	r0, [pc, #296]	@ (80053ac <rx_arp+0x21c>)
 8005284:	f7fd fe28 	bl	8002ed8 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f103 021c 	add.w	r2, r3, #28
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fba7 	bl	80049e8 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800529a:	e079      	b.n	8005390 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	b29c      	uxth	r4, r3
 80052a4:	2002      	movs	r0, #2
 80052a6:	f00b ffb2 	bl	801120e <mg_ntohs>
 80052aa:	4603      	mov	r3, r0
 80052ac:	429c      	cmp	r4, r3
 80052ae:	d16f      	bne.n	8005390 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	3312      	adds	r3, #18
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	2206      	movs	r2, #6
 80052ba:	4618      	mov	r0, r3
 80052bc:	f024 f9d8 	bl	8029670 <memcmp>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d163      	bne.n	800538e <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d116      	bne.n	8005304 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	3308      	adds	r3, #8
 80052e2:	2206      	movs	r2, #6
 80052e4:	4619      	mov	r1, r3
 80052e6:	f024 fab2 	bl	802984e <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d14d      	bne.n	8005390 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2204      	movs	r2, #4
 80052f8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        onstatechange(ifp);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fbf7 	bl	8004af0 <onstatechange>
 8005302:	e045      	b.n	8005390 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fecd 	bl	80050ac <getpeer>
 8005312:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03a      	beq.n	8005390 <rx_arp+0x200>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d032      	beq.n	8005390 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	33b0      	adds	r3, #176	@ 0xb0
 800532e:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f103 0018 	add.w	r0, r3, #24
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	3308      	adds	r3, #8
 800533c:	2206      	movs	r2, #6
 800533e:	4619      	mov	r1, r3
 8005340:	f024 fa85 	bl	802984e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8005344:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <rx_arp+0x208>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	dd15      	ble.n	8005378 <rx_arp+0x1e8>
 800534c:	4b13      	ldr	r3, [pc, #76]	@ (800539c <rx_arp+0x20c>)
 800534e:	f241 125a 	movw	r2, #4442	@ 0x115a
 8005352:	4913      	ldr	r1, [pc, #76]	@ (80053a0 <rx_arp+0x210>)
 8005354:	2003      	movs	r0, #3
 8005356:	f7fd fd6f 	bl	8002e38 <mg_log_prefix>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f103 021c 	add.w	r2, r3, #28
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	3318      	adds	r3, #24
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <rx_arp+0x214>)
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	4a0d      	ldr	r2, [pc, #52]	@ (80053a8 <rx_arp+0x218>)
 8005372:	480f      	ldr	r0, [pc, #60]	@ (80053b0 <rx_arp+0x220>)
 8005374:	f7fd fdb0 	bl	8002ed8 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800537e:	f36f 1304 	bfc	r3, #4, #1
 8005382:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f002 f92b 	bl	80075e2 <mac_resolved>
 800538c:	e000      	b.n	8005390 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800538e:	bf00      	nop
      }
    }
  }
}
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bdb0      	pop	{r4, r5, r7, pc}
 8005396:	bf00      	nop
 8005398:	24000000 	.word	0x24000000
 800539c:	08030bc4 	.word	0x08030bc4
 80053a0:	0802b5b0 	.word	0x0802b5b0
 80053a4:	08007fb9 	.word	0x08007fb9
 80053a8:	08007ef5 	.word	0x08007ef5
 80053ac:	0802c628 	.word	0x0802c628
 80053b0:	0802c640 	.word	0x0802c640

080053b4 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d14d      	bne.n	8005464 <rx_icmp+0xb0>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d049      	beq.n	8005464 <rx_icmp+0xb0>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d142      	bne.n	8005464 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 80053de:	2326      	movs	r3, #38	@ 0x26
 80053e0:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d901      	bls.n	80053fe <rx_icmp+0x4a>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	1d99      	adds	r1, r3, #6
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6898      	ldr	r0, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	3204      	adds	r2, #4
 8005412:	9201      	str	r2, [sp, #4]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	4603      	mov	r3, r0
 8005418:	2201      	movs	r2, #1
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fc12 	bl	8004c44 <tx_ip>
 8005420:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3314      	adds	r3, #20
 8005426:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8005428:	2204      	movs	r2, #4
 800542a:	2100      	movs	r1, #0
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f024 f949 	bl	80296c4 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1d18      	adds	r0, r3, #4
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	4619      	mov	r1, r3
 800543e:	f024 fa06 	bl	802984e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fa5d 	bl	8004908 <ipcsum>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fac2 	bl	80049e8 <ether_output>
  }
}
 8005464:	bf00      	nop
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b090      	sub	sp, #64	@ 0x40
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547c:	2300      	movs	r3, #0
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800549c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	33f0      	adds	r3, #240	@ 0xf0
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80054bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	f0c0 81ac 	bcc.w	800581c <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	1d18      	adds	r0, r3, #4
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3302      	adds	r3, #2
 80054ce:	2204      	movs	r2, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	f024 f8cd 	bl	8029670 <memcmp>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f040 81a1 	bne.w	8005820 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80054de:	e08a      	b.n	80055f6 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80054e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10e      	bne.n	8005506 <rx_dhcp_client+0x9a>
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ea:	3301      	adds	r3, #1
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d109      	bne.n	8005506 <rx_dhcp_client+0x9a>
 80054f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f4:	3306      	adds	r3, #6
 80054f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d904      	bls.n	8005506 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	3302      	adds	r3, #2
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
 8005504:	e070      	b.n	80055e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d112      	bne.n	8005534 <rx_dhcp_client+0xc8>
 800550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005510:	3301      	adds	r3, #1
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d10d      	bne.n	8005534 <rx_dhcp_client+0xc8>
 8005518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551a:	3306      	adds	r3, #6
 800551c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800551e:	429a      	cmp	r2, r3
 8005520:	d908      	bls.n	8005534 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 8005522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005524:	3302      	adds	r3, #2
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005532:	e059      	b.n	80055e8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	7fdb      	ldrb	r3, [r3, #31]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <rx_dhcp_client+0xf6>
 800553c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d10e      	bne.n	8005562 <rx_dhcp_client+0xf6>
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	3301      	adds	r3, #1
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d109      	bne.n	8005562 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800554e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005550:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8005552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005554:	429a      	cmp	r2, r3
 8005556:	d904      	bls.n	8005562 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	3302      	adds	r3, #2
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e042      	b.n	80055e8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <rx_dhcp_client+0x126>
 800556c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b2a      	cmp	r3, #42	@ 0x2a
 8005572:	d10e      	bne.n	8005592 <rx_dhcp_client+0x126>
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	3301      	adds	r3, #1
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d109      	bne.n	8005592 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800557e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005580:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8005582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d904      	bls.n	8005592 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558a:	3302      	adds	r3, #2
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e02a      	b.n	80055e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b33      	cmp	r3, #51	@ 0x33
 8005598:	d114      	bne.n	80055c4 <rx_dhcp_client+0x158>
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	3301      	adds	r3, #1
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d10f      	bne.n	80055c4 <rx_dhcp_client+0x158>
 80055a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a6:	3306      	adds	r3, #6
 80055a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d90a      	bls.n	80055c4 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 80055ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b0:	3302      	adds	r3, #2
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f00b fe0f 	bl	80111dc <mg_ntohl>
 80055be:	4603      	mov	r3, r0
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	e011      	b.n	80055e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80055c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b35      	cmp	r3, #53	@ 0x35
 80055ca:	d10d      	bne.n	80055e8 <rx_dhcp_client+0x17c>
 80055cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ce:	3301      	adds	r3, #1
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d108      	bne.n	80055e8 <rx_dhcp_client+0x17c>
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	3306      	adds	r3, #6
 80055da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d903      	bls.n	80055e8 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 80055e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e2:	789b      	ldrb	r3, [r3, #2]
 80055e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	3301      	adds	r3, #1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	3302      	adds	r3, #2
 80055f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055f2:	4413      	add	r3, r2
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	3301      	adds	r3, #1
 80055fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d904      	bls.n	800560a <rx_dhcp_client+0x19e>
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2bff      	cmp	r3, #255	@ 0xff
 8005606:	f47f af6b 	bne.w	80054e0 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800560a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800560e:	2b06      	cmp	r3, #6
 8005610:	d10c      	bne.n	800562c <rx_dhcp_client+0x1c0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005618:	429a      	cmp	r2, r3
 800561a:	d107      	bne.n	800562c <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	e0ec      	b.n	8005806 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800562c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005630:	2b02      	cmp	r3, #2
 8005632:	d123      	bne.n	800567c <rx_dhcp_client+0x210>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d11e      	bne.n	800567c <rx_dhcp_client+0x210>
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <rx_dhcp_client+0x210>
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <rx_dhcp_client+0x210>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	e002      	b.n	8005668 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	461a      	mov	r2, r3
 800566a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fc39 	bl	8004ee4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2202      	movs	r2, #2
 8005676:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800567a:	e0c4      	b.n	8005806 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800567c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005680:	2b05      	cmp	r3, #5
 8005682:	f040 80c0 	bne.w	8005806 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800568c:	2b02      	cmp	r3, #2
 800568e:	f040 8081 	bne.w	8005794 <rx_dhcp_client+0x328>
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d07d      	beq.n	8005794 <rx_dhcp_client+0x328>
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d07a      	beq.n	8005794 <rx_dhcp_client+0x328>
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d077      	beq.n	8005794 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80056aa:	6a39      	ldr	r1, [r7, #32]
 80056ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056b0:	fb00 f101 	mul.w	r1, r0, r1
 80056b4:	2000      	movs	r0, #0
 80056b6:	4688      	mov	r8, r1
 80056b8:	4681      	mov	r9, r0
 80056ba:	eb12 0108 	adds.w	r1, r2, r8
 80056be:	6039      	str	r1, [r7, #0]
 80056c0:	eb43 0309 	adc.w	r3, r3, r9
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056cc:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80056d0:	4b56      	ldr	r3, [pc, #344]	@ (800582c <rx_dhcp_client+0x3c0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	dd16      	ble.n	8005706 <rx_dhcp_client+0x29a>
 80056d8:	4b55      	ldr	r3, [pc, #340]	@ (8005830 <rx_dhcp_client+0x3c4>)
 80056da:	f241 129b 	movw	r2, #4507	@ 0x119b
 80056de:	4955      	ldr	r1, [pc, #340]	@ (8005834 <rx_dhcp_client+0x3c8>)
 80056e0:	2002      	movs	r0, #2
 80056e2:	f7fd fba9 	bl	8002e38 <mg_log_prefix>
 80056e6:	6a3c      	ldr	r4, [r7, #32]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80056ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	f7fa fe4b 	bl	8000390 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4621      	mov	r1, r4
 8005700:	484d      	ldr	r0, [pc, #308]	@ (8005838 <rx_dhcp_client+0x3cc>)
 8005702:	f7fd fbe9 	bl	8002ed8 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	3306      	adds	r3, #6
 8005712:	2206      	movs	r2, #6
 8005714:	4619      	mov	r1, r3
 8005716:	f024 f89a 	bl	802984e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2203      	movs	r2, #3
 8005730:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8005734:	f107 0310 	add.w	r3, r7, #16
 8005738:	2108      	movs	r1, #8
 800573a:	4618      	mov	r0, r3
 800573c:	f00c fc20 	bl	8011f80 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8005740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005744:	4614      	mov	r4, r2
 8005746:	f00c fc0d 	bl	8011f64 <mg_millis>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4613      	mov	r3, r2
 8005750:	4423      	add	r3, r4
 8005752:	4618      	mov	r0, r3
 8005754:	f023 f80c 	bl	8028770 <srand>
      if (ifp->enable_req_dns && dns != 0)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	7fdb      	ldrb	r3, [r3, #31]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <rx_dhcp_client+0x308>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 8005766:	f107 031c 	add.w	r3, r7, #28
 800576a:	461a      	mov	r2, r3
 800576c:	2101      	movs	r1, #1
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff f852 	bl	8004818 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d042      	beq.n	8005804 <rx_dhcp_client+0x398>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d03f      	beq.n	8005804 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8005784:	f107 0318 	add.w	r3, r7, #24
 8005788:	461a      	mov	r2, r3
 800578a:	2102      	movs	r1, #2
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff f843 	bl	8004818 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8005792:	e037      	b.n	8005804 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800579a:	2b04      	cmp	r3, #4
 800579c:	d133      	bne.n	8005806 <rx_dhcp_client+0x39a>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d12e      	bne.n	8005806 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80057ae:	6a39      	ldr	r1, [r7, #32]
 80057b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057b4:	fb00 f101 	mul.w	r1, r0, r1
 80057b8:	2000      	movs	r0, #0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4605      	mov	r5, r0
 80057be:	eb12 0a04 	adds.w	sl, r2, r4
 80057c2:	eb43 0b05 	adc.w	fp, r3, r5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80057cc:	4b17      	ldr	r3, [pc, #92]	@ (800582c <rx_dhcp_client+0x3c0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	dd18      	ble.n	8005806 <rx_dhcp_client+0x39a>
 80057d4:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <rx_dhcp_client+0x3c4>)
 80057d6:	f241 12a9 	movw	r2, #4521	@ 0x11a9
 80057da:	4916      	ldr	r1, [pc, #88]	@ (8005834 <rx_dhcp_client+0x3c8>)
 80057dc:	2002      	movs	r0, #2
 80057de:	f7fd fb2b 	bl	8002e38 <mg_log_prefix>
 80057e2:	6a3c      	ldr	r4, [r7, #32]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80057ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	f7fa fdcd 	bl	8000390 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4621      	mov	r1, r4
 80057fc:	480e      	ldr	r0, [pc, #56]	@ (8005838 <rx_dhcp_client+0x3cc>)
 80057fe:	f7fd fb6b 	bl	8002ed8 <mg_log>
 8005802:	e000      	b.n	8005806 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8005804:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800580c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005810:	429a      	cmp	r2, r3
 8005812:	d006      	beq.n	8005822 <rx_dhcp_client+0x3b6>
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff f96b 	bl	8004af0 <onstatechange>
 800581a:	e002      	b.n	8005822 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8005820:	bf00      	nop
}
 8005822:	3740      	adds	r7, #64	@ 0x40
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	24000000 	.word	0x24000000
 8005830:	08030bcc 	.word	0x08030bcc
 8005834:	0802b5b0 	.word	0x0802b5b0
 8005838:	0802c65c 	.word	0x0802c65c

0800583c <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005840:	b0d6      	sub	sp, #344	@ 0x158
 8005842:	af04      	add	r7, sp, #16
 8005844:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005848:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800584c:	6018      	str	r0, [r3, #0]
 800584e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005852:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005856:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800585e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005862:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	33f0      	adds	r3, #240	@ 0xf0
 800586c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8005870:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005874:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005880:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4413      	add	r3, r2
 800588a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800588e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005892:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800589e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f0c0 81b0 	bcc.w	8005c08 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80058a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80058ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80058b0:	4ad8      	ldr	r2, [pc, #864]	@ (8005c14 <rx_dhcp_server+0x3d8>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	4611      	mov	r1, r2
 80058b6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80058ba:	461a      	mov	r2, r3
 80058bc:	f023 ffc7 	bl	802984e <memcpy>
  res.yiaddr = ifp->ip;
 80058c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80058c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80058d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80058d4:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80058d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058da:	3310      	adds	r3, #16
 80058dc:	3303      	adds	r3, #3
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	3201      	adds	r2, #1
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80058e6:	e020      	b.n	800592a <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80058e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b35      	cmp	r3, #53	@ 0x35
 80058f0:	d111      	bne.n	8005916 <rx_dhcp_server+0xda>
 80058f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80058f6:	3301      	adds	r3, #1
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10b      	bne.n	8005916 <rx_dhcp_server+0xda>
 80058fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005902:	3302      	adds	r3, #2
 8005904:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8005908:	429a      	cmp	r2, r3
 800590a:	d904      	bls.n	8005916 <rx_dhcp_server+0xda>
      op = p[2];
 800590c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005910:	789b      	ldrb	r3, [r3, #2]
 8005912:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 8005916:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800591a:	3301      	adds	r3, #1
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	3302      	adds	r3, #2
 8005920:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8005924:	4413      	add	r3, r2
 8005926:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800592a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800592e:	3301      	adds	r3, #1
 8005930:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8005934:	429a      	cmp	r2, r3
 8005936:	d904      	bls.n	8005942 <rx_dhcp_server+0x106>
 8005938:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2bff      	cmp	r3, #255	@ 0xff
 8005940:	d1d2      	bne.n	80058e8 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8005942:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8005946:	2b01      	cmp	r3, #1
 8005948:	d004      	beq.n	8005954 <rx_dhcp_server+0x118>
 800594a:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800594e:	2b03      	cmp	r3, #3
 8005950:	f040 815b 	bne.w	8005c0a <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8005954:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <rx_dhcp_server+0x124>
 800595c:	2302      	movs	r3, #2
 800595e:	e000      	b.n	8005962 <rx_dhcp_server+0x126>
 8005960:	2305      	movs	r3, #5
 8005962:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 8005966:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800596a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800596e:	2235      	movs	r2, #53	@ 0x35
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005976:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800597a:	2201      	movs	r2, #1
 800597c:	705a      	strb	r2, [r3, #1]
 800597e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005982:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005986:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800598a:	709a      	strb	r2, [r3, #2]
 800598c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005990:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005994:	2201      	movs	r2, #1
 8005996:	70da      	strb	r2, [r3, #3]
 8005998:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800599c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059a0:	2204      	movs	r2, #4
 80059a2:	711a      	strb	r2, [r3, #4]
 80059a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059ac:	2200      	movs	r2, #0
 80059ae:	715a      	strb	r2, [r3, #5]
 80059b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059b8:	2200      	movs	r2, #0
 80059ba:	719a      	strb	r2, [r3, #6]
 80059bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059c4:	2200      	movs	r2, #0
 80059c6:	71da      	strb	r2, [r3, #7]
 80059c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059d0:	2200      	movs	r2, #0
 80059d2:	721a      	strb	r2, [r3, #8]
 80059d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059dc:	2236      	movs	r2, #54	@ 0x36
 80059de:	725a      	strb	r2, [r3, #9]
 80059e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059e8:	2204      	movs	r2, #4
 80059ea:	729a      	strb	r2, [r3, #10]
 80059ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80059f4:	2200      	movs	r2, #0
 80059f6:	72da      	strb	r2, [r3, #11]
 80059f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80059fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a00:	2200      	movs	r2, #0
 8005a02:	731a      	strb	r2, [r3, #12]
 8005a04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	735a      	strb	r2, [r3, #13]
 8005a10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	739a      	strb	r2, [r3, #14]
 8005a1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a24:	220c      	movs	r2, #12
 8005a26:	73da      	strb	r2, [r3, #15]
 8005a28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a30:	2203      	movs	r2, #3
 8005a32:	741a      	strb	r2, [r3, #16]
 8005a34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a3c:	226d      	movs	r2, #109	@ 0x6d
 8005a3e:	745a      	strb	r2, [r3, #17]
 8005a40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a48:	2269      	movs	r2, #105	@ 0x69
 8005a4a:	749a      	strb	r2, [r3, #18]
 8005a4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a54:	2270      	movs	r2, #112	@ 0x70
 8005a56:	74da      	strb	r2, [r3, #19]
 8005a58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a60:	2233      	movs	r2, #51	@ 0x33
 8005a62:	751a      	strb	r2, [r3, #20]
 8005a64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	755a      	strb	r2, [r3, #21]
 8005a70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a78:	22ff      	movs	r2, #255	@ 0xff
 8005a7a:	759a      	strb	r2, [r3, #22]
 8005a7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a84:	22ff      	movs	r2, #255	@ 0xff
 8005a86:	75da      	strb	r2, [r3, #23]
 8005a88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a90:	22ff      	movs	r2, #255	@ 0xff
 8005a92:	761a      	strb	r2, [r3, #24]
 8005a94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005a98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005a9c:	22ff      	movs	r2, #255	@ 0xff
 8005a9e:	765a      	strb	r2, [r3, #25]
 8005aa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005aa4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005aa8:	22ff      	movs	r2, #255	@ 0xff
 8005aaa:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8005aac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005ab0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	f103 011c 	add.w	r1, r3, #28
 8005abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ac0:	331c      	adds	r3, #28
 8005ac2:	2206      	movs	r2, #6
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f023 fec2 	bl	802984e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	3305      	adds	r3, #5
 8005ad0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005ad4:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	320c      	adds	r2, #12
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	330b      	adds	r3, #11
 8005ae6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005aea:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	3208      	adds	r2, #8
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 8005af6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005afa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005afe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8005b02:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8005b06:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8005b0a:	4615      	mov	r5, r2
 8005b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b14:	c403      	stmia	r4!, {r0, r1}
 8005b16:	8022      	strh	r2, [r4, #0]
 8005b18:	3402      	adds	r4, #2
 8005b1a:	0c13      	lsrs	r3, r2, #16
 8005b1c:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 8005b1e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b22:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8005b2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b36:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 8005b3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b3e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b50:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 8005b52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	7f9b      	ldrb	r3, [r3, #30]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01c      	beq.n	8005b9c <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 8005b62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b70:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8005b78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 8005b86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005b8a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	3306      	adds	r3, #6
 8005b94:	2206      	movs	r2, #6
 8005b96:	4619      	mov	r1, r3
 8005b98:	f023 fe59 	bl	802984e <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8005b9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005ba0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	1d9d      	adds	r5, r3, #6
 8005baa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005bae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689e      	ldr	r6, [r3, #8]
 8005bb6:	2043      	movs	r0, #67	@ 0x43
 8005bb8:	f00b fb29 	bl	801120e <mg_ntohs>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4698      	mov	r8, r3
 8005bc0:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d005      	beq.n	8005bd4 <rx_dhcp_server+0x398>
 8005bc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005bcc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005bd0:	691c      	ldr	r4, [r3, #16]
 8005bd2:	e001      	b.n	8005bd8 <rx_dhcp_server+0x39c>
 8005bd4:	f04f 34ff 	mov.w	r4, #4294967295
 8005bd8:	2044      	movs	r0, #68	@ 0x44
 8005bda:	f00b fb18 	bl	801120e <mg_ntohs>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
 8005be2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8005be6:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8005bea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bf4:	9302      	str	r3, [sp, #8]
 8005bf6:	9201      	str	r2, [sp, #4]
 8005bf8:	9400      	str	r4, [sp, #0]
 8005bfa:	4643      	mov	r3, r8
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	4629      	mov	r1, r5
 8005c00:	6800      	ldr	r0, [r0, #0]
 8005c02:	f7ff f876 	bl	8004cf2 <tx_udp>
 8005c06:	e000      	b.n	8005c0a <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8005c08:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8005c0a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c14:	0802c674 	.word	0x0802c674

08005c18 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	2201      	movs	r2, #1
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fa3e 	bl	80050ac <getpeer>
 8005c30:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d059      	beq.n	8005cec <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	331c      	adds	r3, #28
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	69d2      	ldr	r2, [r2, #28]
 8005c4c:	320c      	adds	r2, #12
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	33b0      	adds	r3, #176	@ 0xb0
 8005c56:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f103 0018 	add.w	r0, r3, #24
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	3306      	adds	r3, #6
 8005c64:	2206      	movs	r2, #6
 8005c66:	4619      	mov	r1, r3
 8005c68:	f023 fdf1 	bl	802984e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c74:	d304      	bcc.n	8005c80 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8005c76:	491f      	ldr	r1, [pc, #124]	@ (8005cf4 <rx_udp+0xdc>)
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7fb fee5 	bl	8001a48 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8005c7e:	e035      	b.n	8005cec <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d212      	bcs.n	8005cb8 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7fc ff62 	bl	8002b6c <mg_iobuf_resize>
 8005ca8:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <rx_udp+0xa0>
      mg_error(c, "oom");
 8005cae:	4912      	ldr	r1, [pc, #72]	@ (8005cf8 <rx_udp+0xe0>)
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7fb fec9 	bl	8001a48 <mg_error>
}
 8005cb6:	e019      	b.n	8005cec <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	18d0      	adds	r0, r2, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f023 fdbf 	bl	802984e <memcpy>
      c->recv.len += pkt->pay.len;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	441a      	add	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2107      	movs	r1, #7
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7fb fe8e 	bl	8001a08 <mg_call>
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	0802c784 	.word	0x0802c784
 8005cf8:	0802c7a0 	.word	0x0802c7a0

08005cfc <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8005cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfe:	b091      	sub	sp, #68	@ 0x44
 8005d00:	af06      	add	r7, sp, #24
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d10:	3314      	adds	r3, #20
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	2206      	movs	r2, #6
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7fe ff90 	bl	8004c44 <tx_ip>
 8005d24:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	3314      	adds	r3, #20
 8005d2a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8005d2c:	2214      	movs	r2, #20
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6a38      	ldr	r0, [r7, #32]
 8005d32:	f023 fcc7 	bl	80296c4 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8005d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <tx_tcp+0x54>
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <tx_tcp+0x54>
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	3314      	adds	r3, #20
 8005d46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f023 fca0 	bl	8029690 <memmove>
  tcp->sport = sport;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005d56:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8005d5e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d64:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d6a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 8005d72:	f241 7070 	movw	r0, #6000	@ 0x1770
 8005d76:	f00b fa4a 	bl	801120e <mg_ntohs>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2250      	movs	r2, #80	@ 0x50
 8005d86:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3314      	adds	r3, #20
 8005d92:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8005d94:	2300      	movs	r3, #0
 8005d96:	753b      	strb	r3, [r7, #20]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	7a5b      	ldrb	r3, [r3, #9]
 8005d9c:	757b      	strb	r3, [r7, #21]
 8005d9e:	8b7b      	ldrh	r3, [r7, #26]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	75bb      	strb	r3, [r7, #22]
 8005da8:	8b7b      	ldrh	r3, [r7, #26]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 8005dae:	8b7b      	ldrh	r3, [r7, #26]
 8005db0:	461a      	mov	r2, r3
 8005db2:	6a39      	ldr	r1, [r7, #32]
 8005db4:	69f8      	ldr	r0, [r7, #28]
 8005db6:	f7fe fd61 	bl	800487c <csumup>
 8005dba:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	69f8      	ldr	r0, [r7, #28]
 8005dc6:	f7fe fd59 	bl	800487c <csumup>
 8005dca:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	3310      	adds	r3, #16
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	69f8      	ldr	r0, [r7, #28]
 8005dd6:	f7fe fd51 	bl	800487c <csumup>
 8005dda:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	2204      	movs	r2, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	69f8      	ldr	r0, [r7, #28]
 8005de6:	f7fe fd49 	bl	800487c <csumup>
 8005dea:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8005dec:	69f8      	ldr	r0, [r7, #28]
 8005dee:	f7fe fd70 	bl	80048d2 <csumfin>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8005dfa:	4b21      	ldr	r3, [pc, #132]	@ (8005e80 <tx_tcp+0x184>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	dd2c      	ble.n	8005e5c <tx_tcp+0x160>
 8005e02:	4b20      	ldr	r3, [pc, #128]	@ (8005e84 <tx_tcp+0x188>)
 8005e04:	f241 220e 	movw	r2, #4622	@ 0x120e
 8005e08:	491f      	ldr	r1, [pc, #124]	@ (8005e88 <tx_tcp+0x18c>)
 8005e0a:	2004      	movs	r0, #4
 8005e0c:	f7fd f814 	bl	8002e38 <mg_log_prefix>
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	f103 050c 	add.w	r5, r3, #12
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f00b f9f6 	bl	801120e <mg_ntohs>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461e      	mov	r6, r3
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	f103 0410 	add.w	r4, r3, #16
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4618      	mov	r0, r3
 8005e34:	f00b f9eb 	bl	801120e <mg_ntohs>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	7b5b      	ldrb	r3, [r3, #13]
 8005e40:	4619      	mov	r1, r3
 8005e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	9103      	str	r1, [sp, #12]
 8005e48:	9202      	str	r2, [sp, #8]
 8005e4a:	9401      	str	r4, [sp, #4]
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <tx_tcp+0x190>)
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4633      	mov	r3, r6
 8005e52:	462a      	mov	r2, r5
 8005e54:	490d      	ldr	r1, [pc, #52]	@ (8005e8c <tx_tcp+0x190>)
 8005e56:	480e      	ldr	r0, [pc, #56]	@ (8005e90 <tx_tcp+0x194>)
 8005e58:	f7fd f83e 	bl	8002ed8 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f103 0214 	add.w	r2, r3, #20
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fe fdb9 	bl	80049e8 <ether_output>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	372c      	adds	r7, #44	@ 0x2c
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e80:	24000000 	.word	0x24000000
 8005e84:	08030bdc 	.word	0x08030bdc
 8005e88:	0802b5b0 	.word	0x0802b5b0
 8005e8c:	08007ef5 	.word	0x08007ef5
 8005e90:	0802c7a4 	.word	0x0802c7a4

08005e94 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8005e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e98:	b08c      	sub	sp, #48	@ 0x30
 8005e9a:	af06      	add	r7, sp, #24
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	7b5b      	ldrb	r3, [r3, #13]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	1d9e      	adds	r6, r3, #6
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	885b      	ldrh	r3, [r3, #2]
 8005ed0:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f00b f97b 	bl	80111dc <mg_ntohl>
 8005ee6:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f00b f975 	bl	80111dc <mg_ntohl>
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	79fa      	ldrb	r2, [r7, #7]
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef8:	9305      	str	r3, [sp, #20]
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	9304      	str	r3, [sp, #16]
 8005efe:	9103      	str	r1, [sp, #12]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	9302      	str	r3, [sp, #8]
 8005f04:	9501      	str	r5, [sp, #4]
 8005f06:	9400      	str	r4, [sp, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff fef4 	bl	8005cfc <tx_tcp>
 8005f14:	4603      	mov	r3, r0
                buf, len);
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f20 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fae7 	bl	8004502 <mg_alloc_conn>
 8005f34:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10f      	bne.n	8005f5c <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 8005f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8006078 <accept_conn+0x158>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dd09      	ble.n	8005f58 <accept_conn+0x38>
 8005f44:	4b4d      	ldr	r3, [pc, #308]	@ (800607c <accept_conn+0x15c>)
 8005f46:	f241 2222 	movw	r2, #4642	@ 0x1222
 8005f4a:	494d      	ldr	r1, [pc, #308]	@ (8006080 <accept_conn+0x160>)
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	f7fc ff73 	bl	8002e38 <mg_log_prefix>
 8005f52:	484c      	ldr	r0, [pc, #304]	@ (8006084 <accept_conn+0x164>)
 8005f54:	f7fc ffc0 	bl	8002ed8 <mg_log>
    return NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e088      	b.n	800606e <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	33b0      	adds	r3, #176	@ 0xb0
 8005f60:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f00b f937 	bl	80111dc <mg_ntohl>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f00b f92e 	bl	80111dc <mg_ntohl>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f103 0018 	add.w	r0, r3, #24
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	3306      	adds	r3, #6
 8005f92:	2206      	movs	r2, #6
 8005f94:	4619      	mov	r1, r3
 8005f96:	f023 fc5a 	bl	802984e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7fe fcc7 	bl	8004930 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	331c      	adds	r3, #28
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	69d2      	ldr	r2, [r2, #28]
 8005faa:	320c      	adds	r2, #12
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8005fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <accept_conn+0x158>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	dd0e      	ble.n	8005fe2 <accept_conn+0xc2>
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800607c <accept_conn+0x15c>)
 8005fc6:	f241 222b 	movw	r2, #4651	@ 0x122b
 8005fca:	492d      	ldr	r1, [pc, #180]	@ (8006080 <accept_conn+0x160>)
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f7fc ff33 	bl	8002e38 <mg_log_prefix>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	331c      	adds	r3, #28
 8005fda:	4a2b      	ldr	r2, [pc, #172]	@ (8006088 <accept_conn+0x168>)
 8005fdc:	482b      	ldr	r0, [pc, #172]	@ (800608c <accept_conn+0x16c>)
 8005fde:	f7fc ff7b 	bl	8002ed8 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006008:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800600c:	b2d9      	uxtb	r1, r3
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006014:	f361 03c3 	bfi	r3, r1, #3, #1
 8006018:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f102 0408 	add.w	r4, r2, #8
 8006030:	f103 0508 	add.w	r5, r3, #8
 8006034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8006058:	2200      	movs	r2, #0
 800605a:	2101      	movs	r1, #1
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7fb fcd3 	bl	8001a08 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8006062:	2200      	movs	r2, #0
 8006064:	2105      	movs	r1, #5
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7fb fcce 	bl	8001a08 <mg_call>
  return c;
 800606c:	68fb      	ldr	r3, [r7, #12]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bdb0      	pop	{r4, r5, r7, pc}
 8006076:	bf00      	nop
 8006078:	24000000 	.word	0x24000000
 800607c:	08030be4 	.word	0x08030be4
 8006080:	0802b5b0 	.word	0x0802b5b0
 8006084:	0802c3d8 	.word	0x0802c3d8
 8006088:	08007f6d 	.word	0x08007f6d
 800608c:	0802c7c8 	.word	0x0802c7c8

08006090 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	@ 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 80060a2:	230e      	movs	r3, #14
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	2318      	movs	r3, #24
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	233c      	movs	r3, #60	@ 0x3c
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	2308      	movs	r3, #8
 80060b0:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	441a      	add	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <trim_len+0x3c>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	e000      	b.n	80060ce <trim_len+0x3e>
 80060cc:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 80060ce:	4413      	add	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <trim_len+0x5a>
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	e000      	b.n	80060ec <trim_len+0x5c>
 80060ea:	2344      	movs	r3, #68	@ 0x44
 80060ec:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	441a      	add	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d904      	bls.n	8006106 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800610c:	461a      	mov	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4293      	cmp	r3, r2
 8006112:	d913      	bls.n	800613c <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8006114:	4b20      	ldr	r3, [pc, #128]	@ (8006198 <trim_len+0x108>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dd0a      	ble.n	8006132 <trim_len+0xa2>
 800611c:	4b1f      	ldr	r3, [pc, #124]	@ (800619c <trim_len+0x10c>)
 800611e:	f241 2246 	movw	r2, #4678	@ 0x1246
 8006122:	491f      	ldr	r1, [pc, #124]	@ (80061a0 <trim_len+0x110>)
 8006124:	2001      	movs	r0, #1
 8006126:	f7fc fe87 	bl	8002e38 <mg_log_prefix>
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	481d      	ldr	r0, [pc, #116]	@ (80061a4 <trim_len+0x114>)
 800612e:	f7fc fed3 	bl	8002ed8 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	b29a      	uxth	r2, r3
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	441a      	add	r2, r3
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 800614c:	4293      	cmp	r3, r2
 800614e:	d91e      	bls.n	800618e <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006156:	461a      	mov	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	4413      	add	r3, r2
 8006160:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8006172:	4b09      	ldr	r3, [pc, #36]	@ (8006198 <trim_len+0x108>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd09      	ble.n	800618e <trim_len+0xfe>
 800617a:	4b08      	ldr	r3, [pc, #32]	@ (800619c <trim_len+0x10c>)
 800617c:	f241 224d 	movw	r2, #4685	@ 0x124d
 8006180:	4907      	ldr	r1, [pc, #28]	@ (80061a0 <trim_len+0x110>)
 8006182:	2001      	movs	r0, #1
 8006184:	f7fc fe58 	bl	8002e38 <mg_log_prefix>
 8006188:	4807      	ldr	r0, [pc, #28]	@ (80061a8 <trim_len+0x118>)
 800618a:	f7fc fea5 	bl	8002ed8 <mg_log>
    }
  }

  return len;
 800618e:	683b      	ldr	r3, [r7, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3728      	adds	r7, #40	@ 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	24000000 	.word	0x24000000
 800619c:	08030bf0 	.word	0x08030bf0
 80061a0:	0802b5b0 	.word	0x0802b5b0
 80061a4:	0802c7d8 	.word	0x0802c7d8
 80061a8:	0802c804 	.word	0x0802c804

080061ac <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	b08f      	sub	sp, #60	@ 0x3c
 80061b0:	af06      	add	r7, sp, #24
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061be:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	33b0      	adds	r3, #176	@ 0xb0
 80061c4:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	331c      	adds	r3, #28
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff5d 	bl	8006090 <trim_len>
 80061d6:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d015      	beq.n	8006214 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f103 0118 	add.w	r1, r3, #24
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	6898      	ldr	r0, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8b1c      	ldrh	r4, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	9202      	str	r2, [sp, #8]
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4623      	mov	r3, r4
 800620a:	4602      	mov	r2, r0
 800620c:	69f8      	ldr	r0, [r7, #28]
 800620e:	f7fe fd70 	bl	8004cf2 <tx_udp>
 8006212:	e03d      	b.n	8006290 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f103 0618 	add.w	r6, r3, #24
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8b1c      	ldrh	r4, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f00a ffd8 	bl	80111dc <mg_ntohl>
 800622c:	6038      	str	r0, [r7, #0]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	f00a ffd2 	bl	80111dc <mg_ntohl>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	9203      	str	r2, [sp, #12]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	9302      	str	r3, [sp, #8]
 8006248:	9501      	str	r5, [sp, #4]
 800624a:	9400      	str	r4, [sp, #0]
 800624c:	2318      	movs	r3, #24
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4631      	mov	r1, r6
 8006252:	69f8      	ldr	r0, [r7, #28]
 8006254:	f7ff fd52 	bl	8005cfc <tx_tcp>
 8006258:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <mg_io_send+0xba>
      return MG_IO_WAIT;
 8006260:	f06f 0301 	mvn.w	r3, #1
 8006264:	e015      	b.n	8006292 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d102      	bne.n	8006274 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	e00e      	b.n	8006292 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	441a      	add	r2, r3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	7f9b      	ldrb	r3, [r3, #30]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d103      	bne.n	8006290 <mg_io_send+0xe4>
 8006288:	2100      	movs	r1, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7fe fb50 	bl	8004930 <settmout>
    }
  }
  return (long) len;
 8006290:	687b      	ldr	r3, [r7, #4]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3724      	adds	r7, #36	@ 0x24
 8006296:	46bd      	mov	sp, r7
 8006298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800629c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	18d1      	adds	r1, r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f005 fcea 	bl	800bc96 <mg_tls_recv>
 80062c2:	4603      	mov	r3, r0
 80062c4:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d104      	bne.n	80062d8 <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 80062ce:	490c      	ldr	r1, [pc, #48]	@ (8006300 <handle_tls_recv+0x64>)
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fb fbb9 	bl	8001a48 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 80062d6:	e00f      	b.n	80062f8 <handle_tls_recv+0x5c>
  } else if (n > 0) {
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dd0c      	ble.n	80062f8 <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	441a      	add	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	461a      	mov	r2, r3
 80062f0:	2107      	movs	r1, #7
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fb88 	bl	8001a08 <mg_call>
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	0802c830 	.word	0x0802c830

08006304 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006308:	b090      	sub	sp, #64	@ 0x40
 800630a:	af06      	add	r7, sp, #24
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	33b0      	adds	r3, #176	@ 0xb0
 8006314:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <read_conn+0x28>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3368      	adds	r3, #104	@ 0x68
 800632a:	e001      	b.n	8006330 <read_conn+0x2c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3338      	adds	r3, #56	@ 0x38
 8006330:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4618      	mov	r0, r3
 800633a:	f00a ff4f 	bl	80111dc <mg_ntohl>
 800633e:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	331c      	adds	r3, #28
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	7b5b      	ldrb	r3, [r3, #13]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d070      	beq.n	8006438 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 8006356:	2310      	movs	r3, #16
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	f00a ff3a 	bl	80111dc <mg_ntohl>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4413      	add	r3, r2
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01e      	beq.n	80063c4 <read_conn+0xc0>
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	7f9b      	ldrb	r3, [r3, #30]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d11a      	bne.n	80063c4 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	681c      	ldr	r4, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4618      	mov	r0, r3
 800639a:	f00a ff1f 	bl	80111dc <mg_ntohl>
 800639e:	4603      	mov	r3, r0
 80063a0:	429c      	cmp	r4, r3
 80063a2:	d105      	bne.n	80063b0 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 80063ae:	e01a      	b.n	80063e6 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f00a ff10 	bl	80111dc <mg_ntohl>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 80063c2:	e010      	b.n	80063e6 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 80063c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80063d6:	f043 0310 	orr.w	r3, r3, #16
 80063da:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80063de:	2104      	movs	r1, #4
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7fe faa5 	bl	8004930 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	f103 0818 	add.w	r8, r3, #24
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8b1c      	ldrh	r4, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f00a feea 	bl	80111dc <mg_ntohl>
 8006408:	6038      	str	r0, [r7, #0]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f00a fee4 	bl	80111dc <mg_ntohl>
 8006414:	4602      	mov	r2, r0
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800641a:	2100      	movs	r1, #0
 800641c:	9105      	str	r1, [sp, #20]
 800641e:	4990      	ldr	r1, [pc, #576]	@ (8006660 <read_conn+0x35c>)
 8006420:	9104      	str	r1, [sp, #16]
 8006422:	9203      	str	r2, [sp, #12]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	9102      	str	r1, [sp, #8]
 8006428:	9501      	str	r5, [sp, #4]
 800642a:	9400      	str	r4, [sp, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4641      	mov	r1, r8
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff fc63 	bl	8005cfc <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8006436:	e173      	b.n	8006720 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 816f 	beq.w	8006720 <read_conn+0x41c>
  } else if (seq != s->ack) {
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d059      	beq.n	8006500 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4618      	mov	r0, r3
 8006454:	f00a fec2 	bl	80111dc <mg_ntohl>
 8006458:	4602      	mov	r2, r0
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	4413      	add	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d10f      	bne.n	800648c <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800646c:	4b7d      	ldr	r3, [pc, #500]	@ (8006664 <read_conn+0x360>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b03      	cmp	r3, #3
 8006472:	f340 8155 	ble.w	8006720 <read_conn+0x41c>
 8006476:	4b7c      	ldr	r3, [pc, #496]	@ (8006668 <read_conn+0x364>)
 8006478:	f241 2294 	movw	r2, #4756	@ 0x1294
 800647c:	497b      	ldr	r1, [pc, #492]	@ (800666c <read_conn+0x368>)
 800647e:	2004      	movs	r0, #4
 8006480:	f7fc fcda 	bl	8002e38 <mg_log_prefix>
 8006484:	487a      	ldr	r0, [pc, #488]	@ (8006670 <read_conn+0x36c>)
 8006486:	f7fc fd27 	bl	8002ed8 <mg_log>
}
 800648a:	e149      	b.n	8006720 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800648c:	4b75      	ldr	r3, [pc, #468]	@ (8006664 <read_conn+0x360>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b03      	cmp	r3, #3
 8006492:	dd0d      	ble.n	80064b0 <read_conn+0x1ac>
 8006494:	4b74      	ldr	r3, [pc, #464]	@ (8006668 <read_conn+0x364>)
 8006496:	f241 2296 	movw	r2, #4758	@ 0x1296
 800649a:	4974      	ldr	r1, [pc, #464]	@ (800666c <read_conn+0x368>)
 800649c:	2004      	movs	r0, #4
 800649e:	f7fc fccb 	bl	8002e38 <mg_log_prefix>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	4872      	ldr	r0, [pc, #456]	@ (8006674 <read_conn+0x370>)
 80064ac:	f7fc fd14 	bl	8002ed8 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f103 0818 	add.w	r8, r3, #24
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8b1c      	ldrh	r4, [r3, #24]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f00a fe85 	bl	80111dc <mg_ntohl>
 80064d2:	6038      	str	r0, [r7, #0]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4618      	mov	r0, r3
 80064da:	f00a fe7f 	bl	80111dc <mg_ntohl>
 80064de:	4603      	mov	r3, r0
 80064e0:	2200      	movs	r2, #0
 80064e2:	9205      	str	r2, [sp, #20]
 80064e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006660 <read_conn+0x35c>)
 80064e6:	9204      	str	r2, [sp, #16]
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	9102      	str	r1, [sp, #8]
 80064ee:	9501      	str	r5, [sp, #4]
 80064f0:	9400      	str	r4, [sp, #0]
 80064f2:	2310      	movs	r3, #16
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4641      	mov	r1, r8
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff fbff 	bl	8005cfc <tx_tcp>
}
 80064fe:	e10f      	b.n	8006720 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d210      	bcs.n	8006534 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4413      	add	r3, r2
 800651c:	4619      	mov	r1, r3
 800651e:	69f8      	ldr	r0, [r7, #28]
 8006520:	f7fc fb24 	bl	8002b6c <mg_iobuf_resize>
 8006524:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <read_conn+0x230>
    mg_error(c, "oom");
 800652a:	4953      	ldr	r1, [pc, #332]	@ (8006678 <read_conn+0x374>)
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7fb fa8b 	bl	8001a48 <mg_error>
 8006532:	e0f5      	b.n	8006720 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	18d0      	adds	r0, r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	461a      	mov	r2, r3
 8006548:	f023 f981 	bl	802984e <memcpy>
    io->len += pkt->pay.len;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	441a      	add	r2, r3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800655a:	4b42      	ldr	r3, [pc, #264]	@ (8006664 <read_conn+0x360>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b03      	cmp	r3, #3
 8006560:	dd15      	ble.n	800658e <read_conn+0x28a>
 8006562:	4b41      	ldr	r3, [pc, #260]	@ (8006668 <read_conn+0x364>)
 8006564:	f241 22a7 	movw	r2, #4775	@ 0x12a7
 8006568:	4940      	ldr	r1, [pc, #256]	@ (800666c <read_conn+0x368>)
 800656a:	2004      	movs	r0, #4
 800656c:	f7fc fc64 	bl	8002e38 <mg_log_prefix>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4618      	mov	r0, r3
 800657c:	f00a fe2e 	bl	80111dc <mg_ntohl>
 8006580:	4602      	mov	r2, r0
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4621      	mov	r1, r4
 8006588:	483c      	ldr	r0, [pc, #240]	@ (800667c <read_conn+0x378>)
 800658a:	f7fc fca5 	bl	8002ed8 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4618      	mov	r0, r3
 8006596:	f00a fe21 	bl	80111dc <mg_ntohl>
 800659a:	4602      	mov	r2, r0
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	441a      	add	r2, r3
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	441a      	add	r2, r3
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80065bc:	4293      	cmp	r3, r2
 80065be:	d961      	bls.n	8006684 <read_conn+0x380>
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d05b      	beq.n	8006684 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80065cc:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <read_conn+0x360>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	dd0e      	ble.n	80065f2 <read_conn+0x2ee>
 80065d4:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <read_conn+0x364>)
 80065d6:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 80065da:	4924      	ldr	r1, [pc, #144]	@ (800666c <read_conn+0x368>)
 80065dc:	2004      	movs	r0, #4
 80065de:	f7fc fc2b 	bl	8002e38 <mg_log_prefix>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	461a      	mov	r2, r3
 80065ec:	4824      	ldr	r0, [pc, #144]	@ (8006680 <read_conn+0x37c>)
 80065ee:	f7fc fc73 	bl	8002ed8 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f103 0818 	add.w	r8, r3, #24
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8b1c      	ldrh	r4, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f00a fde4 	bl	80111dc <mg_ntohl>
 8006614:	6038      	str	r0, [r7, #0]
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	f00a fdde 	bl	80111dc <mg_ntohl>
 8006620:	4603      	mov	r3, r0
 8006622:	2200      	movs	r2, #0
 8006624:	9205      	str	r2, [sp, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	9204      	str	r2, [sp, #16]
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	9102      	str	r1, [sp, #8]
 8006630:	9501      	str	r5, [sp, #4]
 8006632:	9400      	str	r4, [sp, #0]
 8006634:	2310      	movs	r3, #16
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4641      	mov	r1, r8
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff fb5e 	bl	8005cfc <tx_tcp>
      s->unacked = 0;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2200      	movs	r2, #0
 8006644:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	7f9b      	ldrb	r3, [r3, #30]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01e      	beq.n	8006694 <read_conn+0x390>
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7fe f969 	bl	8004930 <settmout>
 800665e:	e019      	b.n	8006694 <read_conn+0x390>
 8006660:	0802bc78 	.word	0x0802bc78
 8006664:	24000000 	.word	0x24000000
 8006668:	08030bfc 	.word	0x08030bfc
 800666c:	0802b5b0 	.word	0x0802b5b0
 8006670:	0802c840 	.word	0x0802c840
 8006674:	0802c858 	.word	0x0802c858
 8006678:	0802c7a0 	.word	0x0802c7a0
 800667c:	0802c870 	.word	0x0802c870
 8006680:	0802c884 	.word	0x0802c884
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	7f9b      	ldrb	r3, [r3, #30]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d003      	beq.n	8006694 <read_conn+0x390>
 800668c:	2101      	movs	r1, #1
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7fe f94e 	bl	8004930 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800669a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <read_conn+0x3b8>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80066aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <read_conn+0x3b8>
      mg_tls_handshake(c);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f005 fa6b 	bl	800bb90 <mg_tls_handshake>
 80066ba:	e031      	b.n	8006720 <read_conn+0x41c>
    } else if (c->is_tls) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d021      	beq.n	8006710 <read_conn+0x40c>
      io = &c->recv;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3338      	adds	r3, #56	@ 0x38
 80066d0:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d210      	bcs.n	8006706 <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	4619      	mov	r1, r3
 80066f0:	69f8      	ldr	r0, [r7, #28]
 80066f2:	f7fc fa3b 	bl	8002b6c <mg_iobuf_resize>
 80066f6:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <read_conn+0x402>
        mg_error(c, "oom");
 80066fc:	490b      	ldr	r1, [pc, #44]	@ (800672c <read_conn+0x428>)
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7fb f9a2 	bl	8001a48 <mg_error>
 8006704:	e00c      	b.n	8006720 <read_conn+0x41c>
        handle_tls_recv(c, io);
 8006706:	69f9      	ldr	r1, [r7, #28]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff fdc7 	bl	800629c <handle_tls_recv>
}
 800670e:	e007      	b.n	8006720 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	330c      	adds	r3, #12
 8006714:	461a      	mov	r2, r3
 8006716:	2107      	movs	r1, #7
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7fb f975 	bl	8001a08 <mg_call>
}
 800671e:	e7ff      	b.n	8006720 <read_conn+0x41c>
 8006720:	bf00      	nop
 8006722:	3728      	adds	r7, #40	@ 0x28
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672a:	bf00      	nop
 800672c:	0802c7a0 	.word	0x0802c7a0

08006730 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b089      	sub	sp, #36	@ 0x24
 8006734:	af02      	add	r7, sp, #8
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	2200      	movs	r2, #0
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fcb2 	bl	80050ac <getpeer>
 8006748:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <rx_tcp+0x26>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	33b0      	adds	r3, #176	@ 0xb0
 8006754:	e000      	b.n	8006758 <rx_tcp+0x28>
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d048      	beq.n	80067f2 <rx_tcp+0xc2>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d040      	beq.n	80067f2 <rx_tcp+0xc2>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006774:	7b5b      	ldrb	r3, [r3, #13]
 8006776:	2b12      	cmp	r3, #18
 8006778:	d13b      	bne.n	80067f2 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	4618      	mov	r0, r3
 8006782:	f00a fd2b 	bl	80111dc <mg_ntohl>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	4618      	mov	r0, r3
 8006794:	f00a fd22 	bl	80111dc <mg_ntohl>
 8006798:	4603      	mov	r3, r0
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	9200      	str	r2, [sp, #0]
 80067ae:	2210      	movs	r2, #16
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fb6e 	bl	8005e94 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80067be:	f36f 1345 	bfc	r3, #5, #1
 80067c2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80067c6:	2100      	movs	r1, #0
 80067c8:	6978      	ldr	r0, [r7, #20]
 80067ca:	f7fe f8b1 	bl	8004930 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 80067ce:	2200      	movs	r2, #0
 80067d0:	2104      	movs	r1, #4
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	f7fb f918 	bl	8001a08 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80067de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80cd 	beq.w	8006984 <rx_tcp+0x254>
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f005 f9d0 	bl	800bb90 <mg_tls_handshake>
 80067f0:	e0c8      	b.n	8006984 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d019      	beq.n	800682c <rx_tcp+0xfc>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d011      	beq.n	800682c <rx_tcp+0xfc>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	7b5b      	ldrb	r3, [r3, #13]
 800680e:	2b10      	cmp	r3, #16
 8006810:	d00c      	beq.n	800682c <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	9201      	str	r2, [sp, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	9200      	str	r2, [sp, #0]
 8006820:	2214      	movs	r2, #20
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff fb35 	bl	8005e94 <tx_tcp_pkt>
 800682a:	e0ab      	b.n	8006984 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <rx_tcp+0x11a>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	7b5b      	ldrb	r3, [r3, #13]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8006840:	4952      	ldr	r1, [pc, #328]	@ (800698c <rx_tcp+0x25c>)
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7fb f900 	bl	8001a48 <mg_error>
 8006848:	e09c      	b.n	8006984 <rx_tcp+0x254>
  } else if (c != NULL) {
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2200      	movs	r2, #0
 8006854:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	7f9b      	ldrb	r3, [r3, #30]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <rx_tcp+0x136>
      settmout(c,
 800685e:	2100      	movs	r1, #0
 8006860:	6978      	ldr	r0, [r7, #20]
 8006862:	f7fe f865 	bl	8004930 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6978      	ldr	r0, [r7, #20]
 800686a:	f7ff fd4b 	bl	8006304 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800686e:	e089      	b.n	8006984 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	2201      	movs	r2, #1
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fc17 	bl	80050ac <getpeer>
 800687e:	6178      	str	r0, [r7, #20]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2200      	movs	r2, #0
 800688e:	9201      	str	r2, [sp, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	9200      	str	r2, [sp, #0]
 8006894:	2214      	movs	r2, #20
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fafb 	bl	8005e94 <tx_tcp_pkt>
}
 800689e:	e071      	b.n	8006984 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	7b5b      	ldrb	r3, [r3, #13]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d062      	beq.n	8006984 <rx_tcp+0x254>
 80068be:	4933      	ldr	r1, [pc, #204]	@ (800698c <rx_tcp+0x25c>)
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f7fb f8c1 	bl	8001a48 <mg_error>
}
 80068c6:	e05d      	b.n	8006984 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	7b5b      	ldrb	r3, [r3, #13]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4618      	mov	r0, r3
 80068e0:	f00a fc95 	bl	801120e <mg_ntohs>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f00a fc78 	bl	80111dc <mg_ntohl>
 80068ec:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 80068ee:	2300      	movs	r3, #0
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	2300      	movs	r3, #0
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2212      	movs	r2, #18
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fac9 	bl	8005e94 <tx_tcp_pkt>
}
 8006902:	e03f      	b.n	8006984 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	7b5b      	ldrb	r3, [r3, #13]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00c      	beq.n	800692c <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	9200      	str	r2, [sp, #0]
 8006920:	2211      	movs	r2, #17
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fab5 	bl	8005e94 <tx_tcp_pkt>
}
 800692a:	e02b      	b.n	8006984 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f00a fc52 	bl	80111dc <mg_ntohl>
 8006938:	4604      	mov	r4, r0
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	4618      	mov	r0, r3
 8006944:	f00a fc63 	bl	801120e <mg_ntohs>
 8006948:	4603      	mov	r3, r0
 800694a:	3301      	adds	r3, #1
 800694c:	429c      	cmp	r4, r3
 800694e:	d104      	bne.n	800695a <rx_tcp+0x22a>
    accept_conn(c, pkt);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f7ff fae4 	bl	8005f20 <accept_conn>
}
 8006958:	e014      	b.n	8006984 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10c      	bne.n	8006984 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	9200      	str	r2, [sp, #0]
 8006978:	2214      	movs	r2, #20
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fa89 	bl	8005e94 <tx_tcp_pkt>
}
 8006982:	e7ff      	b.n	8006984 <rx_tcp+0x254>
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd90      	pop	{r4, r7, pc}
 800698c:	0802c894 	.word	0x0802c894

08006990 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	b08b      	sub	sp, #44	@ 0x2c
 8006994:	af04      	add	r7, sp, #16
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	88db      	ldrh	r3, [r3, #6]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4618      	mov	r0, r3
 80069a4:	f00a fc33 	bl	801120e <mg_ntohs>
 80069a8:	4603      	mov	r3, r0
 80069aa:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 80069ac:	8afb      	ldrh	r3, [r7, #22]
 80069ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <rx_ip+0x30>
 80069b6:	8afb      	ldrh	r3, [r7, #22]
 80069b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d026      	beq.n	8006a0e <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	7a5b      	ldrb	r3, [r3, #9]
 80069c6:	2b11      	cmp	r3, #17
 80069c8:	d105      	bne.n	80069d6 <rx_ip+0x46>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f103 0214 	add.w	r2, r3, #20
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	7a5b      	ldrb	r3, [r3, #9]
 80069dc:	2b06      	cmp	r3, #6
 80069de:	d105      	bne.n	80069ec <rx_ip+0x5c>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f103 0214 	add.w	r2, r3, #20
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fb59 	bl	80050ac <getpeer>
 80069fa:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 811b 	beq.w	8006c3a <rx_ip+0x2aa>
 8006a04:	4992      	ldr	r1, [pc, #584]	@ (8006c50 <rx_ip+0x2c0>)
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7fb f81e 	bl	8001a48 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8006a0c:	e115      	b.n	8006c3a <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	7a5b      	ldrb	r3, [r3, #9]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d116      	bne.n	8006a46 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f103 0214 	add.w	r2, r3, #20
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	f240 8108 	bls.w	8006c3e <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	6838      	ldr	r0, [r7, #0]
 8006a38:	f7fd ff02 	bl	8004840 <mkpay>
    rx_icmp(ifp, pkt);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe fcb8 	bl	80053b4 <rx_icmp>
 8006a44:	e100      	b.n	8006c48 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	7a5b      	ldrb	r3, [r3, #9]
 8006a4c:	2b11      	cmp	r3, #17
 8006a4e:	f040 808b 	bne.w	8006b68 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f103 0214 	add.w	r2, r3, #20
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b07      	cmp	r3, #7
 8006a64:	f240 80ed 	bls.w	8006c42 <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6838      	ldr	r0, [r7, #0]
 8006a72:	f7fd fee5 	bl	8004840 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8006a76:	4b77      	ldr	r3, [pc, #476]	@ (8006c54 <rx_ip+0x2c4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	dd2d      	ble.n	8006ada <rx_ip+0x14a>
 8006a7e:	4b76      	ldr	r3, [pc, #472]	@ (8006c58 <rx_ip+0x2c8>)
 8006a80:	f241 3210 	movw	r2, #4880	@ 0x1310
 8006a84:	4975      	ldr	r1, [pc, #468]	@ (8006c5c <rx_ip+0x2cc>)
 8006a86:	2004      	movs	r0, #4
 8006a88:	f7fc f9d6 	bl	8002e38 <mg_log_prefix>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f103 050c 	add.w	r5, r3, #12
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f00a fbb6 	bl	801120e <mg_ntohs>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461e      	mov	r6, r3
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f103 0410 	add.w	r4, r3, #16
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f00a fba9 	bl	801120e <mg_ntohs>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	9303      	str	r3, [sp, #12]
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	9401      	str	r4, [sp, #4]
 8006aca:	4b65      	ldr	r3, [pc, #404]	@ (8006c60 <rx_ip+0x2d0>)
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4633      	mov	r3, r6
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4963      	ldr	r1, [pc, #396]	@ (8006c60 <rx_ip+0x2d0>)
 8006ad4:	4863      	ldr	r0, [pc, #396]	@ (8006c64 <rx_ip+0x2d4>)
 8006ad6:	f7fc f9ff 	bl	8002ed8 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7f1b      	ldrb	r3, [r3, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01c      	beq.n	8006b1c <rx_ip+0x18c>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	885b      	ldrh	r3, [r3, #2]
 8006ae8:	b29c      	uxth	r4, r3
 8006aea:	2044      	movs	r0, #68	@ 0x44
 8006aec:	f00a fb8f 	bl	801120e <mg_ntohs>
 8006af0:	4603      	mov	r3, r0
 8006af2:	429c      	cmp	r4, r3
 8006af4:	d112      	bne.n	8006b1c <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	f103 0208 	add.w	r2, r3, #8
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7fd fe97 	bl	8004840 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fe fca9 	bl	800546c <rx_dhcp_client>
 8006b1a:	e095      	b.n	8006c48 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7f5b      	ldrb	r3, [r3, #29]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01c      	beq.n	8006b5e <rx_ip+0x1ce>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	b29c      	uxth	r4, r3
 8006b2c:	2043      	movs	r0, #67	@ 0x43
 8006b2e:	f00a fb6e 	bl	801120e <mg_ntohs>
 8006b32:	4603      	mov	r3, r0
 8006b34:	429c      	cmp	r4, r3
 8006b36:	d112      	bne.n	8006b5e <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	f103 0208 	add.w	r2, r3, #8
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6838      	ldr	r0, [r7, #0]
 8006b50:	f7fd fe76 	bl	8004840 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fe fe70 	bl	800583c <rx_dhcp_server>
 8006b5c:	e074      	b.n	8006c48 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff f859 	bl	8005c18 <rx_udp>
 8006b66:	e06f      	b.n	8006c48 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	7a5b      	ldrb	r3, [r3, #9]
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d16a      	bne.n	8006c48 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f103 0214 	add.w	r2, r3, #20
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b13      	cmp	r3, #19
 8006b84:	d95f      	bls.n	8006c46 <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6838      	ldr	r0, [r7, #0]
 8006b90:	f7fd fe56 	bl	8004840 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f00a fb36 	bl	801120e <mg_ntohs>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	7b1b      	ldrb	r3, [r3, #12]
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3305      	adds	r3, #5
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8006bb8:	8aba      	ldrh	r2, [r7, #20]
 8006bba:	8a7b      	ldrh	r3, [r7, #18]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d305      	bcc.n	8006bcc <rx_ip+0x23c>
 8006bc0:	8aba      	ldrh	r2, [r7, #20]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8006bcc:	4b21      	ldr	r3, [pc, #132]	@ (8006c54 <rx_ip+0x2c4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	dd2d      	ble.n	8006c30 <rx_ip+0x2a0>
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <rx_ip+0x2c8>)
 8006bd6:	f241 3225 	movw	r2, #4901	@ 0x1325
 8006bda:	4920      	ldr	r1, [pc, #128]	@ (8006c5c <rx_ip+0x2cc>)
 8006bdc:	2004      	movs	r0, #4
 8006bde:	f7fc f92b 	bl	8002e38 <mg_log_prefix>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f103 050c 	add.w	r5, r3, #12
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f00a fb0b 	bl	801120e <mg_ntohs>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461e      	mov	r6, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f103 0410 	add.w	r4, r3, #16
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f00a fafe 	bl	801120e <mg_ntohs>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	9202      	str	r2, [sp, #8]
 8006c1e:	9401      	str	r4, [sp, #4]
 8006c20:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <rx_ip+0x2d0>)
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	462a      	mov	r2, r5
 8006c28:	490d      	ldr	r1, [pc, #52]	@ (8006c60 <rx_ip+0x2d0>)
 8006c2a:	480f      	ldr	r0, [pc, #60]	@ (8006c68 <rx_ip+0x2d8>)
 8006c2c:	f7fc f954 	bl	8002ed8 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fd7c 	bl	8006730 <rx_tcp>
 8006c38:	e006      	b.n	8006c48 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8006c3a:	bf00      	nop
 8006c3c:	e004      	b.n	8006c48 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006c3e:	bf00      	nop
 8006c40:	e002      	b.n	8006c48 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006c42:	bf00      	nop
 8006c44:	e000      	b.n	8006c48 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8006c46:	bf00      	nop
  }
}
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	0802c8a0 	.word	0x0802c8a0
 8006c54:	24000000 	.word	0x24000000
 8006c58:	08030c08 	.word	0x08030c08
 8006c5c:	0802b5b0 	.word	0x0802b5b0
 8006c60:	08007ef5 	.word	0x08007ef5
 8006c64:	0802c8bc 	.word	0x0802c8bc
 8006c68:	0802c8d8 	.word	0x0802c8d8

08006c6c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	799b      	ldrb	r3, [r3, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d004      	beq.n	8006c8a <rx_ip6+0x1e>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	799b      	ldrb	r3, [r3, #6]
 8006c86:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c88:	d115      	bne.n	8006cb6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d922      	bls.n	8006ce4 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6838      	ldr	r0, [r7, #0]
 8006ca8:	f7fd fdca 	bl	8004840 <mkpay>
    rx_icmp(ifp, pkt);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fe fb80 	bl	80053b4 <rx_icmp>
 8006cb4:	e019      	b.n	8006cea <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	799b      	ldrb	r3, [r3, #6]
 8006cbc:	2b11      	cmp	r3, #17
 8006cbe:	d114      	bne.n	8006cea <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b07      	cmp	r3, #7
 8006cd2:	d909      	bls.n	8006ce8 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	3308      	adds	r3, #8
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f7fd fdaf 	bl	8004840 <mkpay>
 8006ce2:	e002      	b.n	8006cea <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8006ce8:	bf00      	nop
  }
}
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b093      	sub	sp, #76	@ 0x4c
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	2234      	movs	r2, #52	@ 0x34
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f022 fcdd 	bl	80296c4 <memset>
  pkt.raw.buf = (char *) buf;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b0d      	cmp	r3, #13
 8006d1a:	f240 80df 	bls.w	8006edc <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d013      	beq.n	8006d50 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2206      	movs	r2, #6
 8006d30:	4619      	mov	r1, r3
 8006d32:	f022 fc9d 	bl	8029670 <memcmp>
 8006d36:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	2206      	movs	r2, #6
 8006d40:	4970      	ldr	r1, [pc, #448]	@ (8006f04 <mg_tcpip_rx+0x214>)
 8006d42:	4618      	mov	r0, r3
 8006d44:	f022 fc94 	bl	8029670 <memcmp>
 8006d48:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 80c8 	bne.w	8006ee0 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <mg_tcpip_rx+0xa0>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d917      	bls.n	8006d90 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3b04      	subs	r3, #4
 8006d64:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f00a fa66 	bl	801123c <mg_crc32>
 8006d70:	4603      	mov	r3, r0
 8006d72:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f107 0310 	add.w	r3, r7, #16
 8006d80:	2204      	movs	r2, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	f022 fc74 	bl	8029670 <memcmp>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 80aa 	bne.w	8006ee4 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	899b      	ldrh	r3, [r3, #12]
 8006d94:	b29c      	uxth	r4, r3
 8006d96:	f640 0006 	movw	r0, #2054	@ 0x806
 8006d9a:	f00a fa38 	bl	801120e <mg_ntohs>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d114      	bne.n	8006dce <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	330e      	adds	r3, #14
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b29      	cmp	r3, #41	@ 0x29
 8006dae:	f240 809b 	bls.w	8006ee8 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8006db2:	f107 0314 	add.w	r3, r7, #20
 8006db6:	461a      	mov	r2, r3
 8006db8:	2103      	movs	r1, #3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7fd fd2c 	bl	8004818 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7fe f9e2 	bl	8005190 <rx_arp>
 8006dcc:	e097      	b.n	8006efe <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	899b      	ldrh	r3, [r3, #12]
 8006dd2:	b29c      	uxth	r4, r3
 8006dd4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8006dd8:	f00a fa19 	bl	801120e <mg_ntohs>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d11b      	bne.n	8006e1a <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	330e      	adds	r3, #14
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b35      	cmp	r3, #53	@ 0x35
 8006dec:	d97e      	bls.n	8006eec <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b06      	cmp	r3, #6
 8006df8:	d17a      	bne.n	8006ef0 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd fd1a 	bl	8004840 <mkpay>
    rx_ip6(ifp, &pkt);
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	4619      	mov	r1, r3
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff ff2a 	bl	8006c6c <rx_ip6>
 8006e18:	e071      	b.n	8006efe <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	899b      	ldrh	r3, [r3, #12]
 8006e1e:	b29c      	uxth	r4, r3
 8006e20:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006e24:	f00a f9f3 	bl	801120e <mg_ntohs>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d133      	bne.n	8006e96 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	330e      	adds	r3, #14
 8006e32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b21      	cmp	r3, #33	@ 0x21
 8006e38:	d95c      	bls.n	8006ef4 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	885b      	ldrh	r3, [r3, #2]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4618      	mov	r0, r3
 8006e42:	f00a f9e4 	bl	801120e <mg_ntohs>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f103 020e 	add.w	r2, r3, #14
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d208      	bcs.n	8006e64 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	885b      	ldrh	r3, [r3, #2]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f00a f9d8 	bl	801120e <mg_ntohs>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	330e      	adds	r3, #14
 8006e62:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b21      	cmp	r3, #33	@ 0x21
 8006e68:	d946      	bls.n	8006ef8 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d142      	bne.n	8006efc <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f103 0214 	add.w	r2, r3, #20
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fd fcdc 	bl	8004840 <mkpay>
    rx_ip(ifp, &pkt);
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fd7e 	bl	8006990 <rx_ip>
 8006e94:	e033      	b.n	8006efe <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8006e96:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <mg_tcpip_rx+0x218>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	dd11      	ble.n	8006ec2 <mg_tcpip_rx+0x1d2>
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f0c <mg_tcpip_rx+0x21c>)
 8006ea0:	f241 3264 	movw	r2, #4964	@ 0x1364
 8006ea4:	491a      	ldr	r1, [pc, #104]	@ (8006f10 <mg_tcpip_rx+0x220>)
 8006ea6:	2003      	movs	r0, #3
 8006ea8:	f7fb ffc6 	bl	8002e38 <mg_log_prefix>
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	899b      	ldrh	r3, [r3, #12]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f00a f9ab 	bl	801120e <mg_ntohs>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4815      	ldr	r0, [pc, #84]	@ (8006f14 <mg_tcpip_rx+0x224>)
 8006ebe:	f7fc f80b 	bl	8002ed8 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8006ec2:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <mg_tcpip_rx+0x218>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	dd19      	ble.n	8006efe <mg_tcpip_rx+0x20e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	bf28      	it	cs
 8006ed0:	2320      	movcs	r3, #32
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68b8      	ldr	r0, [r7, #8]
 8006ed6:	f7fc f835 	bl	8002f44 <mg_hexdump>
 8006eda:	e010      	b.n	8006efe <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8006edc:	bf00      	nop
 8006ede:	e00e      	b.n	8006efe <mg_tcpip_rx+0x20e>
    return;
 8006ee0:	bf00      	nop
 8006ee2:	e00c      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8006ee4:	bf00      	nop
 8006ee6:	e00a      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8006ee8:	bf00      	nop
 8006eea:	e008      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8006eec:	bf00      	nop
 8006eee:	e006      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8006ef0:	bf00      	nop
 8006ef2:	e004      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8006ef4:	bf00      	nop
 8006ef6:	e002      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8006efc:	bf00      	nop
  }
}
 8006efe:	374c      	adds	r7, #76	@ 0x4c
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd90      	pop	{r4, r7, pc}
 8006f04:	0803090c 	.word	0x0803090c
 8006f08:	24000000 	.word	0x24000000
 8006f0c:	08030c10 	.word	0x08030c10
 8006f10:	0802b5b0 	.word	0x0802b5b0
 8006f14:	0802c8f4 	.word	0x0802c8f4

08006f18 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8006f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1a:	b095      	sub	sp, #84	@ 0x54
 8006f1c:	af06      	add	r7, sp, #24
 8006f1e:	6178      	str	r0, [r7, #20]
 8006f20:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8006f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8006f32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	f002 f9a1 	bl	8009282 <mg_timer_expired>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 8006f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <mg_tcpip_poll+0x58>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d106      	bne.n	8006f70 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2204      	movs	r2, #4
 8006f66:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    onstatechange(ifp);
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7fd fdc0 	bl	8004af0 <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 8006f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d073      	beq.n	8007060 <mg_tcpip_poll+0x148>
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d06e      	beq.n	8007060 <mg_tcpip_poll+0x148>
    bool up = ifp->driver->up(ifp);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	6978      	ldr	r0, [r7, #20]
 8006f8a:	4798      	blx	r3
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8006fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006fa8:	f083 0301 	eor.w	r3, r3, #1
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <mg_tcpip_poll+0xa8>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	7f1b      	ldrb	r3, [r3, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <mg_tcpip_poll+0xa8>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 8006fc0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8006fc4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d01a      	beq.n	8007002 <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8006fcc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006fd0:	f083 0301 	eor.w	r3, r3, #1
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <mg_tcpip_poll+0xc6>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e00a      	b.n	8006ff4 <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <mg_tcpip_poll+0xdc>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f7fd fd78 	bl	8004af0 <onstatechange>
 8007000:	e016      	b.n	8007030 <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	7f1b      	ldrb	r3, [r3, #28]
 8007006:	f083 0301 	eor.w	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00f      	beq.n	8007030 <mg_tcpip_poll+0x118>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10a      	bne.n	8007030 <mg_tcpip_poll+0x118>
               ifp->ip) {
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2203      	movs	r2, #3
 8007026:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      onstatechange(ifp);
 800702a:	6978      	ldr	r0, [r7, #20]
 800702c:	f7fd fd60 	bl	8004af0 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10d      	bne.n	8007056 <mg_tcpip_poll+0x13e>
 800703a:	4ba2      	ldr	r3, [pc, #648]	@ (80072c4 <mg_tcpip_poll+0x3ac>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd09      	ble.n	8007056 <mg_tcpip_poll+0x13e>
 8007042:	4ba1      	ldr	r3, [pc, #644]	@ (80072c8 <mg_tcpip_poll+0x3b0>)
 8007044:	f241 328b 	movw	r2, #5003	@ 0x138b
 8007048:	49a0      	ldr	r1, [pc, #640]	@ (80072cc <mg_tcpip_poll+0x3b4>)
 800704a:	2001      	movs	r0, #1
 800704c:	f7fb fef4 	bl	8002e38 <mg_log_prefix>
 8007050:	489f      	ldr	r0, [pc, #636]	@ (80072d0 <mg_tcpip_poll+0x3b8>)
 8007052:	f7fb ff41 	bl	8002ed8 <mg_log>
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 8007056:	2200      	movs	r2, #0
 8007058:	2104      	movs	r1, #4
 800705a:	6978      	ldr	r0, [r7, #20]
 800705c:	f7fd fbdc 	bl	8004818 <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 819d 	beq.w	80073a6 <mg_tcpip_poll+0x48e>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	7f1b      	ldrb	r3, [r3, #28]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d055      	beq.n	8007120 <mg_tcpip_poll+0x208>
 8007074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007078:	2b00      	cmp	r3, #0
 800707a:	d051      	beq.n	8007120 <mg_tcpip_poll+0x208>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d103      	bne.n	800708e <mg_tcpip_poll+0x176>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8007086:	6978      	ldr	r0, [r7, #20]
 8007088:	f7fd ffd4 	bl	8005034 <tx_dhcp_discover>
 800708c:	e048      	b.n	8007120 <mg_tcpip_poll+0x208>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007094:	2b04      	cmp	r3, #4
 8007096:	d143      	bne.n	8007120 <mg_tcpip_poll+0x208>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800709e:	4313      	orrs	r3, r2
 80070a0:	d03e      	beq.n	8007120 <mg_tcpip_poll+0x208>
      if (ifp->now >= ifp->lease_expire) {
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80070ae:	4290      	cmp	r0, r2
 80070b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80070b4:	d30a      	bcc.n	80070cc <mg_tcpip_poll+0x1b4>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 80070c4:	6978      	ldr	r0, [r7, #20]
 80070c6:	f7fd fd13 	bl	8004af0 <onstatechange>
 80070ca:	e029      	b.n	8007120 <mg_tcpip_poll+0x208>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80070d2:	4980      	ldr	r1, [pc, #512]	@ (80072d4 <mg_tcpip_poll+0x3bc>)
 80070d4:	1854      	adds	r4, r2, r1
 80070d6:	f143 0500 	adc.w	r5, r3, #0
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80070e0:	42a2      	cmp	r2, r4
 80070e2:	41ab      	sbcs	r3, r5
 80070e4:	d21c      	bcs.n	8007120 <mg_tcpip_poll+0x208>
                 ((ifp->now / 1000) % 60) == 0) {
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80070ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	f7f9 f94c 	bl	8000390 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	f7f9 f942 	bl	8000390 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800710c:	4313      	orrs	r3, r2
 800710e:	d107      	bne.n	8007120 <mg_tcpip_poll+0x208>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
 8007118:	496f      	ldr	r1, [pc, #444]	@ (80072d8 <mg_tcpip_poll+0x3c0>)
 800711a:	6978      	ldr	r0, [r7, #20]
 800711c:	f7fd ff58 	bl	8004fd0 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d019      	beq.n	800715e <mg_tcpip_poll+0x246>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4798      	blx	r3
 800713c:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d024      	beq.n	800718e <mg_tcpip_poll+0x276>
      ifp->nrecv++;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007154:	4619      	mov	r1, r3
 8007156:	6978      	ldr	r0, [r7, #20]
 8007158:	f7ff fdca 	bl	8006cf0 <mg_tcpip_rx>
 800715c:	e017      	b.n	800718e <mg_tcpip_poll+0x276>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	3334      	adds	r3, #52	@ 0x34
 8007162:	f107 0220 	add.w	r2, r7, #32
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f000 ffc9 	bl	8008100 <mg_queue_next>
 800716e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <mg_tcpip_poll+0x276>
      mg_tcpip_rx(ifp, buf, len);
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800717a:	4619      	mov	r1, r3
 800717c:	6978      	ldr	r0, [r7, #20]
 800717e:	f7ff fdb7 	bl	8006cf0 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3334      	adds	r3, #52	@ 0x34
 8007186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007188:	4618      	mov	r0, r3
 800718a:	f000 ffff 	bl	800818c <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	e101      	b.n	800739c <mg_tcpip_poll+0x484>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <mg_tcpip_poll+0x2a2>
 80071a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80eb 	beq.w	8007390 <mg_tcpip_poll+0x478>
 80071ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071bc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 80e2 	bne.w	8007390 <mg_tcpip_poll+0x478>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 80d9 	bne.w	8007390 <mg_tcpip_poll+0x478>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	33b0      	adds	r3, #176	@ 0xb0
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80071e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e6:	331c      	adds	r3, #28
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80071f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f6:	4290      	cmp	r0, r2
 80071f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80071fc:	f080 80cb 	bcs.w	8007396 <mg_tcpip_poll+0x47e>
      if (s->ttype == MIP_TTYPE_ARP) {
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	7f9b      	ldrb	r3, [r3, #30]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d104      	bne.n	8007212 <mg_tcpip_poll+0x2fa>
        mg_error(c, "ARP timeout");
 8007208:	4934      	ldr	r1, [pc, #208]	@ (80072dc <mg_tcpip_poll+0x3c4>)
 800720a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800720c:	f7fa fc1c 	bl	8001a48 <mg_error>
 8007210:	e0b9      	b.n	8007386 <mg_tcpip_poll+0x46e>
      } else if (c->is_udp) {
 8007212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007214:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 80b8 	bne.w	8007394 <mg_tcpip_poll+0x47c>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	7f9b      	ldrb	r3, [r3, #30]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d142      	bne.n	80072b2 <mg_tcpip_poll+0x39a>
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d03c      	beq.n	80072b2 <mg_tcpip_poll+0x39a>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8007238:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <mg_tcpip_poll+0x3ac>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b03      	cmp	r3, #3
 800723e:	dd0f      	ble.n	8007260 <mg_tcpip_poll+0x348>
 8007240:	4b21      	ldr	r3, [pc, #132]	@ (80072c8 <mg_tcpip_poll+0x3b0>)
 8007242:	f241 32bf 	movw	r2, #5055	@ 0x13bf
 8007246:	4921      	ldr	r1, [pc, #132]	@ (80072cc <mg_tcpip_poll+0x3b4>)
 8007248:	2004      	movs	r0, #4
 800724a:	f7fb fdf5 	bl	8002e38 <mg_log_prefix>
 800724e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007250:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4821      	ldr	r0, [pc, #132]	@ (80072e0 <mg_tcpip_poll+0x3c8>)
 800725c:	f7fb fe3c 	bl	8002ed8 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	f103 0618 	add.w	r6, r3, #24
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726c:	8b1c      	ldrh	r4, [r3, #24]
 800726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007270:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f009 ffb0 	bl	80111dc <mg_ntohl>
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f009 ffaa 	bl	80111dc <mg_ntohl>
 8007288:	4603      	mov	r3, r0
 800728a:	2200      	movs	r2, #0
 800728c:	9205      	str	r2, [sp, #20]
 800728e:	2200      	movs	r2, #0
 8007290:	9204      	str	r2, [sp, #16]
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	9102      	str	r1, [sp, #8]
 8007298:	9501      	str	r5, [sp, #4]
 800729a:	9400      	str	r4, [sp, #0]
 800729c:	2310      	movs	r3, #16
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4631      	mov	r1, r6
 80072a2:	6978      	ldr	r0, [r7, #20]
 80072a4:	f7fe fd2a 	bl	8005cfc <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	611a      	str	r2, [r3, #16]
 80072b0:	e069      	b.n	8007386 <mg_tcpip_poll+0x46e>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	7f9b      	ldrb	r3, [r3, #30]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d116      	bne.n	80072e8 <mg_tcpip_poll+0x3d0>
        mg_error(c, "Connection timeout");
 80072ba:	490a      	ldr	r1, [pc, #40]	@ (80072e4 <mg_tcpip_poll+0x3cc>)
 80072bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80072be:	f7fa fbc3 	bl	8001a48 <mg_error>
 80072c2:	e060      	b.n	8007386 <mg_tcpip_poll+0x46e>
 80072c4:	24000000 	.word	0x24000000
 80072c8:	08030c1c 	.word	0x08030c1c
 80072cc:	0802b5b0 	.word	0x0802b5b0
 80072d0:	0802c908 	.word	0x0802c908
 80072d4:	001b7740 	.word	0x001b7740
 80072d8:	0803090c 	.word	0x0803090c
 80072dc:	0802c918 	.word	0x0802c918
 80072e0:	0802c924 	.word	0x0802c924
 80072e4:	0802c934 	.word	0x0802c934
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	7f9b      	ldrb	r3, [r3, #30]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d107      	bne.n	8007300 <mg_tcpip_poll+0x3e8>
        c->is_closing = 1;
 80072f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072f2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80072f6:	f043 0320 	orr.w	r3, r3, #32
 80072fa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80072fe:	e04a      	b.n	8007396 <mg_tcpip_poll+0x47e>
      } else {
        if (s->tmiss++ > 2) {
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	7fdb      	ldrb	r3, [r3, #31]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	b2d1      	uxtb	r1, r2
 8007308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730a:	77d1      	strb	r1, [r2, #31]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d904      	bls.n	800731a <mg_tcpip_poll+0x402>
          mg_error(c, "keepalive");
 8007310:	4927      	ldr	r1, [pc, #156]	@ (80073b0 <mg_tcpip_poll+0x498>)
 8007312:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007314:	f7fa fb98 	bl	8001a48 <mg_error>
 8007318:	e035      	b.n	8007386 <mg_tcpip_poll+0x46e>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800731a:	4b26      	ldr	r3, [pc, #152]	@ (80073b4 <mg_tcpip_poll+0x49c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b03      	cmp	r3, #3
 8007320:	dd0c      	ble.n	800733c <mg_tcpip_poll+0x424>
 8007322:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <mg_tcpip_poll+0x4a0>)
 8007324:	f241 32cc 	movw	r2, #5068	@ 0x13cc
 8007328:	4924      	ldr	r1, [pc, #144]	@ (80073bc <mg_tcpip_poll+0x4a4>)
 800732a:	2004      	movs	r0, #4
 800732c:	f7fb fd84 	bl	8002e38 <mg_log_prefix>
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007334:	4619      	mov	r1, r3
 8007336:	4822      	ldr	r0, [pc, #136]	@ (80073c0 <mg_tcpip_poll+0x4a8>)
 8007338:	f7fb fdce 	bl	8002ed8 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	f103 0618 	add.w	r6, r3, #24
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007348:	8b1c      	ldrh	r4, [r3, #24]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8007352:	3b01      	subs	r3, #1
 8007354:	4618      	mov	r0, r3
 8007356:	f009 ff41 	bl	80111dc <mg_ntohl>
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f009 ff3b 	bl	80111dc <mg_ntohl>
 8007366:	4603      	mov	r3, r0
 8007368:	2200      	movs	r2, #0
 800736a:	9205      	str	r2, [sp, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	9204      	str	r2, [sp, #16]
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	9102      	str	r1, [sp, #8]
 8007376:	9501      	str	r5, [sp, #4]
 8007378:	9400      	str	r4, [sp, #0]
 800737a:	2310      	movs	r3, #16
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4631      	mov	r1, r6
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f7fe fcbb 	bl	8005cfc <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8007386:	2100      	movs	r1, #0
 8007388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800738a:	f7fd fad1 	bl	8004930 <settmout>
 800738e:	e002      	b.n	8007396 <mg_tcpip_poll+0x47e>
      continue;
 8007390:	bf00      	nop
 8007392:	e000      	b.n	8007396 <mg_tcpip_poll+0x47e>
        continue;
 8007394:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8007396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
 800739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f47f aefa 	bne.w	8007198 <mg_tcpip_poll+0x280>
 80073a4:	e000      	b.n	80073a8 <mg_tcpip_poll+0x490>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80073a6:	bf00      	nop
    }
  }
}
 80073a8:	373c      	adds	r7, #60	@ 0x3c
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ae:	bf00      	nop
 80073b0:	0802c948 	.word	0x0802c948
 80073b4:	24000000 	.word	0x24000000
 80073b8:	08030c1c 	.word	0x08030c1c
 80073bc:	0802b5b0 	.word	0x0802b5b0
 80073c0:	0802c954 	.word	0x0802c954

080073c4 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d12d      	bne.n	8007432 <mg_tcpip_init+0x6e>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d129      	bne.n	8007432 <mg_tcpip_init+0x6e>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	789b      	ldrb	r3, [r3, #2]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d125      	bne.n	8007432 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d121      	bne.n	8007432 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d11d      	bne.n	8007432 <mg_tcpip_init+0x6e>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	795b      	ldrb	r3, [r3, #5]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d119      	bne.n	8007432 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2202      	movs	r2, #2
 8007402:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	3301      	adds	r3, #1
 8007408:	2105      	movs	r1, #5
 800740a:	4618      	mov	r0, r3
 800740c:	f00a fdb8 	bl	8011f80 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8007410:	4b51      	ldr	r3, [pc, #324]	@ (8007558 <mg_tcpip_init+0x194>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	dd0c      	ble.n	8007432 <mg_tcpip_init+0x6e>
 8007418:	4b50      	ldr	r3, [pc, #320]	@ (800755c <mg_tcpip_init+0x198>)
 800741a:	f241 32eb 	movw	r2, #5099	@ 0x13eb
 800741e:	4950      	ldr	r1, [pc, #320]	@ (8007560 <mg_tcpip_init+0x19c>)
 8007420:	2002      	movs	r0, #2
 8007422:	f7fb fd09 	bl	8002e38 <mg_log_prefix>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	494e      	ldr	r1, [pc, #312]	@ (8007564 <mg_tcpip_init+0x1a0>)
 800742c:	484e      	ldr	r0, [pc, #312]	@ (8007568 <mg_tcpip_init+0x1a4>)
 800742e:	f7fb fd53 	bl	8002ed8 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d019      	beq.n	8007470 <mg_tcpip_init+0xac>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6838      	ldr	r0, [r7, #0]
 8007444:	4798      	blx	r3
 8007446:	4603      	mov	r3, r0
 8007448:	f083 0301 	eor.w	r3, r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 8007452:	4b41      	ldr	r3, [pc, #260]	@ (8007558 <mg_tcpip_init+0x194>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dd7a      	ble.n	8007550 <mg_tcpip_init+0x18c>
 800745a:	4b40      	ldr	r3, [pc, #256]	@ (800755c <mg_tcpip_init+0x198>)
 800745c:	f241 32ef 	movw	r2, #5103	@ 0x13ef
 8007460:	493f      	ldr	r1, [pc, #252]	@ (8007560 <mg_tcpip_init+0x19c>)
 8007462:	2001      	movs	r0, #1
 8007464:	f7fb fce8 	bl	8002e38 <mg_log_prefix>
 8007468:	4840      	ldr	r0, [pc, #256]	@ (800756c <mg_tcpip_init+0x1a8>)
 800746a:	f7fb fd35 	bl	8002ed8 <mg_log>
 800746e:	e06f      	b.n	8007550 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 8007470:	f240 6304 	movw	r3, #1540	@ 0x604
 8007474:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	2001      	movs	r0, #1
 800747a:	f021 f89f 	bl	80285bc <calloc>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	615a      	str	r2, [r3, #20]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <mg_tcpip_init+0xde>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	e001      	b.n	80074a6 <mg_tcpip_init+0xe2>
 80074a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	4619      	mov	r1, r3
 80074b0:	2001      	movs	r0, #1
 80074b2:	f021 f883 	bl	80285bc <calloc>
 80074b6:	4603      	mov	r3, r0
 80074b8:	461a      	mov	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80074be:	f00a fd51 	bl	8011f64 <mg_millis>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80074de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2230      	movs	r2, #48	@ 0x30
 80074e6:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <mg_tcpip_init+0x132>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2201      	movs	r2, #1
 80074f4:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3346      	adds	r3, #70	@ 0x46
 80074fa:	2206      	movs	r2, #6
 80074fc:	21ff      	movs	r1, #255	@ 0xff
 80074fe:	4618      	mov	r0, r3
 8007500:	f022 f8e0 	bl	80296c4 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	3368      	adds	r3, #104	@ 0x68
 8007508:	2102      	movs	r1, #2
 800750a:	4618      	mov	r0, r3
 800750c:	f00a fd38 	bl	8011f80 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8007516:	4b16      	ldr	r3, [pc, #88]	@ (8007570 <mg_tcpip_init+0x1ac>)
 8007518:	4313      	orrs	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <mg_tcpip_init+0x16e>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10e      	bne.n	8007550 <mg_tcpip_init+0x18c>
 8007532:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <mg_tcpip_init+0x194>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd0a      	ble.n	8007550 <mg_tcpip_init+0x18c>
 800753a:	4b08      	ldr	r3, [pc, #32]	@ (800755c <mg_tcpip_init+0x198>)
 800753c:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007540:	4907      	ldr	r1, [pc, #28]	@ (8007560 <mg_tcpip_init+0x19c>)
 8007542:	2001      	movs	r0, #1
 8007544:	f7fb fc78 	bl	8002e38 <mg_log_prefix>
 8007548:	480a      	ldr	r0, [pc, #40]	@ (8007574 <mg_tcpip_init+0x1b0>)
 800754a:	f7fb fcc5 	bl	8002ed8 <mg_log>
  }
}
 800754e:	e7ff      	b.n	8007550 <mg_tcpip_init+0x18c>
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	24000000 	.word	0x24000000
 800755c:	08030c2c 	.word	0x08030c2c
 8007560:	0802b5b0 	.word	0x0802b5b0
 8007564:	08007fb9 	.word	0x08007fb9
 8007568:	0802c964 	.word	0x0802c964
 800756c:	0802c988 	.word	0x0802c988
 8007570:	ffff8000 	.word	0xffff8000
 8007574:	0802c3d8 	.word	0x0802c3d8

08007578 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8007578:	b590      	push	{r4, r7, lr}
 800757a:	b08d      	sub	sp, #52	@ 0x34
 800757c:	af06      	add	r7, sp, #24
 800757e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	33b0      	adds	r3, #176	@ 0xb0
 8007584:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	8b1b      	ldrh	r3, [r3, #24]
 800758a:	4618      	mov	r0, r3
 800758c:	f009 fe3f 	bl	801120e <mg_ntohs>
 8007590:	4603      	mov	r3, r0
 8007592:	4618      	mov	r0, r3
 8007594:	f009 fe22 	bl	80111dc <mg_ntohl>
 8007598:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	331c      	adds	r3, #28
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f103 0018 	add.w	r0, r3, #24
 80075b0:	68bc      	ldr	r4, [r7, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8b1b      	ldrh	r3, [r3, #24]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80075ba:	2100      	movs	r1, #0
 80075bc:	9105      	str	r1, [sp, #20]
 80075be:	2100      	movs	r1, #0
 80075c0:	9104      	str	r1, [sp, #16]
 80075c2:	2100      	movs	r1, #0
 80075c4:	9103      	str	r1, [sp, #12]
 80075c6:	6939      	ldr	r1, [r7, #16]
 80075c8:	9102      	str	r1, [sp, #8]
 80075ca:	9201      	str	r2, [sp, #4]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	2302      	movs	r3, #2
 80075d0:	4622      	mov	r2, r4
 80075d2:	4601      	mov	r1, r0
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7fe fb91 	bl	8005cfc <tx_tcp>
         0);
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd90      	pop	{r4, r7, pc}

080075e2 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <mac_resolved+0x32>
    c->is_connecting = 0;
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8007600:	f36f 1345 	bfc	r3, #5, #1
 8007604:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 8007608:	2200      	movs	r2, #0
 800760a:	2104      	movs	r1, #4
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fa f9fb 	bl	8001a08 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 8007612:	e006      	b.n	8007622 <mac_resolved+0x40>
    send_syn(c);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ffaf 	bl	8007578 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800761a:	2103      	movs	r1, #3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fd f987 	bl	8004930 <settmout>
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b08a      	sub	sp, #40	@ 0x28
 8007630:	af02      	add	r7, sp, #8
 8007632:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763a:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	331c      	adds	r3, #28
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800764a:	f36f 03c3 	bfc	r3, #3, #1
 800764e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007658:	b21b      	sxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	db04      	blt.n	8007668 <mg_connect_resolved+0x3c>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3308      	adds	r3, #8
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	3208      	adds	r2, #8
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	b291      	uxth	r1, r2
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8007684:	4618      	mov	r0, r3
 8007686:	f009 fdc2 	bl	801120e <mg_ntohs>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8007692:	4b61      	ldr	r3, [pc, #388]	@ (8007818 <mg_connect_resolved+0x1ec>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b02      	cmp	r3, #2
 8007698:	dd15      	ble.n	80076c6 <mg_connect_resolved+0x9a>
 800769a:	4b60      	ldr	r3, [pc, #384]	@ (800781c <mg_connect_resolved+0x1f0>)
 800769c:	f241 4225 	movw	r2, #5157	@ 0x1425
 80076a0:	495f      	ldr	r1, [pc, #380]	@ (8007820 <mg_connect_resolved+0x1f4>)
 80076a2:	2003      	movs	r0, #3
 80076a4:	f7fb fbc8 	bl	8002e38 <mg_log_prefix>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f103 0208 	add.w	r2, r3, #8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	331c      	adds	r3, #28
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007824 <mg_connect_resolved+0x1f8>)
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	4a59      	ldr	r2, [pc, #356]	@ (8007824 <mg_connect_resolved+0x1f8>)
 80076c0:	4859      	ldr	r0, [pc, #356]	@ (8007828 <mg_connect_resolved+0x1fc>)
 80076c2:	f7fb fc09 	bl	8002ed8 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 80076c6:	2200      	movs	r2, #0
 80076c8:	2103      	movs	r1, #3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa f99c 	bl	8001a08 <mg_call>
  c->is_connecting = 1;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80076d6:	f043 0320 	orr.w	r3, r3, #32
 80076da:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <mg_connect_resolved+0xf8>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d008      	beq.n	8007708 <mg_connect_resolved+0xdc>
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	43db      	mvns	r3, r3
 8007700:	431a      	orrs	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d10d      	bne.n	8007724 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	33b0      	adds	r3, #176	@ 0xb0
 800770c:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	3318      	adds	r3, #24
 8007712:	2206      	movs	r2, #6
 8007714:	21ff      	movs	r1, #255	@ 0xff
 8007716:	4618      	mov	r0, r3
 8007718:	f021 ffd4 	bl	80296c4 <memset>
    mac_resolved(c);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ff60 	bl	80075e2 <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8007722:	e075      	b.n	8007810 <mg_connect_resolved+0x1e4>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d030      	beq.n	800778e <mg_connect_resolved+0x162>
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	405a      	eors	r2, r3
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d127      	bne.n	800778e <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8007744:	429a      	cmp	r2, r3
 8007746:	d022      	beq.n	800778e <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8007748:	4b33      	ldr	r3, [pc, #204]	@ (8007818 <mg_connect_resolved+0x1ec>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b02      	cmp	r3, #2
 800774e:	dd0c      	ble.n	800776a <mg_connect_resolved+0x13e>
 8007750:	4b32      	ldr	r3, [pc, #200]	@ (800781c <mg_connect_resolved+0x1f0>)
 8007752:	f241 4230 	movw	r2, #5168	@ 0x1430
 8007756:	4932      	ldr	r1, [pc, #200]	@ (8007820 <mg_connect_resolved+0x1f4>)
 8007758:	2003      	movs	r0, #3
 800775a:	f7fb fb6d 	bl	8002e38 <mg_log_prefix>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007762:	4619      	mov	r1, r3
 8007764:	4831      	ldr	r0, [pc, #196]	@ (800782c <mg_connect_resolved+0x200>)
 8007766:	f7fb fbb7 	bl	8002ed8 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	4619      	mov	r1, r3
 8007770:	69f8      	ldr	r0, [r7, #28]
 8007772:	f7fd f955 	bl	8004a20 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 8007776:	2102      	movs	r1, #2
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd f8d9 	bl	8004930 <settmout>
    c->is_arplooking = 1;
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8007784:	f043 0310 	orr.w	r3, r3, #16
 8007788:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800778c:	e040      	b.n	8007810 <mg_connect_resolved+0x1e4>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007798:	2be0      	cmp	r3, #224	@ 0xe0
 800779a:	d129      	bne.n	80077f0 <mg_connect_resolved+0x1c4>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	33b0      	adds	r3, #176	@ 0xb0
 80077a0:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80077a2:	4a23      	ldr	r2, [pc, #140]	@ (8007830 <mg_connect_resolved+0x204>)
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	4611      	mov	r1, r2
 80077ac:	8019      	strh	r1, [r3, #0]
 80077ae:	3302      	adds	r3, #2
 80077b0:	0c12      	lsrs	r2, r2, #16
 80077b2:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3318      	adds	r3, #24
 80077b8:	461a      	mov	r2, r3
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	8819      	ldrh	r1, [r3, #0]
 80077c0:	789b      	ldrb	r3, [r3, #2]
 80077c2:	8011      	strh	r1, [r2, #0]
 80077c4:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3318      	adds	r3, #24
 80077ca:	1cd8      	adds	r0, r3, #3
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	3301      	adds	r3, #1
 80077d2:	2203      	movs	r2, #3
 80077d4:	4619      	mov	r1, r3
 80077d6:	f022 f83a 	bl	802984e <memcpy>
    s->mac[3] &= 0x7F;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	7edb      	ldrb	r3, [r3, #27]
 80077de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	76da      	strb	r2, [r3, #27]
    mac_resolved(c);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fefa 	bl	80075e2 <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 80077ee:	e00f      	b.n	8007810 <mg_connect_resolved+0x1e4>
    struct connstate *s = (struct connstate *) (c + 1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	33b0      	adds	r3, #176	@ 0xb0
 80077f4:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f103 0018 	add.w	r0, r3, #24
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3346      	adds	r3, #70	@ 0x46
 8007800:	2206      	movs	r2, #6
 8007802:	4619      	mov	r1, r3
 8007804:	f022 f823 	bl	802984e <memcpy>
    mac_resolved(c);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff feea 	bl	80075e2 <mac_resolved>
}
 800780e:	e7ff      	b.n	8007810 <mg_connect_resolved+0x1e4>
 8007810:	bf00      	nop
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	24000000 	.word	0x24000000
 800781c:	08030c3c 	.word	0x08030c3c
 8007820:	0802b5b0 	.word	0x0802b5b0
 8007824:	08007f6d 	.word	0x08007f6d
 8007828:	0802c99c 	.word	0x0802c99c
 800782c:	0802c9ac 	.word	0x0802c9ac
 8007830:	0802c9c0 	.word	0x0802c9c0

08007834 <write_conn>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
  c->loc.port = mg_htons(mg_url_port(url));
  return true;
}

static void write_conn(struct mg_connection *c) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007854:	461a      	mov	r2, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f004 f9d5 	bl	800bc06 <mg_tls_send>
 800785c:	4603      	mov	r3, r0
 800785e:	e008      	b.n	8007872 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007868:	461a      	mov	r2, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fe fc9e 	bl	80061ac <mg_io_send>
 8007870:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8007872:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d104      	bne.n	8007886 <write_conn+0x52>
    mg_error(c, "tx err");
 800787c:	490c      	ldr	r1, [pc, #48]	@ (80078b0 <write_conn+0x7c>)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fa f8e2 	bl	8001a48 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8007884:	e010      	b.n	80078a8 <write_conn+0x74>
  } else if (len > 0) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	dd0d      	ble.n	80078a8 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3348      	adds	r3, #72	@ 0x48
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f7fb fa47 	bl	8002d28 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800789a:	f107 030c 	add.w	r3, r7, #12
 800789e:	461a      	mov	r2, r3
 80078a0:	2108      	movs	r1, #8
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fa f8b0 	bl	8001a08 <mg_call>
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	0802c9c4 	.word	0x0802c9c4

080078b4 <init_closure>:

static void init_closure(struct mg_connection *c) {
 80078b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b6:	b08f      	sub	sp, #60	@ 0x3c
 80078b8:	af06      	add	r7, sp, #24
 80078ba:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	33b0      	adds	r3, #176	@ 0xb0
 80078c0:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d13f      	bne.n	8007952 <init_closure+0x9e>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d137      	bne.n	8007952 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12f      	bne.n	8007952 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 80078f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f8:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	331c      	adds	r3, #28
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f103 0618 	add.w	r6, r3, #24
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8b1c      	ldrh	r4, [r3, #24]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f009 fc5f 	bl	80111dc <mg_ntohl>
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	f009 fc59 	bl	80111dc <mg_ntohl>
 800792a:	4603      	mov	r3, r0
 800792c:	2200      	movs	r2, #0
 800792e:	9205      	str	r2, [sp, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	9204      	str	r2, [sp, #16]
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	9102      	str	r1, [sp, #8]
 800793a:	9501      	str	r5, [sp, #4]
 800793c:	9400      	str	r4, [sp, #0]
 800793e:	2311      	movs	r3, #17
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	4631      	mov	r1, r6
 8007944:	69b8      	ldr	r0, [r7, #24]
 8007946:	f7fe f9d9 	bl	8005cfc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800794a:	2104      	movs	r1, #4
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f7fc ffef 	bl	8004930 <settmout>
  }
}
 8007952:	bf00      	nop
 8007954:	3724      	adds	r7, #36	@ 0x24
 8007956:	46bd      	mov	sp, r7
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800795a <close_conn>:

static void close_conn(struct mg_connection *c) {
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	33b0      	adds	r3, #176	@ 0xb0
 8007966:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3320      	adds	r3, #32
 800796c:	4618      	mov	r0, r3
 800796e:	f7fb fa26 	bl	8002dbe <mg_iobuf_free>
  mg_close_conn(c);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fc fdf2 	bl	800455c <mg_close_conn>
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <can_write>:

static bool can_write(struct mg_connection *c) {
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11d      	bne.n	80079d4 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d115      	bne.n	80079d4 <can_write+0x54>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d011      	beq.n	80079d4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80079b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079ba:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <can_write+0x54>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <can_write+0x56>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	b2db      	uxtb	r3, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 80079e8:	b5b0      	push	{r4, r5, r7, lr}
 80079ea:	b08c      	sub	sp, #48	@ 0x30
 80079ec:	af04      	add	r7, sp, #16
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 80079f8:	f00a fab4 	bl	8011f64 <mg_millis>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a0e:	4608      	mov	r0, r1
 8007a10:	f001 fc9b 	bl	800934a <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 80aa 	beq.w	8007b70 <mg_mgr_poll+0x188>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80a5 	beq.w	8007b70 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8007a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a2a:	69b8      	ldr	r0, [r7, #24]
 8007a2c:	f7ff fa74 	bl	8006f18 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e096      	b.n	8007b66 <mg_mgr_poll+0x17e>
    tmp = c->next;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	33b0      	adds	r3, #176	@ 0xb0
 8007a42:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	69f8      	ldr	r0, [r7, #28]
 8007a4e:	f7f9 ffdb 	bl	8001a08 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8007a52:	4b49      	ldr	r3, [pc, #292]	@ (8007b78 <mg_mgr_poll+0x190>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	dd48      	ble.n	8007aec <mg_mgr_poll+0x104>
 8007a5a:	4b48      	ldr	r3, [pc, #288]	@ (8007b7c <mg_mgr_poll+0x194>)
 8007a5c:	f241 4276 	movw	r2, #5238	@ 0x1476
 8007a60:	4947      	ldr	r1, [pc, #284]	@ (8007b80 <mg_mgr_poll+0x198>)
 8007a62:	2004      	movs	r0, #4
 8007a64:	f7fb f9e8 	bl	8002e38 <mg_log_prefix>
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <mg_mgr_poll+0x98>
 8007a7c:	2454      	movs	r4, #84	@ 0x54
 8007a7e:	e000      	b.n	8007a82 <mg_mgr_poll+0x9a>
 8007a80:	2474      	movs	r4, #116	@ 0x74
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <mg_mgr_poll+0xae>
 8007a92:	2543      	movs	r5, #67	@ 0x43
 8007a94:	e000      	b.n	8007a98 <mg_mgr_poll+0xb0>
 8007a96:	2563      	movs	r5, #99	@ 0x63
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007a9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <mg_mgr_poll+0xc4>
 8007aa8:	2348      	movs	r3, #72	@ 0x48
 8007aaa:	e000      	b.n	8007aae <mg_mgr_poll+0xc6>
 8007aac:	2368      	movs	r3, #104	@ 0x68
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8007ab4:	f002 0208 	and.w	r2, r2, #8
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d001      	beq.n	8007ac2 <mg_mgr_poll+0xda>
 8007abe:	2252      	movs	r2, #82	@ 0x52
 8007ac0:	e000      	b.n	8007ac4 <mg_mgr_poll+0xdc>
 8007ac2:	2272      	movs	r2, #114	@ 0x72
 8007ac4:	69f9      	ldr	r1, [r7, #28]
 8007ac6:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8007aca:	f001 0120 	and.w	r1, r1, #32
 8007ace:	b2c9      	uxtb	r1, r1
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	d001      	beq.n	8007ad8 <mg_mgr_poll+0xf0>
 8007ad4:	2143      	movs	r1, #67	@ 0x43
 8007ad6:	e000      	b.n	8007ada <mg_mgr_poll+0xf2>
 8007ad8:	2163      	movs	r1, #99	@ 0x63
 8007ada:	9102      	str	r1, [sp, #8]
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	4827      	ldr	r0, [pc, #156]	@ (8007b84 <mg_mgr_poll+0x19c>)
 8007ae8:	f7fb f9f6 	bl	8002ed8 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <mg_mgr_poll+0x12c>
 8007afc:	69f8      	ldr	r0, [r7, #28]
 8007afe:	f004 f916 	bl	800bd2e <mg_tls_pending>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3368      	adds	r3, #104	@ 0x68
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	69f8      	ldr	r0, [r7, #28]
 8007b10:	f7fe fbc4 	bl	800629c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8007b14:	69f8      	ldr	r0, [r7, #28]
 8007b16:	f7ff ff33 	bl	8007980 <can_write>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <mg_mgr_poll+0x13e>
 8007b20:	69f8      	ldr	r0, [r7, #28]
 8007b22:	f7ff fe87 	bl	8007834 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <mg_mgr_poll+0x164>
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <mg_mgr_poll+0x164>
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	7f9b      	ldrb	r3, [r3, #30]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d002      	beq.n	8007b4c <mg_mgr_poll+0x164>
      init_closure(c);
 8007b46:	69f8      	ldr	r0, [r7, #28]
 8007b48:	f7ff feb4 	bl	80078b4 <init_closure>
    if (c->is_closing) close_conn(c);
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <mg_mgr_poll+0x17a>
 8007b5c:	69f8      	ldr	r0, [r7, #28]
 8007b5e:	f7ff fefc 	bl	800795a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f af65 	bne.w	8007a38 <mg_mgr_poll+0x50>
 8007b6e:	e000      	b.n	8007b72 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8007b70:	bf00      	nop
  }
  (void) ms;
}
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bdb0      	pop	{r4, r5, r7, pc}
 8007b78:	24000000 	.word	0x24000000
 8007b7c:	08030c50 	.word	0x08030c50
 8007b80:	0802b5b0 	.word	0x0802b5b0
 8007b84:	0802c9cc 	.word	0x0802c9cc

08007b88 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8007b88:	b5b0      	push	{r4, r5, r7, lr}
 8007b8a:	b08c      	sub	sp, #48	@ 0x30
 8007b8c:	af04      	add	r7, sp, #16
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	331c      	adds	r3, #28
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <mg_send+0x32>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d004      	beq.n	8007bc4 <mg_send+0x3c>
    mg_error(c, "net down");
 8007bba:	4934      	ldr	r1, [pc, #208]	@ (8007c8c <mg_send+0x104>)
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7f9 ff43 	bl	8001a48 <mg_error>
 8007bc2:	e05e      	b.n	8007c82 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01e      	beq.n	8007c12 <mg_send+0x8a>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <mg_send+0x6c>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8007bf4:	4b26      	ldr	r3, [pc, #152]	@ (8007c90 <mg_send+0x108>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	dd42      	ble.n	8007c82 <mg_send+0xfa>
 8007bfc:	4b25      	ldr	r3, [pc, #148]	@ (8007c94 <mg_send+0x10c>)
 8007bfe:	f241 428c 	movw	r2, #5260	@ 0x148c
 8007c02:	4925      	ldr	r1, [pc, #148]	@ (8007c98 <mg_send+0x110>)
 8007c04:	2004      	movs	r0, #4
 8007c06:	f7fb f917 	bl	8002e38 <mg_log_prefix>
 8007c0a:	4824      	ldr	r0, [pc, #144]	@ (8007c9c <mg_send+0x114>)
 8007c0c:	f7fb f964 	bl	8002ed8 <mg_log>
 8007c10:	e037      	b.n	8007c82 <mg_send+0xfa>
  } else if (c->is_udp) {
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d020      	beq.n	8007c64 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	33b0      	adds	r3, #176	@ 0xb0
 8007c26:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7fe fa30 	bl	8006090 <trim_len>
 8007c30:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f103 0018 	add.w	r0, r3, #24
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	689c      	ldr	r4, [r3, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8b1d      	ldrh	r5, [r3, #24]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	9103      	str	r1, [sp, #12]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	9102      	str	r1, [sp, #8]
 8007c4e:	9201      	str	r2, [sp, #4]
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	462b      	mov	r3, r5
 8007c54:	4622      	mov	r2, r4
 8007c56:	4601      	mov	r1, r0
 8007c58:	69b8      	ldr	r0, [r7, #24]
 8007c5a:	f7fd f84a 	bl	8004cf2 <tx_udp>
    res = true;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e00e      	b.n	8007c82 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	f7fb f807 	bl	8002c84 <mg_iobuf_add>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c8c:	0802c9e0 	.word	0x0802c9e0
 8007c90:	24000000 	.word	0x24000000
 8007c94:	08030c5c 	.word	0x08030c5c
 8007c98:	0802b5b0 	.word	0x0802b5b0
 8007c9c:	0802c9ec 	.word	0x0802c9ec

08007ca0 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	71fb      	strb	r3, [r7, #7]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8007cb4:	79bb      	ldrb	r3, [r7, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00d      	beq.n	8007cd6 <mg_pfn_iobuf_private+0x36>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	1c9a      	adds	r2, r3, #2
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d906      	bls.n	8007cd6 <mg_pfn_iobuf_private+0x36>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	3302      	adds	r3, #2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7fa ff4b 	bl	8002b6c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	1c9a      	adds	r2, r3, #2
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d811      	bhi.n	8007d08 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	1c58      	adds	r0, r3, #1
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6088      	str	r0, [r1, #8]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	79fa      	ldrb	r2, [r7, #7]
 8007cf6:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	4413      	add	r3, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8007d06:	e00f      	b.n	8007d28 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d209      	bcs.n	8007d28 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	1c58      	adds	r0, r3, #1
 8007d1e:	68f9      	ldr	r1, [r7, #12]
 8007d20:	6088      	str	r0, [r1, #8]
 8007d22:	4413      	add	r3, r2
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff ffac 	bl	8007ca0 <mg_pfn_iobuf_private>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <mg_vsnprintf>:

void mg_pfn_iobuf(char ch, void *param) {
  mg_pfn_iobuf_private(ch, param, true);
}

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	@ 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8007d6e:	f107 0114 	add.w	r1, r7, #20
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4809      	ldr	r0, [pc, #36]	@ (8007d9c <mg_vsnprintf+0x4c>)
 8007d78:	f7fa fb3a 	bl	80023f0 <mg_vxprintf>
 8007d7c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d204      	bcs.n	8007d90 <mg_vsnprintf+0x40>
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	4413      	add	r3, r2
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  return n;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3728      	adds	r7, #40	@ 0x28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	08007d31 	.word	0x08007d31

08007da0 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8007da0:	b40c      	push	{r2, r3}
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8007dac:	f107 031c 	add.w	r3, r7, #28
 8007db0:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff ffc8 	bl	8007d50 <mg_vsnprintf>
 8007dc0:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dce:	b002      	add	sp, #8
 8007dd0:	4770      	bx	lr

08007dd2 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	4603      	mov	r3, r0
 8007dda:	6039      	str	r1, [r7, #0]
 8007ddc:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f021 fad3 	bl	802938c <putchar>
  (void) param;
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3301      	adds	r3, #1
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3303      	adds	r3, #3
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	9302      	str	r3, [sp, #8]
 8007e1a:	9101      	str	r1, [sp, #4]
 8007e1c:	9200      	str	r2, [sp, #0]
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <print_ip4+0x44>)
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7fa fac8 	bl	80023ba <mg_xprintf>
 8007e2a:	4603      	mov	r3, r0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	0802ca00 	.word	0x0802ca00

08007e38 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	b08e      	sub	sp, #56	@ 0x38
 8007e3e:	af08      	add	r7, sp, #32
 8007e40:	6178      	str	r0, [r7, #20]
 8007e42:	6139      	str	r1, [r7, #16]
 8007e44:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f009 f9df 	bl	801120e <mg_ntohs>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3302      	adds	r3, #2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f009 f9d7 	bl	801120e <mg_ntohs>
 8007e60:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e62:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3304      	adds	r3, #4
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f009 f9cf 	bl	801120e <mg_ntohs>
 8007e70:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e72:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3306      	adds	r3, #6
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f009 f9c7 	bl	801120e <mg_ntohs>
 8007e80:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e82:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3308      	adds	r3, #8
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f009 f9bf 	bl	801120e <mg_ntohs>
 8007e90:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007e92:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	330a      	adds	r3, #10
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f009 f9b7 	bl	801120e <mg_ntohs>
 8007ea0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007ea2:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f009 f9af 	bl	801120e <mg_ntohs>
 8007eb0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007eb2:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	330e      	adds	r3, #14
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f009 f9a7 	bl	801120e <mg_ntohs>
 8007ec0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	9205      	str	r2, [sp, #20]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	9204      	str	r2, [sp, #16]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	9602      	str	r6, [sp, #8]
 8007ed2:	9501      	str	r5, [sp, #4]
 8007ed4:	9400      	str	r4, [sp, #0]
 8007ed6:	4643      	mov	r3, r8
 8007ed8:	4a05      	ldr	r2, [pc, #20]	@ (8007ef0 <print_ip6+0xb8>)
 8007eda:	6939      	ldr	r1, [r7, #16]
 8007edc:	6978      	ldr	r0, [r7, #20]
 8007ede:	f7fa fa6c 	bl	80023ba <mg_xprintf>
 8007ee2:	4603      	mov	r3, r0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eee:	bf00      	nop
 8007ef0:	0802ca0c 	.word	0x0802ca0c

08007ef4 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff6c 	bl	8007df0 <print_ip4>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	1d19      	adds	r1, r3, #4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6011      	str	r1, [r2, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	7cdb      	ldrb	r3, [r3, #19]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <mg_print_ip+0x32>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff ff74 	bl	8007e38 <print_ip6>
 8007f50:	4603      	mov	r3, r0
 8007f52:	e006      	b.n	8007f62 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	461a      	mov	r2, r3
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff48 	bl	8007df0 <print_ip4>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	1d19      	adds	r1, r3, #4
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6011      	str	r1, [r2, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	8a1b      	ldrh	r3, [r3, #16]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f009 f93f 	bl	801120e <mg_ntohs>
 8007f90:	4603      	mov	r3, r0
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <mg_print_ip_port+0x44>)
 8007f9a:	4a06      	ldr	r2, [pc, #24]	@ (8007fb4 <mg_print_ip_port+0x48>)
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7fa fa0b 	bl	80023ba <mg_xprintf>
 8007fa4:	4603      	mov	r3, r0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	08007f23 	.word	0x08007f23
 8007fb4:	0802ca28 	.word	0x0802ca28

08007fb8 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b08c      	sub	sp, #48	@ 0x30
 8007fbc:	af06      	add	r7, sp, #24
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	1d19      	adds	r1, r3, #4
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3303      	adds	r3, #3
 8007fec:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007fee:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007ff6:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	3305      	adds	r3, #5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	9403      	str	r4, [sp, #12]
 8008002:	9002      	str	r0, [sp, #8]
 8008004:	9101      	str	r1, [sp, #4]
 8008006:	9200      	str	r2, [sp, #0]
 8008008:	462b      	mov	r3, r5
 800800a:	4a05      	ldr	r2, [pc, #20]	@ (8008020 <mg_print_mac+0x68>)
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7fa f9d3 	bl	80023ba <mg_xprintf>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bdb0      	pop	{r4, r5, r7, pc}
 800801e:	bf00      	nop
 8008020:	0802ca30 	.word	0x0802ca30

08008024 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	1d19      	adds	r1, r3, #4
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6011      	str	r1, [r2, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6011      	str	r1, [r2, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 800804c:	4b16      	ldr	r3, [pc, #88]	@ (80080a8 <mg_print_hex+0x84>)
 800804e:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
 8008054:	e01e      	b.n	8008094 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	091b      	lsrs	r3, r3, #4
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4413      	add	r3, r2
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4413      	add	r3, r2
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	4610      	mov	r0, r2
 800808c:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	429a      	cmp	r2, r3
 800809a:	d3dc      	bcc.n	8008056 <mg_print_hex+0x32>
  }
  return 2 * bl;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	005b      	lsls	r3, r3, #1
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3720      	adds	r7, #32
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	0802b720 	.word	0x0802b720

080080ac <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80080b8:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	4413      	add	r3, r2
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	1d1a      	adds	r2, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d906      	bls.n	80080ea <mg_queue_read_len+0x3e>
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <mg_queue_read_len+0x48>)
 80080de:	4a06      	ldr	r2, [pc, #24]	@ (80080f8 <mg_queue_read_len+0x4c>)
 80080e0:	f641 31ca 	movw	r1, #7114	@ 0x1bca
 80080e4:	4805      	ldr	r0, [pc, #20]	@ (80080fc <mg_queue_read_len+0x50>)
 80080e6:	f020 fa47 	bl	8028578 <__assert_func>
  return n;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	0802ca94 	.word	0x0802ca94
 80080f8:	08030c64 	.word	0x08030c64
 80080fc:	0802b5b0 	.word	0x0802b5b0

08008100 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	429a      	cmp	r2, r3
 8008118:	d013      	beq.n	8008142 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ffc6 	bl	80080ac <mg_queue_read_len>
 8008120:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	429a      	cmp	r2, r3
 8008138:	d903      	bls.n	8008142 <mg_queue_next+0x42>
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ffb6 	bl	80080ac <mg_queue_read_len>
 8008140:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <mg_queue_next+0x58>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	3304      	adds	r3, #4
 8008152:	441a      	add	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	441a      	add	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d906      	bls.n	8008176 <mg_queue_next+0x76>
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <mg_queue_next+0x80>)
 800816a:	4a06      	ldr	r2, [pc, #24]	@ (8008184 <mg_queue_next+0x84>)
 800816c:	f641 31eb 	movw	r1, #7147	@ 0x1beb
 8008170:	4805      	ldr	r0, [pc, #20]	@ (8008188 <mg_queue_next+0x88>)
 8008172:	f020 fa01 	bl	8028578 <__assert_func>
  return len;
 8008176:	68fb      	ldr	r3, [r7, #12]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	0802cab8 	.word	0x0802cab8
 8008184:	08030c78 	.word	0x08030c78
 8008188:	0802b5b0 	.word	0x0802b5b0

0800818c <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	4413      	add	r3, r2
 800819e:	1d1a      	adds	r2, r3, #4
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d906      	bls.n	80081c0 <mg_queue_del+0x34>
 80081b2:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <mg_queue_del+0x3c>)
 80081b4:	4a05      	ldr	r2, [pc, #20]	@ (80081cc <mg_queue_del+0x40>)
 80081b6:	f641 31f8 	movw	r1, #7160	@ 0x1bf8
 80081ba:	4805      	ldr	r0, [pc, #20]	@ (80081d0 <mg_queue_del+0x44>)
 80081bc:	f020 f9dc 	bl	8028578 <__assert_func>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	0802cb0c 	.word	0x0802cb0c
 80081cc:	08030c88 	.word	0x08030c88
 80081d0:	0802b5b0 	.word	0x0802b5b0

080081d4 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	f04f 0300 	mov.w	r3, #0
 80081ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0e      	ldr	r2, [pc, #56]	@ (800822c <mg_sha256_init+0x58>)
 80081f4:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008230 <mg_sha256_init+0x5c>)
 80081fa:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008234 <mg_sha256_init+0x60>)
 8008200:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a0c      	ldr	r2, [pc, #48]	@ (8008238 <mg_sha256_init+0x64>)
 8008206:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a0c      	ldr	r2, [pc, #48]	@ (800823c <mg_sha256_init+0x68>)
 800820c:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a0b      	ldr	r2, [pc, #44]	@ (8008240 <mg_sha256_init+0x6c>)
 8008212:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <mg_sha256_init+0x70>)
 8008218:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a0a      	ldr	r2, [pc, #40]	@ (8008248 <mg_sha256_init+0x74>)
 800821e:	61da      	str	r2, [r3, #28]
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	6a09e667 	.word	0x6a09e667
 8008230:	bb67ae85 	.word	0xbb67ae85
 8008234:	3c6ef372 	.word	0x3c6ef372
 8008238:	a54ff53a 	.word	0xa54ff53a
 800823c:	510e527f 	.word	0x510e527f
 8008240:	9b05688c 	.word	0x9b05688c
 8008244:	1f83d9ab 	.word	0x1f83d9ab
 8008248:	5be0cd19 	.word	0x5be0cd19

0800824c <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800824c:	b480      	push	{r7}
 800824e:	b0cf      	sub	sp, #316	@ 0x13c
 8008250:	af00      	add	r7, sp, #0
 8008252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008256:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800825a:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800825c:	2300      	movs	r3, #0
 800825e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008268:	e043      	b.n	80082f2 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800826a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800826e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008278:	4413      	add	r3, r2
 800827a:	332c      	adds	r3, #44	@ 0x2c
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8008280:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008284:	3301      	adds	r3, #1
 8008286:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800828a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800828e:	6809      	ldr	r1, [r1, #0]
 8008290:	440b      	add	r3, r1
 8008292:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008296:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8008298:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800829a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800829e:	3302      	adds	r3, #2
 80082a0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80082a4:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80082a8:	6809      	ldr	r1, [r1, #0]
 80082aa:	440b      	add	r3, r1
 80082ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082b0:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80082b2:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 80082b4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80082b8:	3203      	adds	r2, #3
 80082ba:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80082be:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80082c2:	6809      	ldr	r1, [r1, #0]
 80082c4:	440a      	add	r2, r1
 80082c6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80082ca:	ea43 0102 	orr.w	r1, r3, r2
 80082ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80082d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80082da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80082de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082e2:	3301      	adds	r3, #1
 80082e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80082e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80082ec:	3304      	adds	r3, #4
 80082ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80082f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	ddb7      	ble.n	800826a <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 80082fa:	e069      	b.n	80083d0 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 80082fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008300:	1e9a      	subs	r2, r3, #2
 8008302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008306:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	ea4f 4273 	mov.w	r2, r3, ror #17
 8008312:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008316:	1e99      	subs	r1, r3, #2
 8008318:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800831c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008324:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008328:	405a      	eors	r2, r3
 800832a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800832e:	1e99      	subs	r1, r3, #2
 8008330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008334:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800833c:	0a9b      	lsrs	r3, r3, #10
 800833e:	405a      	eors	r2, r3
 8008340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008344:	1fd9      	subs	r1, r3, #7
 8008346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800834a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800834e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008352:	441a      	add	r2, r3
 8008354:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008358:	f1a3 010f 	sub.w	r1, r3, #15
 800835c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008360:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008368:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800836c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008370:	f1a3 000f 	sub.w	r0, r3, #15
 8008374:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008378:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800837c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008380:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008384:	4059      	eors	r1, r3
 8008386:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800838a:	f1a3 000f 	sub.w	r0, r3, #15
 800838e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008392:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800839a:	08db      	lsrs	r3, r3, #3
 800839c:	404b      	eors	r3, r1
 800839e:	441a      	add	r2, r3
 80083a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083a4:	f1a3 0110 	sub.w	r1, r3, #16
 80083a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80083b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083b4:	18d1      	adds	r1, r2, r3
 80083b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80083be:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80083c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 80083c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ca:	3301      	adds	r3, #1
 80083cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80083d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80083d6:	dd91      	ble.n	80082fc <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 80083d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 80083e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 80083f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8008408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800840c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8008418:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800841c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8008428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800842c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8008438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800843c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8008448:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800844c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 8008458:	2300      	movs	r3, #0
 800845a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800845e:	e078      	b.n	8008552 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 8008460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008464:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8008468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800846c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008470:	405a      	eors	r2, r3
 8008472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008476:	ea4f 6373 	mov.w	r3, r3, ror #25
 800847a:	405a      	eors	r2, r3
 800847c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008480:	441a      	add	r2, r3
 8008482:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8008486:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800848a:	4019      	ands	r1, r3
 800848c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008490:	43d8      	mvns	r0, r3
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	4003      	ands	r3, r0
 8008498:	404b      	eors	r3, r1
 800849a:	441a      	add	r2, r3
 800849c:	496e      	ldr	r1, [pc, #440]	@ (8008658 <mg_sha256_chunk+0x40c>)
 800849e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80084a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80084a6:	441a      	add	r2, r3
 80084a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80084b0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80084b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084b8:	4413      	add	r3, r2
 80084ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 80084be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80084c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084ca:	ea4f 3373 	mov.w	r3, r3, ror #13
 80084ce:	405a      	eors	r2, r3
 80084d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084d4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80084d8:	405a      	eors	r2, r3
 80084da:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80084de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80084e2:	4059      	eors	r1, r3
 80084e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084e8:	4019      	ands	r1, r3
 80084ea:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80084ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80084f2:	4003      	ands	r3, r0
 80084f4:	404b      	eors	r3, r1
 80084f6:	4413      	add	r3, r2
 80084f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008500:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 8008504:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008508:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800850c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008510:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 8008514:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8008518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851c:	4413      	add	r3, r2
 800851e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 8008522:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008526:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800852a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800852e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 8008532:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008536:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800853a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800853e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008542:	4413      	add	r3, r2
 8008544:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8008548:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800854c:	3301      	adds	r3, #1
 800854e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008552:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008556:	2b3f      	cmp	r3, #63	@ 0x3f
 8008558:	dd82      	ble.n	8008460 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800855a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800855e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800856a:	441a      	add	r2, r3
 800856c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008570:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 8008578:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800857c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008588:	441a      	add	r2, r3
 800858a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800858e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 8008596:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800859a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80085a6:	441a      	add	r2, r3
 80085a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 80085b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80085c4:	441a      	add	r2, r3
 80085c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 80085d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80085e2:	441a      	add	r2, r3
 80085e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 80085f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695a      	ldr	r2, [r3, #20]
 80085fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008600:	441a      	add	r2, r3
 8008602:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008606:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800860e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008612:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861e:	441a      	add	r2, r3
 8008620:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008624:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800862c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008630:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69da      	ldr	r2, [r3, #28]
 8008638:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800863c:	441a      	add	r2, r3
 800863e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008642:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	61da      	str	r2, [r3, #28]
}
 800864a:	bf00      	nop
 800864c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	08030914 	.word	0x08030914

0800865c <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800865c:	b5b0      	push	{r4, r5, r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e026      	b.n	80086bc <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	441a      	add	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008678:	7811      	ldrb	r1, [r2, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	460a      	mov	r2, r1
 8008680:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	629a      	str	r2, [r3, #40]	@ 0x28
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d10f      	bne.n	80086b6 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fdd8 	bl	800824c <mg_sha256_chunk>
      ctx->bits += 512;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a2:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 80086a6:	f143 0500 	adc.w	r5, r3, #0
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	3301      	adds	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d3d4      	bcc.n	800866e <mg_sha256_update+0x12>
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bdb0      	pop	{r4, r5, r7, pc}

080086ce <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 80086ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086de:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b37      	cmp	r3, #55	@ 0x37
 80086e4:	d814      	bhi.n	8008710 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	60fa      	str	r2, [r7, #12]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4413      	add	r3, r2
 80086f0:	2280      	movs	r2, #128	@ 0x80
 80086f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80086f6:	e007      	b.n	8008708 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	60fa      	str	r2, [r7, #12]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	4413      	add	r3, r2
 8008702:	2200      	movs	r2, #0
 8008704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b37      	cmp	r3, #55	@ 0x37
 800870c:	d9f4      	bls.n	80086f8 <mg_sha256_final+0x2a>
 800870e:	e01d      	b.n	800874c <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	60fa      	str	r2, [r7, #12]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4413      	add	r3, r2
 800871a:	2280      	movs	r2, #128	@ 0x80
 800871c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8008720:	e007      	b.n	8008732 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	60fa      	str	r2, [r7, #12]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	4413      	add	r3, r2
 800872c:	2200      	movs	r2, #0
 800872e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b3f      	cmp	r3, #63	@ 0x3f
 8008736:	d9f4      	bls.n	8008722 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8008738:	6838      	ldr	r0, [r7, #0]
 800873a:	f7ff fd87 	bl	800824c <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	332c      	adds	r3, #44	@ 0x2c
 8008742:	2238      	movs	r2, #56	@ 0x38
 8008744:	2100      	movs	r1, #0
 8008746:	4618      	mov	r0, r3
 8008748:	f020 ffbc 	bl	80296c4 <memset>
  }

  ctx->bits += ctx->len * 8;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008756:	00c9      	lsls	r1, r1, #3
 8008758:	2000      	movs	r0, #0
 800875a:	460c      	mov	r4, r1
 800875c:	4605      	mov	r5, r0
 800875e:	eb12 0804 	adds.w	r8, r2, r4
 8008762:	eb43 0905 	adc.w	r9, r3, r5
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	0a02      	lsrs	r2, r0, #8
 800878a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800878e:	0a0b      	lsrs	r3, r1, #8
 8008790:	b2d2      	uxtb	r2, r2
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	0c02      	lsrs	r2, r0, #16
 80087a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80087ac:	0c0b      	lsrs	r3, r1, #16
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	0e02      	lsrs	r2, r0, #24
 80087c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80087ca:	0e0b      	lsrs	r3, r1, #24
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	000a      	movs	r2, r1
 80087e4:	2300      	movs	r3, #0
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	0a0a      	lsrs	r2, r1, #8
 80087fe:	2300      	movs	r3, #0
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	0c0a      	lsrs	r2, r1, #16
 8008818:	2300      	movs	r3, #0
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	0e0a      	lsrs	r2, r1, #24
 8008832:	2300      	movs	r3, #0
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800883c:	6838      	ldr	r0, [r7, #0]
 800883e:	f7ff fd05 	bl	800824c <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e071      	b.n	800892c <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f1c3 0303 	rsb	r3, r3, #3
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	fa22 f103 	lsr.w	r1, r2, r3
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	b2ca      	uxtb	r2, r1
 8008860:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1c3 0303 	rsb	r3, r3, #3
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	fa22 f103 	lsr.w	r1, r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3304      	adds	r3, #4
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	b2ca      	uxtb	r2, r1
 800887c:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f1c3 0303 	rsb	r3, r3, #3
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	fa22 f103 	lsr.w	r1, r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3308      	adds	r3, #8
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	b2ca      	uxtb	r2, r1
 8008898:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f1c3 0303 	rsb	r3, r3, #3
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	fa22 f103 	lsr.w	r1, r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	330c      	adds	r3, #12
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	b2ca      	uxtb	r2, r1
 80088b4:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f1c3 0303 	rsb	r3, r3, #3
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	fa22 f103 	lsr.w	r1, r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3310      	adds	r3, #16
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	4413      	add	r3, r2
 80088ce:	b2ca      	uxtb	r2, r1
 80088d0:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f1c3 0303 	rsb	r3, r3, #3
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	fa22 f103 	lsr.w	r1, r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3314      	adds	r3, #20
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4413      	add	r3, r2
 80088ea:	b2ca      	uxtb	r2, r1
 80088ec:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f1c3 0303 	rsb	r3, r3, #3
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	fa22 f103 	lsr.w	r1, r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3318      	adds	r3, #24
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	b2ca      	uxtb	r2, r1
 8008908:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	69da      	ldr	r2, [r3, #28]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f1c3 0303 	rsb	r3, r3, #3
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	fa22 f103 	lsr.w	r1, r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	331c      	adds	r3, #28
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4413      	add	r3, r2
 8008922:	b2ca      	uxtb	r2, r1
 8008924:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d98a      	bls.n	8008848 <mg_sha256_final+0x17a>
  }
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800893e <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800893e:	b590      	push	{r4, r7, lr}
 8008940:	b0d3      	sub	sp, #332	@ 0x14c
 8008942:	af00      	add	r7, sp, #0
 8008944:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8008948:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800894c:	6020      	str	r0, [r4, #0]
 800894e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8008952:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8008956:	6001      	str	r1, [r0, #0]
 8008958:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800895c:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8008960:	600a      	str	r2, [r1, #0]
 8008962:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8008966:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800896a:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800896c:	2300      	movs	r3, #0
 800896e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008972:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008976:	223c      	movs	r2, #60	@ 0x3c
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f020 fea2 	bl	80296c4 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 8008980:	f107 0310 	add.w	r3, r7, #16
 8008984:	2240      	movs	r2, #64	@ 0x40
 8008986:	2136      	movs	r1, #54	@ 0x36
 8008988:	4618      	mov	r0, r3
 800898a:	f020 fe9b 	bl	80296c4 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800898e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008992:	2240      	movs	r2, #64	@ 0x40
 8008994:	215c      	movs	r1, #92	@ 0x5c
 8008996:	4618      	mov	r0, r3
 8008998:	f020 fe94 	bl	80296c4 <memset>
  if (keysz < 64) {
 800899c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80089a8:	d815      	bhi.n	80089d6 <mg_hmac_sha256+0x98>
    if (keysz > 0) memmove(k, key, keysz);
 80089aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d029      	beq.n	8008a0c <mg_hmac_sha256+0xce>
 80089b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089bc:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80089c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80089c8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	f020 fe5e 	bl	8029690 <memmove>
 80089d4:	e01a      	b.n	8008a0c <mg_hmac_sha256+0xce>
  } else {
    mg_sha256_init(&ctx);
 80089d6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fbfa 	bl	80081d4 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 80089e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089e4:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80089e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80089ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80089f0:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	6819      	ldr	r1, [r3, #0]
 80089f8:	f7ff fe30 	bl	800865c <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 80089fc:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8008a00:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fe61 	bl	80086ce <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8008a12:	e032      	b.n	8008a7a <mg_hmac_sha256+0x13c>
    i_pad[i] ^= k[i];
 8008a14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008a18:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8008a1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a20:	4413      	add	r3, r2
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8008a28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a2c:	440b      	add	r3, r1
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4053      	eors	r3, r2
 8008a32:	b2d9      	uxtb	r1, r3
 8008a34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008a38:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8008a3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a40:	4413      	add	r3, r2
 8008a42:	460a      	mov	r2, r1
 8008a44:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8008a46:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8008a4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a4e:	4413      	add	r3, r2
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8008a56:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a5a:	440b      	add	r3, r1
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4053      	eors	r3, r2
 8008a60:	b2d9      	uxtb	r1, r3
 8008a62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8008a66:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a6a:	4413      	add	r3, r2
 8008a6c:	460a      	mov	r2, r1
 8008a6e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 8008a70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a74:	3301      	adds	r3, #1
 8008a76:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8008a7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a80:	d9c8      	bls.n	8008a14 <mg_hmac_sha256+0xd6>
  }
  mg_sha256_init(&ctx);
 8008a82:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fba4 	bl	80081d4 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 8008a8c:	f107 0110 	add.w	r1, r7, #16
 8008a90:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008a94:	2240      	movs	r2, #64	@ 0x40
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fde0 	bl	800865c <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 8008a9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008aa0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8008aa4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8008aa8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	f7ff fdd5 	bl	800865c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8008ab2:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8008ab6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008aba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008abe:	4611      	mov	r1, r2
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f7ff fe04 	bl	80086ce <mg_sha256_final>
  mg_sha256_init(&ctx);
 8008ac6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff fb82 	bl	80081d4 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 8008ad0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008ad4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008ad8:	2240      	movs	r2, #64	@ 0x40
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff fdbe 	bl	800865c <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 8008ae0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008ae4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008ae8:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8008aec:	2220      	movs	r2, #32
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	f7ff fdb4 	bl	800865c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8008af4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8008af8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008afc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008b00:	4611      	mov	r1, r2
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	f7ff fde3 	bl	80086ce <mg_sha256_final>
}
 8008b08:	bf00      	nop
 8008b0a:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd90      	pop	{r4, r7, pc}

08008b12 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <mg_str_s+0x1e>
 8008b26:	6838      	ldr	r0, [r7, #0]
 8008b28:	f7f7 fc2a 	bl	8000380 <strlen>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	e000      	b.n	8008b32 <mg_str_s+0x20>
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
  return str;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b40:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	617b      	str	r3, [r7, #20]
  return str;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b6c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <mg_tolc>:

static int mg_tolc(char c) {
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d905      	bls.n	8008b98 <mg_tolc+0x1c>
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008b90:	d802      	bhi.n	8008b98 <mg_tolc+0x1c>
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	3320      	adds	r3, #32
 8008b96:	e000      	b.n	8008b9a <mg_tolc+0x1e>
 8008b98:	79fb      	ldrb	r3, [r7, #7]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <mg_strcasecmp>:
  if (i < str1.len) return 1;
  if (i < str2.len) return -1;
  return 0;
}

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8008ba6:	b590      	push	{r4, r7, lr}
 8008ba8:	b089      	sub	sp, #36	@ 0x24
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	f107 0408 	add.w	r4, r7, #8
 8008bb0:	e884 0003 	stmia.w	r4, {r0, r1}
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8008bbe:	e01f      	b.n	8008c00 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff ffd7 	bl	8008b7c <mg_tolc>
 8008bce:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff ffcf 	bl	8008b7c <mg_tolc>
 8008bde:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	da02      	bge.n	8008bee <mg_strcasecmp+0x48>
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	e01e      	b.n	8008c2c <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	dd01      	ble.n	8008bfa <mg_strcasecmp+0x54>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e018      	b.n	8008c2c <mg_strcasecmp+0x86>
    i++;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d203      	bcs.n	8008c10 <mg_strcasecmp+0x6a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d3d7      	bcc.n	8008bc0 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d201      	bcs.n	8008c1c <mg_strcasecmp+0x76>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e007      	b.n	8008c2c <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d202      	bcs.n	8008c2a <mg_strcasecmp+0x84>
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295
 8008c28:	e000      	b.n	8008c2c <mg_strcasecmp+0x86>
  return 0;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3724      	adds	r7, #36	@ 0x24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd90      	pop	{r4, r7, pc}

08008c34 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8008c34:	b490      	push	{r4, r7}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	f107 0408 	add.w	r4, r7, #8
 8008c3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c42:	4639      	mov	r1, r7
 8008c44:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61bb      	str	r3, [r7, #24]
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80ba 	beq.w	8008dd4 <mg_match+0x1a0>
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c68:	2200      	movs	r2, #0
 8008c6a:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8008c6c:	e0b2      	b.n	8008dd4 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d25b      	bcs.n	8008d2e <mg_match+0xfa>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d257      	bcs.n	8008d2e <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8008c86:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c88:	d015      	beq.n	8008cb6 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	4413      	add	r3, r2
 8008c90:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8008c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c94:	d04b      	beq.n	8008d2e <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b23      	cmp	r3, #35	@ 0x23
 8008ca0:	d045      	beq.n	8008d2e <mg_match+0xfa>
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	440b      	add	r3, r1
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d13b      	bne.n	8008d2e <mg_match+0xfa>
      if (caps == NULL) {
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d031      	beq.n	8008d20 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8008cc6:	d111      	bne.n	8008cec <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	441a      	add	r2, r3
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	3308      	adds	r3, #8
 8008cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	e019      	b.n	8008d20 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d015      	beq.n	8008d20 <mg_match+0xec>
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d111      	bne.n	8008d20 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	441a      	add	r2, r3
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	3308      	adds	r3, #8
 8008d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3301      	adds	r3, #1
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	e052      	b.n	8008dd4 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d222      	bcs.n	8008d7c <mg_match+0x148>
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d40:	d005      	beq.n	8008d4e <mg_match+0x11a>
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b23      	cmp	r3, #35	@ 0x23
 8008d4c:	d116      	bne.n	8008d7c <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <mg_match+0x138>
 8008d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d107      	bne.n	8008d6c <mg_match+0x138>
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	2200      	movs	r2, #0
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	441a      	add	r2, r3
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	61fa      	str	r2, [r7, #28]
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	e02b      	b.n	8008dd4 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d025      	beq.n	8008dce <mg_match+0x19a>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d821      	bhi.n	8008dce <mg_match+0x19a>
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	4413      	add	r3, r2
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b23      	cmp	r3, #35	@ 0x23
 8008d94:	d005      	beq.n	8008da2 <mg_match+0x16e>
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008da0:	d015      	beq.n	8008dce <mg_match+0x19a>
      i = ni, j = nj;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <mg_match+0x19e>
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10c      	bne.n	8008dd2 <mg_match+0x19e>
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d108      	bne.n	8008dd2 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	3b08      	subs	r3, #8
 8008dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	2200      	movs	r2, #0
 8008dca:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8008dcc:	e001      	b.n	8008dd2 <mg_match+0x19e>
      }
    } else {
      return false;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e01f      	b.n	8008e12 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8008dd2:	bf00      	nop
  while (i < p.len || j < s.len) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	f4ff af48 	bcc.w	8008c6e <mg_match+0x3a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	f4ff af43 	bcc.w	8008c6e <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8008de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d010      	beq.n	8008e10 <mg_match+0x1dc>
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <mg_match+0x1dc>
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	441a      	add	r2, r3
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	605a      	str	r2, [r3, #4]
  }
  return true;
 8008e10:	2301      	movs	r3, #1
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3720      	adds	r7, #32
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc90      	pop	{r4, r7}
 8008e1a:	4770      	bx	lr

08008e1c <mg_str_to_num>:
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
    return true;
  }
}

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8008e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	b0a5      	sub	sp, #148	@ 0x94
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8008e28:	e884 0003 	stmia.w	r4, {r0, r1}
 8008e2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e36:	2300      	movs	r3, #0
 8008e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8008e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d016      	beq.n	8008e72 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8008e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d00d      	beq.n	8008e68 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8008e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d104      	bne.n	8008e5e <mg_str_to_num+0x42>
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	e00d      	b.n	8008e7a <mg_str_to_num+0x5e>
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295
 8008e66:	e008      	b.n	8008e7a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8008e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	e003      	b.n	8008e7a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8008e72:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8008e76:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8008e7a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8008e8a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	bf08      	it	eq
 8008e94:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8008e98:	d105      	bne.n	8008ea6 <mg_str_to_num+0x8a>
 8008e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	d001      	beq.n	8008ea6 <mg_str_to_num+0x8a>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e1e8      	b.n	8009278 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d12d      	bne.n	8008f08 <mg_str_to_num+0xec>
 8008eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d92a      	bls.n	8008f08 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8008eb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eb8:	4413      	add	r3, r2
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b30      	cmp	r3, #48	@ 0x30
 8008ebe:	d121      	bne.n	8008f04 <mg_str_to_num+0xe8>
      i++;
 8008ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8008eca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ed0:	4413      	add	r3, r2
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b62      	cmp	r3, #98	@ 0x62
 8008ed6:	d00a      	beq.n	8008eee <mg_str_to_num+0xd2>
 8008ed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ede:	4413      	add	r3, r2
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b78      	cmp	r3, #120	@ 0x78
 8008ee4:	d101      	bne.n	8008eea <mg_str_to_num+0xce>
 8008ee6:	2310      	movs	r3, #16
 8008ee8:	e002      	b.n	8008ef0 <mg_str_to_num+0xd4>
 8008eea:	230a      	movs	r3, #10
 8008eec:	e000      	b.n	8008ef0 <mg_str_to_num+0xd4>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef4:	2b0a      	cmp	r3, #10
 8008ef6:	d007      	beq.n	8008f08 <mg_str_to_num+0xec>
 8008ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008efc:	3301      	adds	r3, #1
 8008efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f02:	e001      	b.n	8008f08 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8008f04:	230a      	movs	r3, #10
 8008f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8008f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f0a:	2b10      	cmp	r3, #16
 8008f0c:	f000 8178 	beq.w	8009200 <mg_str_to_num+0x3e4>
 8008f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f12:	2b10      	cmp	r3, #16
 8008f14:	f300 817d 	bgt.w	8009212 <mg_str_to_num+0x3f6>
 8008f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d052      	beq.n	8008fc4 <mg_str_to_num+0x1a8>
 8008f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f20:	2b0a      	cmp	r3, #10
 8008f22:	f000 80cd 	beq.w	80090c0 <mg_str_to_num+0x2a4>
 8008f26:	e174      	b.n	8009212 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8008f28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f2e:	4413      	add	r3, r2
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	3b30      	subs	r3, #48	@ 0x30
 8008f34:	17da      	asrs	r2, r3, #31
 8008f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f38:	637a      	str	r2, [r7, #52]	@ 0x34
 8008f3a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008f3e:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8008f42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	0842      	lsrs	r2, r0, #1
 8008f50:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008f54:	084b      	lsrs	r3, r1, #1
 8008f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f5a:	4282      	cmp	r2, r0
 8008f5c:	418b      	sbcs	r3, r1
 8008f5e:	d201      	bcs.n	8008f64 <mg_str_to_num+0x148>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e189      	b.n	8009278 <mg_str_to_num+0x45c>
        result *= 2;
 8008f64:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008f68:	1891      	adds	r1, r2, r2
 8008f6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f6c:	415b      	adcs	r3, r3
 8008f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008f74:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8008f78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008f7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f80:	1a85      	subs	r5, r0, r2
 8008f82:	eb61 0603 	sbc.w	r6, r1, r3
 8008f86:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008f8a:	4295      	cmp	r5, r2
 8008f8c:	eb76 0303 	sbcs.w	r3, r6, r3
 8008f90:	d201      	bcs.n	8008f96 <mg_str_to_num+0x17a>
 8008f92:	2300      	movs	r3, #0
 8008f94:	e170      	b.n	8009278 <mg_str_to_num+0x45c>
        result += digit;
 8008f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f9e:	1884      	adds	r4, r0, r2
 8008fa0:	623c      	str	r4, [r7, #32]
 8008fa2:	eb41 0303 	adc.w	r3, r1, r3
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fa8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008fac:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8008fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8008fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f080 8123 	bcs.w	8009216 <mg_str_to_num+0x3fa>
 8008fd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fd6:	4413      	add	r3, r2
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b30      	cmp	r3, #48	@ 0x30
 8008fdc:	d0a4      	beq.n	8008f28 <mg_str_to_num+0x10c>
 8008fde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fe4:	4413      	add	r3, r2
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b31      	cmp	r3, #49	@ 0x31
 8008fea:	d09d      	beq.n	8008f28 <mg_str_to_num+0x10c>
      }
      break;
 8008fec:	e113      	b.n	8009216 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8008fee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ff4:	4413      	add	r3, r2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	3b30      	subs	r3, #48	@ 0x30
 8008ffa:	17da      	asrs	r2, r3, #31
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	61fa      	str	r2, [r7, #28]
 8009000:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009004:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8009008:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800900c:	f04f 020a 	mov.w	r2, #10
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	f7f7 f9bc 	bl	8000390 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009024:	4290      	cmp	r0, r2
 8009026:	eb71 0303 	sbcs.w	r3, r1, r3
 800902a:	d201      	bcs.n	8009030 <mg_str_to_num+0x214>
 800902c:	2300      	movs	r3, #0
 800902e:	e123      	b.n	8009278 <mg_str_to_num+0x45c>
        result *= 10;
 8009030:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8009034:	4622      	mov	r2, r4
 8009036:	462b      	mov	r3, r5
 8009038:	f04f 0000 	mov.w	r0, #0
 800903c:	f04f 0100 	mov.w	r1, #0
 8009040:	0099      	lsls	r1, r3, #2
 8009042:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8009046:	0090      	lsls	r0, r2, #2
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	eb12 0804 	adds.w	r8, r2, r4
 8009050:	eb43 0905 	adc.w	r9, r3, r5
 8009054:	eb18 0308 	adds.w	r3, r8, r8
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	eb49 0309 	adc.w	r3, r9, r9
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009064:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8009068:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800906c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009070:	1a84      	subs	r4, r0, r2
 8009072:	63bc      	str	r4, [r7, #56]	@ 0x38
 8009074:	eb61 0303 	sbc.w	r3, r1, r3
 8009078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800907a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800907e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8009082:	4621      	mov	r1, r4
 8009084:	4291      	cmp	r1, r2
 8009086:	4629      	mov	r1, r5
 8009088:	eb71 0303 	sbcs.w	r3, r1, r3
 800908c:	d201      	bcs.n	8009092 <mg_str_to_num+0x276>
 800908e:	2300      	movs	r3, #0
 8009090:	e0f2      	b.n	8009278 <mg_str_to_num+0x45c>
        result += digit;
 8009092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009096:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800909a:	1884      	adds	r4, r0, r2
 800909c:	60bc      	str	r4, [r7, #8]
 800909e:	eb41 0303 	adc.w	r3, r1, r3
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80090a8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80090ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090b0:	3301      	adds	r3, #1
 80090b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090ba:	3301      	adds	r3, #1
 80090bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80090c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	f080 80a7 	bcs.w	800921a <mg_str_to_num+0x3fe>
 80090cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090d2:	4413      	add	r3, r2
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80090d8:	f240 809f 	bls.w	800921a <mg_str_to_num+0x3fe>
 80090dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090e2:	4413      	add	r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b39      	cmp	r3, #57	@ 0x39
 80090e8:	d981      	bls.n	8008fee <mg_str_to_num+0x1d2>
      }
      break;
 80090ea:	e096      	b.n	800921a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 80090ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090f2:	4413      	add	r3, r2
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80090fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80090fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8009100:	d90a      	bls.n	8009118 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8009102:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009106:	2b39      	cmp	r3, #57	@ 0x39
 8009108:	d806      	bhi.n	8009118 <mg_str_to_num+0x2fc>
 800910a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800910e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8009110:	17da      	asrs	r2, r3, #31
 8009112:	643b      	str	r3, [r7, #64]	@ 0x40
 8009114:	647a      	str	r2, [r7, #68]	@ 0x44
 8009116:	e023      	b.n	8009160 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8009118:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800911c:	2b40      	cmp	r3, #64	@ 0x40
 800911e:	d90a      	bls.n	8009136 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8009120:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009124:	2b46      	cmp	r3, #70	@ 0x46
 8009126:	d806      	bhi.n	8009136 <mg_str_to_num+0x31a>
 8009128:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800912c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800912e:	17da      	asrs	r2, r3, #31
 8009130:	643b      	str	r3, [r7, #64]	@ 0x40
 8009132:	647a      	str	r2, [r7, #68]	@ 0x44
 8009134:	e014      	b.n	8009160 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8009136:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800913a:	2b60      	cmp	r3, #96	@ 0x60
 800913c:	d90a      	bls.n	8009154 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800913e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009142:	2b66      	cmp	r3, #102	@ 0x66
 8009144:	d806      	bhi.n	8009154 <mg_str_to_num+0x338>
 8009146:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800914a:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 800914c:	17da      	asrs	r2, r3, #31
 800914e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009150:	647a      	str	r2, [r7, #68]	@ 0x44
 8009152:	e005      	b.n	8009160 <mg_str_to_num+0x344>
 8009154:	f04f 33ff 	mov.w	r3, #4294967295
 8009158:	f04f 34ff 	mov.w	r4, #4294967295
 800915c:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8009160:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8009164:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8009168:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	bf08      	it	eq
 8009172:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8009176:	d04a      	beq.n	800920e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8009178:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	0902      	lsrs	r2, r0, #4
 8009186:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800918a:	090b      	lsrs	r3, r1, #4
 800918c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009190:	4282      	cmp	r2, r0
 8009192:	418b      	sbcs	r3, r1
 8009194:	d201      	bcs.n	800919a <mg_str_to_num+0x37e>
 8009196:	2300      	movs	r3, #0
 8009198:	e06e      	b.n	8009278 <mg_str_to_num+0x45c>
        result *= 16;
 800919a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	010b      	lsls	r3, r1, #4
 80091a8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80091ac:	0102      	lsls	r2, r0, #4
 80091ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80091b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80091b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80091ba:	ebb0 0a02 	subs.w	sl, r0, r2
 80091be:	eb61 0b03 	sbc.w	fp, r1, r3
 80091c2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80091c6:	4592      	cmp	sl, r2
 80091c8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80091cc:	d201      	bcs.n	80091d2 <mg_str_to_num+0x3b6>
 80091ce:	2300      	movs	r3, #0
 80091d0:	e052      	b.n	8009278 <mg_str_to_num+0x45c>
        result += digit;
 80091d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80091da:	1884      	adds	r4, r0, r2
 80091dc:	603c      	str	r4, [r7, #0]
 80091de:	eb41 0303 	adc.w	r3, r1, r3
 80091e2:	607b      	str	r3, [r7, #4]
 80091e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80091e8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80091ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091f0:	3301      	adds	r3, #1
 80091f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091fa:	3301      	adds	r3, #1
 80091fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8009200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009202:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8009206:	429a      	cmp	r2, r3
 8009208:	f4ff af70 	bcc.w	80090ec <mg_str_to_num+0x2d0>
      }
      break;
 800920c:	e006      	b.n	800921c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 800920e:	bf00      	nop
      break;
 8009210:	e004      	b.n	800921c <mg_str_to_num+0x400>
    default:
      return false;
 8009212:	2300      	movs	r3, #0
 8009214:	e030      	b.n	8009278 <mg_str_to_num+0x45c>
      break;
 8009216:	bf00      	nop
 8009218:	e000      	b.n	800921c <mg_str_to_num+0x400>
      break;
 800921a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 800921c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <mg_str_to_num+0x40c>
 8009224:	2300      	movs	r3, #0
 8009226:	e027      	b.n	8009278 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8009228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800922a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800922e:	429a      	cmp	r2, r3
 8009230:	d001      	beq.n	8009236 <mg_str_to_num+0x41a>
 8009232:	2300      	movs	r3, #0
 8009234:	e020      	b.n	8009278 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8009236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800923a:	2b01      	cmp	r3, #1
 800923c:	d104      	bne.n	8009248 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 800923e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8009242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	e016      	b.n	8009276 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8009248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800924c:	2b02      	cmp	r3, #2
 800924e:	d104      	bne.n	800925a <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8009250:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8009254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	e00d      	b.n	8009276 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 800925a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800925e:	2b04      	cmp	r3, #4
 8009260:	d104      	bne.n	800926c <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8009262:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e004      	b.n	8009276 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800926c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800926e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009272:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8009276:	2301      	movs	r3, #1
}
 8009278:	4618      	mov	r0, r3
 800927a:	3794      	adds	r7, #148	@ 0x94
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009282 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8009282:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6178      	str	r0, [r7, #20]
 800928c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8009290:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009298:	eb10 0a02 	adds.w	sl, r0, r2
 800929c:	eb41 0b03 	adc.w	fp, r1, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	4592      	cmp	sl, r2
 80092a8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80092ac:	d206      	bcs.n	80092bc <mg_timer_expired+0x3a>
 80092ae:	6979      	ldr	r1, [r7, #20]
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	d10d      	bne.n	80092e2 <mg_timer_expired+0x60>
 80092c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80092ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092ce:	1886      	adds	r6, r0, r2
 80092d0:	603e      	str	r6, [r7, #0]
 80092d2:	eb41 0303 	adc.w	r3, r1, r3
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092de:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80092ec:	4290      	cmp	r0, r2
 80092ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80092f2:	d201      	bcs.n	80092f8 <mg_timer_expired+0x76>
 80092f4:	2300      	movs	r3, #0
 80092f6:	e022      	b.n	800933e <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009302:	ebb0 0802 	subs.w	r8, r0, r2
 8009306:	eb61 0903 	sbc.w	r9, r1, r3
 800930a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800930e:	4542      	cmp	r2, r8
 8009310:	eb73 0309 	sbcs.w	r3, r3, r9
 8009314:	d207      	bcs.n	8009326 <mg_timer_expired+0xa4>
 8009316:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800931a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800931e:	1884      	adds	r4, r0, r2
 8009320:	eb41 0503 	adc.w	r5, r1, r3
 8009324:	e007      	b.n	8009336 <mg_timer_expired+0xb4>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800932c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009330:	1884      	adds	r4, r0, r2
 8009332:	eb41 0503 	adc.w	r5, r1, r3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800933c:	2301      	movs	r3, #1
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009348:	4770      	bx	lr

0800934a <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800934a:	b590      	push	{r4, r7, lr}
 800934c:	b08b      	sub	sp, #44	@ 0x2c
 800934e:	af02      	add	r7, sp, #8
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	e054      	b.n	8009408 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	d10d      	bne.n	8009384 <mg_timer_poll+0x3a>
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d007      	beq.n	8009384 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <mg_timer_poll+0x3a>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <mg_timer_poll+0x3c>
 8009384:	2300      	movs	r3, #0
 8009386:	76fb      	strb	r3, [r7, #27]
 8009388:	7efb      	ldrb	r3, [r7, #27]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f103 0410 	add.w	r4, r3, #16
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800939c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a0:	e9cd 2300 	strd	r2, r3, [sp]
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff ff6a 	bl	8009282 <mg_timer_expired>
 80093ae:	4603      	mov	r3, r0
 80093b0:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b6:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 80093b8:	7efb      	ldrb	r3, [r7, #27]
 80093ba:	f083 0301 	eor.w	r3, r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <mg_timer_poll+0x86>
 80093c4:	7ebb      	ldrb	r3, [r7, #26]
 80093c6:	f083 0301 	eor.w	r3, r3, #1
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d118      	bne.n	8009402 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <mg_timer_poll+0x9e>
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d105      	bne.n	80093f4 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	6a12      	ldr	r2, [r2, #32]
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f043 0204 	orr.w	r2, r3, #4
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	619a      	str	r2, [r3, #24]
 8009400:	e000      	b.n	8009404 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 8009402:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	61fb      	str	r3, [r7, #28]
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1a7      	bne.n	800935e <mg_timer_poll+0x14>
  }
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	3724      	adds	r7, #36	@ 0x24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd90      	pop	{r4, r7, pc}

08009418 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 8009424:	4b0b      	ldr	r3, [pc, #44]	@ (8009454 <mg_tls_hexdump+0x3c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b03      	cmp	r3, #3
 800942a:	dd0e      	ble.n	800944a <mg_tls_hexdump+0x32>
 800942c:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <mg_tls_hexdump+0x40>)
 800942e:	f242 7263 	movw	r2, #10083	@ 0x2763
 8009432:	490a      	ldr	r1, [pc, #40]	@ (800945c <mg_tls_hexdump+0x44>)
 8009434:	2004      	movs	r0, #4
 8009436:	f7f9 fcff 	bl	8002e38 <mg_log_prefix>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a07      	ldr	r2, [pc, #28]	@ (8009460 <mg_tls_hexdump+0x48>)
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	4807      	ldr	r0, [pc, #28]	@ (8009464 <mg_tls_hexdump+0x4c>)
 8009446:	f7f9 fd47 	bl	8002ed8 <mg_log>
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	24000000 	.word	0x24000000
 8009458:	08030c98 	.word	0x08030c98
 800945c:	0802b5b0 	.word	0x0802b5b0
 8009460:	08008025 	.word	0x08008025
 8009464:	0802cca4 	.word	0x0802cca4

08009468 <mg_der_to_tlv>:
  uint32_t len;
  uint8_t *value;
};

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d802      	bhi.n	8009480 <mg_der_to_tlv+0x18>
    return -1;
 800947a:	f04f 33ff 	mov.w	r3, #4294967295
 800947e:	e041      	b.n	8009504 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781a      	ldrb	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	1c9a      	adds	r2, r3, #2
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80094a2:	d921      	bls.n	80094e8 <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	3b80      	subs	r3, #128	@ 0x80
 80094aa:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 80094b2:	2300      	movs	r3, #0
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	e00d      	b.n	80094d4 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	3202      	adds	r2, #2
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	440a      	add	r2, r1
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	3301      	adds	r3, #1
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d3ed      	bcc.n	80094b8 <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3302      	adds	r3, #2
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	441a      	add	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	441a      	add	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6899      	ldr	r1, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	440b      	add	r3, r1
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d202      	bcs.n	8009502 <mg_der_to_tlv+0x9a>
    return -1;
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009500:	e000      	b.n	8009504 <mg_der_to_tlv+0x9c>
  }
  return 0;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <mg_der_find>:

static int mg_der_find(uint8_t *der, size_t dersz, uint8_t *oid, size_t oidsz,
                       struct mg_der_tlv *tlv) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	@ 0x30
 8009514:	af02      	add	r7, sp, #8
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
  uint8_t *p, *end;
  struct mg_der_tlv child = {0, 0, NULL};
 800951e:	2300      	movs	r3, #0
 8009520:	743b      	strb	r3, [r7, #16]
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	2300      	movs	r3, #0
 8009528:	61bb      	str	r3, [r7, #24]
  if (mg_der_to_tlv(der, dersz, tlv) < 0) {
 800952a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff ff9a 	bl	8009468 <mg_der_to_tlv>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	da02      	bge.n	8009540 <mg_der_find+0x30>
    return -1;                  // invalid DER
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	e052      	b.n	80095e6 <mg_der_find+0xd6>
  } else if (tlv->type == 6) {  // found OID, check value
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b06      	cmp	r3, #6
 8009546:	d112      	bne.n	800956e <mg_der_find+0x5e>
    return (tlv->len == oidsz && memcmp(tlv->value, oid, oidsz) == 0);
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d10b      	bne.n	800956a <mg_der_find+0x5a>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f020 f888 	bl	8029670 <memcmp>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <mg_der_find+0x5a>
 8009566:	2301      	movs	r3, #1
 8009568:	e03d      	b.n	80095e6 <mg_der_find+0xd6>
 800956a:	2300      	movs	r3, #0
 800956c:	e03b      	b.n	80095e6 <mg_der_find+0xd6>
  } else if ((tlv->type & 0x20) == 0) {
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <mg_der_find+0x6e>
    return 0;  // Primitive, but not OID: not found
 800957a:	2300      	movs	r3, #0
 800957c:	e033      	b.n	80095e6 <mg_der_find+0xd6>
  }
  // Constructed object: scan children
  p = tlv->value;
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24
  end = tlv->value + tlv->len;
 8009584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4413      	add	r3, r2
 800958e:	623b      	str	r3, [r7, #32]
  while (end > p) {
 8009590:	e024      	b.n	80095dc <mg_der_find+0xcc>
    int r;
    mg_der_to_tlv(p, (size_t) (end - p), &child);
 8009592:	6a3a      	ldr	r2, [r7, #32]
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	4619      	mov	r1, r3
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	461a      	mov	r2, r3
 80095a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095a2:	f7ff ff61 	bl	8009468 <mg_der_to_tlv>
    r = mg_der_find(p, (size_t) (end - p), oid, oidsz, tlv);
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095b8:	f7ff ffaa 	bl	8009510 <mg_der_find>
 80095bc:	61f8      	str	r0, [r7, #28]
    if (r < 0) return -1;  // error
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	da02      	bge.n	80095ca <mg_der_find+0xba>
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295
 80095c8:	e00d      	b.n	80095e6 <mg_der_find+0xd6>
    if (r > 0) return 1;   // found OID!
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dd01      	ble.n	80095d4 <mg_der_find+0xc4>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e008      	b.n	80095e6 <mg_der_find+0xd6>
    p = child.value + child.len;
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	4413      	add	r3, r2
 80095da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (end > p) {
 80095dc:	6a3a      	ldr	r2, [r7, #32]
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d8d6      	bhi.n	8009592 <mg_der_find+0x82>
  }
  return 0;  // not found
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3728      	adds	r7, #40	@ 0x28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d914      	bls.n	8009628 <mg_tls_got_record+0x3a>
         c->rtls.len >=
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009606:	3203      	adds	r2, #3
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	0212      	lsls	r2, r2, #8
 800960c:	b211      	sxth	r1, r2
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009612:	3204      	adds	r2, #4
 8009614:	7812      	ldrb	r2, [r2, #0]
 8009616:	b212      	sxth	r2, r2
 8009618:	430a      	orrs	r2, r1
 800961a:	b212      	sxth	r2, r2
 800961c:	b292      	uxth	r2, r2
 800961e:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8009620:	4293      	cmp	r3, r2
 8009622:	d301      	bcc.n	8009628 <mg_tls_got_record+0x3a>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <mg_tls_got_record+0x3c>
 8009628:	2300      	movs	r3, #0
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	b2db      	uxtb	r3, r3
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3368      	adds	r3, #104	@ 0x68
 8009648:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3303      	adds	r3, #3
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	b21a      	sxth	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3304      	adds	r3, #4
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b21b      	sxth	r3, r3
 8009660:	4313      	orrs	r3, r2
 8009662:	b21b      	sxth	r3, r3
 8009664:	b29b      	uxth	r3, r3
 8009666:	3305      	adds	r3, #5
 8009668:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 800966a:	897b      	ldrh	r3, [r7, #10]
 800966c:	461a      	mov	r2, r3
 800966e:	2100      	movs	r1, #0
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7f9 fb59 	bl	8002d28 <mg_iobuf_del>
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800968e:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	4413      	add	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d033      	beq.n	800970c <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	3301      	adds	r3, #1
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	041a      	lsls	r2, r3, #16
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3302      	adds	r3, #2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	021b      	lsls	r3, r3, #8
 80096b4:	4313      	orrs	r3, r2
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	3203      	adds	r2, #3
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	4313      	orrs	r3, r2
 80096be:	3304      	adds	r3, #4
 80096c0:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d904      	bls.n	80096d6 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 80096cc:	4911      	ldr	r1, [pc, #68]	@ (8009714 <mg_tls_drop_message+0x94>)
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f8 f9ba 	bl	8001a48 <mg_error>
    return;
 80096d4:	e01b      	b.n	800970e <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	3320      	adds	r3, #32
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	6939      	ldr	r1, [r7, #16]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe ffbc 	bl	800865c <mg_sha256_update>
  tls->recv_offset += len;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	695a      	ldr	r2, [r3, #20]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	441a      	add	r2, r3
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	699a      	ldr	r2, [r3, #24]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1ad2      	subs	r2, r2, r3
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ff99 	bl	800963c <mg_tls_drop_record>
 800970a:	e000      	b.n	800970e <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 800970c:	bf00      	nop
  }
}
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	0802ccac 	.word	0x0802ccac

08009718 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8009718:	b590      	push	{r4, r7, lr}
 800971a:	b0d1      	sub	sp, #324	@ 0x144
 800971c:	af02      	add	r7, sp, #8
 800971e:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8009722:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800972c:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8009730:	6001      	str	r1, [r0, #0]
 8009732:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009736:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800973a:	600a      	str	r2, [r1, #0]
 800973c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009740:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8009744:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 8009746:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800974a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	f7f6 fe16 	bl	8000380 <strlen>
 8009754:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 8009758:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800975c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009760:	4618      	mov	r0, r3
 8009762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009766:	461a      	mov	r2, r3
 8009768:	2100      	movs	r1, #0
 800976a:	f01f ffab 	bl	80296c4 <memset>
 800976e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8009772:	b2da      	uxtb	r2, r3
 8009774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009778:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800977c:	705a      	strb	r2, [r3, #1]
 800977e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009782:	b2da      	uxtb	r2, r3
 8009784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009788:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800978c:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 800978e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00c      	beq.n	80097b0 <mg_tls_derive_secret+0x98>
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	3303      	adds	r3, #3
 800979c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097a0:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 80097a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80097a8:	6809      	ldr	r1, [r1, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f01f ff70 	bl	8029690 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 80097b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097b4:	3303      	adds	r3, #3
 80097b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80097ba:	b2d1      	uxtb	r1, r2
 80097bc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097c0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80097c4:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 80097c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <mg_tls_derive_secret+0xd4>
 80097ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097d2:	3304      	adds	r3, #4
 80097d4:	f107 0214 	add.w	r2, r7, #20
 80097d8:	18d0      	adds	r0, r2, r3
 80097da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80097e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	f01f ff52 	bl	8029690 <memmove>
  packed[4 + labelsz + datasz] = 1;
 80097ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80097f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80097f4:	4413      	add	r3, r2
 80097f6:	3304      	adds	r3, #4
 80097f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097fc:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8009800:	2101      	movs	r1, #1
 8009802:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8009804:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009808:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800980c:	4413      	add	r3, r2
 800980e:	3305      	adds	r3, #5
 8009810:	f107 0414 	add.w	r4, r7, #20
 8009814:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009818:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800981c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009820:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8009824:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4623      	mov	r3, r4
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	6809      	ldr	r1, [r1, #0]
 8009830:	f7ff f885 	bl	800893e <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 8009834:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8009838:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800983c:	4619      	mov	r1, r3
 800983e:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8009842:	f01f ff25 	bl	8029690 <memmove>
}
 8009846:	bf00      	nop
 8009848:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800984c:	46bd      	mov	sp, r7
 800984e:	bd90      	pop	{r4, r7, pc}

08009850 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b0cc      	sub	sp, #304	@ 0x130
 8009854:	af04      	add	r7, sp, #16
 8009856:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800985a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800985e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8009860:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009864:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800986e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8009872:	2320      	movs	r3, #32
 8009874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 8009878:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800987c:	2320      	movs	r3, #32
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	4b89      	ldr	r3, [pc, #548]	@ (8009aa8 <mg_tls_generate_handshake_keys+0x258>)
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	f7ff f85a 	bl	800893e <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 800988a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800988e:	2320      	movs	r3, #32
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	2320      	movs	r3, #32
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4b83      	ldr	r3, [pc, #524]	@ (8009aac <mg_tls_generate_handshake_keys+0x25c>)
 800989e:	2220      	movs	r2, #32
 80098a0:	4883      	ldr	r0, [pc, #524]	@ (8009ab0 <mg_tls_generate_handshake_keys+0x260>)
 80098a2:	f7ff ff39 	bl	8009718 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80098a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098aa:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
                 sizeof(pre_extract_secret), tls->x25519_sec,
 80098ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098b2:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80098b4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80098b8:	2220      	movs	r2, #32
 80098ba:	9200      	str	r2, [sp, #0]
 80098bc:	2220      	movs	r2, #32
 80098be:	f7ff f83e 	bl	800893e <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 80098c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098c6:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80098ca:	2220      	movs	r2, #32
 80098cc:	4619      	mov	r1, r3
 80098ce:	4879      	ldr	r0, [pc, #484]	@ (8009ab4 <mg_tls_generate_handshake_keys+0x264>)
 80098d0:	f7ff fda2 	bl	8009418 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80098d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098d8:	f103 0120 	add.w	r1, r3, #32
 80098dc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80098e0:	2270      	movs	r2, #112	@ 0x70
 80098e2:	4618      	mov	r0, r3
 80098e4:	f01f fed4 	bl	8029690 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 80098e8:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80098ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe feeb 	bl	80086ce <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 80098f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80098fc:	2220      	movs	r2, #32
 80098fe:	4619      	mov	r1, r3
 8009900:	486d      	ldr	r0, [pc, #436]	@ (8009ab8 <mg_tls_generate_handshake_keys+0x268>)
 8009902:	f7ff fd89 	bl	8009418 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 8009906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800990a:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800990e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009912:	2320      	movs	r3, #32
 8009914:	9302      	str	r3, [sp, #8]
 8009916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	2320      	movs	r3, #32
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	4613      	mov	r3, r2
 8009922:	2220      	movs	r2, #32
 8009924:	4865      	ldr	r0, [pc, #404]	@ (8009abc <mg_tls_generate_handshake_keys+0x26c>)
 8009926:	f7ff fef7 	bl	8009718 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 800992a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800992e:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 8009932:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009936:	2320      	movs	r3, #32
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	2320      	movs	r3, #32
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4613      	mov	r3, r2
 8009946:	2220      	movs	r2, #32
 8009948:	485d      	ldr	r0, [pc, #372]	@ (8009ac0 <mg_tls_generate_handshake_keys+0x270>)
 800994a:	f7ff fee5 	bl	8009718 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800994e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009952:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8009956:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800995a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800995e:	9202      	str	r2, [sp, #8]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2300      	movs	r3, #0
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	2220      	movs	r2, #32
 800996a:	4856      	ldr	r0, [pc, #344]	@ (8009ac4 <mg_tls_generate_handshake_keys+0x274>)
 800996c:	f7ff fed4 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8009970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009974:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8009978:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800997c:	220c      	movs	r2, #12
 800997e:	9202      	str	r2, [sp, #8]
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	2300      	movs	r3, #0
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	2300      	movs	r3, #0
 8009988:	2220      	movs	r2, #32
 800998a:	484f      	ldr	r0, [pc, #316]	@ (8009ac8 <mg_tls_generate_handshake_keys+0x278>)
 800998c:	f7ff fec4 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8009990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009994:	f503 7345 	add.w	r3, r3, #788	@ 0x314
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8009998:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800999c:	2220      	movs	r2, #32
 800999e:	9202      	str	r2, [sp, #8]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	2300      	movs	r3, #0
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	2220      	movs	r2, #32
 80099aa:	4848      	ldr	r0, [pc, #288]	@ (8009acc <mg_tls_generate_handshake_keys+0x27c>)
 80099ac:	f7ff feb4 	bl	8009718 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80099b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80099b4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80099c0:	9202      	str	r2, [sp, #8]
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	2300      	movs	r3, #0
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	2300      	movs	r3, #0
 80099ca:	2220      	movs	r2, #32
 80099cc:	483d      	ldr	r0, [pc, #244]	@ (8009ac4 <mg_tls_generate_handshake_keys+0x274>)
 80099ce:	f7ff fea3 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 80099d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80099d6:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 80099da:	f107 0108 	add.w	r1, r7, #8
 80099de:	220c      	movs	r2, #12
 80099e0:	9202      	str	r2, [sp, #8]
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	2300      	movs	r3, #0
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2300      	movs	r3, #0
 80099ea:	2220      	movs	r2, #32
 80099ec:	4836      	ldr	r0, [pc, #216]	@ (8009ac8 <mg_tls_generate_handshake_keys+0x278>)
 80099ee:	f7ff fe93 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 80099f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80099f6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 80099fa:	f107 0108 	add.w	r1, r7, #8
 80099fe:	2220      	movs	r2, #32
 8009a00:	9202      	str	r2, [sp, #8]
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	482f      	ldr	r0, [pc, #188]	@ (8009acc <mg_tls_generate_handshake_keys+0x27c>)
 8009a0e:	f7ff fe83 	bl	8009718 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8009a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a16:	2220      	movs	r2, #32
 8009a18:	4619      	mov	r1, r3
 8009a1a:	482d      	ldr	r0, [pc, #180]	@ (8009ad0 <mg_tls_generate_handshake_keys+0x280>)
 8009a1c:	f7ff fcfc 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8009a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a24:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8009a28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4829      	ldr	r0, [pc, #164]	@ (8009ad4 <mg_tls_generate_handshake_keys+0x284>)
 8009a30:	f7ff fcf2 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8009a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a38:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8009a3c:	220c      	movs	r2, #12
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4825      	ldr	r0, [pc, #148]	@ (8009ad8 <mg_tls_generate_handshake_keys+0x288>)
 8009a42:	f7ff fce9 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8009a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a4a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8009a4e:	2220      	movs	r2, #32
 8009a50:	4619      	mov	r1, r3
 8009a52:	4822      	ldr	r0, [pc, #136]	@ (8009adc <mg_tls_generate_handshake_keys+0x28c>)
 8009a54:	f7ff fce0 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	4619      	mov	r1, r3
 8009a60:	481f      	ldr	r0, [pc, #124]	@ (8009ae0 <mg_tls_generate_handshake_keys+0x290>)
 8009a62:	f7ff fcd9 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8009a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a6a:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8009a6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009a72:	4619      	mov	r1, r3
 8009a74:	481b      	ldr	r0, [pc, #108]	@ (8009ae4 <mg_tls_generate_handshake_keys+0x294>)
 8009a76:	f7ff fccf 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8009a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a7e:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8009a82:	220c      	movs	r2, #12
 8009a84:	4619      	mov	r1, r3
 8009a86:	4818      	ldr	r0, [pc, #96]	@ (8009ae8 <mg_tls_generate_handshake_keys+0x298>)
 8009a88:	f7ff fcc6 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8009a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009a94:	2220      	movs	r2, #32
 8009a96:	4619      	mov	r1, r3
 8009a98:	4814      	ldr	r0, [pc, #80]	@ (8009aec <mg_tls_generate_handshake_keys+0x29c>)
 8009a9a:	f7ff fcbd 	bl	8009418 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 8009a9e:	bf00      	nop
 8009aa0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	24004dac 	.word	0x24004dac
 8009aac:	24000008 	.word	0x24000008
 8009ab0:	0802ccb8 	.word	0x0802ccb8
 8009ab4:	0802ccc8 	.word	0x0802ccc8
 8009ab8:	0802ccd4 	.word	0x0802ccd4
 8009abc:	0802cce0 	.word	0x0802cce0
 8009ac0:	0802ccf4 	.word	0x0802ccf4
 8009ac4:	0802cd08 	.word	0x0802cd08
 8009ac8:	0802cd14 	.word	0x0802cd14
 8009acc:	0802cd20 	.word	0x0802cd20
 8009ad0:	0802cd30 	.word	0x0802cd30
 8009ad4:	0802cd40 	.word	0x0802cd40
 8009ad8:	0802cd48 	.word	0x0802cd48
 8009adc:	0802cd50 	.word	0x0802cd50
 8009ae0:	0802cd5c 	.word	0x0802cd5c
 8009ae4:	0802cd6c 	.word	0x0802cd6c
 8009ae8:	0802cd74 	.word	0x0802cd74
 8009aec:	0802cd7c 	.word	0x0802cd7c

08009af0 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b0cc      	sub	sp, #304	@ 0x130
 8009af4:	af04      	add	r7, sp, #16
 8009af6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009afa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009afe:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8009b00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009b04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8009b12:	2320      	movs	r3, #32
 8009b14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8009b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b1c:	f103 0120 	add.w	r1, r3, #32
 8009b20:	f107 0308 	add.w	r3, r7, #8
 8009b24:	2270      	movs	r2, #112	@ 0x70
 8009b26:	4618      	mov	r0, r3
 8009b28:	f01f fdb2 	bl	8029690 <memmove>
  mg_sha256_final(hash, &sha256);
 8009b2c:	f107 0208 	add.w	r2, r7, #8
 8009b30:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fdc9 	bl	80086ce <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8009b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b40:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 8009b44:	2320      	movs	r3, #32
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	2320      	movs	r3, #32
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	4b64      	ldr	r3, [pc, #400]	@ (8009ce4 <mg_tls_generate_application_keys+0x1f4>)
 8009b54:	2220      	movs	r2, #32
 8009b56:	4864      	ldr	r0, [pc, #400]	@ (8009ce8 <mg_tls_generate_application_keys+0x1f8>)
 8009b58:	f7ff fdde 	bl	8009718 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8009b5c:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8009b60:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8009b64:	2320      	movs	r3, #32
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	4b60      	ldr	r3, [pc, #384]	@ (8009cec <mg_tls_generate_application_keys+0x1fc>)
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f7fe fee7 	bl	800893e <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8009b70:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8009b74:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8009b78:	2320      	movs	r3, #32
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	2320      	movs	r3, #32
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4613      	mov	r3, r2
 8009b88:	2220      	movs	r2, #32
 8009b8a:	4859      	ldr	r0, [pc, #356]	@ (8009cf0 <mg_tls_generate_application_keys+0x200>)
 8009b8c:	f7ff fdc4 	bl	8009718 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8009b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b94:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8009b98:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8009b9c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009ba0:	9202      	str	r2, [sp, #8]
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2220      	movs	r2, #32
 8009bac:	4851      	ldr	r0, [pc, #324]	@ (8009cf4 <mg_tls_generate_application_keys+0x204>)
 8009bae:	f7ff fdb3 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8009bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bb6:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8009bba:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8009bbe:	220c      	movs	r2, #12
 8009bc0:	9202      	str	r2, [sp, #8]
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	2220      	movs	r2, #32
 8009bcc:	484a      	ldr	r0, [pc, #296]	@ (8009cf8 <mg_tls_generate_application_keys+0x208>)
 8009bce:	f7ff fda3 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 8009bd2:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8009bd6:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8009bda:	2320      	movs	r3, #32
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	2320      	movs	r3, #32
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4613      	mov	r3, r2
 8009bea:	2220      	movs	r2, #32
 8009bec:	4843      	ldr	r0, [pc, #268]	@ (8009cfc <mg_tls_generate_application_keys+0x20c>)
 8009bee:	f7ff fd93 	bl	8009718 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8009bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bf6:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8009bfa:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8009bfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009c02:	9202      	str	r2, [sp, #8]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	4839      	ldr	r0, [pc, #228]	@ (8009cf4 <mg_tls_generate_application_keys+0x204>)
 8009c10:	f7ff fd82 	bl	8009718 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8009c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c18:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8009c1c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8009c20:	220c      	movs	r2, #12
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	2300      	movs	r3, #0
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	4832      	ldr	r0, [pc, #200]	@ (8009cf8 <mg_tls_generate_application_keys+0x208>)
 8009c30:	f7ff fd72 	bl	8009718 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8009c34:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009c38:	2220      	movs	r2, #32
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4830      	ldr	r0, [pc, #192]	@ (8009d00 <mg_tls_generate_application_keys+0x210>)
 8009c3e:	f7ff fbeb 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8009c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c46:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8009c4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009c4e:	4619      	mov	r1, r3
 8009c50:	482c      	ldr	r0, [pc, #176]	@ (8009d04 <mg_tls_generate_application_keys+0x214>)
 8009c52:	f7ff fbe1 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8009c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c5a:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8009c5e:	220c      	movs	r2, #12
 8009c60:	4619      	mov	r1, r3
 8009c62:	4829      	ldr	r0, [pc, #164]	@ (8009d08 <mg_tls_generate_application_keys+0x218>)
 8009c64:	f7ff fbd8 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8009c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c6c:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8009c70:	2220      	movs	r2, #32
 8009c72:	4619      	mov	r1, r3
 8009c74:	4825      	ldr	r0, [pc, #148]	@ (8009d0c <mg_tls_generate_application_keys+0x21c>)
 8009c76:	f7ff fbcf 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8009c7a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009c7e:	2220      	movs	r2, #32
 8009c80:	4619      	mov	r1, r3
 8009c82:	4823      	ldr	r0, [pc, #140]	@ (8009d10 <mg_tls_generate_application_keys+0x220>)
 8009c84:	f7ff fbc8 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8009c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c8c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8009c90:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009c94:	4619      	mov	r1, r3
 8009c96:	481f      	ldr	r0, [pc, #124]	@ (8009d14 <mg_tls_generate_application_keys+0x224>)
 8009c98:	f7ff fbbe 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8009c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ca0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8009ca4:	220c      	movs	r2, #12
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	481b      	ldr	r0, [pc, #108]	@ (8009d18 <mg_tls_generate_application_keys+0x228>)
 8009caa:	f7ff fbb5 	bl	8009418 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8009cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cb2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4818      	ldr	r0, [pc, #96]	@ (8009d1c <mg_tls_generate_application_keys+0x22c>)
 8009cbc:	f7ff fbac 	bl	8009418 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8009cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 8009cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cce:	f8d3 22c4 	ldr.w	r2, [r3, #708]	@ 0x2c4
 8009cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cd6:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8009cda:	bf00      	nop
 8009cdc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	24000008 	.word	0x24000008
 8009ce8:	0802ccb8 	.word	0x0802ccb8
 8009cec:	24004dac 	.word	0x24004dac
 8009cf0:	0802cd88 	.word	0x0802cd88
 8009cf4:	0802cd08 	.word	0x0802cd08
 8009cf8:	0802cd14 	.word	0x0802cd14
 8009cfc:	0802cd9c 	.word	0x0802cd9c
 8009d00:	0802cdb0 	.word	0x0802cdb0
 8009d04:	0802cd40 	.word	0x0802cd40
 8009d08:	0802cd48 	.word	0x0802cd48
 8009d0c:	0802cd50 	.word	0x0802cd50
 8009d10:	0802cdc0 	.word	0x0802cdc0
 8009d14:	0802cd6c 	.word	0x0802cd6c
 8009d18:	0802cd74 	.word	0x0802cd74
 8009d1c:	0802cd7c 	.word	0x0802cd7c

08009d20 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b09a      	sub	sp, #104	@ 0x68
 8009d24:	af04      	add	r7, sp, #16
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009d34:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8009d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d38:	3304      	adds	r3, #4
 8009d3a:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3311      	adds	r3, #17
 8009d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d42:	2317      	movs	r3, #23
 8009d44:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8009d48:	2303      	movs	r3, #3
 8009d4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009d4e:	2303      	movs	r3, #3
 8009d50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8009d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8009d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d60:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d66:	2317      	movs	r3, #23
 8009d68:	773b      	strb	r3, [r7, #28]
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	777b      	strb	r3, [r7, #29]
 8009d6e:	2303      	movs	r3, #3
 8009d70:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8009d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d74:	0a1b      	lsrs	r3, r3, #8
 8009d76:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d78:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8009d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d7c:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8009d7e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <mg_tls_encrypt+0x7a>
 8009d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d98:	e002      	b.n	8009da0 <mg_tls_encrypt+0x80>
 8009d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <mg_tls_encrypt+0x9a>
 8009db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009db4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8009db8:	e002      	b.n	8009dc0 <mg_tls_encrypt+0xa0>
 8009dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dbc:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  uint8_t *key =
 8009dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <mg_tls_encrypt+0xba>
 8009dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd4:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8009dd8:	e002      	b.n	8009de0 <mg_tls_encrypt+0xc0>
 8009dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ddc:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  uint8_t *iv =
 8009de0:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8009de2:	f107 0310 	add.w	r3, r7, #16
 8009de6:	220c      	movs	r2, #12
 8009de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dea:	4618      	mov	r0, r3
 8009dec:	f01f fc50 	bl	8029690 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8009df0:	7e3a      	ldrb	r2, [r7, #24]
 8009df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009df4:	0e1b      	lsrs	r3, r3, #24
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	4053      	eors	r3, r2
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8009dfe:	7e7a      	ldrb	r2, [r7, #25]
 8009e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e02:	0c1b      	lsrs	r3, r3, #16
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	4053      	eors	r3, r2
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8009e0c:	7eba      	ldrb	r2, [r7, #26]
 8009e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e10:	0a1b      	lsrs	r3, r3, #8
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	4053      	eors	r3, r2
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8009e1a:	7efa      	ldrb	r2, [r7, #27]
 8009e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	4053      	eors	r3, r2
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8009e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e28:	6899      	ldr	r1, [r3, #8]
 8009e2a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009e2e:	2305      	movs	r3, #5
 8009e30:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009e32:	f7f8 ff27 	bl	8002c84 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8009e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e3c:	4413      	add	r3, r2
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009e42:	f7f8 fe93 	bl	8002b6c <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8009e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8009e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e58:	6899      	ldr	r1, [r3, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	440b      	add	r3, r1
 8009e5e:	3301      	adds	r3, #1
 8009e60:	4413      	add	r3, r2
 8009e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e6a:	f01f fc11 	bl	8029690 <memmove>
  outmsg[msgsz] = msgtype;
 8009e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4413      	add	r3, r2
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8009e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e80:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8009e84:	4619      	mov	r1, r3
 8009e86:	2001      	movs	r0, #1
 8009e88:	f01e fb98 	bl	80285bc <calloc>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d104      	bne.n	8009ea0 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8009e96:	491f      	ldr	r1, [pc, #124]	@ (8009f14 <mg_tls_encrypt+0x1f4>)
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7f7 fdd5 	bl	8001a48 <mg_error>
 8009e9e:	e035      	b.n	8009f0c <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f107 011c 	add.w	r1, r7, #28
 8009ea8:	f107 0210 	add.w	r2, r7, #16
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	2305      	movs	r3, #5
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ebc:	f003 feab 	bl	800dc16 <mg_chacha20_poly1305_encrypt>
 8009ec0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 8009ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ec6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009ec8:	f01f fbe2 	bl	8029690 <memmove>
      free(enc);
 8009ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ece:	f01e fb99 	bl	8028604 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <mg_tls_encrypt+0x1d2>
 8009ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 8009ef0:	e006      	b.n	8009f00 <mg_tls_encrypt+0x1e0>
 8009ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009efc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  wio->len += encsz;
 8009f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f06:	441a      	add	r2, r3
 8009f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0a:	609a      	str	r2, [r3, #8]
}
 8009f0c:	3758      	adds	r7, #88	@ 0x58
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	0802cdd0 	.word	0x0802cdd0

08009f18 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b092      	sub	sp, #72	@ 0x48
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3368      	adds	r3, #104	@ 0x68
 8009f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <mg_tls_recv_record+0x2e>
 8009f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f44:	e002      	b.n	8009f4c <mg_tls_recv_record+0x34>
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <mg_tls_recv_record+0x4e>
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f60:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8009f64:	e002      	b.n	8009f6c <mg_tls_recv_record+0x54>
 8009f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f68:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  uint8_t *key =
 8009f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <mg_tls_recv_record+0x6e>
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f80:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8009f84:	e002      	b.n	8009f8c <mg_tls_recv_record+0x74>
 8009f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f88:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  uint8_t *iv =
 8009f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8009f96:	2300      	movs	r3, #0
 8009f98:	e0bc      	b.n	800a114 <mg_tls_recv_record+0x1fc>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fb27 	bl	80095ee <mg_tls_got_record>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f083 0301 	eor.w	r3, r3, #1
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8009fac:	f06f 0301 	mvn.w	r3, #1
 8009fb0:	e0b0      	b.n	800a114 <mg_tls_recv_record+0x1fc>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b17      	cmp	r3, #23
 8009fba:	d026      	beq.n	800a00a <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b14      	cmp	r3, #20
 8009fc4:	d103      	bne.n	8009fce <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fb38 	bl	800963c <mg_tls_drop_record>
 8009fcc:	e7e5      	b.n	8009f9a <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b15      	cmp	r3, #21
 8009fd6:	d111      	bne.n	8009ffc <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8009fd8:	4b50      	ldr	r3, [pc, #320]	@ (800a11c <mg_tls_recv_record+0x204>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	dd09      	ble.n	8009ff4 <mg_tls_recv_record+0xdc>
 8009fe0:	4b4f      	ldr	r3, [pc, #316]	@ (800a120 <mg_tls_recv_record+0x208>)
 8009fe2:	f642 029e 	movw	r2, #10398	@ 0x289e
 8009fe6:	494f      	ldr	r1, [pc, #316]	@ (800a124 <mg_tls_recv_record+0x20c>)
 8009fe8:	2002      	movs	r0, #2
 8009fea:	f7f8 ff25 	bl	8002e38 <mg_log_prefix>
 8009fee:	484e      	ldr	r0, [pc, #312]	@ (800a128 <mg_tls_recv_record+0x210>)
 8009ff0:	f7f8 ff72 	bl	8002ed8 <mg_log>
      mg_tls_drop_record(c);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fb21 	bl	800963c <mg_tls_drop_record>
 8009ffa:	e7ce      	b.n	8009f9a <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8009ffc:	494b      	ldr	r1, [pc, #300]	@ (800a12c <mg_tls_recv_record+0x214>)
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7f7 fd22 	bl	8001a48 <mg_error>
      return -1;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	e084      	b.n	800a114 <mg_tls_recv_record+0x1fc>
      break;
 800a00a:	bf00      	nop

#if !CHACHA20
  mg_gcm_initialize();
#endif

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3303      	adds	r3, #3
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	b21a      	sxth	r2, r3
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3304      	adds	r3, #4
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	b21b      	sxth	r3, r3
 800a022:	4313      	orrs	r3, r2
 800a024:	b21b      	sxth	r3, r3
 800a026:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3305      	adds	r3, #5
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24
  memmove(nonce, iv, sizeof(nonce));
 800a030:	f107 030c 	add.w	r3, r7, #12
 800a034:	220c      	movs	r2, #12
 800a036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a038:	4618      	mov	r0, r3
 800a03a:	f01f fb29 	bl	8029690 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 800a03e:	7d3a      	ldrb	r2, [r7, #20]
 800a040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a042:	0e1b      	lsrs	r3, r3, #24
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4053      	eors	r3, r2
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 800a04c:	7d7a      	ldrb	r2, [r7, #21]
 800a04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	b2db      	uxtb	r3, r3
 800a054:	4053      	eors	r3, r2
 800a056:	b2db      	uxtb	r3, r3
 800a058:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 800a05a:	7dba      	ldrb	r2, [r7, #22]
 800a05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05e:	0a1b      	lsrs	r3, r3, #8
 800a060:	b2db      	uxtb	r3, r3
 800a062:	4053      	eors	r3, r2
 800a064:	b2db      	uxtb	r3, r3
 800a066:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 800a068:	7dfa      	ldrb	r2, [r7, #23]
 800a06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	4053      	eors	r3, r2
 800a070:	b2db      	uxtb	r3, r3
 800a072:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 800a074:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a076:	4619      	mov	r1, r3
 800a078:	2001      	movs	r0, #1
 800a07a:	f01e fa9f 	bl	80285bc <calloc>
 800a07e:	4603      	mov	r3, r0
 800a080:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <mg_tls_recv_record+0x17e>
      mg_error(c, "TLS OOM");
 800a088:	4929      	ldr	r1, [pc, #164]	@ (800a130 <mg_tls_recv_record+0x218>)
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f7 fcdc 	bl	8001a48 <mg_error>
      return -1;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	e03e      	b.n	800a114 <mg_tls_recv_record+0x1fc>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 800a096:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a098:	f107 020c 	add.w	r2, r7, #12
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0a2:	6a38      	ldr	r0, [r7, #32]
 800a0a4:	f003 fdef 	bl	800dc86 <mg_chacha20_poly1305_decrypt>
 800a0a8:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 800a0aa:	69fa      	ldr	r2, [r7, #28]
 800a0ac:	6a39      	ldr	r1, [r7, #32]
 800a0ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0b0:	f01f faee 	bl	8029690 <memmove>
    free(dec);
 800a0b4:	6a38      	ldr	r0, [r7, #32]
 800a0b6:	f01e faa5 	bl	8028604 <free>
    mg_error(c, "wrong size");
    return -1;
  }
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif
  r = msgsz - 16 - 1;
 800a0ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a0bc:	3b11      	subs	r3, #17
 800a0be:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 800a0c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a0c2:	3b11      	subs	r3, #17
 800a0c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c6:	4413      	add	r3, r2
 800a0c8:	781a      	ldrb	r2, [r3, #0]
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0cc:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	1a9a      	subs	r2, r3, r2
 800a0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d8:	615a      	str	r2, [r3, #20]
  tls->recv_len = msgsz - 16 - 1;
 800a0da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a0dc:	3b11      	subs	r3, #17
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <mg_tls_recv_record+0x1ec>
 800a0f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fe:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 800a102:	e006      	b.n	800a112 <mg_tls_recv_record+0x1fa>
 800a104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  return r;
 800a112:	69bb      	ldr	r3, [r7, #24]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3740      	adds	r7, #64	@ 0x40
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	24000000 	.word	0x24000000
 800a120:	08030ca8 	.word	0x08030ca8
 800a124:	0802b5b0 	.word	0x0802b5b0
 800a128:	0802cdd8 	.word	0x0802cdd8
 800a12c:	0802cdf4 	.word	0x0802cdf4
 800a130:	0802cdd0 	.word	0x0802cdd0

0800a134 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b0d5      	sub	sp, #340	@ 0x154
 800a138:	af00      	add	r7, sp, #0
 800a13a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a13e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a142:	6018      	str	r0, [r3, #0]
 800a144:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a148:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a14c:	6019      	str	r1, [r3, #0]
 800a14e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a152:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800a156:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a158:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a15c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a166:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 800a16a:	4b41      	ldr	r3, [pc, #260]	@ (800a270 <mg_tls_calc_cert_verify_hash+0x13c>)
 800a16c:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800a170:	461d      	mov	r5, r3
 800a172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 800a17e:	4b3d      	ldr	r3, [pc, #244]	@ (800a274 <mg_tls_calc_cert_verify_hash+0x140>)
 800a180:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 800a184:	461d      	mov	r5, r3
 800a186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a18a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a18c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 800a192:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a196:	2240      	movs	r2, #64	@ 0x40
 800a198:	2120      	movs	r1, #32
 800a19a:	4618      	mov	r0, r3
 800a19c:	f01f fa92 	bl	80296c4 <memset>
  if (is_client) {
 800a1a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a1a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d018      	beq.n	800a1e0 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 800a1ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a1b2:	3340      	adds	r3, #64	@ 0x40
 800a1b4:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 800a1b8:	469c      	mov	ip, r3
 800a1ba:	f104 0e20 	add.w	lr, r4, #32
 800a1be:	4665      	mov	r5, ip
 800a1c0:	4626      	mov	r6, r4
 800a1c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1c4:	6028      	str	r0, [r5, #0]
 800a1c6:	6069      	str	r1, [r5, #4]
 800a1c8:	60aa      	str	r2, [r5, #8]
 800a1ca:	60eb      	str	r3, [r5, #12]
 800a1cc:	3410      	adds	r4, #16
 800a1ce:	f10c 0c10 	add.w	ip, ip, #16
 800a1d2:	4574      	cmp	r4, lr
 800a1d4:	d1f3      	bne.n	800a1be <mg_tls_calc_cert_verify_hash+0x8a>
 800a1d6:	4662      	mov	r2, ip
 800a1d8:	4623      	mov	r3, r4
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	8013      	strh	r3, [r2, #0]
 800a1de:	e017      	b.n	800a210 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 800a1e0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a1e4:	3340      	adds	r3, #64	@ 0x40
 800a1e6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800a1ea:	469c      	mov	ip, r3
 800a1ec:	f104 0e20 	add.w	lr, r4, #32
 800a1f0:	4665      	mov	r5, ip
 800a1f2:	4626      	mov	r6, r4
 800a1f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1f6:	6028      	str	r0, [r5, #0]
 800a1f8:	6069      	str	r1, [r5, #4]
 800a1fa:	60aa      	str	r2, [r5, #8]
 800a1fc:	60eb      	str	r3, [r5, #12]
 800a1fe:	3410      	adds	r4, #16
 800a200:	f10c 0c10 	add.w	ip, ip, #16
 800a204:	4574      	cmp	r4, lr
 800a206:	d1f3      	bne.n	800a1f0 <mg_tls_calc_cert_verify_hash+0xbc>
 800a208:	4662      	mov	r2, ip
 800a20a:	4623      	mov	r3, r4
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800a210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a214:	f103 0120 	add.w	r1, r3, #32
 800a218:	f107 0310 	add.w	r3, r7, #16
 800a21c:	2270      	movs	r2, #112	@ 0x70
 800a21e:	4618      	mov	r0, r3
 800a220:	f01f fa36 	bl	8029690 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 800a224:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a228:	3362      	adds	r3, #98	@ 0x62
 800a22a:	f107 0210 	add.w	r2, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fa4c 	bl	80086ce <mg_sha256_final>

  mg_sha256_init(&sha256);
 800a236:	f107 0310 	add.w	r3, r7, #16
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fd ffca 	bl	80081d4 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 800a240:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a244:	f107 0310 	add.w	r3, r7, #16
 800a248:	2282      	movs	r2, #130	@ 0x82
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fa06 	bl	800865c <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 800a250:	f107 0210 	add.w	r2, r7, #16
 800a254:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a258:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a25c:	4611      	mov	r1, r2
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	f7fe fa35 	bl	80086ce <mg_sha256_final>
}
 800a264:	bf00      	nop
 800a266:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26e:	bf00      	nop
 800a270:	0802ce08 	.word	0x0802ce08
 800a274:	0802ce2c 	.word	0x0802ce2c

0800a278 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08c      	sub	sp, #48	@ 0x30
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a286:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3368      	adds	r3, #104	@ 0x68
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff f9ad 	bl	80095ee <mg_tls_got_record>
 800a294:	4603      	mov	r3, r0
 800a296:	f083 0301 	eor.w	r3, r3, #1
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 800a2a0:	f06f 0301 	mvn.w	r3, #1
 800a2a4:	e14b      	b.n	800a53e <mg_tls_server_recv_hello+0x2c6>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b16      	cmp	r3, #22
 800a2ae:	d105      	bne.n	800a2bc <mg_tls_server_recv_hello+0x44>
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3305      	adds	r3, #5
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d006      	beq.n	800a2ca <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 800a2bc:	49a2      	ldr	r1, [pc, #648]	@ (800a548 <mg_tls_server_recv_hello+0x2d0>)
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f7 fbc2 	bl	8001a48 <mg_error>
    return -1;
 800a2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c8:	e139      	b.n	800a53e <mg_tls_server_recv_hello+0x2c6>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3303      	adds	r3, #3
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	b21a      	sxth	r2, r3
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b21b      	sxth	r3, r3
 800a2e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	f103 0020 	add.w	r0, r3, #32
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3305      	adds	r3, #5
 800a2f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f7fe f9b1 	bl	800865c <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330b      	adds	r3, #11
 800a306:	2220      	movs	r2, #32
 800a308:	4619      	mov	r1, r3
 800a30a:	f01f f9c1 	bl	8029690 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a316:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 800a31a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d10b      	bne.n	800a33a <mg_tls_server_recv_hello+0xc2>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	332c      	adds	r3, #44	@ 0x2c
 800a32e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a332:	4619      	mov	r1, r3
 800a334:	f01f f9ac 	bl	8029690 <memmove>
 800a338:	e011      	b.n	800a35e <mg_tls_server_recv_hello+0xe6>
  } else if (session_id_len != 0) {
 800a33a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00d      	beq.n	800a35e <mg_tls_server_recv_hello+0xe6>
    MG_INFO(("bad session id len"));
 800a342:	4b82      	ldr	r3, [pc, #520]	@ (800a54c <mg_tls_server_recv_hello+0x2d4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b01      	cmp	r3, #1
 800a348:	dd09      	ble.n	800a35e <mg_tls_server_recv_hello+0xe6>
 800a34a:	4b81      	ldr	r3, [pc, #516]	@ (800a550 <mg_tls_server_recv_hello+0x2d8>)
 800a34c:	f642 02fe 	movw	r2, #10494	@ 0x28fe
 800a350:	4980      	ldr	r1, [pc, #512]	@ (800a554 <mg_tls_server_recv_hello+0x2dc>)
 800a352:	2002      	movs	r0, #2
 800a354:	f7f8 fd70 	bl	8002e38 <mg_log_prefix>
 800a358:	487f      	ldr	r0, [pc, #508]	@ (800a558 <mg_tls_server_recv_hello+0x2e0>)
 800a35a:	f7f8 fdbd 	bl	8002ed8 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a366:	332c      	adds	r3, #44	@ 0x2c
 800a368:	4413      	add	r3, r2
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	b21a      	sxth	r2, r3
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a378:	332d      	adds	r3, #45	@ 0x2d
 800a37a:	440b      	add	r3, r1
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	b21b      	sxth	r3, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	b21b      	sxth	r3, r3
 800a384:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 800a386:	8bfa      	ldrh	r2, [r7, #30]
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	6899      	ldr	r1, [r3, #8]
 800a38c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a390:	1acb      	subs	r3, r1, r3
 800a392:	3b2e      	subs	r3, #46	@ 0x2e
 800a394:	429a      	cmp	r2, r3
 800a396:	f200 80c5 	bhi.w	800a524 <mg_tls_server_recv_hello+0x2ac>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 800a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800a3a2:	8bfb      	ldrh	r3, [r7, #30]
 800a3a4:	440b      	add	r3, r1
 800a3a6:	3330      	adds	r3, #48	@ 0x30
 800a3a8:	4413      	add	r3, r2
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	b21a      	sxth	r2, r3
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 800a3b8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ba:	4403      	add	r3, r0
 800a3bc:	3331      	adds	r3, #49	@ 0x31
 800a3be:	440b      	add	r3, r1
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	b21b      	sxth	r3, r3
 800a3c8:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800a3d2:	8bfb      	ldrh	r3, [r7, #30]
 800a3d4:	440b      	add	r3, r1
 800a3d6:	3332      	adds	r3, #50	@ 0x32
 800a3d8:	4413      	add	r3, r2
 800a3da:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 800a3dc:	8bba      	ldrh	r2, [r7, #28]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	6899      	ldr	r1, [r3, #8]
 800a3e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a3e6:	1ac9      	subs	r1, r1, r3
 800a3e8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ea:	1acb      	subs	r3, r1, r3
 800a3ec:	3b32      	subs	r3, #50	@ 0x32
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	f200 809a 	bhi.w	800a528 <mg_tls_server_recv_hello+0x2b0>
  for (j = 0; j < ext_len;) {
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a3f8:	e08e      	b.n	800a518 <mg_tls_server_recv_hello+0x2a0>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 800a3fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	4413      	add	r3, r2
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	b21a      	sxth	r2, r3
 800a408:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a40a:	3303      	adds	r3, #3
 800a40c:	69b9      	ldr	r1, [r7, #24]
 800a40e:	440b      	add	r3, r1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b21b      	sxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b21b      	sxth	r3, r3
 800a418:	82fb      	strh	r3, [r7, #22]
    if (ext[j] != 0x00 ||
 800a41a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <mg_tls_server_recv_hello+0x1bc>
        ext[j + 1] != 0x33) {  // not a key share extension, ignore
 800a426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a428:	3301      	adds	r3, #1
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	4413      	add	r3, r2
 800a42e:	781b      	ldrb	r3, [r3, #0]
    if (ext[j] != 0x00 ||
 800a430:	2b33      	cmp	r3, #51	@ 0x33
 800a432:	d006      	beq.n	800a442 <mg_tls_server_recv_hello+0x1ca>
      j += (uint16_t) (n + 4);
 800a434:	8afa      	ldrh	r2, [r7, #22]
 800a436:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a438:	4413      	add	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3304      	adds	r3, #4
 800a43e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 800a440:	e06a      	b.n	800a518 <mg_tls_server_recv_hello+0x2a0>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 800a442:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a444:	3304      	adds	r3, #4
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	4413      	add	r3, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	b21a      	sxth	r2, r3
 800a450:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a452:	3305      	adds	r3, #5
 800a454:	69b9      	ldr	r1, [r7, #24]
 800a456:	440b      	add	r3, r1
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	b21b      	sxth	r3, r3
 800a45c:	4313      	orrs	r3, r2
 800a45e:	b21b      	sxth	r3, r3
 800a460:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 800a462:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a464:	3306      	adds	r3, #6
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	4413      	add	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 800a46c:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf) - 2)
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	6939      	ldr	r1, [r7, #16]
 800a474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a476:	6800      	ldr	r0, [r0, #0]
 800a478:	1a09      	subs	r1, r1, r0
 800a47a:	b289      	uxth	r1, r1
 800a47c:	1a5b      	subs	r3, r3, r1
 800a47e:	3b02      	subs	r3, #2
    if (key_exchange_len >
 800a480:	429a      	cmp	r2, r3
 800a482:	d853      	bhi.n	800a52c <mg_tls_server_recv_hello+0x2b4>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 800a484:	2300      	movs	r3, #0
 800a486:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a488:	e03c      	b.n	800a504 <mg_tls_server_recv_hello+0x28c>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 800a48a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a48c:	3302      	adds	r3, #2
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4413      	add	r3, r2
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	b21a      	sxth	r2, r3
 800a498:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a49a:	3303      	adds	r3, #3
 800a49c:	6939      	ldr	r1, [r7, #16]
 800a49e:	440b      	add	r3, r1
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 800a4aa:	8aba      	ldrh	r2, [r7, #20]
 800a4ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	1eda      	subs	r2, r3, #3
 800a4b2:	89fb      	ldrh	r3, [r7, #14]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	dd3b      	ble.n	800a530 <mg_tls_server_recv_hello+0x2b8>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d11c      	bne.n	800a4f8 <mg_tls_server_recv_hello+0x280>
 800a4be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d116      	bne.n	800a4f8 <mg_tls_server_recv_hello+0x280>
 800a4ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b1d      	cmp	r3, #29
 800a4d6:	d10f      	bne.n	800a4f8 <mg_tls_server_recv_hello+0x280>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 800a4de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	89fa      	ldrh	r2, [r7, #14]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f01f f8d1 	bl	8029690 <memmove>
        mg_tls_drop_record(c);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff f8a4 	bl	800963c <mg_tls_drop_record>
        return 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e022      	b.n	800a53e <mg_tls_server_recv_hello+0x2c6>
      }
      k += (uint16_t) (m + 4);
 800a4f8:	89fa      	ldrh	r2, [r7, #14]
 800a4fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a4fc:	4413      	add	r3, r2
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	3304      	adds	r3, #4
 800a502:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 800a504:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a506:	8abb      	ldrh	r3, [r7, #20]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d3be      	bcc.n	800a48a <mg_tls_server_recv_hello+0x212>
    }
    j += (uint16_t) (n + 4);
 800a50c:	8afa      	ldrh	r2, [r7, #22]
 800a50e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a510:	4413      	add	r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	3304      	adds	r3, #4
 800a516:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 800a518:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a51a:	8bbb      	ldrh	r3, [r7, #28]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	f4ff af6c 	bcc.w	800a3fa <mg_tls_server_recv_hello+0x182>
  }
fail:
 800a522:	e006      	b.n	800a532 <mg_tls_server_recv_hello+0x2ba>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 800a524:	bf00      	nop
 800a526:	e004      	b.n	800a532 <mg_tls_server_recv_hello+0x2ba>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 800a528:	bf00      	nop
 800a52a:	e002      	b.n	800a532 <mg_tls_server_recv_hello+0x2ba>
      goto fail;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <mg_tls_server_recv_hello+0x2ba>
      if (m > (key_exchange_len - k - 4)) goto fail;
 800a530:	bf00      	nop
  mg_error(c, "bad client hello");
 800a532:	490a      	ldr	r1, [pc, #40]	@ (800a55c <mg_tls_server_recv_hello+0x2e4>)
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7f7 fa87 	bl	8001a48 <mg_error>
  return -1;
 800a53a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3730      	adds	r7, #48	@ 0x30
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	0802ce50 	.word	0x0802ce50
 800a54c:	24000000 	.word	0x24000000
 800a550:	08030cbc 	.word	0x08030cbc
 800a554:	0802b5b0 	.word	0x0802b5b0
 800a558:	0802ce6c 	.word	0x0802ce6c
 800a55c:	0802ce80 	.word	0x0802ce80

0800a560 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 800a560:	b5b0      	push	{r4, r5, r7, lr}
 800a562:	b0b4      	sub	sp, #208	@ 0xd0
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a56e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 800a572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a576:	3304      	adds	r3, #4
 800a578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 800a57c:	4a4c      	ldr	r2, [pc, #304]	@ (800a6b0 <mg_tls_server_send_hello+0x150>)
 800a57e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a582:	4611      	mov	r1, r2
 800a584:	227a      	movs	r2, #122	@ 0x7a
 800a586:	4618      	mov	r0, r3
 800a588:	f01f f961 	bl	802984e <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG"); 
 800a58c:	f107 030c 	add.w	r3, r7, #12
 800a590:	2120      	movs	r1, #32
 800a592:	4618      	mov	r0, r3
 800a594:	f007 fcf4 	bl	8011f80 <mg_random>
 800a598:	4603      	mov	r3, r0
 800a59a:	f083 0301 	eor.w	r3, r3, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <mg_tls_server_send_hello+0x4c>
 800a5a4:	4943      	ldr	r1, [pc, #268]	@ (800a6b4 <mg_tls_server_send_hello+0x154>)
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7f7 fa4e 	bl	8001a48 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 800a5ac:	f107 010c 	add.w	r1, r7, #12
 800a5b0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4a40      	ldr	r2, [pc, #256]	@ (800a6b8 <mg_tls_server_send_hello+0x158>)
 800a5b8:	f006 fbcc 	bl	8010d54 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 800a5bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5c0:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800a5c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5c8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 800a5cc:	f107 010c 	add.w	r1, r7, #12
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	f006 fbbf 	bl	8010d54 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 800a5d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5da:	33f0      	adds	r3, #240	@ 0xf0
 800a5dc:	2220      	movs	r2, #32
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4836      	ldr	r0, [pc, #216]	@ (800a6bc <mg_tls_server_send_hello+0x15c>)
 800a5e2:	f7fe ff19 	bl	8009418 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 800a5e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5ea:	3306      	adds	r3, #6
 800a5ec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800a5f0:	3290      	adds	r2, #144	@ 0x90
 800a5f2:	6815      	ldr	r5, [r2, #0]
 800a5f4:	6854      	ldr	r4, [r2, #4]
 800a5f6:	6890      	ldr	r0, [r2, #8]
 800a5f8:	68d1      	ldr	r1, [r2, #12]
 800a5fa:	601d      	str	r5, [r3, #0]
 800a5fc:	605c      	str	r4, [r3, #4]
 800a5fe:	6098      	str	r0, [r3, #8]
 800a600:	60d9      	str	r1, [r3, #12]
 800a602:	6915      	ldr	r5, [r2, #16]
 800a604:	6954      	ldr	r4, [r2, #20]
 800a606:	6990      	ldr	r0, [r2, #24]
 800a608:	69d1      	ldr	r1, [r2, #28]
 800a60a:	611d      	str	r5, [r3, #16]
 800a60c:	615c      	str	r4, [r3, #20]
 800a60e:	6198      	str	r0, [r3, #24]
 800a610:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 800a612:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a616:	3327      	adds	r3, #39	@ 0x27
 800a618:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800a61c:	32b0      	adds	r2, #176	@ 0xb0
 800a61e:	6815      	ldr	r5, [r2, #0]
 800a620:	6854      	ldr	r4, [r2, #4]
 800a622:	6890      	ldr	r0, [r2, #8]
 800a624:	68d1      	ldr	r1, [r2, #12]
 800a626:	601d      	str	r5, [r3, #0]
 800a628:	605c      	str	r4, [r3, #4]
 800a62a:	6098      	str	r0, [r3, #8]
 800a62c:	60d9      	str	r1, [r3, #12]
 800a62e:	6915      	ldr	r5, [r2, #16]
 800a630:	6954      	ldr	r4, [r2, #20]
 800a632:	6990      	ldr	r0, [r2, #24]
 800a634:	69d1      	ldr	r1, [r2, #28]
 800a636:	611d      	str	r5, [r3, #16]
 800a638:	615c      	str	r4, [r3, #20]
 800a63a:	6198      	str	r0, [r3, #24]
 800a63c:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 800a63e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a642:	3354      	adds	r3, #84	@ 0x54
 800a644:	461d      	mov	r5, r3
 800a646:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800a64a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a64c:	6028      	str	r0, [r5, #0]
 800a64e:	6069      	str	r1, [r5, #4]
 800a650:	60aa      	str	r2, [r5, #8]
 800a652:	60eb      	str	r3, [r5, #12]
 800a654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a656:	6128      	str	r0, [r5, #16]
 800a658:	6169      	str	r1, [r5, #20]
 800a65a:	61aa      	str	r2, [r5, #24]
 800a65c:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 800a65e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a662:	6899      	ldr	r1, [r3, #8]
 800a664:	2305      	movs	r3, #5
 800a666:	4a16      	ldr	r2, [pc, #88]	@ (800a6c0 <mg_tls_server_send_hello+0x160>)
 800a668:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800a66c:	f7f8 fb0a 	bl	8002c84 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 800a670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a674:	6899      	ldr	r1, [r3, #8]
 800a676:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800a67a:	237a      	movs	r3, #122	@ 0x7a
 800a67c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800a680:	f7f8 fb00 	bl	8002c84 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 800a684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a688:	3320      	adds	r3, #32
 800a68a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800a68e:	227a      	movs	r2, #122	@ 0x7a
 800a690:	4618      	mov	r0, r3
 800a692:	f7fd ffe3 	bl	800865c <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 800a696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a69a:	6899      	ldr	r1, [r3, #8]
 800a69c:	2306      	movs	r3, #6
 800a69e:	4a09      	ldr	r2, [pc, #36]	@ (800a6c4 <mg_tls_server_send_hello+0x164>)
 800a6a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800a6a4:	f7f8 faee 	bl	8002c84 <mg_iobuf_add>
}
 800a6a8:	bf00      	nop
 800a6aa:	37d0      	adds	r7, #208	@ 0xd0
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b0:	0802ceb8 	.word	0x0802ceb8
 800a6b4:	0802ce94 	.word	0x0802ce94
 800a6b8:	08030ac8 	.word	0x08030ac8
 800a6bc:	0802ce98 	.word	0x0802ce98
 800a6c0:	0802cea8 	.word	0x0802cea8
 800a6c4:	0802ceb0 	.word	0x0802ceb0

0800a6c8 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a6d6:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 800a6d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a710 <mg_tls_server_send_ext+0x48>)
 800a6da:	f107 030c 	add.w	r3, r7, #12
 800a6de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6e2:	6018      	str	r0, [r3, #0]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	8019      	strh	r1, [r3, #0]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	3320      	adds	r3, #32
 800a6ec:	f107 010c 	add.w	r1, r7, #12
 800a6f0:	2206      	movs	r2, #6
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fd ffb2 	bl	800865c <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 800a6f8:	f107 010c 	add.w	r1, r7, #12
 800a6fc:	2316      	movs	r3, #22
 800a6fe:	2206      	movs	r2, #6
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff fb0d 	bl	8009d20 <mg_tls_encrypt>
}
 800a706:	bf00      	nop
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	0802cf34 	.word	0x0802cf34

0800a714 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a722:	617b      	str	r3, [r7, #20]
  // server DER certificate (empty)
  size_t n = tls->cert_der.len;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800a72a:	613b      	str	r3, [r7, #16]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	330d      	adds	r3, #13
 800a730:	4619      	mov	r1, r3
 800a732:	2001      	movs	r0, #1
 800a734:	f01d ff42 	bl	80285bc <calloc>
 800a738:	4603      	mov	r3, r0
 800a73a:	60fb      	str	r3, [r7, #12]
  if (cert == NULL) {
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d104      	bne.n	800a74c <mg_tls_server_send_cert+0x38>
    mg_error(c, "tls cert oom");
 800a742:	493a      	ldr	r1, [pc, #232]	@ (800a82c <mg_tls_server_send_cert+0x118>)
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7f7 f97f 	bl	8001a48 <mg_error>
    return;
 800a74a:	e06b      	b.n	800a824 <mg_tls_server_send_cert+0x110>
  }
  cert[0] = 0x0b;                                // handshake header
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	220b      	movs	r2, #11
 800a750:	701a      	strb	r2, [r3, #0]
  cert[1] = (uint8_t) (((n + 9) >> 16) & 255U);  // 3 bytes: payload length
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3309      	adds	r3, #9
 800a756:	0c1a      	lsrs	r2, r3, #16
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3301      	adds	r3, #1
 800a75c:	b2d2      	uxtb	r2, r2
 800a75e:	701a      	strb	r2, [r3, #0]
  cert[2] = (uint8_t) (((n + 9) >> 8) & 255U);
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3309      	adds	r3, #9
 800a764:	0a1a      	lsrs	r2, r3, #8
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3302      	adds	r3, #2
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
  cert[3] = (uint8_t) ((n + 9) & 255U);
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3303      	adds	r3, #3
 800a776:	3209      	adds	r2, #9
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                   // request context
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3304      	adds	r3, #4
 800a780:	2200      	movs	r2, #0
 800a782:	701a      	strb	r2, [r3, #0]
  cert[5] = (uint8_t) (((n + 5) >> 16) & 255U);  // 3 bytes: cert (s) length
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3305      	adds	r3, #5
 800a788:	0c1a      	lsrs	r2, r3, #16
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3305      	adds	r3, #5
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
  cert[6] = (uint8_t) (((n + 5) >> 8) & 255U);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3305      	adds	r3, #5
 800a796:	0a1a      	lsrs	r2, r3, #8
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3306      	adds	r3, #6
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]
  cert[7] = (uint8_t) ((n + 5) & 255U);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3307      	adds	r3, #7
 800a7a8:	3205      	adds	r2, #5
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	701a      	strb	r2, [r3, #0]
  cert[8] =
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	0c1a      	lsrs	r2, r3, #16
  cert[8] =
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3308      	adds	r3, #8
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 800a7b6:	b2d2      	uxtb	r2, r2
  cert[8] =
 800a7b8:	701a      	strb	r2, [r3, #0]
  cert[9] = (uint8_t) (((n) >> 8) & 255U);
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	0a1a      	lsrs	r2, r3, #8
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3309      	adds	r3, #9
 800a7c2:	b2d2      	uxtb	r2, r2
 800a7c4:	701a      	strb	r2, [r3, #0]
  cert[10] = (uint8_t) (n & 255U);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	330a      	adds	r3, #10
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	b2d2      	uxtb	r2, r2
 800a7ce:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, n);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f103 000b 	add.w	r0, r3, #11
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f01e ff56 	bl	8029690 <memmove>
  cert[11 + n] = cert[12 + n] = 0;  // certificate extensions (none)
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	330c      	adds	r3, #12
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	320b      	adds	r2, #11
 800a7f4:	68f9      	ldr	r1, [r7, #12]
 800a7f6:	440a      	add	r2, r1
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	7013      	strb	r3, [r2, #0]
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f103 0020 	add.w	r0, r3, #32
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	330d      	adds	r3, #13
 800a806:	461a      	mov	r2, r3
 800a808:	68f9      	ldr	r1, [r7, #12]
 800a80a:	f7fd ff27 	bl	800865c <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f103 020d 	add.w	r2, r3, #13
 800a814:	2316      	movs	r3, #22
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff fa81 	bl	8009d20 <mg_tls_encrypt>
  free(cert);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f01d fef0 	bl	8028604 <free>
}
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0802cf3c 	.word	0x0802cf3c

0800a830 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3318      	adds	r3, #24
 800a840:	4618      	mov	r0, r3
 800a842:	f7fd fcc7 	bl	80081d4 <mg_sha256_init>
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 800a84e:	b580      	push	{r7, lr}
 800a850:	b086      	sub	sp, #24
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	3318      	adds	r3, #24
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	4618      	mov	r0, r3
 800a868:	f7fd fef8 	bl	800865c <mg_sha256_update>
}
 800a86c:	bf00      	nop
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3318      	adds	r3, #24
 800a886:	4619      	mov	r1, r3
 800a888:	6838      	ldr	r0, [r7, #0]
 800a88a:	f7fd ff20 	bl	80086ce <mg_sha256_final>
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
	...

0800a898 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 800a898:	b590      	push	{r4, r7, lr}
 800a89a:	b0f9      	sub	sp, #484	@ 0x1e4
 800a89c:	af02      	add	r7, sp, #8
 800a89e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a8a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800a8a6:	6018      	str	r0, [r3, #0]
 800a8a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a8ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800a8b0:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800a8b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a8b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a8c0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 800a8c4:	4a8f      	ldr	r2, [pc, #572]	@ (800ab04 <mg_tls_send_cert_verify+0x26c>)
 800a8c6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a8ca:	6810      	ldr	r0, [r2, #0]
 800a8cc:	6851      	ldr	r1, [r2, #4]
 800a8ce:	c303      	stmia	r3!, {r0, r1}
 800a8d0:	7a12      	ldrb	r2, [r2, #8]
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	f207 1379 	addw	r3, r7, #377	@ 0x179
 800a8d8:	2249      	movs	r2, #73	@ 0x49
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f01e fef1 	bl	80296c4 <memset>
  size_t sigsz, verifysz = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800a8ee:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	605a      	str	r2, [r3, #4]
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	60da      	str	r2, [r3, #12]
 800a8fc:	611a      	str	r2, [r3, #16]
 800a8fe:	615a      	str	r2, [r3, #20]
 800a900:	619a      	str	r2, [r3, #24]
 800a902:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	3304      	adds	r3, #4
 800a910:	227c      	movs	r2, #124	@ 0x7c
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f01e fed5 	bl	80296c4 <memset>
  struct SHA256_HashContext ctx = {
 800a91a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a91e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a922:	4618      	mov	r0, r3
 800a924:	2388      	movs	r3, #136	@ 0x88
 800a926:	461a      	mov	r2, r3
 800a928:	2100      	movs	r1, #0
 800a92a:	f01e fecb 	bl	80296c4 <memset>
 800a92e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a932:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a936:	4a74      	ldr	r2, [pc, #464]	@ (800ab08 <mg_tls_send_cert_verify+0x270>)
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a93e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a942:	4a72      	ldr	r2, [pc, #456]	@ (800ab0c <mg_tls_send_cert_verify+0x274>)
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a94a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a94e:	4a70      	ldr	r2, [pc, #448]	@ (800ab10 <mg_tls_send_cert_verify+0x278>)
 800a950:	609a      	str	r2, [r3, #8]
 800a952:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a956:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a95a:	2240      	movs	r2, #64	@ 0x40
 800a95c:	60da      	str	r2, [r3, #12]
 800a95e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a962:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a966:	2220      	movs	r2, #32
 800a968:	611a      	str	r2, [r3, #16]
 800a96a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a96e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800a972:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800a976:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 800a978:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a97c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	223c      	movs	r2, #60	@ 0x3c
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f01e fe9a 	bl	80296c4 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 800a990:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a994:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 800a998:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800a99c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a9a0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f7ff fbc4 	bl	800a134 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 800a9ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800a9b0:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 800a9b4:	f004 f97a 	bl	800ecac <mg_uecc_secp256r1>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a9be:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	f107 0308 	add.w	r3, r7, #8
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	2220      	movs	r2, #32
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f005 f9dc 	bl	800fd8c <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 800a9d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a9d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	b25b      	sxtb	r3, r3
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	09db      	lsrs	r3, r3, #7
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 800a9ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800a9ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800a9f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9f6:	b25b      	sxtb	r3, r3
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	09db      	lsrs	r3, r3, #7
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 800aa02:	2330      	movs	r3, #48	@ 0x30
 800aa04:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 800aa08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	4413      	add	r3, r2
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	3344      	adds	r3, #68	@ 0x44
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 800aa20:	2302      	movs	r3, #2
 800aa22:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 800aa26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	3320      	adds	r3, #32
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 800aa34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa38:	330c      	adds	r3, #12
 800aa3a:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800aa3e:	4413      	add	r3, r2
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	2220      	movs	r2, #32
 800aa46:	4618      	mov	r0, r3
 800aa48:	f01e fe22 	bl	8029690 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 800aa4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa50:	332c      	adds	r3, #44	@ 0x2c
 800aa52:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800aa56:	443b      	add	r3, r7
 800aa58:	2202      	movs	r2, #2
 800aa5a:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 800aa5e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa68:	332d      	adds	r3, #45	@ 0x2d
 800aa6a:	3220      	adds	r2, #32
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800aa72:	443b      	add	r3, r7
 800aa74:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 800aa78:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800aa7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800aa80:	4413      	add	r3, r2
 800aa82:	332e      	adds	r3, #46	@ 0x2e
 800aa84:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800aa88:	18d0      	adds	r0, r2, r3
 800aa8a:	f107 0308 	add.w	r3, r7, #8
 800aa8e:	3320      	adds	r3, #32
 800aa90:	2220      	movs	r2, #32
 800aa92:	4619      	mov	r1, r3
 800aa94:	f01e fdfc 	bl	8029690 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 800aa98:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800aa9c:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 800aaa0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 800aaaa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800aaae:	3308      	adds	r3, #8
 800aab0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 800aab4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	3304      	adds	r3, #4
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 800aac2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 800aacc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800aad0:	3320      	adds	r3, #32
 800aad2:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 800aad6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fd fdbe 	bl	800865c <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 800aae0:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 800aae4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800aae8:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 800aaec:	2316      	movs	r3, #22
 800aaee:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800aaf2:	6800      	ldr	r0, [r0, #0]
 800aaf4:	f7ff f914 	bl	8009d20 <mg_tls_encrypt>
}
 800aaf8:	bf00      	nop
 800aafa:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd90      	pop	{r4, r7, pc}
 800ab02:	bf00      	nop
 800ab04:	0802cf4c 	.word	0x0802cf4c
 800ab08:	0800a831 	.word	0x0800a831
 800ab0c:	0800a84f 	.word	0x0800a84f
 800ab10:	0800a875 	.word	0x0800a875

0800ab14 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b0b4      	sub	sp, #208	@ 0xd0
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ab22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 800ab26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 800ab30:	4a28      	ldr	r2, [pc, #160]	@ (800abd4 <mg_tls_server_send_finish+0xc0>)
 800ab32:	f107 030c 	add.w	r3, r7, #12
 800ab36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab3a:	6018      	str	r0, [r3, #0]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	7019      	strb	r1, [r3, #0]
 800ab40:	f107 0311 	add.w	r3, r7, #17
 800ab44:	221f      	movs	r2, #31
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f01e fdbb 	bl	80296c4 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800ab4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab52:	f103 0120 	add.w	r1, r3, #32
 800ab56:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab5a:	2270      	movs	r2, #112	@ 0x70
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f01e fd97 	bl	8029690 <memmove>
  mg_sha256_final(hash, &sha256);
 800ab62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ab66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fd fdae 	bl	80086ce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 800ab72:	f107 000c 	add.w	r0, r7, #12
 800ab76:	3004      	adds	r0, #4
 800ab78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab7c:	f503 7145 	add.w	r1, r3, #788	@ 0x314
 800ab80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ab84:	2220      	movs	r2, #32
 800ab86:	9200      	str	r2, [sp, #0]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f7fd fed8 	bl	800893e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 800ab8e:	f107 010c 	add.w	r1, r7, #12
 800ab92:	2316      	movs	r3, #22
 800ab94:	2224      	movs	r2, #36	@ 0x24
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff f8c2 	bl	8009d20 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 800ab9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	461a      	mov	r2, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7fb fafe 	bl	80061ac <mg_io_send>
  wio->len = 0;
 800abb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abb4:	2200      	movs	r2, #0
 800abb6:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 800abb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abbc:	3320      	adds	r3, #32
 800abbe:	f107 010c 	add.w	r1, r7, #12
 800abc2:	2224      	movs	r2, #36	@ 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fd fd49 	bl	800865c <mg_sha256_update>
}
 800abca:	bf00      	nop
 800abcc:	37c8      	adds	r7, #200	@ 0xc8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	0802cf58 	.word	0x0802cf58

0800abd8 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b0a0      	sub	sp, #128	@ 0x80
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800abe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 800abe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abea:	f107 0008 	add.w	r0, r7, #8
 800abee:	3320      	adds	r3, #32
 800abf0:	2270      	movs	r2, #112	@ 0x70
 800abf2:	4619      	mov	r1, r3
 800abf4:	f01e fe2b 	bl	802984e <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff f98d 	bl	8009f18 <mg_tls_recv_record>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da02      	bge.n	800ac0a <mg_tls_server_recv_finish+0x32>
    return -1;
 800ac04:	f04f 33ff 	mov.w	r3, #4294967295
 800ac08:	e01f      	b.n	800ac4a <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	4413      	add	r3, r2
 800ac14:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 800ac16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b14      	cmp	r3, #20
 800ac1c:	d009      	beq.n	800ac32 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 800ac1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	490b      	ldr	r1, [pc, #44]	@ (800ac54 <mg_tls_server_recv_finish+0x7c>)
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7f6 ff0e 	bl	8001a48 <mg_error>
    return -1;
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	e00b      	b.n	800ac4a <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7fe fd24 	bl	8009680 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 800ac38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac3a:	3320      	adds	r3, #32
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	2270      	movs	r2, #112	@ 0x70
 800ac42:	4618      	mov	r0, r3
 800ac44:	f01e fe03 	bl	802984e <memcpy>
  return 0;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3780      	adds	r7, #128	@ 0x80
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	0802cf7c 	.word	0x0802cf7c

0800ac58 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	b0c4      	sub	sp, #272	@ 0x110
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac66:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800ac68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ac76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  struct mg_iobuf *wio = &tls->send;
 800ac7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7e:	3304      	adds	r3, #4
 800ac80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  uint8_t x25519_pub[X25519_BYTES];

  // the only signature algorithm we actually support
  uint8_t secp256r1_sig_algs[8] = {
 800ac84:	4a28      	ldr	r2, [pc, #160]	@ (800ad28 <mg_tls_client_send_hello+0xd0>)
 800ac86:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800ac8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac8e:	e883 0003 	stmia.w	r3, {r0, r1}
      0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 800ac92:	4b26      	ldr	r3, [pc, #152]	@ (800ad2c <mg_tls_client_send_hello+0xd4>)
 800ac94:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800ac98:	461d      	mov	r5, r3
 800ac9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 800aca6:	4a22      	ldr	r2, [pc, #136]	@ (800ad30 <mg_tls_client_send_hello+0xd8>)
 800aca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800acac:	ca07      	ldmia	r2, {r0, r1, r2}
 800acae:	c303      	stmia	r3!, {r0, r1}
 800acb0:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 800acb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acba:	4a1e      	ldr	r2, [pc, #120]	@ (800ad34 <mg_tls_client_send_hello+0xdc>)
 800acbc:	4618      	mov	r0, r3
 800acbe:	4611      	mov	r1, r2
 800acc0:	2391      	movs	r3, #145	@ 0x91
 800acc2:	461a      	mov	r2, r3
 800acc4:	f01e fdc3 	bl	802984e <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 800acc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800accc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800acd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  size_t hostnamesz = strlen(tls->hostname);
 800acd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800acdc:	4618      	mov	r0, r3
 800acde:	f7f5 fb4f 	bl	8000380 <strlen>
 800ace2:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 800ace6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <mg_tls_client_send_hello+0x9e>
 800acee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800acf2:	3309      	adds	r3, #9
 800acf4:	e000      	b.n	800acf8 <mg_tls_client_send_hello+0xa0>
 800acf6:	2300      	movs	r3, #0
 800acf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 800acfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad00:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <mg_tls_client_send_hello+0xb6>
 800ad08:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800ad0c:	e001      	b.n	800ad12 <mg_tls_client_send_hello+0xba>
 800ad0e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800ad12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 800ad16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad1a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <mg_tls_client_send_hello+0xe0>
 800ad22:	2322      	movs	r3, #34	@ 0x22
 800ad24:	e009      	b.n	800ad3a <mg_tls_client_send_hello+0xe2>
 800ad26:	bf00      	nop
 800ad28:	0802cfa0 	.word	0x0802cfa0
 800ad2c:	0802cfa8 	.word	0x0802cfa8
 800ad30:	0802cfcc 	.word	0x0802cfcc
 800ad34:	0802cfd8 	.word	0x0802cfd8
 800ad38:	2308      	movs	r3, #8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 800ad3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 800ad3e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800ad42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad46:	4413      	add	r3, r2
 800ad48:	338c      	adds	r3, #140	@ 0x8c
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad56:	70da      	strb	r2, [r3, #3]
 800ad58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	4413      	add	r3, r2
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	3b74      	subs	r3, #116	@ 0x74
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad74:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 800ad76:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800ad7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad7e:	4413      	add	r3, r2
 800ad80:	3388      	adds	r3, #136	@ 0x88
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8e:	71da      	strb	r2, [r3, #7]
 800ad90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	3b78      	subs	r3, #120	@ 0x78
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ada8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adac:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 800adae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800adb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adb6:	4413      	add	r3, r2
 800adb8:	333d      	adds	r3, #61	@ 0x3d
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800adca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adce:	b2da      	uxtb	r2, r3
 800add0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800add4:	b2db      	uxtb	r3, r3
 800add6:	4413      	add	r3, r2
 800add8:	b2db      	uxtb	r3, r3
 800adda:	333d      	adds	r3, #61	@ 0x3d
 800addc:	b2da      	uxtb	r2, r3
 800adde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ade2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ade6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 800adea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d026      	beq.n	800ae40 <mg_tls_client_send_hello+0x1e8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 800adf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800adf6:	3305      	adds	r3, #5
 800adf8:	0a1b      	lsrs	r3, r3, #8
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800ae00:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	3305      	adds	r3, #5
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 800ae0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae12:	3303      	adds	r3, #3
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 800ae1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	3303      	adds	r3, #3
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 800ae2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 800ae36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 800ae40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae44:	33d0      	adds	r3, #208	@ 0xd0
 800ae46:	2120      	movs	r1, #32
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f007 f899 	bl	8011f80 <mg_random>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f083 0301 	eor.w	r3, r3, #1
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <mg_tls_client_send_hello+0x212>
 800ae5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae62:	4974      	ldr	r1, [pc, #464]	@ (800b034 <mg_tls_client_send_hello+0x3dc>)
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	f7f6 fdef 	bl	8001a48 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 800ae6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6e:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800ae72:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 800ae76:	2301      	movs	r3, #1
 800ae78:	4a6f      	ldr	r2, [pc, #444]	@ (800b038 <mg_tls_client_send_hello+0x3e0>)
 800ae7a:	f005 ff6b 	bl	8010d54 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 800ae7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae82:	33b0      	adds	r3, #176	@ 0xb0
 800ae84:	2120      	movs	r1, #32
 800ae86:	4618      	mov	r0, r3
 800ae88:	f007 f87a 	bl	8011f80 <mg_random>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f083 0301 	eor.w	r3, r3, #1
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <mg_tls_client_send_hello+0x250>
 800ae98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aea0:	4964      	ldr	r1, [pc, #400]	@ (800b034 <mg_tls_client_send_hello+0x3dc>)
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	f7f6 fdd0 	bl	8001a48 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 800aea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeac:	3390      	adds	r3, #144	@ 0x90
 800aeae:	2120      	movs	r1, #32
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f007 f865 	bl	8011f80 <mg_random>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f083 0301 	eor.w	r3, r3, #1
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d007      	beq.n	800aed2 <mg_tls_client_send_hello+0x27a>
 800aec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aeca:	495a      	ldr	r1, [pc, #360]	@ (800b034 <mg_tls_client_send_hello+0x3dc>)
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f7f6 fdbb 	bl	8001a48 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 800aed2:	f107 0308 	add.w	r3, r7, #8
 800aed6:	330b      	adds	r3, #11
 800aed8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800aedc:	3290      	adds	r2, #144	@ 0x90
 800aede:	6815      	ldr	r5, [r2, #0]
 800aee0:	6854      	ldr	r4, [r2, #4]
 800aee2:	6890      	ldr	r0, [r2, #8]
 800aee4:	68d1      	ldr	r1, [r2, #12]
 800aee6:	601d      	str	r5, [r3, #0]
 800aee8:	605c      	str	r4, [r3, #4]
 800aeea:	6098      	str	r0, [r3, #8]
 800aeec:	60d9      	str	r1, [r3, #12]
 800aeee:	6915      	ldr	r5, [r2, #16]
 800aef0:	6954      	ldr	r4, [r2, #20]
 800aef2:	6990      	ldr	r0, [r2, #24]
 800aef4:	69d1      	ldr	r1, [r2, #28]
 800aef6:	611d      	str	r5, [r3, #16]
 800aef8:	615c      	str	r4, [r3, #20]
 800aefa:	6198      	str	r0, [r3, #24]
 800aefc:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	332c      	adds	r3, #44	@ 0x2c
 800af04:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800af08:	32b0      	adds	r2, #176	@ 0xb0
 800af0a:	6815      	ldr	r5, [r2, #0]
 800af0c:	6854      	ldr	r4, [r2, #4]
 800af0e:	6890      	ldr	r0, [r2, #8]
 800af10:	68d1      	ldr	r1, [r2, #12]
 800af12:	601d      	str	r5, [r3, #0]
 800af14:	605c      	str	r4, [r3, #4]
 800af16:	6098      	str	r0, [r3, #8]
 800af18:	60d9      	str	r1, [r3, #12]
 800af1a:	6915      	ldr	r5, [r2, #16]
 800af1c:	6954      	ldr	r4, [r2, #20]
 800af1e:	6990      	ldr	r0, [r2, #24]
 800af20:	69d1      	ldr	r1, [r2, #28]
 800af22:	611d      	str	r5, [r3, #16]
 800af24:	615c      	str	r4, [r3, #20]
 800af26:	6198      	str	r0, [r3, #24]
 800af28:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	335e      	adds	r3, #94	@ 0x5e
 800af30:	461d      	mov	r5, r3
 800af32:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 800af36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af38:	6028      	str	r0, [r5, #0]
 800af3a:	6069      	str	r1, [r5, #4]
 800af3c:	60aa      	str	r2, [r5, #8]
 800af3e:	60eb      	str	r3, [r5, #12]
 800af40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af42:	6128      	str	r0, [r5, #16]
 800af44:	6169      	str	r1, [r5, #20]
 800af46:	61aa      	str	r2, [r5, #24]
 800af48:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 800af4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800af4e:	6899      	ldr	r1, [r3, #8]
 800af50:	f107 0208 	add.w	r2, r7, #8
 800af54:	2391      	movs	r3, #145	@ 0x91
 800af56:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800af5a:	f7f7 fe93 	bl	8002c84 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 800af5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af62:	f103 0020 	add.w	r0, r3, #32
 800af66:	f107 0308 	add.w	r3, r7, #8
 800af6a:	3305      	adds	r3, #5
 800af6c:	228c      	movs	r2, #140	@ 0x8c
 800af6e:	4619      	mov	r1, r3
 800af70:	f7fd fb74 	bl	800865c <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 800af74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800af78:	6899      	ldr	r1, [r3, #8]
 800af7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af7e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800af82:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800af86:	f7f7 fe7d 	bl	8002c84 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 800af8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8e:	3320      	adds	r3, #32
 800af90:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800af94:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fb5f 	bl	800865c <mg_sha256_update>
  if (hostnamesz > 0) {
 800af9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d027      	beq.n	800aff6 <mg_tls_client_send_hello+0x39e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 800afa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800afaa:	6899      	ldr	r1, [r3, #8]
 800afac:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800afb0:	2309      	movs	r3, #9
 800afb2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800afb6:	f7f7 fe65 	bl	8002c84 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 800afba:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800afbe:	6899      	ldr	r1, [r3, #8]
 800afc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afc4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800afc8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800afcc:	f7f7 fe5a 	bl	8002c84 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 800afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd4:	3320      	adds	r3, #32
 800afd6:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800afda:	2209      	movs	r2, #9
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fd fb3d 	bl	800865c <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	3320      	adds	r3, #32
 800afe8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800afec:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fd fb33 	bl	800865c <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 800aff6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800affa:	6899      	ldr	r1, [r3, #8]
 800affc:	2306      	movs	r3, #6
 800affe:	4a0f      	ldr	r2, [pc, #60]	@ (800b03c <mg_tls_client_send_hello+0x3e4>)
 800b000:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800b004:	f7f7 fe3e 	bl	8002c84 <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 800b008:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b018:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f7fb f8c5 	bl	80061ac <mg_io_send>
  wio->len = 0;
 800b022:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b026:	2200      	movs	r2, #0
 800b028:	609a      	str	r2, [r3, #8]
}
 800b02a:	bf00      	nop
 800b02c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800b030:	46bd      	mov	sp, r7
 800b032:	bdb0      	pop	{r4, r5, r7, pc}
 800b034:	0802ce94 	.word	0x0802ce94
 800b038:	08030ac8 	.word	0x08030ac8
 800b03c:	0802ceb0 	.word	0x0802ceb0

0800b040 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b08a      	sub	sp, #40	@ 0x28
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b04e:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3368      	adds	r3, #104	@ 0x68
 800b054:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7fe fac9 	bl	80095ee <mg_tls_got_record>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f083 0301 	eor.w	r3, r3, #1
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 800b068:	f06f 0301 	mvn.w	r3, #1
 800b06c:	e103      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b16      	cmp	r3, #22
 800b076:	d105      	bne.n	800b084 <mg_tls_client_recv_hello+0x44>
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3305      	adds	r3, #5
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d032      	beq.n	800b0ea <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b15      	cmp	r3, #21
 800b08c:	d10f      	bne.n	800b0ae <mg_tls_client_recv_hello+0x6e>
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	2b06      	cmp	r3, #6
 800b094:	d90b      	bls.n	800b0ae <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3306      	adds	r3, #6
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	4977      	ldr	r1, [pc, #476]	@ (800b280 <mg_tls_client_recv_hello+0x240>)
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7f6 fcd0 	bl	8001a48 <mg_error>
      return -1;
 800b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ac:	e0e3      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 800b0ae:	4b75      	ldr	r3, [pc, #468]	@ (800b284 <mg_tls_client_recv_hello+0x244>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	dd12      	ble.n	800b0dc <mg_tls_client_recv_hello+0x9c>
 800b0b6:	4b74      	ldr	r3, [pc, #464]	@ (800b288 <mg_tls_client_recv_hello+0x248>)
 800b0b8:	f642 2257 	movw	r2, #10839	@ 0x2a57
 800b0bc:	4973      	ldr	r1, [pc, #460]	@ (800b28c <mg_tls_client_recv_hello+0x24c>)
 800b0be:	2002      	movs	r0, #2
 800b0c0:	f7f7 feba 	bl	8002e38 <mg_log_prefix>
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3305      	adds	r3, #5
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	486e      	ldr	r0, [pc, #440]	@ (800b290 <mg_tls_client_recv_hello+0x250>)
 800b0d8:	f7f7 fefe 	bl	8002ed8 <mg_log>
    mg_error(c, "not a server hello packet");
 800b0dc:	496d      	ldr	r1, [pc, #436]	@ (800b294 <mg_tls_client_recv_hello+0x254>)
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7f6 fcb2 	bl	8001a48 <mg_error>
    return -1;
 800b0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e8:	e0c5      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3303      	adds	r3, #3
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	021b      	lsls	r3, r3, #8
 800b0f4:	b21a      	sxth	r2, r3
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b21b      	sxth	r3, r3
 800b100:	4313      	orrs	r3, r2
 800b102:	b21b      	sxth	r3, r3
 800b104:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	f103 0020 	add.w	r0, r3, #32
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3305      	adds	r3, #5
 800b112:	8b7a      	ldrh	r2, [r7, #26]
 800b114:	4619      	mov	r1, r3
 800b116:	f7fd faa1 	bl	800865c <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	334f      	adds	r3, #79	@ 0x4f
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	b21a      	sxth	r2, r3
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3350      	adds	r3, #80	@ 0x50
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	b21b      	sxth	r3, r3
 800b130:	4313      	orrs	r3, r2
 800b132:	b21b      	sxth	r3, r3
 800b134:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3351      	adds	r3, #81	@ 0x51
 800b13c:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 800b13e:	8b3a      	ldrh	r2, [r7, #24]
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	3b51      	subs	r3, #81	@ 0x51
 800b146:	429a      	cmp	r2, r3
 800b148:	f200 808c 	bhi.w	800b264 <mg_tls_client_recv_hello+0x224>

  for (j = 0; j < ext_len;) {
 800b14c:	2300      	movs	r3, #0
 800b14e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b150:	e082      	b.n	800b258 <mg_tls_client_recv_hello+0x218>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 800b152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	4413      	add	r3, r2
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	b21a      	sxth	r2, r3
 800b15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b160:	3301      	adds	r3, #1
 800b162:	6979      	ldr	r1, [r7, #20]
 800b164:	440b      	add	r3, r1
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	b21b      	sxth	r3, r3
 800b16a:	4313      	orrs	r3, r2
 800b16c:	b21b      	sxth	r3, r3
 800b16e:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	3302      	adds	r3, #2
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	4413      	add	r3, r2
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	b21a      	sxth	r2, r3
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	3303      	adds	r3, #3
 800b182:	6979      	ldr	r1, [r7, #20]
 800b184:	440b      	add	r3, r1
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b21b      	sxth	r3, r3
 800b18a:	4313      	orrs	r3, r2
 800b18c:	b21b      	sxth	r3, r3
 800b18e:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 800b190:	8b3a      	ldrh	r2, [r7, #24]
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	1eda      	subs	r2, r3, #3
 800b198:	8a3b      	ldrh	r3, [r7, #16]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	dd64      	ble.n	800b268 <mg_tls_client_recv_hello+0x228>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 800b19e:	8a7b      	ldrh	r3, [r7, #18]
 800b1a0:	2b33      	cmp	r3, #51	@ 0x33
 800b1a2:	d007      	beq.n	800b1b4 <mg_tls_client_recv_hello+0x174>
      j += (uint16_t) (ext_len2 + 4);
 800b1a4:	8a3b      	ldrh	r3, [r7, #16]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	4413      	add	r3, r2
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800b1b2:	e051      	b.n	800b258 <mg_tls_client_recv_hello+0x218>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	b21a      	sxth	r2, r3
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	3305      	adds	r3, #5
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	440b      	add	r3, r1
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	b21b      	sxth	r3, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	b21b      	sxth	r3, r3
 800b1d2:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 800b1d4:	89fb      	ldrh	r3, [r7, #14]
 800b1d6:	2b1d      	cmp	r3, #29
 800b1d8:	d006      	beq.n	800b1e8 <mg_tls_client_recv_hello+0x1a8>
      mg_error(c, "bad key exchange group");
 800b1da:	492f      	ldr	r1, [pc, #188]	@ (800b298 <mg_tls_client_recv_hello+0x258>)
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7f6 fc33 	bl	8001a48 <mg_error>
      return -1;
 800b1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e6:	e046      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	3306      	adds	r3, #6
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	021b      	lsls	r3, r3, #8
 800b1f4:	b21a      	sxth	r2, r3
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	440b      	add	r3, r1
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	b21b      	sxth	r3, r3
 800b202:	4313      	orrs	r3, r2
 800b204:	b21b      	sxth	r3, r3
 800b206:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 800b208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20a:	3308      	adds	r3, #8
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4413      	add	r3, r2
 800b210:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 800b212:	89bb      	ldrh	r3, [r7, #12]
 800b214:	2b20      	cmp	r3, #32
 800b216:	d006      	beq.n	800b226 <mg_tls_client_recv_hello+0x1e6>
      mg_error(c, "bad key exchange length");
 800b218:	4920      	ldr	r1, [pc, #128]	@ (800b29c <mg_tls_client_recv_hello+0x25c>)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7f6 fc14 	bl	8001a48 <mg_error>
      return -1;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	e027      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800b232:	2301      	movs	r3, #1
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	f005 fd8d 	bl	8010d54 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	33f0      	adds	r3, #240	@ 0xf0
 800b23e:	2220      	movs	r2, #32
 800b240:	4619      	mov	r1, r3
 800b242:	4817      	ldr	r0, [pc, #92]	@ (800b2a0 <mg_tls_client_recv_hello+0x260>)
 800b244:	f7fe f8e8 	bl	8009418 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7fe f9f7 	bl	800963c <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7fe fafe 	bl	8009850 <mg_tls_generate_handshake_keys>
    return 0;
 800b254:	2300      	movs	r3, #0
 800b256:	e00e      	b.n	800b276 <mg_tls_client_recv_hello+0x236>
  for (j = 0; j < ext_len;) {
 800b258:	8b3b      	ldrh	r3, [r7, #24]
 800b25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b25c:	429a      	cmp	r2, r3
 800b25e:	f6ff af78 	blt.w	800b152 <mg_tls_client_recv_hello+0x112>
  }
fail:
 800b262:	e002      	b.n	800b26a <mg_tls_client_recv_hello+0x22a>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 800b264:	bf00      	nop
 800b266:	e000      	b.n	800b26a <mg_tls_client_recv_hello+0x22a>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 800b268:	bf00      	nop
  mg_error(c, "bad client hello");
 800b26a:	490e      	ldr	r1, [pc, #56]	@ (800b2a4 <mg_tls_client_recv_hello+0x264>)
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7f6 fbeb 	bl	8001a48 <mg_error>
  return -1;
 800b272:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b276:	4618      	mov	r0, r3
 800b278:	3728      	adds	r7, #40	@ 0x28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	0802d06c 	.word	0x0802d06c
 800b284:	24000000 	.word	0x24000000
 800b288:	08030cd8 	.word	0x08030cd8
 800b28c:	0802b5b0 	.word	0x0802b5b0
 800b290:	0802d07c 	.word	0x0802d07c
 800b294:	0802d09c 	.word	0x0802d09c
 800b298:	0802d0b8 	.word	0x0802d0b8
 800b29c:	0802d0d0 	.word	0x0802d0d0
 800b2a0:	0802d0e8 	.word	0x0802d0e8
 800b2a4:	0802ce80 	.word	0x0802ce80

0800b2a8 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b2b6:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7fe fe2d 	bl	8009f18 <mg_tls_recv_record>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	da02      	bge.n	800b2ca <mg_tls_client_recv_ext+0x22>
    return -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	e017      	b.n	800b2fa <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b08      	cmp	r3, #8
 800b2dc:	d009      	beq.n	800b2f2 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	4907      	ldr	r1, [pc, #28]	@ (800b304 <mg_tls_client_recv_ext+0x5c>)
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7f6 fbae 	bl	8001a48 <mg_error>
    return -1;
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f0:	e003      	b.n	800b2fa <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7fe f9c4 	bl	8009680 <mg_tls_drop_message>
  return 0;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	0802d0f8 	.word	0x0802d0f8

0800b308 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b09a      	sub	sp, #104	@ 0x68
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
  uint8_t *cert;
  uint32_t certsz;
  struct mg_der_tlv oid, pubkey, seq, subj;
  int subj_match = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b31a:	65bb      	str	r3, [r7, #88]	@ 0x58
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7fe fdfb 	bl	8009f18 <mg_tls_recv_record>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	da02      	bge.n	800b32e <mg_tls_client_recv_cert+0x26>
    return -1;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295
 800b32c:	e191      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	4413      	add	r3, r2
 800b338:	657b      	str	r3, [r7, #84]	@ 0x54
  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 800b33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b0d      	cmp	r3, #13
 800b340:	d117      	bne.n	800b372 <mg_tls_client_recv_cert+0x6a>
    MG_VERBOSE(("got certificate request"));
 800b342:	4b9f      	ldr	r3, [pc, #636]	@ (800b5c0 <mg_tls_client_recv_cert+0x2b8>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b03      	cmp	r3, #3
 800b348:	dd09      	ble.n	800b35e <mg_tls_client_recv_cert+0x56>
 800b34a:	4b9e      	ldr	r3, [pc, #632]	@ (800b5c4 <mg_tls_client_recv_cert+0x2bc>)
 800b34c:	f642 22a0 	movw	r2, #10912	@ 0x2aa0
 800b350:	499d      	ldr	r1, [pc, #628]	@ (800b5c8 <mg_tls_client_recv_cert+0x2c0>)
 800b352:	2004      	movs	r0, #4
 800b354:	f7f7 fd70 	bl	8002e38 <mg_log_prefix>
 800b358:	489c      	ldr	r0, [pc, #624]	@ (800b5cc <mg_tls_client_recv_cert+0x2c4>)
 800b35a:	f7f7 fdbd 	bl	8002ed8 <mg_log>
    mg_tls_drop_message(c);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7fe f98e 	bl	8009680 <mg_tls_drop_message>
    tls->cert_requested = 1;
 800b364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b366:	2201      	movs	r2, #1
 800b368:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295
 800b370:	e16f      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }
  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 800b372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b0b      	cmp	r3, #11
 800b378:	d009      	beq.n	800b38e <mg_tls_client_recv_cert+0x86>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 800b37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	4993      	ldr	r1, [pc, #588]	@ (800b5d0 <mg_tls_client_recv_cert+0x2c8>)
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7f6 fb60 	bl	8001a48 <mg_error>
    return -1;
 800b388:	f04f 33ff 	mov.w	r3, #4294967295
 800b38c:	e161      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }
  if (tls->skip_verification) {
 800b38e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b390:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <mg_tls_client_recv_cert+0x9a>
    mg_tls_drop_message(c);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7fe f971 	bl	8009680 <mg_tls_drop_message>
    return 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e157      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }

  if (tls->recv_len < 11) {
 800b3a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	2b0a      	cmp	r3, #10
 800b3a8:	d806      	bhi.n	800b3b8 <mg_tls_client_recv_cert+0xb0>
    mg_error(c, "certificate list too short");
 800b3aa:	498a      	ldr	r1, [pc, #552]	@ (800b5d4 <mg_tls_client_recv_cert+0x2cc>)
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7f6 fb4b 	bl	8001a48 <mg_error>
    return -1;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e14c      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }

  cert = recv_buf + 11;
 800b3b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ba:	330b      	adds	r3, #11
 800b3bc:	653b      	str	r3, [r7, #80]	@ 0x50
  certsz = MG_LOAD_BE24(recv_buf + 8);
 800b3be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	041a      	lsls	r2, r3, #16
 800b3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3c8:	3309      	adds	r3, #9
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3d2:	320a      	adds	r2, #10
 800b3d4:	7812      	ldrb	r2, [r2, #0]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (certsz > tls->recv_len - 11) {
 800b3da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	3b0b      	subs	r3, #11
 800b3e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d90a      	bls.n	800b3fc <mg_tls_client_recv_cert+0xf4>
    mg_error(c, "certificate too long: %d vs %d", certsz, tls->recv_len - 11);
 800b3e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	3b0b      	subs	r3, #11
 800b3ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3ee:	497a      	ldr	r1, [pc, #488]	@ (800b5d8 <mg_tls_client_recv_cert+0x2d0>)
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7f6 fb29 	bl	8001a48 <mg_error>
    return -1;
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fa:	e12a      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
  }

  do {
    // secp256r1 public key
    if (mg_der_find(cert, certsz,
 800b3fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	2308      	movs	r3, #8
 800b404:	4a75      	ldr	r2, [pc, #468]	@ (800b5dc <mg_tls_client_recv_cert+0x2d4>)
 800b406:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b408:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b40a:	f7fe f881 	bl	8009510 <mg_der_find>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	da06      	bge.n	800b422 <mg_tls_client_recv_cert+0x11a>
                    (uint8_t *) "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8,
                    &oid) < 0) {
      mg_error(c, "certificate secp256r1 public key OID not found");
 800b414:	4972      	ldr	r1, [pc, #456]	@ (800b5e0 <mg_tls_client_recv_cert+0x2d8>)
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7f6 fb16 	bl	8001a48 <mg_error>
      return -1;
 800b41c:	f04f 33ff 	mov.w	r3, #4294967295
 800b420:	e117      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 800b422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b426:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 800b428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b42a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b42c:	441a      	add	r2, r3
 800b42e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b432:	440b      	add	r3, r1
 800b434:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 800b436:	4619      	mov	r1, r3
 800b438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b43c:	461a      	mov	r2, r3
 800b43e:	f7fe f813 	bl	8009468 <mg_der_to_tlv>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	da06      	bge.n	800b456 <mg_tls_client_recv_cert+0x14e>
                      &pubkey) < 0) {
      mg_error(c, "certificate secp256r1 public key not found");
 800b448:	4966      	ldr	r1, [pc, #408]	@ (800b5e4 <mg_tls_client_recv_cert+0x2dc>)
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7f6 fafc 	bl	8001a48 <mg_error>
      return -1;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295
 800b454:	e0fd      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }

    // expect BIT STRING, unpadded, uncompressed: [0]+[4]+32+32 content bytes
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 800b456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d10b      	bne.n	800b476 <mg_tls_client_recv_cert+0x16e>
 800b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b460:	2b42      	cmp	r3, #66	@ 0x42
 800b462:	d108      	bne.n	800b476 <mg_tls_client_recv_cert+0x16e>
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <mg_tls_client_recv_cert+0x16e>
        pubkey.value[1] != 4) {
 800b46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46e:	3301      	adds	r3, #1
 800b470:	781b      	ldrb	r3, [r3, #0]
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 800b472:	2b04      	cmp	r3, #4
 800b474:	d006      	beq.n	800b484 <mg_tls_client_recv_cert+0x17c>
      mg_error(c, "unsupported public key bitstring encoding");
 800b476:	495c      	ldr	r1, [pc, #368]	@ (800b5e8 <mg_tls_client_recv_cert+0x2e0>)
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7f6 fae5 	bl	8001a48 <mg_error>
      return -1;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	e0e6      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
    memmove(tls->pubkey, pubkey.value + 2, pubkey.len - 2);
 800b484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b486:	f203 205e 	addw	r0, r3, #606	@ 0x25e
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	1c99      	adds	r1, r3, #2
 800b48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b490:	3b02      	subs	r3, #2
 800b492:	461a      	mov	r2, r3
 800b494:	f01e f8fc 	bl	8029690 <memmove>
  } while (0);

  // Subject Alternative Names
  do {
    if (mg_der_find(cert, certsz, (uint8_t *) "\x55\x1d\x11", 3, &oid) < 0) {
 800b498:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	2303      	movs	r3, #3
 800b4a0:	4a52      	ldr	r2, [pc, #328]	@ (800b5ec <mg_tls_client_recv_cert+0x2e4>)
 800b4a2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b4a4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b4a6:	f7fe f833 	bl	8009510 <mg_der_find>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da06      	bge.n	800b4be <mg_tls_client_recv_cert+0x1b6>
      mg_error(c, "certificate does not contain subject alternative names");
 800b4b0:	494f      	ldr	r1, [pc, #316]	@ (800b5f0 <mg_tls_client_recv_cert+0x2e8>)
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7f6 fac8 	bl	8001a48 <mg_error>
      return -1;
 800b4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4bc:	e0c9      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 800b4be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c2:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 800b4c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c8:	441a      	add	r2, r3
 800b4ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ce:	440b      	add	r3, r1
 800b4d0:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	f107 0318 	add.w	r3, r7, #24
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f7fd ffc5 	bl	8009468 <mg_der_to_tlv>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	da06      	bge.n	800b4f2 <mg_tls_client_recv_cert+0x1ea>
                      &seq) < 0) {
      mg_error(c, "certificate subject alternative names not found");
 800b4e4:	4943      	ldr	r1, [pc, #268]	@ (800b5f4 <mg_tls_client_recv_cert+0x2ec>)
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f6 faae 	bl	8001a48 <mg_error>
      return -1;
 800b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f0:	e0af      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &seq) < 0) {
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	69f9      	ldr	r1, [r7, #28]
 800b4f6:	f107 0218 	add.w	r2, r7, #24
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fd ffb4 	bl	8009468 <mg_der_to_tlv>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	da06      	bge.n	800b514 <mg_tls_client_recv_cert+0x20c>
      mg_error(
 800b506:	493c      	ldr	r1, [pc, #240]	@ (800b5f8 <mg_tls_client_recv_cert+0x2f0>)
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7f6 fa9d 	bl	8001a48 <mg_error>
          c,
          "certificate subject alternative names is not a constructed object");
      return -1;
 800b50e:	f04f 33ff 	mov.w	r3, #4294967295
 800b512:	e09e      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
    MG_VERBOSE(("verify hostname %s", tls->hostname));
 800b514:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c0 <mg_tls_client_recv_cert+0x2b8>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b03      	cmp	r3, #3
 800b51a:	f340 8081 	ble.w	800b620 <mg_tls_client_recv_cert+0x318>
 800b51e:	4b29      	ldr	r3, [pc, #164]	@ (800b5c4 <mg_tls_client_recv_cert+0x2bc>)
 800b520:	f642 22e4 	movw	r2, #10980	@ 0x2ae4
 800b524:	4928      	ldr	r1, [pc, #160]	@ (800b5c8 <mg_tls_client_recv_cert+0x2c0>)
 800b526:	2004      	movs	r0, #4
 800b528:	f7f7 fc86 	bl	8002e38 <mg_log_prefix>
 800b52c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b52e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800b532:	4619      	mov	r1, r3
 800b534:	4831      	ldr	r0, [pc, #196]	@ (800b5fc <mg_tls_client_recv_cert+0x2f4>)
 800b536:	f7f7 fccf 	bl	8002ed8 <mg_log>
    while (seq.len > 0) {
 800b53a:	e071      	b.n	800b620 <mg_tls_client_recv_cert+0x318>
      if (mg_der_to_tlv(seq.value, seq.len, &subj) < 0) {
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	69f9      	ldr	r1, [r7, #28]
 800b540:	f107 020c 	add.w	r2, r7, #12
 800b544:	4618      	mov	r0, r3
 800b546:	f7fd ff8f 	bl	8009468 <mg_der_to_tlv>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	da06      	bge.n	800b55e <mg_tls_client_recv_cert+0x256>
        mg_error(c, "bad subject alternative name");
 800b550:	492b      	ldr	r1, [pc, #172]	@ (800b600 <mg_tls_client_recv_cert+0x2f8>)
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7f6 fa78 	bl	8001a48 <mg_error>
        return -1;
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e079      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
      }
      MG_VERBOSE(("subj=%.*s", subj.len, subj.value));
 800b55e:	4b18      	ldr	r3, [pc, #96]	@ (800b5c0 <mg_tls_client_recv_cert+0x2b8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b03      	cmp	r3, #3
 800b564:	dd0c      	ble.n	800b580 <mg_tls_client_recv_cert+0x278>
 800b566:	4b17      	ldr	r3, [pc, #92]	@ (800b5c4 <mg_tls_client_recv_cert+0x2bc>)
 800b568:	f642 22ea 	movw	r2, #10986	@ 0x2aea
 800b56c:	4916      	ldr	r1, [pc, #88]	@ (800b5c8 <mg_tls_client_recv_cert+0x2c0>)
 800b56e:	2004      	movs	r0, #4
 800b570:	f7f7 fc62 	bl	8002e38 <mg_log_prefix>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	4619      	mov	r1, r3
 800b57a:	4822      	ldr	r0, [pc, #136]	@ (800b604 <mg_tls_client_recv_cert+0x2fc>)
 800b57c:	f7f7 fcac 	bl	8002ed8 <mg_log>
      if (mg_match(mg_str((const char *) tls->hostname),
 800b580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b582:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800b586:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b58a:	4611      	mov	r1, r2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fd fac0 	bl	8008b12 <mg_str_s>
                   mg_str_n((const char *) subj.value, subj.len), NULL)) {
 800b592:	6979      	ldr	r1, [r7, #20]
 800b594:	693a      	ldr	r2, [r7, #16]
      if (mg_match(mg_str((const char *) tls->hostname),
 800b596:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fd fad6 	bl	8008b4c <mg_str_n>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b5a8:	cb0c      	ldmia	r3, {r2, r3}
 800b5aa:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800b5ae:	c903      	ldmia	r1, {r0, r1}
 800b5b0:	f7fd fb40 	bl	8008c34 <mg_match>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d026      	beq.n	800b608 <mg_tls_client_recv_cert+0x300>
        subj_match = 1;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        break;
 800b5be:	e032      	b.n	800b626 <mg_tls_client_recv_cert+0x31e>
 800b5c0:	24000000 	.word	0x24000000
 800b5c4:	08030cf4 	.word	0x08030cf4
 800b5c8:	0802b5b0 	.word	0x0802b5b0
 800b5cc:	0802d128 	.word	0x0802d128
 800b5d0:	0802d140 	.word	0x0802d140
 800b5d4:	0802d170 	.word	0x0802d170
 800b5d8:	0802d18c 	.word	0x0802d18c
 800b5dc:	0802d1ac 	.word	0x0802d1ac
 800b5e0:	0802d1b8 	.word	0x0802d1b8
 800b5e4:	0802d1e8 	.word	0x0802d1e8
 800b5e8:	0802d214 	.word	0x0802d214
 800b5ec:	0802d240 	.word	0x0802d240
 800b5f0:	0802d244 	.word	0x0802d244
 800b5f4:	0802d27c 	.word	0x0802d27c
 800b5f8:	0802d2ac 	.word	0x0802d2ac
 800b5fc:	0802d2f0 	.word	0x0802d2f0
 800b600:	0802d304 	.word	0x0802d304
 800b604:	0802d324 	.word	0x0802d324
      }
      seq.len = (uint32_t) (seq.value + seq.len - (subj.value + subj.len));
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	441a      	add	r2, r3
 800b60e:	6979      	ldr	r1, [r7, #20]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	440b      	add	r3, r1
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	61fb      	str	r3, [r7, #28]
      seq.value = subj.value + subj.len;
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	4413      	add	r3, r2
 800b61e:	623b      	str	r3, [r7, #32]
    while (seq.len > 0) {
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d18a      	bne.n	800b53c <mg_tls_client_recv_cert+0x234>
    }
    if (!subj_match) {
 800b626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <mg_tls_client_recv_cert+0x332>
      mg_error(c, "certificate did not match the hostname");
 800b62c:	490b      	ldr	r1, [pc, #44]	@ (800b65c <mg_tls_client_recv_cert+0x354>)
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7f6 fa0a 	bl	8001a48 <mg_error>
      return -1;
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	e00b      	b.n	800b652 <mg_tls_client_recv_cert+0x34a>
    }
  } while (0);

  mg_tls_drop_message(c);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7fe f820 	bl	8009680 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 800b640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b642:	f203 239e 	addw	r3, r3, #670	@ 0x29e
 800b646:	2200      	movs	r2, #0
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7fe fd72 	bl	800a134 <mg_tls_calc_cert_verify_hash>
  return 0;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3760      	adds	r7, #96	@ 0x60
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	0802d330 	.word	0x0802d330

0800b660 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 800b660:	b5b0      	push	{r4, r5, r7, lr}
 800b662:	b0a0      	sub	sp, #128	@ 0x80
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b66e:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7fe fc51 	bl	8009f18 <mg_tls_recv_record>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	da02      	bge.n	800b682 <mg_tls_client_recv_cert_verify+0x22>
    return -1;
 800b67c:	f04f 33ff 	mov.w	r3, #4294967295
 800b680:	e09a      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	4413      	add	r3, r2
 800b68c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 800b68e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b0f      	cmp	r3, #15
 800b694:	d009      	beq.n	800b6aa <mg_tls_client_recv_cert_verify+0x4a>
    mg_error(c, "expected server certificate verify but got msg 0x%02x", recv_buf[0]);
 800b696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	4948      	ldr	r1, [pc, #288]	@ (800b7c0 <mg_tls_client_recv_cert_verify+0x160>)
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f6 f9d2 	bl	8001a48 <mg_error>
    return -1;
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a8:	e086      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
  }
  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 800b6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <mg_tls_client_recv_cert_verify+0x5e>
    mg_tls_drop_message(c);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fd ffe3 	bl	8009680 <mg_tls_drop_message>
    return 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e07c      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>

  // Extract certificate signature and verify it using pubkey and sighash
  do {
    uint8_t sig[64];
    struct mg_der_tlv seq, a, b;
    if (mg_der_to_tlv(recv_buf + 8, tls->recv_len - 8, &seq) < 0) {
 800b6be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6c0:	f103 0008 	add.w	r0, r3, #8
 800b6c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	3b08      	subs	r3, #8
 800b6ca:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f7fd feca 	bl	8009468 <mg_der_to_tlv>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da06      	bge.n	800b6e8 <mg_tls_client_recv_cert_verify+0x88>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 800b6da:	493a      	ldr	r1, [pc, #232]	@ (800b7c4 <mg_tls_client_recv_cert_verify+0x164>)
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7f6 f9b3 	bl	8001a48 <mg_error>
      return -1;
 800b6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e6:	e067      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &a) < 0) {
 800b6e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6ec:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fd feb9 	bl	8009468 <mg_der_to_tlv>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	da06      	bge.n	800b70a <mg_tls_client_recv_cert_verify+0xaa>
      mg_error(c, "missing first part of the signature");
 800b6fc:	4932      	ldr	r1, [pc, #200]	@ (800b7c8 <mg_tls_client_recv_cert_verify+0x168>)
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7f6 f9a2 	bl	8001a48 <mg_error>
      return -1;
 800b704:	f04f 33ff 	mov.w	r3, #4294967295
 800b708:	e056      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(a.value + a.len, seq.len - a.len, &b) < 0) {
 800b70a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b70c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b70e:	18d0      	adds	r0, r2, r3
 800b710:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800b71a:	4619      	mov	r1, r3
 800b71c:	f7fd fea4 	bl	8009468 <mg_der_to_tlv>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	da06      	bge.n	800b734 <mg_tls_client_recv_cert_verify+0xd4>
      mg_error(c, "missing second part of the signature");
 800b726:	4929      	ldr	r1, [pc, #164]	@ (800b7cc <mg_tls_client_recv_cert_verify+0x16c>)
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7f6 f98d 	bl	8001a48 <mg_error>
      return -1;
 800b72e:	f04f 33ff 	mov.w	r3, #4294967295
 800b732:	e041      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
    }
    // Integers may be padded with zeroes
    if (a.len > 32) {
 800b734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b736:	2b20      	cmp	r3, #32
 800b738:	d906      	bls.n	800b748 <mg_tls_client_recv_cert_verify+0xe8>
      a.value = a.value + (a.len - 32);
 800b73a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b73c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b73e:	3b20      	subs	r3, #32
 800b740:	4413      	add	r3, r2
 800b742:	663b      	str	r3, [r7, #96]	@ 0x60
      a.len = 32;
 800b744:	2320      	movs	r3, #32
 800b746:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (b.len > 32) {
 800b748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	d906      	bls.n	800b75c <mg_tls_client_recv_cert_verify+0xfc>
      b.value = b.value + (b.len - 32);
 800b74e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b752:	3b20      	subs	r3, #32
 800b754:	4413      	add	r3, r2
 800b756:	657b      	str	r3, [r7, #84]	@ 0x54
      b.len = 32;
 800b758:	2320      	movs	r3, #32
 800b75a:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    memmove(sig, a.value, a.len);
 800b75c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b75e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b760:	f107 030c 	add.w	r3, r7, #12
 800b764:	4618      	mov	r0, r3
 800b766:	f01d ff93 	bl	8029690 <memmove>
    memmove(sig + 32, b.value, b.len);
 800b76a:	f107 030c 	add.w	r3, r7, #12
 800b76e:	3320      	adds	r3, #32
 800b770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b772:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b774:	4618      	mov	r0, r3
 800b776:	f01d ff8b 	bl	8029690 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 800b77a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b77c:	f203 245e 	addw	r4, r3, #606	@ 0x25e
 800b780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b782:	f203 259e 	addw	r5, r3, #670	@ 0x29e
 800b786:	f003 fa91 	bl	800ecac <mg_uecc_secp256r1>
 800b78a:	4602      	mov	r2, r0
 800b78c:	f107 030c 	add.w	r3, r7, #12
 800b790:	9200      	str	r2, [sp, #0]
 800b792:	2220      	movs	r2, #32
 800b794:	4629      	mov	r1, r5
 800b796:	4620      	mov	r0, r4
 800b798:	f004 fc24 	bl	800ffe4 <mg_uecc_verify>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d006      	beq.n	800b7b0 <mg_tls_client_recv_cert_verify+0x150>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify certificate");
 800b7a2:	490b      	ldr	r1, [pc, #44]	@ (800b7d0 <mg_tls_client_recv_cert_verify+0x170>)
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7f6 f94f 	bl	8001a48 <mg_error>
      return -1;
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ae:	e003      	b.n	800b7b8 <mg_tls_client_recv_cert_verify+0x158>
    }
  } while (0);

  mg_tls_drop_message(c);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fd ff65 	bl	8009680 <mg_tls_drop_message>
  return 0;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3778      	adds	r7, #120	@ 0x78
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bdb0      	pop	{r4, r5, r7, pc}
 800b7c0:	0802d358 	.word	0x0802d358
 800b7c4:	0802d390 	.word	0x0802d390
 800b7c8:	0802d3c4 	.word	0x0802d3c4
 800b7cc:	0802d3e8 	.word	0x0802d3e8
 800b7d0:	0802d410 	.word	0x0802d410

0800b7d4 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b7e2:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7fe fb97 	bl	8009f18 <mg_tls_recv_record>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	da02      	bge.n	800b7f6 <mg_tls_client_recv_finish+0x22>
    return -1;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	e017      	b.n	800b826 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	4413      	add	r3, r2
 800b800:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b14      	cmp	r3, #20
 800b808:	d009      	beq.n	800b81e <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	4907      	ldr	r1, [pc, #28]	@ (800b830 <mg_tls_client_recv_finish+0x5c>)
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7f6 f918 	bl	8001a48 <mg_error>
    return -1;
 800b818:	f04f 33ff 	mov.w	r3, #4294967295
 800b81c:	e003      	b.n	800b826 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7fd ff2e 	bl	8009680 <mg_tls_drop_message>
  return 0;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	0802d430 	.word	0x0802d430

0800b834 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 800b834:	b580      	push	{r7, lr}
 800b836:	b0b4      	sub	sp, #208	@ 0xd0
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 800b846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b84a:	3304      	adds	r3, #4
 800b84c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 800b850:	4a23      	ldr	r2, [pc, #140]	@ (800b8e0 <mg_tls_client_send_finish+0xac>)
 800b852:	f107 030c 	add.w	r3, r7, #12
 800b856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b85a:	6018      	str	r0, [r3, #0]
 800b85c:	3304      	adds	r3, #4
 800b85e:	7019      	strb	r1, [r3, #0]
 800b860:	f107 0311 	add.w	r3, r7, #17
 800b864:	221f      	movs	r2, #31
 800b866:	2100      	movs	r1, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	f01d ff2b 	bl	80296c4 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800b86e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b872:	f103 0120 	add.w	r1, r3, #32
 800b876:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b87a:	2270      	movs	r2, #112	@ 0x70
 800b87c:	4618      	mov	r0, r3
 800b87e:	f01d ff07 	bl	8029690 <memmove>
  mg_sha256_final(hash, &sha256);
 800b882:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800b886:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fc ff1e 	bl	80086ce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 800b892:	f107 000c 	add.w	r0, r7, #12
 800b896:	3004      	adds	r0, #4
 800b898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b89c:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 800b8a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	9200      	str	r2, [sp, #0]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f7fd f848 	bl	800893e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 800b8ae:	f107 010c 	add.w	r1, r7, #12
 800b8b2:	2316      	movs	r3, #22
 800b8b4:	2224      	movs	r2, #36	@ 0x24
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fe fa32 	bl	8009d20 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 800b8bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7fa fc6e 	bl	80061ac <mg_io_send>
  wio->len = 0;
 800b8d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	609a      	str	r2, [r3, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	37c8      	adds	r7, #200	@ 0xc8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0802cf58 	.word	0x0802cf58

0800b8e4 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b0e4      	sub	sp, #400	@ 0x190
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b8ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b8f2:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800b8f4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b8f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b902:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 800b906:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b05      	cmp	r3, #5
 800b90e:	f200 80d1 	bhi.w	800bab4 <mg_tls_client_handshake+0x1d0>
 800b912:	a201      	add	r2, pc, #4	@ (adr r2, 800b918 <mg_tls_client_handshake+0x34>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b931 	.word	0x0800b931
 800b91c:	0800b947 	.word	0x0800b947
 800b920:	0800b965 	.word	0x0800b965
 800b924:	0800b983 	.word	0x0800b983
 800b928:	0800b9a1 	.word	0x0800b9a1
 800b92c:	0800b9bf 	.word	0x0800b9bf
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 800b930:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b934:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f7ff f98d 	bl	800ac58 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 800b93e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b942:	2201      	movs	r2, #1
 800b944:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 800b946:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b94a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	f7ff fb76 	bl	800b040 <mg_tls_client_recv_hello>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	f2c0 80b9 	blt.w	800bace <mg_tls_client_handshake+0x1ea>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 800b95c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b960:	2202      	movs	r2, #2
 800b962:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 800b964:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b968:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	f7ff fc9b 	bl	800b2a8 <mg_tls_client_recv_ext>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	f2c0 80ac 	blt.w	800bad2 <mg_tls_client_handshake+0x1ee>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 800b97a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b97e:	2203      	movs	r2, #3
 800b980:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 800b982:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b986:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b98a:	6818      	ldr	r0, [r3, #0]
 800b98c:	f7ff fcbc 	bl	800b308 <mg_tls_client_recv_cert>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	f2c0 809f 	blt.w	800bad6 <mg_tls_client_handshake+0x1f2>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 800b998:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b99c:	2204      	movs	r2, #4
 800b99e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 800b9a0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b9a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	f7ff fe59 	bl	800b660 <mg_tls_client_recv_cert_verify>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f2c0 8092 	blt.w	800bada <mg_tls_client_handshake+0x1f6>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 800b9b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b9ba:	2205      	movs	r2, #5
 800b9bc:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 800b9be:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b9c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b9c6:	6818      	ldr	r0, [r3, #0]
 800b9c8:	f7ff ff04 	bl	800b7d4 <mg_tls_client_recv_finish>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f2c0 8085 	blt.w	800bade <mg_tls_client_handshake+0x1fa>
        break;
      }
      if (tls->cert_requested) {
 800b9d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b9d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d04b      	beq.n	800ba78 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 800b9e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b9e4:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800b9e8:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800b9ec:	22c0      	movs	r2, #192	@ 0xc0
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	f01d ff2d 	bl	802984e <memcpy>
        mg_tls_generate_application_keys(c);
 800b9f4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b9f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f7fe f877 	bl	8009af0 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 800ba02:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba06:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 800ba0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ba0e:	4610      	mov	r0, r2
 800ba10:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800ba14:	22c0      	movs	r2, #192	@ 0xc0
 800ba16:	4619      	mov	r1, r3
 800ba18:	f01d ff19 	bl	802984e <memcpy>
        tls->enc = hs_keys;
 800ba1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ba20:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800ba24:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 800ba28:	22c0      	movs	r2, #192	@ 0xc0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f01d ff0f 	bl	802984e <memcpy>
        mg_tls_server_send_cert(c);
 800ba30:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	f7fe fe6b 	bl	800a714 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 800ba3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba42:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800ba46:	2101      	movs	r1, #1
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	f7fe ff25 	bl	800a898 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 800ba4e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba52:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	f7ff feec 	bl	800b834 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 800ba5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ba60:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800ba64:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 800ba68:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	22c0      	movs	r2, #192	@ 0xc0
 800ba70:	4618      	mov	r0, r3
 800ba72:	f01d feec 	bl	802984e <memcpy>
 800ba76:	e00d      	b.n	800ba94 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 800ba78:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	f7ff fed7 	bl	800b834 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 800ba86:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ba8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800ba8e:	6818      	ldr	r0, [r3, #0]
 800ba90:	f7fe f82e 	bl	8009af0 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 800ba94:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ba98:	2206      	movs	r2, #6
 800ba9a:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 800ba9c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800baa0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800baaa:	f36f 13c7 	bfc	r3, #7, #1
 800baae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      break;
 800bab2:	e015      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 800bab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800bac0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800bac4:	4909      	ldr	r1, [pc, #36]	@ (800baec <mg_tls_client_handshake+0x208>)
 800bac6:	6818      	ldr	r0, [r3, #0]
 800bac8:	f7f5 ffbe 	bl	8001a48 <mg_error>
      break;
 800bacc:	e008      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
        break;
 800bace:	bf00      	nop
 800bad0:	e006      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
        break;
 800bad2:	bf00      	nop
 800bad4:	e004      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
        break;
 800bad6:	bf00      	nop
 800bad8:	e002      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
        break;
 800bada:	bf00      	nop
 800badc:	e000      	b.n	800bae0 <mg_tls_client_handshake+0x1fc>
        break;
 800bade:	bf00      	nop
  }
}
 800bae0:	bf00      	nop
 800bae2:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	0802d45c 	.word	0x0802d45c

0800baf0 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bafe:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b07      	cmp	r3, #7
 800bb06:	d002      	beq.n	800bb0e <mg_tls_server_handshake+0x1e>
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d01c      	beq.n	800bb46 <mg_tls_server_handshake+0x56>
 800bb0c:	e02f      	b.n	800bb6e <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7fe fbb2 	bl	800a278 <mg_tls_server_recv_hello>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	db31      	blt.n	800bb7e <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fe fd20 	bl	800a560 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7fd fe95 	bl	8009850 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe fdce 	bl	800a6c8 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7fe fdf1 	bl	800a714 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 800bb32:	2100      	movs	r1, #0
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7fe feaf 	bl	800a898 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fe ffea 	bl	800ab14 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2208      	movs	r2, #8
 800bb44:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff f846 	bl	800abd8 <mg_tls_server_recv_finish>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	db17      	blt.n	800bb82 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7fd ffcc 	bl	8009af0 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2209      	movs	r2, #9
 800bb5c:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800bb64:	f36f 13c7 	bfc	r3, #7, #1
 800bb68:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 800bb6c:	e00a      	b.n	800bb84 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	4905      	ldr	r1, [pc, #20]	@ (800bb8c <mg_tls_server_handshake+0x9c>)
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f5 ff66 	bl	8001a48 <mg_error>
      break;
 800bb7c:	e002      	b.n	800bb84 <mg_tls_server_handshake+0x94>
        return;
 800bb7e:	bf00      	nop
 800bb80:	e000      	b.n	800bb84 <mg_tls_server_handshake+0x94>
        return;
 800bb82:	bf00      	nop
  }
}
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0802d478 	.word	0x0802d478

0800bb90 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe9b 	bl	800b8e4 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 800bbae:	e002      	b.n	800bbb6 <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff ff9d 	bl	800baf0 <mg_tls_server_handshake>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <mg_tls_free>:
  } else {
    mg_error(c, "expected EC PRIVATE KEY or PRIVATE KEY");
  }
}

void mg_tls_free(struct mg_connection *c) {
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbcc:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00a      	beq.n	800bbea <mg_tls_free+0x2c>
    mg_iobuf_free(&tls->send);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f7 f8f0 	bl	8002dbe <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f01c fd0d 	bl	8028604 <free>
  }
  free(c->tls);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f01c fd07 	bl	8028604 <free>
  c->tls = NULL;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b086      	sub	sp, #24
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc18:	613b      	str	r3, [r7, #16]
  long n = MG_IO_WAIT;
 800bc1a:	f06f 0301 	mvn.w	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
  if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc26:	d902      	bls.n	800bc2e <mg_tls_send+0x28>
 800bc28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc2c:	607b      	str	r3, [r7, #4]
  if (len > 16384) len = 16384;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc34:	d902      	bls.n	800bc3c <mg_tls_send+0x36>
 800bc36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bc3a:	607b      	str	r3, [r7, #4]
  mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 800bc3c:	2317      	movs	r3, #23
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7fe f86c 	bl	8009d20 <mg_tls_encrypt>
  while (tls->send.len > 0 &&
 800bc48:	e006      	b.n	800bc58 <mg_tls_send+0x52>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	2100      	movs	r1, #0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f7 f868 	bl	8002d28 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <mg_tls_send+0x72>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6859      	ldr	r1, [r3, #4]
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7fa fa9e 	bl	80061ac <mg_io_send>
 800bc70:	6178      	str	r0, [r7, #20]
  while (tls->send.len > 0 &&
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	dce8      	bgt.n	800bc4a <mg_tls_send+0x44>
  }
  if (n == MG_IO_ERR || n == MG_IO_WAIT) return n;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d003      	beq.n	800bc88 <mg_tls_send+0x82>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f113 0f02 	cmn.w	r3, #2
 800bc86:	d101      	bne.n	800bc8c <mg_tls_send+0x86>
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	e000      	b.n	800bc8e <mg_tls_send+0x88>
  return (long) len;
 800bc8c:	687b      	ldr	r3, [r7, #4]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b088      	sub	sp, #32
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	607a      	str	r2, [r7, #4]
  int r = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bcac:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7fe f932 	bl	8009f18 <mg_tls_recv_record>
 800bcb4:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da01      	bge.n	800bcc0 <mg_tls_recv+0x2a>
    return r;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	e032      	b.n	800bd26 <mg_tls_recv+0x90>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	4413      	add	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	7f1b      	ldrb	r3, [r3, #28]
 800bcd0:	2b17      	cmp	r3, #23
 800bcd2:	d008      	beq.n	800bce6 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f7fd fcae 	bl	800963c <mg_tls_drop_record>
    return MG_IO_WAIT;
 800bce0:	f06f 0301 	mvn.w	r3, #1
 800bce4:	e01f      	b.n	800bd26 <mg_tls_recv+0x90>
  }
  minlen = len < tls->recv_len ? len : tls->recv_len;
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	bf28      	it	cs
 800bcf0:	4613      	movcs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	6979      	ldr	r1, [r7, #20]
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f01d fcc9 	bl	8029690 <memmove>
  tls->recv_offset += minlen;
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	695a      	ldr	r2, [r3, #20]
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	441a      	add	r2, r3
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1ad2      	subs	r2, r2, r3
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	699b      	ldr	r3, [r3, #24]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <mg_tls_recv+0x8e>
    mg_tls_drop_record(c);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7fd fc8c 	bl	800963c <mg_tls_drop_record>
  }
  return (long) minlen;
 800bd24:	693b      	ldr	r3, [r7, #16]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  return mg_tls_got_record(c) ? 1 : 0;
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7fd fc59 	bl	80095ee <mg_tls_got_record>
 800bd3c:	4603      	mov	r3, r0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
	...

0800bd5c <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
#ifdef static_assert
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
  state[0] = 0x61707865;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4a2b      	ldr	r2, [pc, #172]	@ (800be1c <initialize_state+0xc0>)
 800bd6e:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3304      	adds	r3, #4
 800bd74:	4a2a      	ldr	r2, [pc, #168]	@ (800be20 <initialize_state+0xc4>)
 800bd76:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	4a29      	ldr	r2, [pc, #164]	@ (800be24 <initialize_state+0xc8>)
 800bd7e:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	330c      	adds	r3, #12
 800bd84:	4a28      	ldr	r2, [pc, #160]	@ (800be28 <initialize_state+0xcc>)
 800bd86:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3310      	adds	r3, #16
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	6812      	ldr	r2, [r2, #0]
 800bd90:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3314      	adds	r3, #20
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	3204      	adds	r2, #4
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3318      	adds	r3, #24
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	3208      	adds	r2, #8
 800bda6:	6812      	ldr	r2, [r2, #0]
 800bda8:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	331c      	adds	r3, #28
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	320c      	adds	r2, #12
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3320      	adds	r3, #32
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	3210      	adds	r2, #16
 800bdbe:	6812      	ldr	r2, [r2, #0]
 800bdc0:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3324      	adds	r3, #36	@ 0x24
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	3214      	adds	r2, #20
 800bdca:	6812      	ldr	r2, [r2, #0]
 800bdcc:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3328      	adds	r3, #40	@ 0x28
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	3218      	adds	r2, #24
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	332c      	adds	r3, #44	@ 0x2c
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	321c      	adds	r2, #28
 800bde2:	6812      	ldr	r2, [r2, #0]
 800bde4:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3330      	adds	r3, #48	@ 0x30
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3334      	adds	r3, #52	@ 0x34
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6812      	ldr	r2, [r2, #0]
 800bdf6:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3338      	adds	r3, #56	@ 0x38
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	3204      	adds	r2, #4
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	333c      	adds	r3, #60	@ 0x3c
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	3208      	adds	r2, #8
 800be0c:	6812      	ldr	r2, [r2, #0]
 800be0e:	601a      	str	r2, [r3, #0]
}
 800be10:	bf00      	nop
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	61707865 	.word	0x61707865
 800be20:	3320646e 	.word	0x3320646e
 800be24:	79622d32 	.word	0x79622d32
 800be28:	6b206574 	.word	0x6b206574

0800be2c <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 800be2c:	b480      	push	{r7}
 800be2e:	b095      	sub	sp, #84	@ 0x54
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	647b      	str	r3, [r7, #68]	@ 0x44
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3308      	adds	r3, #8
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	330c      	adds	r3, #12
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3310      	adds	r3, #16
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3314      	adds	r3, #20
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	637b      	str	r3, [r7, #52]	@ 0x34
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3318      	adds	r3, #24
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	331c      	adds	r3, #28
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3320      	adds	r3, #32
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3324      	adds	r3, #36	@ 0x24
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	627b      	str	r3, [r7, #36]	@ 0x24
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3328      	adds	r3, #40	@ 0x28
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	623b      	str	r3, [r7, #32]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	332c      	adds	r3, #44	@ 0x2c
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	61fb      	str	r3, [r7, #28]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3330      	adds	r3, #48	@ 0x30
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	61bb      	str	r3, [r7, #24]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3334      	adds	r3, #52	@ 0x34
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3338      	adds	r3, #56	@ 0x38
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	333c      	adds	r3, #60	@ 0x3c
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 800beb4:	2300      	movs	r3, #0
 800beb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb8:	e182      	b.n	800c1c0 <core_block+0x394>
    __Q(0, 4, 8, 12);
 800beba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	4413      	add	r3, r2
 800bec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bec6:	4053      	eors	r3, r2
 800bec8:	61bb      	str	r3, [r7, #24]
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	ea4f 4333 	mov.w	r3, r3, ror #16
 800bed0:	61bb      	str	r3, [r7, #24]
 800bed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	4413      	add	r3, r2
 800bed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800beda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bede:	4053      	eors	r3, r2
 800bee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee4:	ea4f 5333 	mov.w	r3, r3, ror #20
 800bee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800beea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800beec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beee:	4413      	add	r3, r2
 800bef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bef6:	4053      	eors	r3, r2
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	ea4f 6333 	mov.w	r3, r3, ror #24
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	4413      	add	r3, r2
 800bf08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0e:	4053      	eors	r3, r2
 800bf10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	ea4f 6373 	mov.w	r3, r3, ror #25
 800bf18:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 800bf1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1e:	4413      	add	r3, r2
 800bf20:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf26:	4053      	eors	r3, r2
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	ea4f 4333 	mov.w	r3, r3, ror #16
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	4413      	add	r3, r2
 800bf38:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	4053      	eors	r3, r2
 800bf40:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf44:	ea4f 5333 	mov.w	r3, r3, ror #20
 800bf48:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4e:	4413      	add	r3, r2
 800bf50:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf56:	4053      	eors	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	ea4f 6333 	mov.w	r3, r3, ror #24
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	4413      	add	r3, r2
 800bf68:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	4053      	eors	r3, r2
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf74:	ea4f 6373 	mov.w	r3, r3, ror #25
 800bf78:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 800bf7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	4413      	add	r3, r2
 800bf80:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf86:	4053      	eors	r3, r2
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	ea4f 4333 	mov.w	r3, r3, ror #16
 800bf90:	613b      	str	r3, [r7, #16]
 800bf92:	6a3a      	ldr	r2, [r7, #32]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	623b      	str	r3, [r7, #32]
 800bf9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	4053      	eors	r3, r2
 800bfa0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa4:	ea4f 5333 	mov.w	r3, r3, ror #20
 800bfa8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfae:	4413      	add	r3, r2
 800bfb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb6:	4053      	eors	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	ea4f 6333 	mov.w	r3, r3, ror #24
 800bfc0:	613b      	str	r3, [r7, #16]
 800bfc2:	6a3a      	ldr	r2, [r7, #32]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	623b      	str	r3, [r7, #32]
 800bfca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd4:	ea4f 6373 	mov.w	r3, r3, ror #25
 800bfd8:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 800bfda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfde:	4413      	add	r3, r2
 800bfe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe6:	4053      	eors	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	ea4f 4333 	mov.w	r3, r3, ror #16
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	69fa      	ldr	r2, [r7, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	61fb      	str	r3, [r7, #28]
 800bffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	4053      	eors	r3, r2
 800c000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	ea4f 5333 	mov.w	r3, r3, ror #20
 800c008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c00a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c00e:	4413      	add	r3, r2
 800c010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c016:	4053      	eors	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	ea4f 6333 	mov.w	r3, r3, ror #24
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	61fb      	str	r3, [r7, #28]
 800c02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	4053      	eors	r3, r2
 800c030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c034:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 800c03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03e:	4413      	add	r3, r2
 800c040:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c046:	4053      	eors	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	ea4f 4333 	mov.w	r3, r3, ror #16
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	6a3a      	ldr	r2, [r7, #32]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4413      	add	r3, r2
 800c058:	623b      	str	r3, [r7, #32]
 800c05a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	4053      	eors	r3, r2
 800c060:	637b      	str	r3, [r7, #52]	@ 0x34
 800c062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c064:	ea4f 5333 	mov.w	r3, r3, ror #20
 800c068:	637b      	str	r3, [r7, #52]	@ 0x34
 800c06a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c06e:	4413      	add	r3, r2
 800c070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c076:	4053      	eors	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	ea4f 6333 	mov.w	r3, r3, ror #24
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	6a3a      	ldr	r2, [r7, #32]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	623b      	str	r3, [r7, #32]
 800c08a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	4053      	eors	r3, r2
 800c090:	637b      	str	r3, [r7, #52]	@ 0x34
 800c092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c094:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c098:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 800c09a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	4413      	add	r3, r2
 800c0a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0a6:	4053      	eors	r3, r2
 800c0a8:	61bb      	str	r3, [r7, #24]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	ea4f 4333 	mov.w	r3, r3, ror #16
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	69fa      	ldr	r2, [r7, #28]
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	61fb      	str	r3, [r7, #28]
 800c0ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	4053      	eors	r3, r2
 800c0c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	ea4f 5333 	mov.w	r3, r3, ror #20
 800c0c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	4413      	add	r3, r2
 800c0d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0d6:	4053      	eors	r3, r2
 800c0d8:	61bb      	str	r3, [r7, #24]
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	ea4f 6333 	mov.w	r3, r3, ror #24
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	4053      	eors	r3, r2
 800c0f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f4:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c0f8:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 800c0fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fe:	4413      	add	r3, r2
 800c100:	643b      	str	r3, [r7, #64]	@ 0x40
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c106:	4053      	eors	r3, r2
 800c108:	617b      	str	r3, [r7, #20]
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	ea4f 4333 	mov.w	r3, r3, ror #16
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	4413      	add	r3, r2
 800c118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11e:	4053      	eors	r3, r2
 800c120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c124:	ea4f 5333 	mov.w	r3, r3, ror #20
 800c128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c12a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12e:	4413      	add	r3, r2
 800c130:	643b      	str	r3, [r7, #64]	@ 0x40
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c136:	4053      	eors	r3, r2
 800c138:	617b      	str	r3, [r7, #20]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	ea4f 6333 	mov.w	r3, r3, ror #24
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	4413      	add	r3, r2
 800c148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c14a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	4053      	eors	r3, r2
 800c150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c154:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 800c15a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15e:	4413      	add	r3, r2
 800c160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c162:	693a      	ldr	r2, [r7, #16]
 800c164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c166:	4053      	eors	r3, r2
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	ea4f 4333 	mov.w	r3, r3, ror #16
 800c170:	613b      	str	r3, [r7, #16]
 800c172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	4413      	add	r3, r2
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
 800c17a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	4053      	eors	r3, r2
 800c180:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c184:	ea4f 5333 	mov.w	r3, r3, ror #20
 800c188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c18a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18e:	4413      	add	r3, r2
 800c190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c196:	4053      	eors	r3, r2
 800c198:	613b      	str	r3, [r7, #16]
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	ea4f 6333 	mov.w	r3, r3, ror #24
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ae:	4053      	eors	r3, r2
 800c1b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b4:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c1b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1bc:	3301      	adds	r3, #1
 800c1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	f77f ae79 	ble.w	800beba <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1ce:	441a      	add	r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1e0:	440a      	add	r2, r1
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	6819      	ldr	r1, [r3, #0]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1f0:	440a      	add	r2, r1
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	330c      	adds	r3, #12
 800c1f8:	6819      	ldr	r1, [r3, #0]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	330c      	adds	r3, #12
 800c1fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c200:	440a      	add	r2, r1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	3310      	adds	r3, #16
 800c208:	6819      	ldr	r1, [r3, #0]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	3310      	adds	r3, #16
 800c20e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c210:	440a      	add	r2, r1
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3314      	adds	r3, #20
 800c218:	6819      	ldr	r1, [r3, #0]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	3314      	adds	r3, #20
 800c21e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c220:	440a      	add	r2, r1
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3318      	adds	r3, #24
 800c228:	6819      	ldr	r1, [r3, #0]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	3318      	adds	r3, #24
 800c22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c230:	440a      	add	r2, r1
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	331c      	adds	r3, #28
 800c238:	6819      	ldr	r1, [r3, #0]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	331c      	adds	r3, #28
 800c23e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c240:	440a      	add	r2, r1
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3320      	adds	r3, #32
 800c248:	6819      	ldr	r1, [r3, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	3320      	adds	r3, #32
 800c24e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c250:	440a      	add	r2, r1
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3324      	adds	r3, #36	@ 0x24
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	3324      	adds	r3, #36	@ 0x24
 800c25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c260:	440a      	add	r2, r1
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3328      	adds	r3, #40	@ 0x28
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	3328      	adds	r3, #40	@ 0x28
 800c26e:	6a3a      	ldr	r2, [r7, #32]
 800c270:	440a      	add	r2, r1
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	332c      	adds	r3, #44	@ 0x2c
 800c278:	6819      	ldr	r1, [r3, #0]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	332c      	adds	r3, #44	@ 0x2c
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	440a      	add	r2, r1
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	3330      	adds	r3, #48	@ 0x30
 800c288:	6819      	ldr	r1, [r3, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	3330      	adds	r3, #48	@ 0x30
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	440a      	add	r2, r1
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3334      	adds	r3, #52	@ 0x34
 800c298:	6819      	ldr	r1, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	3334      	adds	r3, #52	@ 0x34
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3338      	adds	r3, #56	@ 0x38
 800c2a8:	6819      	ldr	r1, [r3, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	3338      	adds	r3, #56	@ 0x38
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	440a      	add	r2, r1
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	333c      	adds	r3, #60	@ 0x3c
 800c2b8:	6819      	ldr	r1, [r3, #0]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	333c      	adds	r3, #60	@ 0x3c
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	440a      	add	r2, r1
 800c2c2:	601a      	str	r2, [r3, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	3754      	adds	r7, #84	@ 0x54
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 800c2d0:	b480      	push	{r7}
 800c2d2:	b089      	sub	sp, #36	@ 0x24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	089b      	lsrs	r3, r3, #2
 800c2e2:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	e016      	b.n	800c318 <xor_block+0x48>
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	617b      	str	r3, [r7, #20]
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4053      	eors	r3, r2
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	4413      	add	r3, r2
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	3301      	adds	r3, #1
 800c316:	61fb      	str	r3, [r7, #28]
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d3e4      	bcc.n	800c2ea <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4413      	add	r3, r2
 800c328:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	4413      	add	r3, r2
 800c332:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	4413      	add	r3, r2
 800c33c:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	2b03      	cmp	r3, #3
 800c346:	d026      	beq.n	800c396 <xor_block+0xc6>
 800c348:	2b03      	cmp	r3, #3
 800c34a:	d846      	bhi.n	800c3da <xor_block+0x10a>
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d002      	beq.n	800c356 <xor_block+0x86>
 800c350:	2b02      	cmp	r3, #2
 800c352:	d00a      	beq.n	800c36a <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 800c354:	e041      	b.n	800c3da <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4053      	eors	r3, r2
 800c362:	b2da      	uxtb	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	701a      	strb	r2, [r3, #0]
      break;
 800c368:	e037      	b.n	800c3da <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	781a      	ldrb	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4053      	eors	r3, r2
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	3301      	adds	r3, #1
 800c380:	7819      	ldrb	r1, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	0a1b      	lsrs	r3, r3, #8
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	404a      	eors	r2, r1
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	701a      	strb	r2, [r3, #0]
      break;
 800c394:	e021      	b.n	800c3da <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	4053      	eors	r3, r2
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	7819      	ldrb	r1, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	404a      	eors	r2, r1
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	7819      	ldrb	r1, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	0c1b      	lsrs	r3, r3, #16
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3302      	adds	r3, #2
 800c3d2:	404a      	eors	r2, r1
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]
      break;
 800c3d8:	bf00      	nop
}
 800c3da:	bf00      	nop
 800c3dc:	3724      	adds	r7, #36	@ 0x24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b0aa      	sub	sp, #168	@ 0xa8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	099b      	lsrs	r3, r3, #6
 800c3f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 800c3fc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800c400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c404:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	f7ff fca7 	bl	800bd5c <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 800c40e:	2300      	movs	r3, #0
 800c410:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c414:	e03c      	b.n	800c490 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 800c416:	f107 0218 	add.w	r2, r7, #24
 800c41a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c41e:	4611      	mov	r1, r2
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fd03 	bl	800be2c <core_block>
    increment_counter(state);
 800c426:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c42a:	3301      	adds	r3, #1
 800c42c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 800c430:	2300      	movs	r3, #0
 800c432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c436:	e01c      	b.n	800c472 <chacha20_xor_stream+0x8c>
 800c438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	4413      	add	r3, r2
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	f107 0218 	add.w	r2, r7, #24
 800c450:	4413      	add	r3, r2
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	4053      	eors	r3, r2
 800c458:	617b      	str	r3, [r7, #20]
 800c45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c46c:	3301      	adds	r3, #1
 800c46e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c476:	2b0f      	cmp	r3, #15
 800c478:	d9de      	bls.n	800c438 <chacha20_xor_stream+0x52>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3340      	adds	r3, #64	@ 0x40
 800c47e:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	3340      	adds	r3, #64	@ 0x40
 800c484:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 800c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c48a:	3301      	adds	r3, #1
 800c48c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c490:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d3bc      	bcc.n	800c416 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 800c4a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 800c4ae:	f107 0218 	add.w	r2, r7, #24
 800c4b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff fcb7 	bl	800be2c <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 800c4be:	f107 0218 	add.w	r2, r7, #24
 800c4c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff ff01 	bl	800c2d0 <xor_block>
  }
}
 800c4ce:	bf00      	nop
 800c4d0:	37a8      	adds	r7, #168	@ 0xa8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b0a4      	sub	sp, #144	@ 0x90
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 800c4e2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	f7ff fc36 	bl	800bd5c <initialize_state>
  core_block(state, result);
 800c4f0:	f107 0210 	add.w	r2, r7, #16
 800c4f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7ff fc96 	bl	800be2c <core_block>
  serialize(poly_key, result);
 800c500:	f107 0310 	add.w	r3, r7, #16
 800c504:	2220      	movs	r2, #32
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f01d f9a0 	bl	802984e <memcpy>
  (void) i;
}
 800c50e:	bf00      	nop
 800c510:	3790      	adds	r7, #144	@ 0x90
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3301      	adds	r3, #1
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 800c52c:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3302      	adds	r3, #2
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 800c536:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3303      	adds	r3, #3
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 800c540:	4313      	orrs	r3, r2
}
 800c542:	4618      	mov	r0, r3
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 800c54e:	b480      	push	{r7}
 800c550:	b083      	sub	sp, #12
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	0a1a      	lsrs	r2, r3, #8
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3301      	adds	r3, #1
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	0c1a      	lsrs	r2, r3, #16
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3302      	adds	r3, #2
 800c574:	b2d2      	uxtb	r2, r2
 800c576:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	0e1a      	lsrs	r2, r3, #24
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3303      	adds	r3, #3
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	701a      	strb	r2, [r3, #0]
}
 800c584:	bf00      	nop
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 800c59e:	6838      	ldr	r0, [r7, #0]
 800c5a0:	f7ff ffb9 	bl	800c516 <U8TO32>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3303      	adds	r3, #3
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff ffaf 	bl	800c516 <U8TO32>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	089a      	lsrs	r2, r3, #2
 800c5bc:	4b2f      	ldr	r3, [pc, #188]	@ (800c67c <poly1305_init+0xec>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	3306      	adds	r3, #6
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ffa4 	bl	800c516 <U8TO32>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	091a      	lsrs	r2, r3, #4
 800c5d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c680 <poly1305_init+0xf0>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	3309      	adds	r3, #9
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff99 	bl	800c516 <U8TO32>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	099a      	lsrs	r2, r3, #6
 800c5e8:	4b26      	ldr	r3, [pc, #152]	@ (800c684 <poly1305_init+0xf4>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	330c      	adds	r3, #12
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff ff8e 	bl	800c516 <U8TO32>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	0a1b      	lsrs	r3, r3, #8
 800c5fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	3310      	adds	r3, #16
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff ff74 	bl	800c516 <U8TO32>
 800c62e:	4602      	mov	r2, r0
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	3314      	adds	r3, #20
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff ff6c 	bl	800c516 <U8TO32>
 800c63e:	4602      	mov	r2, r0
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	3318      	adds	r3, #24
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff ff64 	bl	800c516 <U8TO32>
 800c64e:	4602      	mov	r2, r0
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	331c      	adds	r3, #28
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff ff5c 	bl	800c516 <U8TO32>
 800c65e:	4602      	mov	r2, r0
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	03ffff03 	.word	0x03ffff03
 800c680:	03ffc0ff 	.word	0x03ffc0ff
 800c684:	03f03fff 	.word	0x03f03fff

0800c688 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 800c688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c68c:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 800c690:	af00      	add	r7, sp, #0
 800c692:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 800c696:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 800c69a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 800c69e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <poly1305_blocks+0x26>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e001      	b.n	800c6b2 <poly1305_blocks+0x2a>
 800c6ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c6b2:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 800c6b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 800c6c0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 800c6ca:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 800c6d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 800c6de:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 800c6e8:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 800c6f6:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 800c704:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 800c712:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800c716:	4613      	mov	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 800c720:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 800c72a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 800c734:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 800c73e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c742:	6a1b      	ldr	r3, [r3, #32]
 800c744:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 800c748:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800c74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 800c752:	f000 be78 	b.w	800d446 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 800c756:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 800c75a:	f7ff fedc 	bl	800c516 <U8TO32>
 800c75e:	4603      	mov	r3, r0
 800c760:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 800c764:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800c768:	4413      	add	r3, r2
 800c76a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 800c76e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800c772:	3303      	adds	r3, #3
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff fece 	bl	800c516 <U8TO32>
 800c77a:	4603      	mov	r3, r0
 800c77c:	089b      	lsrs	r3, r3, #2
 800c77e:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 800c782:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800c786:	4413      	add	r3, r2
 800c788:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 800c78c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800c790:	3306      	adds	r3, #6
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff febf 	bl	800c516 <U8TO32>
 800c798:	4603      	mov	r3, r0
 800c79a:	091b      	lsrs	r3, r3, #4
 800c79c:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 800c7a0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 800c7aa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800c7ae:	3309      	adds	r3, #9
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff feb0 	bl	800c516 <U8TO32>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	099b      	lsrs	r3, r3, #6
 800c7ba:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 800c7be:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 800c7c8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800c7cc:	330c      	adds	r3, #12
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fea1 	bl	800c516 <U8TO32>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	0a1a      	lsrs	r2, r3, #8
 800c7d8:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 800c7e8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800c7f2:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 800c7f6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800c800:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 800c804:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 800c808:	460b      	mov	r3, r1
 800c80a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 800c80e:	fb02 f203 	mul.w	r2, r2, r3
 800c812:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800c816:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 800c81a:	4601      	mov	r1, r0
 800c81c:	fb01 f303 	mul.w	r3, r1, r3
 800c820:	4413      	add	r3, r2
 800c822:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 800c826:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 800c82a:	fba2 1201 	umull	r1, r2, r2, r1
 800c82e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 800c832:	460a      	mov	r2, r1
 800c834:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 800c838:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 800c83c:	4413      	add	r3, r2
 800c83e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 800c842:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800c846:	2200      	movs	r2, #0
 800c848:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800c84c:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 800c850:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800c854:	2200      	movs	r2, #0
 800c856:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800c85a:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 800c85e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 800c862:	460b      	mov	r3, r1
 800c864:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 800c868:	fb02 f203 	mul.w	r2, r2, r3
 800c86c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800c870:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 800c874:	4601      	mov	r1, r0
 800c876:	fb01 f303 	mul.w	r3, r1, r3
 800c87a:	4413      	add	r3, r2
 800c87c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 800c880:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 800c884:	fba2 1201 	umull	r1, r2, r2, r1
 800c888:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 800c88c:	460a      	mov	r2, r1
 800c88e:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 800c892:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 800c896:	4413      	add	r3, r2
 800c898:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 800c89c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800c8a0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	189b      	adds	r3, r3, r2
 800c8a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8ac:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	4153      	adcs	r3, r2
 800c8b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 800c8b8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800c8c2:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 800c8c6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800c8d0:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 800c8d4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800c8d8:	460b      	mov	r3, r1
 800c8da:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800c8de:	fb02 f203 	mul.w	r2, r2, r3
 800c8e2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800c8e6:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	fb01 f303 	mul.w	r3, r1, r3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800c8f6:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 800c8fa:	fba2 1201 	umull	r1, r2, r2, r1
 800c8fe:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 800c902:	460a      	mov	r2, r1
 800c904:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 800c908:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 800c90c:	4413      	add	r3, r2
 800c90e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 800c912:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800c916:	2200      	movs	r2, #0
 800c918:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800c91c:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800c920:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800c924:	2200      	movs	r2, #0
 800c926:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800c92a:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 800c92e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800c932:	460b      	mov	r3, r1
 800c934:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 800c938:	fb02 f203 	mul.w	r2, r2, r3
 800c93c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800c940:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 800c944:	4601      	mov	r1, r0
 800c946:	fb01 f303 	mul.w	r3, r1, r3
 800c94a:	4413      	add	r3, r2
 800c94c:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 800c950:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 800c954:	fba2 1201 	umull	r1, r2, r2, r1
 800c958:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800c95c:	460a      	mov	r2, r1
 800c95e:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 800c962:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 800c966:	4413      	add	r3, r2
 800c968:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 800c96c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800c970:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 800c974:	4602      	mov	r2, r0
 800c976:	189b      	adds	r3, r3, r2
 800c978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c97a:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800c97e:	460a      	mov	r2, r1
 800c980:	4153      	adcs	r3, r2
 800c982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c988:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c98c:	4602      	mov	r2, r0
 800c98e:	189b      	adds	r3, r3, r2
 800c990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c998:	460a      	mov	r2, r1
 800c99a:	4153      	adcs	r3, r2
 800c99c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 800c9a0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 800c9aa:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 800c9ae:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800c9b8:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 800c9bc:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800c9c6:	fb02 f203 	mul.w	r2, r2, r3
 800c9ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800c9ce:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	fb01 f303 	mul.w	r3, r1, r3
 800c9d8:	4413      	add	r3, r2
 800c9da:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 800c9de:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 800c9e2:	fba2 1201 	umull	r1, r2, r2, r1
 800c9e6:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 800c9ea:	460a      	mov	r2, r1
 800c9ec:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 800c9f0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 800c9fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c9fe:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800ca02:	4602      	mov	r2, r0
 800ca04:	189b      	adds	r3, r3, r2
 800ca06:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca0c:	460a      	mov	r2, r1
 800ca0e:	4153      	adcs	r3, r2
 800ca10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ca16:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 800ca1a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 800ca24:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 800ca28:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800ca32:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 800ca36:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800ca40:	fb02 f203 	mul.w	r2, r2, r3
 800ca44:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ca48:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	fb01 f303 	mul.w	r3, r1, r3
 800ca52:	4413      	add	r3, r2
 800ca54:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 800ca58:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 800ca5c:	fba2 1201 	umull	r1, r2, r2, r1
 800ca60:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 800ca64:	460a      	mov	r2, r1
 800ca66:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 800ca6a:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 800ca6e:	4413      	add	r3, r2
 800ca70:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 800ca74:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800ca7e:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 800ca82:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 800ca8c:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 800ca90:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 800ca94:	460b      	mov	r3, r1
 800ca96:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800ca9a:	fb02 f203 	mul.w	r2, r2, r3
 800ca9e:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800caa2:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 800caa6:	4601      	mov	r1, r0
 800caa8:	fb01 f303 	mul.w	r3, r1, r3
 800caac:	4413      	add	r3, r2
 800caae:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800cab2:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800cab6:	fba2 1201 	umull	r1, r2, r2, r1
 800caba:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 800cabe:	460a      	mov	r2, r1
 800cac0:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 800cac4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800cac8:	4413      	add	r3, r2
 800caca:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800cace:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800cad2:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 800cad6:	4602      	mov	r2, r0
 800cad8:	189b      	adds	r3, r3, r2
 800cada:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cade:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 800cae2:	460a      	mov	r2, r1
 800cae4:	4153      	adcs	r3, r2
 800cae6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 800caea:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800caee:	2200      	movs	r2, #0
 800caf0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 800caf4:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 800caf8:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800cafc:	2200      	movs	r2, #0
 800cafe:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 800cb02:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 800cb06:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800cb10:	fb02 f203 	mul.w	r2, r2, r3
 800cb14:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800cb18:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	fb01 f303 	mul.w	r3, r1, r3
 800cb22:	4413      	add	r3, r2
 800cb24:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800cb28:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800cb2c:	fba2 1201 	umull	r1, r2, r2, r1
 800cb30:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 800cb34:	460a      	mov	r2, r1
 800cb36:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 800cb3a:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 800cb3e:	4413      	add	r3, r2
 800cb40:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 800cb44:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800cb4e:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 800cb52:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800cb5c:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 800cb60:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 800cb64:	460b      	mov	r3, r1
 800cb66:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800cb6a:	fb02 f203 	mul.w	r2, r2, r3
 800cb6e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800cb72:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 800cb76:	4601      	mov	r1, r0
 800cb78:	fb01 f303 	mul.w	r3, r1, r3
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 800cb82:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800cb86:	fba2 1201 	umull	r1, r2, r2, r1
 800cb8a:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 800cb8e:	460a      	mov	r2, r1
 800cb90:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 800cb94:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800cb98:	4413      	add	r3, r2
 800cb9a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800cb9e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 800cba2:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 800cba6:	4602      	mov	r2, r0
 800cba8:	189b      	adds	r3, r3, r2
 800cbaa:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbac:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800cbb0:	460a      	mov	r2, r1
 800cbb2:	4153      	adcs	r3, r2
 800cbb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800cbb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cbba:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	189b      	adds	r3, r3, r2
 800cbc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cbca:	460a      	mov	r2, r1
 800cbcc:	4153      	adcs	r3, r2
 800cbce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 800cbd2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 800cbdc:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800cbe0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 800cbea:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 800cbee:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 800cbf8:	fb02 f203 	mul.w	r2, r2, r3
 800cbfc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800cc00:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 800cc04:	4601      	mov	r1, r0
 800cc06:	fb01 f303 	mul.w	r3, r1, r3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800cc10:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 800cc14:	fba2 1201 	umull	r1, r2, r2, r1
 800cc18:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 800cc1c:	460a      	mov	r2, r1
 800cc1e:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 800cc22:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800cc26:	4413      	add	r3, r2
 800cc28:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 800cc2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc30:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800cc34:	4602      	mov	r2, r0
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cc3e:	460a      	mov	r2, r1
 800cc40:	4153      	adcs	r3, r2
 800cc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cc48:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 800cc4c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800cc50:	2200      	movs	r2, #0
 800cc52:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800cc56:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 800cc5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800cc64:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 800cc68:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800cc72:	fb02 f203 	mul.w	r2, r2, r3
 800cc76:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800cc7a:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 800cc7e:	4601      	mov	r1, r0
 800cc80:	fb01 f303 	mul.w	r3, r1, r3
 800cc84:	4413      	add	r3, r2
 800cc86:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800cc8a:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 800cc8e:	fba2 1201 	umull	r1, r2, r2, r1
 800cc92:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 800cc96:	460a      	mov	r2, r1
 800cc98:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 800cc9c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 800cca0:	4413      	add	r3, r2
 800cca2:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 800cca6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800ccb0:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 800ccb4:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 800ccbe:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800ccc2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 800cccc:	fb02 f203 	mul.w	r2, r2, r3
 800ccd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800ccd4:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 800ccd8:	4601      	mov	r1, r0
 800ccda:	fb01 f303 	mul.w	r3, r1, r3
 800ccde:	4413      	add	r3, r2
 800cce0:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 800cce4:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800cce8:	fba2 1201 	umull	r1, r2, r2, r1
 800ccec:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 800ccf0:	460a      	mov	r2, r1
 800ccf2:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 800ccf6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800cd00:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 800cd04:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800cd08:	4602      	mov	r2, r0
 800cd0a:	189b      	adds	r3, r3, r2
 800cd0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd10:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800cd14:	460a      	mov	r2, r1
 800cd16:	4153      	adcs	r3, r2
 800cd18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 800cd1c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800cd20:	2200      	movs	r2, #0
 800cd22:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800cd26:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 800cd2a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800cd34:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800cd38:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 800cd42:	fb02 f203 	mul.w	r2, r2, r3
 800cd46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800cd4a:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 800cd4e:	4601      	mov	r1, r0
 800cd50:	fb01 f303 	mul.w	r3, r1, r3
 800cd54:	4413      	add	r3, r2
 800cd56:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800cd5a:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 800cd5e:	fba2 1201 	umull	r1, r2, r2, r1
 800cd62:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 800cd66:	460a      	mov	r2, r1
 800cd68:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 800cd6c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 800cd70:	4413      	add	r3, r2
 800cd72:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 800cd76:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800cd80:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800cd84:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800cd8e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 800cd92:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800cd96:	460b      	mov	r3, r1
 800cd98:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800cd9c:	fb02 f203 	mul.w	r2, r2, r3
 800cda0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800cda4:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 800cda8:	4601      	mov	r1, r0
 800cdaa:	fb01 f303 	mul.w	r3, r1, r3
 800cdae:	4413      	add	r3, r2
 800cdb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800cdb4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 800cdb8:	fba2 1201 	umull	r1, r2, r2, r1
 800cdbc:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800cdc0:	460a      	mov	r2, r1
 800cdc2:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 800cdc6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800cdca:	4413      	add	r3, r2
 800cdcc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800cdd0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800cdd4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800cdd8:	4602      	mov	r2, r0
 800cdda:	189b      	adds	r3, r3, r2
 800cddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdde:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800cde2:	460a      	mov	r2, r1
 800cde4:	4153      	adcs	r3, r2
 800cde6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cde8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cdec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	189b      	adds	r3, r3, r2
 800cdf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cdfc:	460a      	mov	r2, r1
 800cdfe:	4153      	adcs	r3, r2
 800ce00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 800ce04:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800ce0e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800ce12:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 800ce16:	2200      	movs	r2, #0
 800ce18:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800ce1c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800ce20:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 800ce24:	460b      	mov	r3, r1
 800ce26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800ce2a:	fb02 f203 	mul.w	r2, r2, r3
 800ce2e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800ce32:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 800ce36:	4601      	mov	r1, r0
 800ce38:	fb01 f303 	mul.w	r3, r1, r3
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800ce42:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800ce46:	fba2 1201 	umull	r1, r2, r2, r1
 800ce4a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800ce4e:	460a      	mov	r2, r1
 800ce50:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 800ce54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800ce58:	4413      	add	r3, r2
 800ce5a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 800ce5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ce62:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800ce66:	4602      	mov	r2, r0
 800ce68:	189b      	adds	r3, r3, r2
 800ce6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce70:	460a      	mov	r2, r1
 800ce72:	4153      	adcs	r3, r2
 800ce74:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ce7a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 800ce7e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800ce82:	2200      	movs	r2, #0
 800ce84:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800ce88:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800ce8c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800ce96:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 800ce9a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800ce9e:	460b      	mov	r3, r1
 800cea0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800cea4:	fb02 f203 	mul.w	r2, r2, r3
 800cea8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800ceac:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	fb01 f303 	mul.w	r3, r1, r3
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800cebc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 800cec0:	fba2 1201 	umull	r1, r2, r2, r1
 800cec4:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 800cec8:	460a      	mov	r2, r1
 800ceca:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 800cece:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 800ced2:	4413      	add	r3, r2
 800ced4:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800ced8:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800cedc:	2200      	movs	r2, #0
 800cede:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800cee2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800cee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800cef0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800cef4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800cef8:	460b      	mov	r3, r1
 800cefa:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800cefe:	fb02 f203 	mul.w	r2, r2, r3
 800cf02:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800cf06:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 800cf0a:	4601      	mov	r1, r0
 800cf0c:	fb01 f303 	mul.w	r3, r1, r3
 800cf10:	4413      	add	r3, r2
 800cf12:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800cf16:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 800cf1a:	fba2 1201 	umull	r1, r2, r2, r1
 800cf1e:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800cf22:	460a      	mov	r2, r1
 800cf24:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 800cf28:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800cf32:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800cf36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	189b      	adds	r3, r3, r2
 800cf3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf42:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 800cf46:	460a      	mov	r2, r1
 800cf48:	4153      	adcs	r3, r2
 800cf4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 800cf4e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800cf52:	2200      	movs	r2, #0
 800cf54:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800cf58:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800cf5c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800cf66:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800cf6a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 800cf6e:	460b      	mov	r3, r1
 800cf70:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800cf74:	fb02 f203 	mul.w	r2, r2, r3
 800cf78:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800cf7c:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 800cf80:	4601      	mov	r1, r0
 800cf82:	fb01 f303 	mul.w	r3, r1, r3
 800cf86:	4413      	add	r3, r2
 800cf88:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800cf8c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 800cf90:	fba2 ab01 	umull	sl, fp, r2, r1
 800cf94:	445b      	add	r3, fp
 800cf96:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 800cf98:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800cfa2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800cfa6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800cfb0:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800cfb4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800cfb8:	460b      	mov	r3, r1
 800cfba:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800cfbe:	fb02 f203 	mul.w	r2, r2, r3
 800cfc2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800cfc6:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 800cfca:	4601      	mov	r1, r0
 800cfcc:	fb01 f303 	mul.w	r3, r1, r3
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800cfd6:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800cfda:	fba2 1201 	umull	r1, r2, r2, r1
 800cfde:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 800cfe8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800cfec:	4413      	add	r3, r2
 800cfee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800cff2:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 800cff6:	460b      	mov	r3, r1
 800cff8:	eb1a 0303 	adds.w	r3, sl, r3
 800cffc:	653b      	str	r3, [r7, #80]	@ 0x50
 800cffe:	4613      	mov	r3, r2
 800d000:	eb4b 0303 	adc.w	r3, fp, r3
 800d004:	657b      	str	r3, [r7, #84]	@ 0x54
 800d006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d00a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d00e:	4602      	mov	r2, r0
 800d010:	189b      	adds	r3, r3, r2
 800d012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d01a:	460a      	mov	r2, r1
 800d01c:	4153      	adcs	r3, r2
 800d01e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 800d022:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800d026:	2200      	movs	r2, #0
 800d028:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800d02c:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 800d030:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800d034:	2200      	movs	r2, #0
 800d036:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800d03a:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800d03e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800d042:	460b      	mov	r3, r1
 800d044:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800d048:	fb02 f203 	mul.w	r2, r2, r3
 800d04c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800d050:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 800d054:	4601      	mov	r1, r0
 800d056:	fb01 f303 	mul.w	r3, r1, r3
 800d05a:	4413      	add	r3, r2
 800d05c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800d060:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800d064:	fba2 1201 	umull	r1, r2, r2, r1
 800d068:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800d06c:	460a      	mov	r2, r1
 800d06e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800d072:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d076:	4413      	add	r3, r2
 800d078:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 800d07c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d080:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800d084:	4602      	mov	r2, r0
 800d086:	189b      	adds	r3, r3, r2
 800d088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d08a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d08e:	460a      	mov	r2, r1
 800d090:	4153      	adcs	r3, r2
 800d092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d098:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 800d09c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800d0a6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800d0aa:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800d0b4:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800d0b8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800d0bc:	460b      	mov	r3, r1
 800d0be:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800d0c2:	fb02 f203 	mul.w	r2, r2, r3
 800d0c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800d0ca:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	fb01 f303 	mul.w	r3, r1, r3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800d0da:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 800d0de:	fba2 8901 	umull	r8, r9, r2, r1
 800d0e2:	444b      	add	r3, r9
 800d0e4:	4699      	mov	r9, r3
 800d0e6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800d0f0:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800d0f4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800d0fe:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800d102:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800d106:	460b      	mov	r3, r1
 800d108:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d10c:	fb02 f203 	mul.w	r2, r2, r3
 800d110:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d114:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 800d118:	4601      	mov	r1, r0
 800d11a:	fb01 f303 	mul.w	r3, r1, r3
 800d11e:	4413      	add	r3, r2
 800d120:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d124:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800d128:	fba2 1201 	umull	r1, r2, r2, r1
 800d12c:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800d130:	460a      	mov	r2, r1
 800d132:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 800d136:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d13a:	4413      	add	r3, r2
 800d13c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800d140:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800d144:	460b      	mov	r3, r1
 800d146:	eb18 0303 	adds.w	r3, r8, r3
 800d14a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d14e:	4613      	mov	r3, r2
 800d150:	eb49 0303 	adc.w	r3, r9, r3
 800d154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 800d158:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800d162:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800d166:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800d170:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800d174:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800d178:	460b      	mov	r3, r1
 800d17a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800d17e:	fb02 f203 	mul.w	r2, r2, r3
 800d182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d186:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 800d18a:	4601      	mov	r1, r0
 800d18c:	fb01 f303 	mul.w	r3, r1, r3
 800d190:	4413      	add	r3, r2
 800d192:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800d196:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800d19a:	fba2 4501 	umull	r4, r5, r2, r1
 800d19e:	442b      	add	r3, r5
 800d1a0:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 800d1a2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d1ac:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800d1b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1ba:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800d1be:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800d1c8:	fb02 f203 	mul.w	r2, r2, r3
 800d1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1d0:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	fb01 f303 	mul.w	r3, r1, r3
 800d1da:	4413      	add	r3, r2
 800d1dc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800d1e0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800d1e4:	fba2 1201 	umull	r1, r2, r2, r1
 800d1e8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800d1ec:	460a      	mov	r2, r1
 800d1ee:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800d1f2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d1fc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d200:	460b      	mov	r3, r1
 800d202:	18e3      	adds	r3, r4, r3
 800d204:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d206:	4613      	mov	r3, r2
 800d208:	eb45 0303 	adc.w	r3, r5, r3
 800d20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d20e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d212:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800d216:	4602      	mov	r2, r0
 800d218:	189b      	adds	r3, r3, r2
 800d21a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d21e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d222:	460a      	mov	r2, r1
 800d224:	4153      	adcs	r3, r2
 800d226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 800d22a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800d22e:	2200      	movs	r2, #0
 800d230:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d234:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800d238:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800d23c:	2200      	movs	r2, #0
 800d23e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d242:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d246:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800d24a:	460b      	mov	r3, r1
 800d24c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800d250:	fb02 f203 	mul.w	r2, r2, r3
 800d254:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d258:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 800d25c:	4601      	mov	r1, r0
 800d25e:	fb01 f303 	mul.w	r3, r1, r3
 800d262:	4413      	add	r3, r2
 800d264:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800d268:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800d26c:	fba2 1201 	umull	r1, r2, r2, r1
 800d270:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d274:	460a      	mov	r2, r1
 800d276:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800d27a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d27e:	4413      	add	r3, r2
 800d280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 800d284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d28c:	4602      	mov	r2, r0
 800d28e:	189b      	adds	r3, r3, r2
 800d290:	623b      	str	r3, [r7, #32]
 800d292:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d296:	460a      	mov	r2, r1
 800d298:	4153      	adcs	r3, r2
 800d29a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d29c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d2a0:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 800d2a4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 800d2a8:	f04f 0000 	mov.w	r0, #0
 800d2ac:	f04f 0100 	mov.w	r1, #0
 800d2b0:	0e90      	lsrs	r0, r2, #26
 800d2b2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800d2b6:	0e99      	lsrs	r1, r3, #26
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 800d2be:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 800d2c2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d2c6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 800d2ca:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d2d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d2d8:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800d2dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d2e0:	1851      	adds	r1, r2, r1
 800d2e2:	61b9      	str	r1, [r7, #24]
 800d2e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d2e8:	414b      	adcs	r3, r1
 800d2ea:	61fb      	str	r3, [r7, #28]
 800d2ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2f0:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 800d2f4:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800d2f8:	f04f 0000 	mov.w	r0, #0
 800d2fc:	f04f 0100 	mov.w	r1, #0
 800d300:	0e90      	lsrs	r0, r2, #26
 800d302:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800d306:	0e99      	lsrs	r1, r3, #26
 800d308:	4603      	mov	r3, r0
 800d30a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 800d30e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800d312:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d316:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 800d31a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800d31e:	2200      	movs	r2, #0
 800d320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d324:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800d328:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 800d32c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800d330:	1851      	adds	r1, r2, r1
 800d332:	6139      	str	r1, [r7, #16]
 800d334:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d338:	414b      	adcs	r3, r1
 800d33a:	617b      	str	r3, [r7, #20]
 800d33c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d340:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 800d344:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 800d348:	f04f 0000 	mov.w	r0, #0
 800d34c:	f04f 0100 	mov.w	r1, #0
 800d350:	0e90      	lsrs	r0, r2, #26
 800d352:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800d356:	0e99      	lsrs	r1, r3, #26
 800d358:	4603      	mov	r3, r0
 800d35a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 800d35e:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800d362:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d366:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 800d36a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800d36e:	2200      	movs	r2, #0
 800d370:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d374:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800d378:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d37a:	1851      	adds	r1, r2, r1
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d380:	414b      	adcs	r3, r1
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d388:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 800d38c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800d390:	f04f 0000 	mov.w	r0, #0
 800d394:	f04f 0100 	mov.w	r1, #0
 800d398:	0e90      	lsrs	r0, r2, #26
 800d39a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800d39e:	0e99      	lsrs	r1, r3, #26
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 800d3a6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800d3aa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d3ae:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 800d3b2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3ba:	677a      	str	r2, [r7, #116]	@ 0x74
 800d3bc:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800d3c0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d3c2:	1851      	adds	r1, r2, r1
 800d3c4:	6039      	str	r1, [r7, #0]
 800d3c6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800d3c8:	414b      	adcs	r3, r1
 800d3ca:	607b      	str	r3, [r7, #4]
 800d3cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3d0:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 800d3d4:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800d3d8:	f04f 0000 	mov.w	r0, #0
 800d3dc:	f04f 0100 	mov.w	r1, #0
 800d3e0:	0e90      	lsrs	r0, r2, #26
 800d3e2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800d3e6:	0e99      	lsrs	r1, r3, #26
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 800d3ee:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800d3f2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d3f6:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 800d3fa:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 800d3fe:	4613      	mov	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	441a      	add	r2, r3
 800d404:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800d408:	4413      	add	r3, r2
 800d40a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 800d40e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800d412:	0e9b      	lsrs	r3, r3, #26
 800d414:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 800d418:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800d41c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d420:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 800d424:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 800d428:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800d42c:	4413      	add	r3, r2
 800d42e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 800d432:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800d436:	3310      	adds	r3, #16
 800d438:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 800d43c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800d440:	3b10      	subs	r3, #16
 800d442:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 800d446:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 800d44a:	2b0f      	cmp	r3, #15
 800d44c:	f63f a983 	bhi.w	800c756 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 800d450:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800d454:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 800d458:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 800d45a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800d45e:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 800d462:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 800d464:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800d468:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 800d46c:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 800d46e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800d472:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 800d476:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 800d478:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800d47c:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800d480:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d482:	bf00      	nop
 800d484:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 800d488:	46bd      	mov	sp, r7
 800d48a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d48e <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 800d48e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d492:	b0aa      	sub	sp, #168	@ 0xa8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6678      	str	r0, [r7, #100]	@ 0x64
 800d498:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 800d49a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d49c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 800d4a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d030      	beq.n	800d50c <poly1305_finish+0x7e>
    size_t i = st->leftover;
 800d4aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 800d4b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d4b8:	1c53      	adds	r3, r2, #1
 800d4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4c2:	441a      	add	r2, r3
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 800d4ca:	e00d      	b.n	800d4e8 <poly1305_finish+0x5a>
 800d4cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d4d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d4da:	2300      	movs	r3, #0
 800d4dc:	7013      	strb	r3, [r2, #0]
 800d4de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d4e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4ec:	2b0f      	cmp	r3, #15
 800d4ee:	d9ed      	bls.n	800d4cc <poly1305_finish+0x3e>
    st->final = 1;
 800d4f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 800d4fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4fe:	333c      	adds	r3, #60	@ 0x3c
 800d500:	2210      	movs	r2, #16
 800d502:	4619      	mov	r1, r3
 800d504:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800d508:	f7ff f8be 	bl	800c688 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 800d50c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 800d516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 800d520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 800d52a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d52e:	6a1b      	ldr	r3, [r3, #32]
 800d530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 800d534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d53a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 800d53e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d542:	0e9b      	lsrs	r3, r3, #26
 800d544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 800d548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d54c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 800d554:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d55c:	4413      	add	r3, r2
 800d55e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 800d562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d566:	0e9b      	lsrs	r3, r3, #26
 800d568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 800d56c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d570:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 800d578:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d57c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d580:	4413      	add	r3, r2
 800d582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 800d586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d58a:	0e9b      	lsrs	r3, r3, #26
 800d58c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 800d590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d594:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 800d59c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d5a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 800d5aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5ae:	0e9b      	lsrs	r3, r3, #26
 800d5b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 800d5b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5b8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d5bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 800d5c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	441a      	add	r2, r3
 800d5ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 800d5d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5d8:	0e9b      	lsrs	r3, r3, #26
 800d5da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 800d5de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5e2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d5e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 800d5ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d5ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 800d5f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5fc:	3305      	adds	r3, #5
 800d5fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 800d602:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d606:	0e9b      	lsrs	r3, r3, #26
 800d608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 800d60c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d610:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 800d618:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d61c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d620:	4413      	add	r3, r2
 800d622:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 800d626:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d62a:	0e9b      	lsrs	r3, r3, #26
 800d62c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 800d630:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d634:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 800d63c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d644:	4413      	add	r3, r2
 800d646:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 800d648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d64a:	0e9b      	lsrs	r3, r3, #26
 800d64c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 800d650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d652:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d656:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 800d658:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d660:	4413      	add	r3, r2
 800d662:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 800d664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d666:	0e9b      	lsrs	r3, r3, #26
 800d668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 800d66c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d66e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800d672:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 800d674:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d67c:	4413      	add	r3, r2
 800d67e:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 800d682:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 800d684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d686:	0fdb      	lsrs	r3, r3, #31
 800d688:	3b01      	subs	r3, #1
 800d68a:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 800d68c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d692:	4013      	ands	r3, r2
 800d694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 800d698:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d69c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d69e:	4013      	ands	r3, r2
 800d6a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 800d6a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d6a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 800d6ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d6ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 800d6b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 800d6bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6be:	43db      	mvns	r3, r3
 800d6c0:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 800d6c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d6c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6c8:	401a      	ands	r2, r3
 800d6ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 800d6d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d6d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6da:	401a      	ands	r2, r3
 800d6dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 800d6e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d6ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6ec:	401a      	ands	r2, r3
 800d6ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 800d6f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d6fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6fc:	401a      	ands	r2, r3
 800d6fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d700:	4313      	orrs	r3, r2
 800d702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 800d706:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d70a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d70c:	401a      	ands	r2, r3
 800d70e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d710:	4313      	orrs	r3, r2
 800d712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 800d716:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d71a:	069a      	lsls	r2, r3, #26
 800d71c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d720:	4313      	orrs	r3, r2
 800d722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 800d726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d72a:	099a      	lsrs	r2, r3, #6
 800d72c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d730:	051b      	lsls	r3, r3, #20
 800d732:	4313      	orrs	r3, r2
 800d734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 800d738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d73c:	0b1a      	lsrs	r2, r3, #12
 800d73e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d742:	039b      	lsls	r3, r3, #14
 800d744:	4313      	orrs	r3, r2
 800d746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 800d74a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d74e:	0c9a      	lsrs	r2, r3, #18
 800d750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d754:	021b      	lsls	r3, r3, #8
 800d756:	4313      	orrs	r3, r2
 800d758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 800d75c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d760:	2200      	movs	r2, #0
 800d762:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d764:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800d766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76c:	2200      	movs	r2, #0
 800d76e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d770:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d774:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800d778:	4602      	mov	r2, r0
 800d77a:	189b      	adds	r3, r3, r2
 800d77c:	61bb      	str	r3, [r7, #24]
 800d77e:	460b      	mov	r3, r1
 800d780:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d782:	eb42 0303 	adc.w	r3, r2, r3
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d78c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 800d790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 800d796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d79a:	2200      	movs	r2, #0
 800d79c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d79e:	657a      	str	r2, [r7, #84]	@ 0x54
 800d7a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	189c      	adds	r4, r3, r2
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d7ba:	eb42 0303 	adc.w	r3, r2, r3
 800d7be:	461d      	mov	r5, r3
 800d7c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800d7c4:	f04f 0000 	mov.w	r0, #0
 800d7c8:	f04f 0100 	mov.w	r1, #0
 800d7cc:	0018      	movs	r0, r3
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	1823      	adds	r3, r4, r0
 800d7d2:	613b      	str	r3, [r7, #16]
 800d7d4:	eb45 0301 	adc.w	r3, r5, r1
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d7de:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 800d7e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 800d7e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d7f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800d7fe:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800d802:	4623      	mov	r3, r4
 800d804:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d808:	4602      	mov	r2, r0
 800d80a:	eb13 0a02 	adds.w	sl, r3, r2
 800d80e:	462b      	mov	r3, r5
 800d810:	460a      	mov	r2, r1
 800d812:	eb43 0b02 	adc.w	fp, r3, r2
 800d816:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d81a:	f04f 0200 	mov.w	r2, #0
 800d81e:	f04f 0300 	mov.w	r3, #0
 800d822:	000a      	movs	r2, r1
 800d824:	2300      	movs	r3, #0
 800d826:	eb1a 0102 	adds.w	r1, sl, r2
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	eb4b 0303 	adc.w	r3, fp, r3
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d836:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 800d83a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d83c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 800d840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d844:	2200      	movs	r2, #0
 800d846:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d84a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d850:	2200      	movs	r2, #0
 800d852:	623b      	str	r3, [r7, #32]
 800d854:	627a      	str	r2, [r7, #36]	@ 0x24
 800d856:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800d85a:	4623      	mov	r3, r4
 800d85c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d860:	4602      	mov	r2, r0
 800d862:	eb13 0802 	adds.w	r8, r3, r2
 800d866:	462b      	mov	r3, r5
 800d868:	460a      	mov	r2, r1
 800d86a:	eb43 0902 	adc.w	r9, r3, r2
 800d86e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d872:	f04f 0200 	mov.w	r2, #0
 800d876:	f04f 0300 	mov.w	r3, #0
 800d87a:	000a      	movs	r2, r1
 800d87c:	2300      	movs	r3, #0
 800d87e:	eb18 0102 	adds.w	r1, r8, r2
 800d882:	6039      	str	r1, [r7, #0]
 800d884:	eb49 0303 	adc.w	r3, r9, r3
 800d888:	607b      	str	r3, [r7, #4]
 800d88a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d88e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 800d892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 800d898:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800d89c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d89e:	f7fe fe56 	bl	800c54e <U32TO8>
  U32TO8(mac + 4, h1);
 800d8a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fe4f 	bl	800c54e <U32TO8>
  U32TO8(mac + 8, h2);
 800d8b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fe fe48 	bl	800c54e <U32TO8>
  U32TO8(mac + 12, h3);
 800d8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8c0:	330c      	adds	r3, #12
 800d8c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fe41 	bl	800c54e <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 800d8cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 800d8d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8d8:	2200      	movs	r2, #0
 800d8da:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 800d8dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 800d8e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 800d8ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 800d8f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 800d8fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d900:	2200      	movs	r2, #0
 800d902:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 800d904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d908:	2200      	movs	r2, #0
 800d90a:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 800d90c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d910:	2200      	movs	r2, #0
 800d912:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 800d914:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d918:	2200      	movs	r2, #0
 800d91a:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 800d91c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d920:	2200      	movs	r2, #0
 800d922:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 800d924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d928:	2200      	movs	r2, #0
 800d92a:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 800d92c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d930:	2200      	movs	r2, #0
 800d932:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 800d934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d938:	2200      	movs	r2, #0
 800d93a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d93c:	bf00      	nop
 800d93e:	37a8      	adds	r7, #168	@ 0xa8
 800d940:	46bd      	mov	sp, r7
 800d942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d946 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 800d946:	b580      	push	{r7, lr}
 800d948:	b088      	sub	sp, #32
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d03d      	beq.n	800d9da <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d962:	f1c3 0310 	rsb	r3, r3, #16
 800d966:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d901      	bls.n	800d974 <poly1305_update+0x2e>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 800d974:	2300      	movs	r3, #0
 800d976:	61fb      	str	r3, [r7, #28]
 800d978:	e00f      	b.n	800d99a <poly1305_update+0x54>
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	441a      	add	r2, r3
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	440b      	add	r3, r1
 800d988:	7811      	ldrb	r1, [r2, #0]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4413      	add	r3, r2
 800d98e:	460a      	mov	r2, r1
 800d990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	3301      	adds	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	69fa      	ldr	r2, [r7, #28]
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d3eb      	bcc.n	800d97a <poly1305_update+0x34>
    bytes -= want;
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	607b      	str	r3, [r7, #4]
    m += want;
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	441a      	add	r2, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c2:	2b0f      	cmp	r3, #15
 800d9c4:	d93e      	bls.n	800da44 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	333c      	adds	r3, #60	@ 0x3c
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	6978      	ldr	r0, [r7, #20]
 800d9d0:	f7fe fe5a 	bl	800c688 <poly1305_blocks>
    st->leftover = 0;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b0f      	cmp	r3, #15
 800d9de:	d910      	bls.n	800da02 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f023 030f 	bic.w	r3, r3, #15
 800d9e6:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	6978      	ldr	r0, [r7, #20]
 800d9ee:	f7fe fe4b 	bl	800c688 <poly1305_blocks>
    m += want;
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d01e      	beq.n	800da46 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 800da08:	2300      	movs	r3, #0
 800da0a:	61fb      	str	r3, [r7, #28]
 800da0c:	e00f      	b.n	800da2e <poly1305_update+0xe8>
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	441a      	add	r2, r3
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	440b      	add	r3, r1
 800da1c:	7811      	ldrb	r1, [r2, #0]
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	4413      	add	r3, r2
 800da22:	460a      	mov	r2, r1
 800da24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	429a      	cmp	r2, r3
 800da34:	d3eb      	bcc.n	800da0e <poly1305_update+0xc8>
    st->leftover += bytes;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	441a      	add	r2, r3
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	639a      	str	r2, [r3, #56]	@ 0x38
 800da42:	e000      	b.n	800da46 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 800da44:	bf00      	nop
  }
}
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	f003 030f 	and.w	r3, r3, #15
 800da5c:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d007      	beq.n	800da74 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f1c3 0310 	rsb	r3, r3, #16
 800da6a:	461a      	mov	r2, r3
 800da6c:	4903      	ldr	r1, [pc, #12]	@ (800da7c <pad_if_needed+0x30>)
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ff69 	bl	800d946 <poly1305_update>
  }
}
 800da74:	bf00      	nop
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	24004dcc 	.word	0x24004dcc

0800da80 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 800da8c:	783b      	ldrb	r3, [r7, #0]
 800da8e:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 800da90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da94:	f04f 0200 	mov.w	r2, #0
 800da98:	f04f 0300 	mov.w	r3, #0
 800da9c:	0a02      	lsrs	r2, r0, #8
 800da9e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800daa2:	0a0b      	lsrs	r3, r1, #8
 800daa4:	b2d3      	uxtb	r3, r2
 800daa6:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 800daa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daac:	f04f 0200 	mov.w	r2, #0
 800dab0:	f04f 0300 	mov.w	r3, #0
 800dab4:	0c02      	lsrs	r2, r0, #16
 800dab6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800daba:	0c0b      	lsrs	r3, r1, #16
 800dabc:	b2d3      	uxtb	r3, r2
 800dabe:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 800dac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dac4:	f04f 0200 	mov.w	r2, #0
 800dac8:	f04f 0300 	mov.w	r3, #0
 800dacc:	0e02      	lsrs	r2, r0, #24
 800dace:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dad2:	0e0b      	lsrs	r3, r1, #24
 800dad4:	b2d3      	uxtb	r3, r2
 800dad6:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 800dad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dadc:	f04f 0200 	mov.w	r2, #0
 800dae0:	f04f 0300 	mov.w	r3, #0
 800dae4:	000a      	movs	r2, r1
 800dae6:	2300      	movs	r3, #0
 800dae8:	b2d3      	uxtb	r3, r2
 800daea:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 800daec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daf0:	f04f 0200 	mov.w	r2, #0
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	0a0a      	lsrs	r2, r1, #8
 800dafa:	2300      	movs	r3, #0
 800dafc:	b2d3      	uxtb	r3, r2
 800dafe:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 800db00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db04:	f04f 0200 	mov.w	r2, #0
 800db08:	f04f 0300 	mov.w	r3, #0
 800db0c:	0c0a      	lsrs	r2, r1, #16
 800db0e:	2300      	movs	r3, #0
 800db10:	b2d3      	uxtb	r3, r2
 800db12:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 800db14:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db18:	f04f 0200 	mov.w	r2, #0
 800db1c:	f04f 0300 	mov.w	r3, #0
 800db20:	0e0a      	lsrs	r2, r1, #24
 800db22:	2300      	movs	r3, #0
 800db24:	b2d3      	uxtb	r3, r2
 800db26:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 800db28:	f107 0310 	add.w	r3, r7, #16
 800db2c:	2208      	movs	r2, #8
 800db2e:	4619      	mov	r1, r3
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f7ff ff08 	bl	800d946 <poly1305_update>
}
 800db36:	bf00      	nop
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 800db3e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800db42:	b0b0      	sub	sp, #192	@ 0xc0
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 800db4e:	2300      	movs	r3, #0
 800db50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	605a      	str	r2, [r3, #4]
 800db5e:	609a      	str	r2, [r3, #8]
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	611a      	str	r2, [r3, #16]
 800db64:	615a      	str	r2, [r3, #20]
 800db66:	619a      	str	r2, [r3, #24]
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 800db68:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800db6c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fcaf 	bl	800c4d6 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 800db78:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800db7c:	f107 0314 	add.w	r3, r7, #20
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe fd04 	bl	800c590 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 800db88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d013      	beq.n	800dbb8 <poly1305_calculate_mac+0x7a>
 800db90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00f      	beq.n	800dbb8 <poly1305_calculate_mac+0x7a>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 800db98:	f107 0314 	add.w	r3, r7, #20
 800db9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800dba0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff fece 	bl	800d946 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 800dbaa:	f107 0314 	add.w	r3, r7, #20
 800dbae:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff ff4a 	bl	800da4c <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 800dbb8:	f107 0314 	add.w	r3, r7, #20
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff fec0 	bl	800d946 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 800dbc6:	f107 0314 	add.w	r3, r7, #20
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff ff3d 	bl	800da4c <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 800dbd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	4698      	mov	r8, r3
 800dbda:	4691      	mov	r9, r2
 800dbdc:	f107 0114 	add.w	r1, r7, #20
 800dbe0:	4642      	mov	r2, r8
 800dbe2:	464b      	mov	r3, r9
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	f7ff ff4b 	bl	800da80 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	461c      	mov	r4, r3
 800dbf0:	4615      	mov	r5, r2
 800dbf2:	f107 0114 	add.w	r1, r7, #20
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	462b      	mov	r3, r5
 800dbfa:	4608      	mov	r0, r1
 800dbfc:	f7ff ff40 	bl	800da80 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 800dc00:	f107 0314 	add.w	r3, r7, #20
 800dc04:	68f9      	ldr	r1, [r7, #12]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff fc41 	bl	800d48e <poly1305_finish>
}
 800dc0c:	bf00      	nop
 800dc0e:	37c0      	adds	r7, #192	@ 0xc0
 800dc10:	46bd      	mov	sp, r7
 800dc12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dc16 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b08a      	sub	sp, #40	@ 0x28
 800dc1a:	af04      	add	r7, sp, #16
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	60b9      	str	r1, [r7, #8]
 800dc20:	607a      	str	r2, [r7, #4]
 800dc22:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 800dc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc26:	3310      	adds	r3, #16
 800dc28:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	4413      	add	r3, r2
 800dc30:	461a      	mov	r2, r3
 800dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d909      	bls.n	800dc4c <mg_chacha20_poly1305_encrypt+0x36>
 800dc38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	4413      	add	r3, r2
 800dc3e:	461a      	mov	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d902      	bls.n	800dc4c <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4a:	e018      	b.n	800dc7e <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f7fe fbc3 	bl	800c3e6 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc64:	18d0      	adds	r0, r2, r3
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	9302      	str	r3, [sp, #8]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc76:	68f9      	ldr	r1, [r7, #12]
 800dc78:	f7ff ff61 	bl	800db3e <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 800dc7c:	697b      	ldr	r3, [r7, #20]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b088      	sub	sp, #32
 800dc8a:	af02      	add	r7, sp, #8
 800dc8c:	60f8      	str	r0, [r7, #12]
 800dc8e:	60b9      	str	r1, [r7, #8]
 800dc90:	607a      	str	r2, [r7, #4]
 800dc92:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	3b10      	subs	r3, #16
 800dc98:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	4413      	add	r3, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d909      	bls.n	800dcbc <mg_chacha20_poly1305_decrypt+0x36>
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	4413      	add	r3, r2
 800dcae:	461a      	mov	r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d902      	bls.n	800dcbc <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 800dcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcba:	e00a      	b.n	800dcd2 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7fe fb8b 	bl	800c3e6 <chacha20_xor_stream>
  return actual_size;
 800dcd0:	697b      	ldr	r3, [r7, #20]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 800dcda:	b480      	push	{r7}
 800dcdc:	b085      	sub	sp, #20
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	460b      	mov	r3, r1
 800dce4:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
 800dcea:	e00a      	b.n	800dd02 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 800dcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	73fb      	strb	r3, [r7, #15]
 800dd02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800dd06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	dbee      	blt.n	800dcec <mg_uecc_vli_clear+0x12>
  }
}
 800dd0e:	bf00      	nop
 800dd10:	bf00      	nop
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	72fb      	strb	r3, [r7, #11]
 800dd30:	e00c      	b.n	800dd4c <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 800dd32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	3301      	adds	r3, #1
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	72fb      	strb	r3, [r7, #11]
 800dd4c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dd50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	dbec      	blt.n	800dd32 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	bf0c      	ite	eq
 800dd5e:	2301      	moveq	r3, #1
 800dd60:	2300      	movne	r3, #0
 800dd62:	b2db      	uxtb	r3, r3
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 800dd7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd80:	115b      	asrs	r3, r3, #5
 800dd82:	b21b      	sxth	r3, r3
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	4413      	add	r3, r2
 800dd8a:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 800dd8c:	887b      	ldrh	r3, [r7, #2]
 800dd8e:	f003 031f 	and.w	r3, r3, #31
 800dd92:	2101      	movs	r1, #1
 800dd94:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 800dd98:	4013      	ands	r3, r2
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 800dda6:	b480      	push	{r7}
 800dda8:	b085      	sub	sp, #20
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 800ddb2:	78fb      	ldrb	r3, [r7, #3]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	73fb      	strb	r3, [r7, #15]
 800ddba:	e003      	b.n	800ddc4 <vli_numDigits+0x1e>
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	73fb      	strb	r3, [r7, #15]
 800ddc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	db07      	blt.n	800dddc <vli_numDigits+0x36>
 800ddcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d0ef      	beq.n	800ddbc <vli_numDigits+0x16>
  }

  return (i + 1);
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	3301      	adds	r3, #1
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	b25b      	sxtb	r3, r3
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 800ddfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff ffcf 	bl	800dda6 <vli_numDigits>
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 800de0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <mg_uecc_vli_numBits+0x28>
    return 0;
 800de14:	2300      	movs	r3, #0
 800de16:	e01f      	b.n	800de58 <mg_uecc_vli_numBits+0x68>
  }

  digit = vli[num_digits - 1];
 800de18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800de1c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	4413      	add	r3, r2
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	e005      	b.n	800de3e <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	085b      	lsrs	r3, r3, #1
 800de36:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	3301      	adds	r3, #1
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1f6      	bne.n	800de32 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 800de44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de48:	3b01      	subs	r3, #1
 800de4a:	015b      	lsls	r3, r3, #5
 800de4c:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 800de52:	4413      	add	r3, r2
 800de54:	b29b      	uxth	r3, r3
 800de56:	b21b      	sxth	r3, r3
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	4613      	mov	r3, r2
 800de6c:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 800de6e:	2300      	movs	r3, #0
 800de70:	75fb      	strb	r3, [r7, #23]
 800de72:	e00f      	b.n	800de94 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 800de74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	441a      	add	r2, r3
 800de7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	68f9      	ldr	r1, [r7, #12]
 800de86:	440b      	add	r3, r1
 800de88:	6812      	ldr	r2, [r2, #0]
 800de8a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	3301      	adds	r3, #1
 800de90:	b2db      	uxtb	r3, r3
 800de92:	75fb      	strb	r3, [r7, #23]
 800de94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	dbe9      	blt.n	800de74 <mg_uecc_vli_set+0x14>
  }
}
 800dea0:	bf00      	nop
 800dea2:	bf00      	nop
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 800deae:	b480      	push	{r7}
 800deb0:	b087      	sub	sp, #28
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	4613      	mov	r3, r2
 800deba:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	3b01      	subs	r3, #1
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	75fb      	strb	r3, [r7, #23]
 800dec4:	e024      	b.n	800df10 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 800dec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	68b9      	ldr	r1, [r7, #8]
 800deda:	440b      	add	r3, r1
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d901      	bls.n	800dee6 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e019      	b.n	800df1a <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 800dee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	68b9      	ldr	r1, [r7, #8]
 800defa:	440b      	add	r3, r1
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d202      	bcs.n	800df08 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 800df02:	f04f 33ff 	mov.w	r3, #4294967295
 800df06:	e008      	b.n	800df1a <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	75fb      	strb	r3, [r7, #23]
 800df10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df14:	2b00      	cmp	r3, #0
 800df16:	dad6      	bge.n	800dec6 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 800df26:	b480      	push	{r7}
 800df28:	b087      	sub	sp, #28
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	60b9      	str	r1, [r7, #8]
 800df30:	4613      	mov	r3, r2
 800df32:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	74fb      	strb	r3, [r7, #19]
 800df40:	e013      	b.n	800df6a <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 800df42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	4413      	add	r3, r2
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	440b      	add	r3, r1
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4053      	eors	r3, r2
 800df5c:	697a      	ldr	r2, [r7, #20]
 800df5e:	4313      	orrs	r3, r2
 800df60:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 800df62:	7cfb      	ldrb	r3, [r7, #19]
 800df64:	3b01      	subs	r3, #1
 800df66:	b2db      	uxtb	r3, r3
 800df68:	74fb      	strb	r3, [r7, #19]
 800df6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dae7      	bge.n	800df42 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	bf0c      	ite	eq
 800df78:	2301      	moveq	r3, #1
 800df7a:	2300      	movne	r3, #0
 800df7c:	b2db      	uxtb	r3, r3
}
 800df7e:	4618      	mov	r0, r3
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b08e      	sub	sp, #56	@ 0x38
 800df8e:	af00      	add	r7, sp, #0
 800df90:	60f8      	str	r0, [r7, #12]
 800df92:	60b9      	str	r1, [r7, #8]
 800df94:	4613      	mov	r3, r2
 800df96:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 800df98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df9c:	f107 0010 	add.w	r0, r7, #16
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	f000 f896 	bl	800e0d4 <mg_uecc_vli_sub>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	bf14      	ite	ne
 800dfae:	2301      	movne	r3, #1
 800dfb0:	2300      	moveq	r3, #0
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 800dfb6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800dfba:	f107 0310 	add.w	r3, r7, #16
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7ff feab 	bl	800dd1c <mg_uecc_vli_isZero>
 800dfc6:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	bf0c      	ite	eq
 800dfce:	2301      	moveq	r3, #1
 800dfd0:	2300      	movne	r3, #0
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	b25b      	sxtb	r3, r3
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3738      	adds	r7, #56	@ 0x38
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 800dfec:	b480      	push	{r7}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]

  vli += num_words;
 800e000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	4413      	add	r3, r2
 800e00a:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 800e00c:	e00b      	b.n	800e026 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	085a      	lsrs	r2, r3, #1
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	07db      	lsls	r3, r3, #31
 800e024:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	1f1a      	subs	r2, r3, #4
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d3ed      	bcc.n	800e00e <mg_uecc_vli_rshift1+0x22>
  }
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	371c      	adds	r7, #28
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 800e040:	b480      	push	{r7}
 800e042:	b089      	sub	sp, #36	@ 0x24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 800e052:	2300      	movs	r3, #0
 800e054:	76fb      	strb	r3, [r7, #27]
 800e056:	e030      	b.n	800e0ba <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 800e058:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	4413      	add	r3, r2
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	6879      	ldr	r1, [r7, #4]
 800e06c:	440b      	add	r3, r1
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4413      	add	r3, r2
 800e072:	69fa      	ldr	r2, [r7, #28]
 800e074:	4413      	add	r3, r2
 800e076:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 800e078:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	4413      	add	r3, r2
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	429a      	cmp	r2, r3
 800e088:	d00c      	beq.n	800e0a4 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 800e08a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	4413      	add	r3, r2
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	429a      	cmp	r2, r3
 800e09a:	bf34      	ite	cc
 800e09c:	2301      	movcc	r3, #1
 800e09e:	2300      	movcs	r3, #0
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 800e0a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 800e0b2:	7efb      	ldrb	r3, [r7, #27]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	76fb      	strb	r3, [r7, #27]
 800e0ba:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800e0be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	dbc8      	blt.n	800e058 <mg_uecc_vli_add+0x18>
  }
  return carry;
 800e0c6:	69fb      	ldr	r3, [r7, #28]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3724      	adds	r7, #36	@ 0x24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 800e0d4:	b480      	push	{r7}
 800e0d6:	b089      	sub	sp, #36	@ 0x24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	76fb      	strb	r3, [r7, #27]
 800e0ea:	e030      	b.n	800e14e <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 800e0ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	6879      	ldr	r1, [r7, #4]
 800e100:	440b      	add	r3, r1
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	1ad2      	subs	r2, r2, r3
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 800e10c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	4413      	add	r3, r2
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d00c      	beq.n	800e138 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 800e11e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	4413      	add	r3, r2
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	697a      	ldr	r2, [r7, #20]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	bf8c      	ite	hi
 800e130:	2301      	movhi	r3, #1
 800e132:	2300      	movls	r3, #0
 800e134:	b2db      	uxtb	r3, r3
 800e136:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 800e138:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	4413      	add	r3, r2
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 800e146:	7efb      	ldrb	r3, [r7, #27]
 800e148:	3301      	adds	r3, #1
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	76fb      	strb	r3, [r7, #27]
 800e14e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800e152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e156:	429a      	cmp	r2, r3
 800e158:	dbc8      	blt.n	800e0ec <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 800e15a:	69fb      	ldr	r3, [r7, #28]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3724      	adds	r7, #36	@ 0x24
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 800e168:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e16c:	b091      	sub	sp, #68	@ 0x44
 800e16e:	af00      	add	r7, sp, #0
 800e170:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e172:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e174:	627a      	str	r2, [r7, #36]	@ 0x24
 800e176:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 800e178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17a:	2200      	movs	r2, #0
 800e17c:	4698      	mov	r8, r3
 800e17e:	4691      	mov	r9, r2
 800e180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e182:	2200      	movs	r2, #0
 800e184:	469a      	mov	sl, r3
 800e186:	4693      	mov	fp, r2
 800e188:	fb0a f209 	mul.w	r2, sl, r9
 800e18c:	fb08 f30b 	mul.w	r3, r8, fp
 800e190:	4413      	add	r3, r2
 800e192:	fba8 450a 	umull	r4, r5, r8, sl
 800e196:	442b      	add	r3, r5
 800e198:	461d      	mov	r5, r3
 800e19a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 800e19e:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	61bb      	str	r3, [r7, #24]
 800e1aa:	61fa      	str	r2, [r7, #28]
 800e1ac:	f04f 0200 	mov.w	r2, #0
 800e1b0:	f04f 0300 	mov.w	r3, #0
 800e1b4:	69b9      	ldr	r1, [r7, #24]
 800e1b6:	000b      	movs	r3, r1
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1bc:	6809      	ldr	r1, [r1, #0]
 800e1be:	2000      	movs	r0, #0
 800e1c0:	6139      	str	r1, [r7, #16]
 800e1c2:	6178      	str	r0, [r7, #20]
 800e1c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4311      	orrs	r1, r2
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4319      	orrs	r1, r3
 800e1d2:	60f9      	str	r1, [r7, #12]
 800e1d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e1d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 800e1dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e1e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e1e4:	1884      	adds	r4, r0, r2
 800e1e6:	603c      	str	r4, [r7, #0]
 800e1e8:	eb41 0303 	adc.w	r3, r1, r3
 800e1ec:	607b      	str	r3, [r7, #4]
 800e1ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e1f2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 800e1f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1f8:	681c      	ldr	r4, [r3, #0]
 800e1fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e1fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e202:	4290      	cmp	r0, r2
 800e204:	eb71 0303 	sbcs.w	r3, r1, r3
 800e208:	bf34      	ite	cc
 800e20a:	2301      	movcc	r3, #1
 800e20c:	2300      	movcs	r3, #0
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	18e2      	adds	r2, r4, r3
 800e212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e214:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 800e216:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e21a:	f04f 0200 	mov.w	r2, #0
 800e21e:	f04f 0300 	mov.w	r3, #0
 800e222:	000a      	movs	r2, r1
 800e224:	2300      	movs	r3, #0
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 800e22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	601a      	str	r2, [r3, #0]
#endif
}
 800e230:	bf00      	nop
 800e232:	3744      	adds	r7, #68	@ 0x44
 800e234:	46bd      	mov	sp, r7
 800e236:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e23a:	4770      	bx	lr

0800e23c <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b08b      	sub	sp, #44	@ 0x2c
 800e240:	af02      	add	r7, sp, #8
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 800e256:	2300      	movs	r3, #0
 800e258:	77bb      	strb	r3, [r7, #30]
 800e25a:	e036      	b.n	800e2ca <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 800e25c:	2300      	movs	r3, #0
 800e25e:	77fb      	strb	r3, [r7, #31]
 800e260:	e01c      	b.n	800e29c <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 800e262:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	4413      	add	r3, r2
 800e26c:	6818      	ldr	r0, [r3, #0]
 800e26e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800e272:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	4413      	add	r3, r2
 800e27e:	6819      	ldr	r1, [r3, #0]
 800e280:	f107 0414 	add.w	r4, r7, #20
 800e284:	f107 0218 	add.w	r2, r7, #24
 800e288:	f107 0310 	add.w	r3, r7, #16
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	4623      	mov	r3, r4
 800e290:	f7ff ff6a 	bl	800e168 <muladd>
    for (i = 0; i <= k; ++i) {
 800e294:	7ffb      	ldrb	r3, [r7, #31]
 800e296:	3301      	adds	r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	77fb      	strb	r3, [r7, #31]
 800e29c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800e2a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	dddc      	ble.n	800e262 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 800e2a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	601a      	str	r2, [r3, #0]
    r0 = r1;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	617b      	str	r3, [r7, #20]
    r2 = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 800e2c2:	7fbb      	ldrb	r3, [r7, #30]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	77bb      	strb	r3, [r7, #30]
 800e2ca:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800e2ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	dbc2      	blt.n	800e25c <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	77bb      	strb	r3, [r7, #30]
 800e2da:	e03b      	b.n	800e354 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 800e2dc:	7fba      	ldrb	r2, [r7, #30]
 800e2de:	78fb      	ldrb	r3, [r7, #3]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	77fb      	strb	r3, [r7, #31]
 800e2ea:	e01c      	b.n	800e326 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 800e2ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800e2fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	4413      	add	r3, r2
 800e308:	6819      	ldr	r1, [r3, #0]
 800e30a:	f107 0414 	add.w	r4, r7, #20
 800e30e:	f107 0218 	add.w	r2, r7, #24
 800e312:	f107 0310 	add.w	r3, r7, #16
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	4623      	mov	r3, r4
 800e31a:	f7ff ff25 	bl	800e168 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 800e31e:	7ffb      	ldrb	r3, [r7, #31]
 800e320:	3301      	adds	r3, #1
 800e322:	b2db      	uxtb	r3, r3
 800e324:	77fb      	strb	r3, [r7, #31]
 800e326:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800e32a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e32e:	429a      	cmp	r2, r3
 800e330:	dbdc      	blt.n	800e2ec <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 800e332:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4413      	add	r3, r2
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	601a      	str	r2, [r3, #0]
    r0 = r1;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	617b      	str	r3, [r7, #20]
    r2 = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 800e34c:	7fbb      	ldrb	r3, [r7, #30]
 800e34e:	3301      	adds	r3, #1
 800e350:	b2db      	uxtb	r3, r3
 800e352:	77bb      	strb	r3, [r7, #30]
 800e354:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800e358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e35c:	005b      	lsls	r3, r3, #1
 800e35e:	3b01      	subs	r3, #1
 800e360:	429a      	cmp	r2, r3
 800e362:	dbbb      	blt.n	800e2dc <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 800e364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	3b04      	subs	r3, #4
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4413      	add	r3, r2
 800e370:	69ba      	ldr	r2, [r7, #24]
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	bf00      	nop
 800e376:	3724      	adds	r7, #36	@ 0x24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd90      	pop	{r4, r7, pc}

0800e37c <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b086      	sub	sp, #24
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 800e38a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f7ff fe54 	bl	800e040 <mg_uecc_vli_add>
 800e398:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <mg_uecc_vli_modAdd+0x38>
 800e3a0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	68f9      	ldr	r1, [r7, #12]
 800e3a8:	6838      	ldr	r0, [r7, #0]
 800e3aa:	f7ff fd80 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d006      	beq.n	800e3c2 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 800e3b4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800e3b8:	683a      	ldr	r2, [r7, #0]
 800e3ba:	68f9      	ldr	r1, [r7, #12]
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f7ff fe89 	bl	800e0d4 <mg_uecc_vli_sub>
  }
}
 800e3c2:	bf00      	nop
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	60b9      	str	r1, [r7, #8]
 800e3d4:	607a      	str	r2, [r7, #4]
 800e3d6:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 800e3d8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	68b9      	ldr	r1, [r7, #8]
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f7ff fe77 	bl	800e0d4 <mg_uecc_vli_sub>
 800e3e6:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d006      	beq.n	800e3fc <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 800e3ee:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	68f9      	ldr	r1, [r7, #12]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f7ff fe22 	bl	800e040 <mg_uecc_vli_add>
  }
}
 800e3fc:	bf00      	nop
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b0ad      	sub	sp, #180	@ 0xb4
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 800e412:	f107 0318 	add.w	r3, r7, #24
 800e416:	613b      	str	r3, [r7, #16]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 800e41c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e420:	b29b      	uxth	r3, r3
 800e422:	019b      	lsls	r3, r3, #6
 800e424:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 800e426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff fcdf 	bl	800ddf0 <mg_uecc_vli_numBits>
 800e432:	4603      	mov	r3, r0
 800e434:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 800e436:	1ae3      	subs	r3, r4, r3
 800e438:	b29b      	uxth	r3, r3
 800e43a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 800e43e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800e442:	2b00      	cmp	r3, #0
 800e444:	da00      	bge.n	800e448 <mg_uecc_vli_mmod+0x44>
 800e446:	331f      	adds	r3, #31
 800e448:	115b      	asrs	r3, r3, #5
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 800e450:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800e454:	425a      	negs	r2, r3
 800e456:	f003 031f 	and.w	r3, r3, #31
 800e45a:	f002 021f 	and.w	r2, r2, #31
 800e45e:	bf58      	it	pl
 800e460:	4253      	negpl	r3, r2
 800e462:	b21b      	sxth	r3, r3
 800e464:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 800e46e:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 800e472:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7ff fc2e 	bl	800dcda <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 800e47e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800e482:	2b00      	cmp	r3, #0
 800e484:	dd34      	ble.n	800e4f0 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 800e486:	2300      	movs	r3, #0
 800e488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e48c:	e029      	b.n	800e4e2 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 800e48e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4413      	add	r3, r2
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800e49e:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 800e4a2:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 800e4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4aa:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 800e4ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e4b0:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	33b0      	adds	r3, #176	@ 0xb0
 800e4b6:	443b      	add	r3, r7
 800e4b8:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 800e4bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800e4cc:	f1c3 0320 	rsb	r3, r3, #32
 800e4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 800e4d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4dc:	3301      	adds	r3, #1
 800e4de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d3cf      	bcc.n	800e48e <mg_uecc_vli_mmod+0x8a>
 800e4ee:	e00b      	b.n	800e508 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 800e4f0:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800e4fa:	4413      	add	r3, r2
 800e4fc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fcac 	bl	800de60 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 800e508:	2301      	movs	r3, #1
 800e50a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e50e:	e09f      	b.n	800e650 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 800e516:	2300      	movs	r3, #0
 800e518:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800e51c:	e053      	b.n	800e5c6 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 800e51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	33b0      	adds	r3, #176	@ 0xb0
 800e526:	443b      	add	r3, r7
 800e528:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 800e52c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	33b0      	adds	r3, #176	@ 0xb0
 800e53e:	443b      	add	r3, r7
 800e540:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800e544:	1ad2      	subs	r2, r2, r3
 800e546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 800e550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	33b0      	adds	r3, #176	@ 0xb0
 800e558:	443b      	add	r3, r7
 800e55a:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 800e55e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d014      	beq.n	800e59a <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 800e570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	33b0      	adds	r3, #176	@ 0xb0
 800e578:	443b      	add	r3, r7
 800e57a:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 800e57e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e58c:	429a      	cmp	r2, r3
 800e58e:	bf8c      	ite	hi
 800e590:	2301      	movhi	r3, #1
 800e592:	2300      	movls	r3, #0
 800e594:	b2db      	uxtb	r3, r3
 800e596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 800e59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e59e:	f1c3 0301 	rsb	r3, r3, #1
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	33b0      	adds	r3, #176	@ 0xb0
 800e5a6:	443b      	add	r3, r7
 800e5a8:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 800e5ac:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e5b8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 800e5ba:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e5be:	3301      	adds	r3, #1
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800e5c6:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 800e5ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	dba4      	blt.n	800e51e <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 800e5d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e5d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	bf0c      	ite	eq
 800e5e0:	2301      	moveq	r3, #1
 800e5e2:	2300      	movne	r3, #0
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 800e5ea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e5ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7ff fcf9 	bl	800dfec <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 800e5fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	33b0      	adds	r3, #176	@ 0xb0
 800e604:	443b      	add	r3, r7
 800e606:	f853 1c58 	ldr.w	r1, [r3, #-88]
 800e60a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	33b0      	adds	r3, #176	@ 0xb0
 800e612:	443b      	add	r3, r7
 800e614:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 800e618:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 800e61a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e61e:	3b01      	subs	r3, #1
 800e620:	430a      	orrs	r2, r1
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	33b0      	adds	r3, #176	@ 0xb0
 800e626:	443b      	add	r3, r7
 800e628:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 800e62c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800e636:	4413      	add	r3, r2
 800e638:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fcd4 	bl	800dfec <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 800e644:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e648:	3b01      	subs	r3, #1
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 800e650:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800e654:	2b00      	cmp	r3, #0
 800e656:	f6bf af5b 	bge.w	800e510 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 800e65a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	33b0      	adds	r3, #176	@ 0xb0
 800e662:	443b      	add	r3, r7
 800e664:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800e668:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e66c:	4619      	mov	r1, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff fbf6 	bl	800de60 <mg_uecc_vli_set>
}
 800e674:	bf00      	nop
 800e676:	37b4      	adds	r7, #180	@ 0xb4
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd90      	pop	{r4, r7, pc}

0800e67c <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b094      	sub	sp, #80	@ 0x50
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 800e68a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800e68e:	f107 0010 	add.w	r0, r7, #16
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	68b9      	ldr	r1, [r7, #8]
 800e696:	f7ff fdd1 	bl	800e23c <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 800e69a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800e69e:	f107 0110 	add.w	r1, r7, #16
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff fead 	bl	800e404 <mg_uecc_vli_mmod>
}
 800e6aa:	bf00      	nop
 800e6ac:	3750      	adds	r7, #80	@ 0x50
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b094      	sub	sp, #80	@ 0x50
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	60f8      	str	r0, [r7, #12]
 800e6ba:	60b9      	str	r1, [r7, #8]
 800e6bc:	607a      	str	r2, [r7, #4]
 800e6be:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	f993 3000 	ldrsb.w	r3, [r3]
 800e6c6:	f107 0010 	add.w	r0, r7, #16
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	f7ff fdb5 	bl	800e23c <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e6d8:	f107 0210 	add.w	r2, r7, #16
 800e6dc:	4611      	mov	r1, r2
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 800e6e2:	bf00      	nop
 800e6e4:	3750      	adds	r7, #80	@ 0x50
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	68b9      	ldr	r1, [r7, #8]
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff ffd8 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b086      	sub	sp, #24
 800e70e:	af00      	add	r7, sp, #0
 800e710:	60f8      	str	r0, [r7, #12]
 800e712:	60b9      	str	r1, [r7, #8]
 800e714:	4613      	mov	r3, r2
 800e716:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0301 	and.w	r3, r3, #1
 800e724:	2b00      	cmp	r3, #0
 800e726:	d007      	beq.n	800e738 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 800e728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	68f9      	ldr	r1, [r7, #12]
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f7ff fc85 	bl	800e040 <mg_uecc_vli_add>
 800e736:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 800e738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e73c:	4619      	mov	r1, r3
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f7ff fc54 	bl	800dfec <mg_uecc_vli_rshift1>
  if (carry) {
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d013      	beq.n	800e772 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 800e74a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800e74e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e752:	4413      	add	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	4413      	add	r3, r2
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800e760:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e764:	440b      	add	r3, r1
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	68f9      	ldr	r1, [r7, #12]
 800e76a:	440b      	add	r3, r1
 800e76c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e770:	601a      	str	r2, [r3, #0]
  }
}
 800e772:	bf00      	nop
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b0a6      	sub	sp, #152	@ 0x98
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	607a      	str	r2, [r7, #4]
 800e786:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 800e788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e78c:	4619      	mov	r1, r3
 800e78e:	68b8      	ldr	r0, [r7, #8]
 800e790:	f7ff fac4 	bl	800dd1c <mg_uecc_vli_isZero>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d006      	beq.n	800e7a8 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 800e79a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f7ff fa9a 	bl	800dcda <mg_uecc_vli_clear>
 800e7a6:	e0de      	b.n	800e966 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 800e7a8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e7ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e7b0:	68b9      	ldr	r1, [r7, #8]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff fb54 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 800e7b8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e7bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7ff fb4c 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 800e7c8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e7cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fa81 	bl	800dcda <mg_uecc_vli_clear>
  u[0] = 1;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 800e7dc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e7e0:	f107 0314 	add.w	r3, r7, #20
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff fa77 	bl	800dcda <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 800e7ec:	e0a2      	b.n	800e934 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 800e7ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d110      	bne.n	800e81a <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 800e7f8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e7fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e800:	4611      	mov	r1, r2
 800e802:	4618      	mov	r0, r3
 800e804:	f7ff fbf2 	bl	800dfec <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 800e808:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e80c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff ff79 	bl	800e70a <vli_modInv_update>
 800e818:	e08c      	b.n	800e934 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 800e81a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e81c:	f003 0301 	and.w	r3, r3, #1
 800e820:	2b00      	cmp	r3, #0
 800e822:	d110      	bne.n	800e846 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 800e824:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e828:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7ff fbdc 	bl	800dfec <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 800e834:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e838:	f107 0314 	add.w	r3, r7, #20
 800e83c:	6879      	ldr	r1, [r7, #4]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff ff63 	bl	800e70a <vli_modInv_update>
 800e844:	e076      	b.n	800e934 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 800e846:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	dd39      	ble.n	800e8c2 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 800e84e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e852:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e856:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800e85a:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800e85e:	f7ff fc39 	bl	800e0d4 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 800e862:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e866:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e86a:	4611      	mov	r1, r2
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7ff fbbd 	bl	800dfec <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 800e872:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e876:	f107 0114 	add.w	r1, r7, #20
 800e87a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff fb15 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	da08      	bge.n	800e89c <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 800e88a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e88e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800e892:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	f7ff fbd2 	bl	800e040 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 800e89c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8a0:	f107 0214 	add.w	r2, r7, #20
 800e8a4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800e8a8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800e8ac:	f7ff fc12 	bl	800e0d4 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 800e8b0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e8b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e8b8:	6879      	ldr	r1, [r7, #4]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7ff ff25 	bl	800e70a <vli_modInv_update>
 800e8c0:	e038      	b.n	800e934 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 800e8c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8c6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800e8ca:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800e8ce:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800e8d2:	f7ff fbff 	bl	800e0d4 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 800e8d6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e8da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fb83 	bl	800dfec <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 800e8e6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e8ea:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800e8ee:	f107 0314 	add.w	r3, r7, #20
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff fadb 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	da08      	bge.n	800e910 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 800e8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e902:	f107 0114 	add.w	r1, r7, #20
 800e906:	f107 0014 	add.w	r0, r7, #20
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	f7ff fb98 	bl	800e040 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 800e910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e914:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e918:	f107 0114 	add.w	r1, r7, #20
 800e91c:	f107 0014 	add.w	r0, r7, #20
 800e920:	f7ff fbd8 	bl	800e0d4 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 800e924:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e928:	f107 0314 	add.w	r3, r7, #20
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7ff feeb 	bl	800e70a <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 800e934:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e938:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800e93c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fab4 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800e946:	4603      	mov	r3, r0
 800e948:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e94c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800e950:	2b00      	cmp	r3, #0
 800e952:	f47f af4c 	bne.w	800e7ee <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 800e956:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e95a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e95e:	4619      	mov	r1, r3
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f7ff fa7d 	bl	800de60 <mg_uecc_vli_set>
}
 800e966:	3798      	adds	r7, #152	@ 0x98
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b098      	sub	sp, #96	@ 0x60
 800e970:	af02      	add	r7, sp, #8
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 800e982:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff f9c7 	bl	800dd1c <mg_uecc_vli_isZero>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	f040 80e6 	bne.w	800eb62 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 800e996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff fea3 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 800e9a4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e9a8:	f107 0010 	add.w	r0, r7, #16
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	68f9      	ldr	r1, [r7, #12]
 800e9b0:	f7ff fe7f 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 800e9b4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800e9b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e9bc:	683a      	ldr	r2, [r7, #0]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7ff fe93 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	68b9      	ldr	r1, [r7, #8]
 800e9ca:	68b8      	ldr	r0, [r7, #8]
 800e9cc:	f7ff fe71 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff fe88 	bl	800e6ea <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	1d1a      	adds	r2, r3, #4
 800e9de:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	68f9      	ldr	r1, [r7, #12]
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fcc6 	bl	800e37c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	1d1a      	adds	r2, r3, #4
 800e9f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	6879      	ldr	r1, [r7, #4]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff fcbb 	bl	800e37c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	4613      	mov	r3, r2
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	68f9      	ldr	r1, [r7, #12]
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fcd7 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	68f9      	ldr	r1, [r7, #12]
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff fe45 	bl	800e6b2 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	1d1a      	adds	r2, r3, #4
 800ea2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	4613      	mov	r3, r2
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	68f9      	ldr	r1, [r7, #12]
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff fc9f 	bl	800e37c <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	1d1a      	adds	r2, r3, #4
 800ea42:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	68f9      	ldr	r1, [r7, #12]
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f7ff fc94 	bl	800e37c <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 800ea54:	2100      	movs	r1, #0
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f7ff f98a 	bl	800dd70 <mg_uecc_vli_testBit>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d024      	beq.n	800eaac <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	1d1a      	adds	r2, r3, #4
 800ea66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ea6a:	68f9      	ldr	r1, [r7, #12]
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7ff fae7 	bl	800e040 <mg_uecc_vli_add>
 800ea72:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 800ea74:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ea78:	4619      	mov	r1, r3
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fab6 	bl	800dfec <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 800ea80:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800ea84:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ea88:	4413      	add	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4413      	add	r3, r2
 800ea90:	6819      	ldr	r1, [r3, #0]
 800ea92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea94:	07da      	lsls	r2, r3, #31
 800ea96:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 800ea9a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ea9e:	4403      	add	r3, r0
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	4403      	add	r3, r0
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	e005      	b.n	800eab8 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 800eaac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eab0:	4619      	mov	r1, r3
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff fa9a 	bl	800dfec <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	68f9      	ldr	r1, [r7, #12]
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7ff fe14 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	1d19      	adds	r1, r3, #4
 800eac6:	f107 0210 	add.w	r2, r7, #16
 800eaca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	460b      	mov	r3, r1
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff fc78 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	1d19      	adds	r1, r3, #4
 800eade:	f107 0210 	add.w	r2, r7, #16
 800eae2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	460b      	mov	r3, r1
 800eaea:	6879      	ldr	r1, [r7, #4]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff fc6c 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	1d1a      	adds	r2, r3, #4
 800eaf6:	f107 0110 	add.w	r1, r7, #16
 800eafa:	f107 0010 	add.w	r0, r7, #16
 800eafe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	4613      	mov	r3, r2
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	f7ff fc5f 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 800eb0c:	f107 0210 	add.w	r2, r7, #16
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	68f9      	ldr	r1, [r7, #12]
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7ff fdcc 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	1d19      	adds	r1, r3, #4
 800eb1e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800eb22:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800eb26:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	68f9      	ldr	r1, [r7, #12]
 800eb30:	f7ff fc4b 	bl	800e3ca <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 800eb34:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eb38:	461a      	mov	r2, r3
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7ff f98f 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 800eb42:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800eb46:	461a      	mov	r2, r3
 800eb48:	68b9      	ldr	r1, [r7, #8]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff f988 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 800eb50:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800eb54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eb58:	4619      	mov	r1, r3
 800eb5a:	68b8      	ldr	r0, [r7, #8]
 800eb5c:	f7ff f980 	bl	800de60 <mg_uecc_vli_set>
 800eb60:	e000      	b.n	800eb64 <double_jacobian_default+0x1f8>
    return;
 800eb62:	bf00      	nop
}
 800eb64:	3758      	adds	r7, #88	@ 0x58
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b090      	sub	sp, #64	@ 0x40
 800eb6e:	af02      	add	r7, sp, #8
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 800eb76:	f107 0314 	add.w	r3, r7, #20
 800eb7a:	2220      	movs	r2, #32
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f01a fda0 	bl	80296c4 <memset>
 800eb84:	2303      	movs	r3, #3
 800eb86:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	68b9      	ldr	r1, [r7, #8]
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7ff fda8 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	1d19      	adds	r1, r3, #4
 800eb9e:	f107 0214 	add.w	r2, r7, #20
 800eba2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	68f9      	ldr	r1, [r7, #12]
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f7ff fc0c 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	68f9      	ldr	r1, [r7, #12]
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f7ff fd7a 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	1d19      	adds	r1, r3, #4
 800ebc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	460b      	mov	r3, r1
 800ebd0:	68f9      	ldr	r1, [r7, #12]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f7ff fbd2 	bl	800e37c <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 800ebd8:	bf00      	nop
 800ebda:	3738      	adds	r7, #56	@ 0x38
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b094      	sub	sp, #80	@ 0x50
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 800ebea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ebee:	2220      	movs	r2, #32
 800ebf0:	2100      	movs	r1, #0
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f01a fd66 	bl	80296c4 <memset>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 800ebfc:	f107 030c 	add.w	r3, r7, #12
 800ec00:	2220      	movs	r2, #32
 800ec02:	2100      	movs	r1, #0
 800ec04:	4618      	mov	r0, r3
 800ec06:	f01a fd5d 	bl	80296c4 <memset>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	1d19      	adds	r1, r3, #4
 800ec1a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800ec1e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ec22:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800ec26:	f7ff fa0b 	bl	800e040 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 800ec2a:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 800ec2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7ff f8db 	bl	800ddf0 <mg_uecc_vli_numBits>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ec46:	e020      	b.n	800ec8a <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 800ec48:	f107 010c 	add.w	r1, r7, #12
 800ec4c:	f107 030c 	add.w	r3, r7, #12
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7ff fd49 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 800ec58:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 800ec5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec60:	4611      	mov	r1, r2
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7ff f884 	bl	800dd70 <mg_uecc_vli_testBit>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 800ec6e:	f107 010c 	add.w	r1, r7, #12
 800ec72:	f107 000c 	add.w	r0, r7, #12
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	f7ff fd1a 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 800ec7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ec8a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	dcda      	bgt.n	800ec48 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 800ec92:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 800ec96:	f107 030c 	add.w	r3, r7, #12
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7ff f8df 	bl	800de60 <mg_uecc_vli_set>
}
 800eca2:	bf00      	nop
 800eca4:	3750      	adds	r7, #80	@ 0x50
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
	...

0800ecac <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 800ecac:	b480      	push	{r7}
 800ecae:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 800ecb0:	4b02      	ldr	r3, [pc, #8]	@ (800ecbc <mg_uecc_secp256r1+0x10>)
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	08030a14 	.word	0x08030a14

0800ecc0 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08c      	sub	sp, #48	@ 0x30
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 800ecca:	2208      	movs	r2, #8
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7ff f8c6 	bl	800de60 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	617b      	str	r3, [r7, #20]
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ece4:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecea:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecf0:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 800ecfe:	f107 020c 	add.w	r2, r7, #12
 800ed02:	f107 010c 	add.w	r1, r7, #12
 800ed06:	f107 000c 	add.w	r0, r7, #12
 800ed0a:	2308      	movs	r3, #8
 800ed0c:	f7ff f998 	bl	800e040 <mg_uecc_vli_add>
 800ed10:	4603      	mov	r3, r0
 800ed12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 800ed14:	f107 020c 	add.w	r2, r7, #12
 800ed18:	2308      	movs	r3, #8
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7ff f98f 	bl	800e040 <mg_uecc_vli_add>
 800ed22:	4603      	mov	r3, r0
 800ed24:	461a      	mov	r2, r3
 800ed26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed28:	4413      	add	r3, r2
 800ed2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed30:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed36:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed3c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed42:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 800ed48:	f107 020c 	add.w	r2, r7, #12
 800ed4c:	f107 010c 	add.w	r1, r7, #12
 800ed50:	f107 000c 	add.w	r0, r7, #12
 800ed54:	2308      	movs	r3, #8
 800ed56:	f7ff f973 	bl	800e040 <mg_uecc_vli_add>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed60:	4413      	add	r3, r2
 800ed62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 800ed64:	f107 020c 	add.w	r2, r7, #12
 800ed68:	2308      	movs	r3, #8
 800ed6a:	6879      	ldr	r1, [r7, #4]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff f967 	bl	800e040 <mg_uecc_vli_add>
 800ed72:	4603      	mov	r3, r0
 800ed74:	461a      	mov	r2, r3
 800ed76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed78:	4413      	add	r3, r2
 800ed7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	6a1b      	ldr	r3, [r3, #32]
 800ed80:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed86:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed8c:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	623b      	str	r3, [r7, #32]
 800ed92:	6a3b      	ldr	r3, [r7, #32]
 800ed94:	61fb      	str	r3, [r7, #28]
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eda4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 800eda6:	f107 020c 	add.w	r2, r7, #12
 800edaa:	2308      	movs	r3, #8
 800edac:	6879      	ldr	r1, [r7, #4]
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7ff f946 	bl	800e040 <mg_uecc_vli_add>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edba:	4413      	add	r3, r2
 800edbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edc2:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc8:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edce:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edd4:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edda:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ede0:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 800edee:	f107 020c 	add.w	r2, r7, #12
 800edf2:	2308      	movs	r3, #8
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff f922 	bl	800e040 <mg_uecc_vli_add>
 800edfc:	4603      	mov	r3, r0
 800edfe:	461a      	mov	r2, r3
 800ee00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee02:	4413      	add	r3, r2
 800ee04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee0a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee10:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee16:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	623b      	str	r3, [r7, #32]
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	6a1b      	ldr	r3, [r3, #32]
 800ee28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 800ee30:	f107 020c 	add.w	r2, r7, #12
 800ee34:	2308      	movs	r3, #8
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7ff f94b 	bl	800e0d4 <mg_uecc_vli_sub>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	461a      	mov	r2, r3
 800ee42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee44:	1a9b      	subs	r3, r3, r2
 800ee46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee4c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee52:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee58:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee5e:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	623b      	str	r3, [r7, #32]
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee72:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 800ee74:	f107 020c 	add.w	r2, r7, #12
 800ee78:	2308      	movs	r3, #8
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff f929 	bl	800e0d4 <mg_uecc_vli_sub>
 800ee82:	4603      	mov	r3, r0
 800ee84:	461a      	mov	r2, r3
 800ee86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee88:	1a9b      	subs	r3, r3, r2
 800ee8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee90:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee96:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee9c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea8:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeae:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 800eeba:	f107 020c 	add.w	r2, r7, #12
 800eebe:	2308      	movs	r3, #8
 800eec0:	6879      	ldr	r1, [r7, #4]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff f906 	bl	800e0d4 <mg_uecc_vli_sub>
 800eec8:	4603      	mov	r3, r0
 800eeca:	461a      	mov	r2, r3
 800eecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eece:	1a9b      	subs	r3, r3, r2
 800eed0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eed6:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eedc:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee6:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeec:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef2:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eefc:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 800eefe:	f107 020c 	add.w	r2, r7, #12
 800ef02:	2308      	movs	r3, #8
 800ef04:	6879      	ldr	r1, [r7, #4]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff f8e4 	bl	800e0d4 <mg_uecc_vli_sub>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef12:	1a9b      	subs	r3, r3, r2
 800ef14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 800ef16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	da19      	bge.n	800ef50 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 800ef1c:	2308      	movs	r3, #8
 800ef1e:	4a14      	ldr	r2, [pc, #80]	@ (800ef70 <vli_mmod_fast_secp256r1+0x2b0>)
 800ef20:	6879      	ldr	r1, [r7, #4]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7ff f88c 	bl	800e040 <mg_uecc_vli_add>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2e:	4413      	add	r3, r2
 800ef30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 800ef32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	dbf1      	blt.n	800ef1c <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 800ef38:	e015      	b.n	800ef66 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 800ef3a:	2308      	movs	r3, #8
 800ef3c:	4a0c      	ldr	r2, [pc, #48]	@ (800ef70 <vli_mmod_fast_secp256r1+0x2b0>)
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7ff f8c7 	bl	800e0d4 <mg_uecc_vli_sub>
 800ef46:	4603      	mov	r3, r0
 800ef48:	461a      	mov	r2, r3
 800ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4c:	1a9b      	subs	r3, r3, r2
 800ef4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 800ef50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1f1      	bne.n	800ef3a <vli_mmod_fast_secp256r1+0x27a>
 800ef56:	2208      	movs	r2, #8
 800ef58:	6879      	ldr	r1, [r7, #4]
 800ef5a:	4805      	ldr	r0, [pc, #20]	@ (800ef70 <vli_mmod_fast_secp256r1+0x2b0>)
 800ef5c:	f7fe ffa7 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d1e9      	bne.n	800ef3a <vli_mmod_fast_secp256r1+0x27a>
}
 800ef66:	bf00      	nop
 800ef68:	3730      	adds	r7, #48	@ 0x30
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	08030a18 	.word	0x08030a18

0800ef74 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b08c      	sub	sp, #48	@ 0x30
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 800ef82:	f107 0310 	add.w	r3, r7, #16
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff fbad 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 800ef90:	f107 0210 	add.w	r2, r7, #16
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	68f9      	ldr	r1, [r7, #12]
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f7ff fb8a 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 800ef9e:	f107 0110 	add.w	r1, r7, #16
 800efa2:	f107 0010 	add.w	r0, r7, #16
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	f7ff fb82 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 800efae:	f107 0210 	add.w	r2, r7, #16
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	68b9      	ldr	r1, [r7, #8]
 800efb6:	68b8      	ldr	r0, [r7, #8]
 800efb8:	f7ff fb7b 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
}
 800efbc:	bf00      	nop
 800efbe:	3730      	adds	r7, #48	@ 0x30
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 800efc4:	b590      	push	{r4, r7, lr}
 800efc6:	b08f      	sub	sp, #60	@ 0x3c
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 800efd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 800efda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d008      	beq.n	800eff2 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 800efe0:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe ff38 	bl	800de60 <mg_uecc_vli_set>
 800eff0:	e009      	b.n	800f006 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 800eff2:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 800eff6:	f107 0314 	add.w	r3, r7, #20
 800effa:	4611      	mov	r1, r2
 800effc:	4618      	mov	r0, r3
 800effe:	f7fe fe6c 	bl	800dcda <mg_uecc_vli_clear>
    z[0] = 1;
 800f002:	2301      	movs	r3, #1
 800f004:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 800f006:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f00a:	461a      	mov	r2, r3
 800f00c:	68f9      	ldr	r1, [r7, #12]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7fe ff26 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 800f014:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f018:	461a      	mov	r2, r3
 800f01a:	68b9      	ldr	r1, [r7, #8]
 800f01c:	6838      	ldr	r0, [r7, #0]
 800f01e:	f7fe ff1f 	bl	800de60 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 800f022:	f107 0214 	add.w	r2, r7, #20
 800f026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f028:	68b9      	ldr	r1, [r7, #8]
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f7ff ffa2 	bl	800ef74 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 800f030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f032:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 800f036:	f107 0214 	add.w	r2, r7, #20
 800f03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f03c:	68b9      	ldr	r1, [r7, #8]
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 800f042:	f107 0214 	add.w	r2, r7, #20
 800f046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f048:	6839      	ldr	r1, [r7, #0]
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7ff ff92 	bl	800ef74 <apply_z>
}
 800f050:	bf00      	nop
 800f052:	373c      	adds	r7, #60	@ 0x3c
 800f054:	46bd      	mov	sp, r7
 800f056:	bd90      	pop	{r4, r7, pc}

0800f058 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 800f058:	b580      	push	{r7, lr}
 800f05a:	b090      	sub	sp, #64	@ 0x40
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 800f066:	f107 0314 	add.w	r3, r7, #20
 800f06a:	2220      	movs	r2, #32
 800f06c:	2100      	movs	r1, #0
 800f06e:	4618      	mov	r0, r3
 800f070:	f01a fb28 	bl	80296c4 <memset>
  wordcount_t num_words = curve->num_words;
 800f074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 800f07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f07e:	1d1a      	adds	r2, r3, #4
 800f080:	f107 0014 	add.w	r0, r7, #20
 800f084:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	4613      	mov	r3, r2
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	f7ff f99b 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 800f094:	f107 0114 	add.w	r1, r7, #20
 800f098:	f107 0314 	add.w	r3, r7, #20
 800f09c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fb23 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 800f0a4:	f107 0214 	add.w	r2, r7, #20
 800f0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0aa:	68f9      	ldr	r1, [r7, #12]
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f7ff fb00 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 800f0b2:	f107 0214 	add.w	r2, r7, #20
 800f0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7ff faf9 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 800f0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0c2:	1d1a      	adds	r2, r3, #4
 800f0c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	6838      	ldr	r0, [r7, #0]
 800f0d2:	f7ff f97a 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 800f0d6:	f107 0314 	add.w	r3, r7, #20
 800f0da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff fb03 	bl	800e6ea <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 800f0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0e6:	1d1a      	adds	r2, r3, #4
 800f0e8:	f107 0114 	add.w	r1, r7, #20
 800f0ec:	f107 0014 	add.w	r0, r7, #20
 800f0f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	f7ff f966 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 800f0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f100:	1d1a      	adds	r2, r3, #4
 800f102:	f107 0114 	add.w	r1, r7, #20
 800f106:	f107 0014 	add.w	r0, r7, #20
 800f10a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	4613      	mov	r3, r2
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	f7ff f959 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 800f118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f11a:	1d1a      	adds	r2, r3, #4
 800f11c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	4613      	mov	r3, r2
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff f94e 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 800f12e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	68b8      	ldr	r0, [r7, #8]
 800f136:	f7ff fabc 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 800f13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f13c:	1d19      	adds	r1, r3, #4
 800f13e:	f107 0214 	add.w	r2, r7, #20
 800f142:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	460b      	mov	r3, r1
 800f14a:	68f9      	ldr	r1, [r7, #12]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff f93c 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 800f152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6838      	ldr	r0, [r7, #0]
 800f15a:	f7ff faaa 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 800f15e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f160:	1d1a      	adds	r2, r3, #4
 800f162:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	4613      	mov	r3, r2
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6838      	ldr	r0, [r7, #0]
 800f170:	f7ff f92b 	bl	800e3ca <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 800f174:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 800f178:	f107 0314 	add.w	r3, r7, #20
 800f17c:	4619      	mov	r1, r3
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7fe fe6e 	bl	800de60 <mg_uecc_vli_set>
}
 800f184:	bf00      	nop
 800f186:	3738      	adds	r7, #56	@ 0x38
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 800f18c:	b590      	push	{r4, r7, lr}
 800f18e:	b0a1      	sub	sp, #132	@ 0x84
 800f190:	af02      	add	r7, sp, #8
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
 800f198:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 800f19a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f19e:	2220      	movs	r2, #32
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f01a fa8e 	bl	80296c4 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 800f1a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 800f1b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1b6:	1d1a      	adds	r2, r3, #4
 800f1b8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800f1bc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	6879      	ldr	r1, [r7, #4]
 800f1c8:	f7ff f8ff 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 800f1cc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800f1d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f1d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fa86 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 800f1de:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f1e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1e6:	68f9      	ldr	r1, [r7, #12]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7ff fa62 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 800f1ee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f1f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7ff fa5a 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 800f1fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f202:	1d1a      	adds	r2, r3, #4
 800f204:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800f208:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f20c:	9300      	str	r3, [sp, #0]
 800f20e:	4613      	mov	r3, r2
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	f7ff f8b2 	bl	800e37c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 800f218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f21c:	1d1a      	adds	r2, r3, #4
 800f21e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	4613      	mov	r3, r2
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6838      	ldr	r0, [r7, #0]
 800f22c:	f7ff f8cd 	bl	800e3ca <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 800f230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f234:	1d1a      	adds	r2, r3, #4
 800f236:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800f23a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	4613      	mov	r3, r2
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	6879      	ldr	r1, [r7, #4]
 800f246:	f7ff f8c0 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 800f24a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f24e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	68b8      	ldr	r0, [r7, #8]
 800f256:	f7ff fa2c 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 800f25a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f25e:	1d1a      	adds	r2, r3, #4
 800f260:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800f264:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	4613      	mov	r3, r2
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	68f9      	ldr	r1, [r7, #12]
 800f270:	f7ff f884 	bl	800e37c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 800f274:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff fa35 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 800f280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f284:	1d19      	adds	r1, r3, #4
 800f286:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f28a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	460b      	mov	r3, r1
 800f292:	6879      	ldr	r1, [r7, #4]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff f898 	bl	800e3ca <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 800f29a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f29e:	1d1a      	adds	r2, r3, #4
 800f2a0:	f107 0014 	add.w	r0, r7, #20
 800f2a4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f2a8:	9300      	str	r3, [sp, #0]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	68f9      	ldr	r1, [r7, #12]
 800f2b0:	f7ff f88b 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 800f2b4:	f107 0214 	add.w	r2, r7, #20
 800f2b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6838      	ldr	r0, [r7, #0]
 800f2c0:	f7ff f9f7 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 800f2c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6838      	ldr	r0, [r7, #0]
 800f2d8:	f7ff f877 	bl	800e3ca <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 800f2dc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800f2e0:	f107 0314 	add.w	r3, r7, #20
 800f2e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7ff f9fe 	bl	800e6ea <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 800f2ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2f2:	1d1c      	adds	r4, r3, #4
 800f2f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f2f8:	f107 0114 	add.w	r1, r7, #20
 800f2fc:	f107 0014 	add.w	r0, r7, #20
 800f300:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	4623      	mov	r3, r4
 800f308:	f7ff f85f 	bl	800e3ca <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 800f30c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f310:	1d1a      	adds	r2, r3, #4
 800f312:	f107 0114 	add.w	r1, r7, #20
 800f316:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800f31a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	4613      	mov	r3, r2
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	f7ff f851 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 800f328:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800f32c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f330:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800f334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f338:	f7ff f9bb 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 800f33c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f340:	1d1a      	adds	r2, r3, #4
 800f342:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f346:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	4613      	mov	r3, r2
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	68b8      	ldr	r0, [r7, #8]
 800f352:	f7ff f83a 	bl	800e3ca <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 800f356:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 800f35a:	f107 0314 	add.w	r3, r7, #20
 800f35e:	4619      	mov	r1, r3
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f7fe fd7d 	bl	800de60 <mg_uecc_vli_set>
}
 800f366:	bf00      	nop
 800f368:	377c      	adds	r7, #124	@ 0x7c
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd90      	pop	{r4, r7, pc}

0800f36e <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 800f36e:	b590      	push	{r4, r7, lr}
 800f370:	b0b1      	sub	sp, #196	@ 0xc4
 800f372:	af02      	add	r7, sp, #8
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	60b9      	str	r1, [r7, #8]
 800f378:	607a      	str	r2, [r7, #4]
 800f37a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 800f37c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 800f386:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 800f38a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f38e:	3320      	adds	r3, #32
 800f390:	68b9      	ldr	r1, [r7, #8]
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe fd64 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 800f398:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	18d1      	adds	r1, r2, r3
 800f3a2:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 800f3a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f3aa:	3320      	adds	r3, #32
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fe fd57 	bl	800de60 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 800f3b2:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f3b6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f3ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f3be:	f103 0120 	add.w	r1, r3, #32
 800f3c2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f3c6:	f103 0020 	add.w	r0, r3, #32
 800f3ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f3ce:	9301      	str	r3, [sp, #4]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	4623      	mov	r3, r4
 800f3d6:	f7ff fdf5 	bl	800efc4 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 800f3da:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800f3de:	3b02      	subs	r3, #2
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800f3e6:	e059      	b.n	800f49c <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 800f3e8:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7fe fcbe 	bl	800dd70 <mg_uecc_vli_testBit>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	bf0c      	ite	eq
 800f3fa:	2301      	moveq	r3, #1
 800f3fc:	2300      	movne	r3, #0
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 800f404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f408:	f1c3 0301 	rsb	r3, r3, #1
 800f40c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f410:	015b      	lsls	r3, r3, #5
 800f412:	18d0      	adds	r0, r2, r3
 800f414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f418:	f1c3 0301 	rsb	r3, r3, #1
 800f41c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f420:	015b      	lsls	r3, r3, #5
 800f422:	18d1      	adds	r1, r2, r3
 800f424:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f42c:	015b      	lsls	r3, r3, #5
 800f42e:	18d4      	adds	r4, r2, r3
 800f430:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f438:	015b      	lsls	r3, r3, #5
 800f43a:	441a      	add	r2, r3
 800f43c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	4613      	mov	r3, r2
 800f444:	4622      	mov	r2, r4
 800f446:	f7ff fea1 	bl	800f18c <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 800f44a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f44e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f452:	015b      	lsls	r3, r3, #5
 800f454:	18d0      	adds	r0, r2, r3
 800f456:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f45a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f45e:	015b      	lsls	r3, r3, #5
 800f460:	18d1      	adds	r1, r2, r3
 800f462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f466:	f1c3 0301 	rsb	r3, r3, #1
 800f46a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f46e:	015b      	lsls	r3, r3, #5
 800f470:	18d4      	adds	r4, r2, r3
 800f472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f476:	f1c3 0301 	rsb	r3, r3, #1
 800f47a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f47e:	015b      	lsls	r3, r3, #5
 800f480:	441a      	add	r2, r3
 800f482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	4613      	mov	r3, r2
 800f48a:	4622      	mov	r2, r4
 800f48c:	f7ff fde4 	bl	800f058 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 800f490:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800f494:	3b01      	subs	r3, #1
 800f496:	b29b      	uxth	r3, r3
 800f498:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800f49c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	dca1      	bgt.n	800f3e8 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7fe fc62 	bl	800dd70 <mg_uecc_vli_testBit>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bf0c      	ite	eq
 800f4b2:	2301      	moveq	r3, #1
 800f4b4:	2300      	movne	r3, #0
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 800f4bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f4c0:	f1c3 0301 	rsb	r3, r3, #1
 800f4c4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f4c8:	015b      	lsls	r3, r3, #5
 800f4ca:	18d0      	adds	r0, r2, r3
 800f4cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f4d0:	f1c3 0301 	rsb	r3, r3, #1
 800f4d4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f4d8:	015b      	lsls	r3, r3, #5
 800f4da:	18d1      	adds	r1, r2, r3
 800f4dc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f4e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f4e4:	015b      	lsls	r3, r3, #5
 800f4e6:	18d4      	adds	r4, r2, r3
 800f4e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f4ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f4f0:	015b      	lsls	r3, r3, #5
 800f4f2:	441a      	add	r2, r3
 800f4f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	f7ff fe45 	bl	800f18c <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 800f502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f506:	1d1c      	adds	r4, r3, #4
 800f508:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f50c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f510:	f103 0120 	add.w	r1, r3, #32
 800f514:	f107 0010 	add.w	r0, r7, #16
 800f518:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	4623      	mov	r3, r4
 800f520:	f7fe ff53 	bl	800e3ca <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 800f524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f528:	f1c3 0301 	rsb	r3, r3, #1
 800f52c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f530:	015b      	lsls	r3, r3, #5
 800f532:	441a      	add	r2, r3
 800f534:	f107 0110 	add.w	r1, r7, #16
 800f538:	f107 0010 	add.w	r0, r7, #16
 800f53c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f540:	f7ff f8b7 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 800f544:	f107 0110 	add.w	r1, r7, #16
 800f548:	f107 0010 	add.w	r0, r7, #16
 800f54c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f550:	68ba      	ldr	r2, [r7, #8]
 800f552:	f7ff f8ae 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 800f556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f55a:	1d1a      	adds	r2, r3, #4
 800f55c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 800f560:	f107 0110 	add.w	r1, r7, #16
 800f564:	f107 0010 	add.w	r0, r7, #16
 800f568:	f7ff f907 	bl	800e77a <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 800f56c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	441a      	add	r2, r3
 800f576:	f107 0110 	add.w	r1, r7, #16
 800f57a:	f107 0010 	add.w	r0, r7, #16
 800f57e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f582:	f7ff f896 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 800f586:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f58a:	f1c3 0301 	rsb	r3, r3, #1
 800f58e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f592:	015b      	lsls	r3, r3, #5
 800f594:	441a      	add	r2, r3
 800f596:	f107 0110 	add.w	r1, r7, #16
 800f59a:	f107 0010 	add.w	r0, r7, #16
 800f59e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f5a2:	f7ff f886 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 800f5a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f5aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f5ae:	015b      	lsls	r3, r3, #5
 800f5b0:	18d0      	adds	r0, r2, r3
 800f5b2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f5b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f5ba:	015b      	lsls	r3, r3, #5
 800f5bc:	18d1      	adds	r1, r2, r3
 800f5be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f5c2:	f1c3 0301 	rsb	r3, r3, #1
 800f5c6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f5ca:	015b      	lsls	r3, r3, #5
 800f5cc:	18d4      	adds	r4, r2, r3
 800f5ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f5d2:	f1c3 0301 	rsb	r3, r3, #1
 800f5d6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f5da:	015b      	lsls	r3, r3, #5
 800f5dc:	441a      	add	r2, r3
 800f5de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	4622      	mov	r2, r4
 800f5e8:	f7ff fd36 	bl	800f058 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 800f5ec:	f107 0210 	add.w	r2, r7, #16
 800f5f0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800f5f4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800f5f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f5fc:	f7ff fcba 	bl	800ef74 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 800f600:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 800f604:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f608:	4619      	mov	r1, r3
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7fe fc28 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 800f610:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	4413      	add	r3, r2
 800f61a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 800f61e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800f622:	4618      	mov	r0, r3
 800f624:	f7fe fc1c 	bl	800de60 <mg_uecc_vli_set>
}
 800f628:	bf00      	nop
 800f62a:	37bc      	adds	r7, #188	@ 0xbc
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd90      	pop	{r4, r7, pc}

0800f630 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
 800f63c:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f644:	331f      	adds	r3, #31
 800f646:	2b00      	cmp	r3, #0
 800f648:	da00      	bge.n	800f64c <regularize_k+0x1c>
 800f64a:	331f      	adds	r3, #31
 800f64c:	115b      	asrs	r3, r3, #5
 800f64e:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	885b      	ldrh	r3, [r3, #2]
 800f654:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800f65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f660:	68f9      	ldr	r1, [r7, #12]
 800f662:	68b8      	ldr	r0, [r7, #8]
 800f664:	f7fe fcec 	bl	800e040 <mg_uecc_vli_add>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10f      	bne.n	800f68e <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 800f66e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f676:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 800f678:	429a      	cmp	r2, r3
 800f67a:	da0a      	bge.n	800f692 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 800f67c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f680:	4619      	mov	r1, r3
 800f682:	68b8      	ldr	r0, [r7, #8]
 800f684:	f7fe fb74 	bl	800dd70 <mg_uecc_vli_testBit>
 800f688:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d001      	beq.n	800f692 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 800f68e:	2301      	movs	r3, #1
 800f690:	e000      	b.n	800f694 <regularize_k+0x64>
 800f692:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 800f694:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800f69c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6a0:	68b9      	ldr	r1, [r7, #8]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7fe fccc 	bl	800e040 <mg_uecc_vli_add>
  return carry;
 800f6a8:	693b      	ldr	r3, [r7, #16]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3718      	adds	r7, #24
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 800f6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c6:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 800f6c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	68b8      	ldr	r0, [r7, #8]
 800f6d0:	f7fe fb8e 	bl	800ddf0 <mg_uecc_vli_numBits>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 800f6d8:	4b2a      	ldr	r3, [pc, #168]	@ (800f784 <mg_uecc_generate_random_int+0xd0>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <mg_uecc_generate_random_int+0x30>
    return 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	e04b      	b.n	800f77c <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	61fb      	str	r3, [r7, #28]
 800f6e8:	e044      	b.n	800f774 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 800f6ea:	4b26      	ldr	r3, [pc, #152]	@ (800f784 <mg_uecc_generate_random_int+0xd0>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 800f6ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f6f2:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <mg_uecc_generate_random_int+0x50>
      return 0;
 800f700:	2300      	movs	r3, #0
 800f702:	e03b      	b.n	800f77c <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 800f704:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f708:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4413      	add	r3, r2
 800f714:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 800f716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	015b      	lsls	r3, r3, #5
 800f71e:	b29a      	uxth	r2, r3
 800f720:	8afb      	ldrh	r3, [r7, #22]
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	b29b      	uxth	r3, r3
 800f726:	b21b      	sxth	r3, r3
 800f728:	461a      	mov	r2, r3
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 800f730:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800f734:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f738:	4403      	add	r3, r0
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	4403      	add	r3, r0
 800f740:	400a      	ands	r2, r1
 800f742:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 800f744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f748:	4619      	mov	r1, r3
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f7fe fae6 	bl	800dd1c <mg_uecc_vli_isZero>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10b      	bne.n	800f76e <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 800f756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f75a:	461a      	mov	r2, r3
 800f75c:	68f9      	ldr	r1, [r7, #12]
 800f75e:	68b8      	ldr	r0, [r7, #8]
 800f760:	f7fe fc13 	bl	800df8a <mg_uecc_vli_cmp>
 800f764:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 800f766:	2b01      	cmp	r3, #1
 800f768:	d101      	bne.n	800f76e <mg_uecc_generate_random_int+0xba>
      return 1;
 800f76a:	2301      	movs	r3, #1
 800f76c:	e006      	b.n	800f77c <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	3301      	adds	r3, #1
 800f772:	61fb      	str	r3, [r7, #28]
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	2b3f      	cmp	r3, #63	@ 0x3f
 800f778:	d9b7      	bls.n	800f6ea <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3720      	adds	r7, #32
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	24004ddc 	.word	0x24004ddc

0800f788 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 800f794:	2300      	movs	r3, #0
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	e018      	b.n	800f7cc <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	1e5a      	subs	r2, r3, #1
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	f023 0303 	bic.w	r3, r3, #3
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	f003 0303 	and.w	r3, r3, #3
 800f7b6:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 800f7b8:	fa22 f103 	lsr.w	r1, r2, r3
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	b2ca      	uxtb	r2, r1
 800f7c4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	617b      	str	r3, [r7, #20]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	dbe2      	blt.n	800f79a <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	371c      	adds	r7, #28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b086      	sub	sp, #24
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3303      	adds	r3, #3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	da00      	bge.n	800f7f8 <mg_uecc_vli_bytesToNative+0x16>
 800f7f6:	3303      	adds	r3, #3
 800f7f8:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 800f7fa:	b25b      	sxtb	r3, r3
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	f7fe fa6b 	bl	800dcda <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 800f804:	2300      	movs	r3, #0
 800f806:	617b      	str	r3, [r7, #20]
 800f808:	e01e      	b.n	800f848 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	1e5a      	subs	r2, r3, #1
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	f023 0303 	bic.w	r3, r3, #3
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	4413      	add	r3, r2
 800f81e:	6819      	ldr	r1, [r3, #0]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	4413      	add	r3, r2
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f003 0303 	and.w	r3, r3, #3
 800f830:	00db      	lsls	r3, r3, #3
 800f832:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f023 0303 	bic.w	r3, r3, #3
 800f83a:	68f8      	ldr	r0, [r7, #12]
 800f83c:	4403      	add	r3, r0
 800f83e:	430a      	orrs	r2, r1
 800f840:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3301      	adds	r3, #1
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	dbdc      	blt.n	800f80a <mg_uecc_vli_bytesToNative+0x28>
  }
}
 800f850:	bf00      	nop
 800f852:	bf00      	nop
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b08a      	sub	sp, #40	@ 0x28
 800f85e:	af00      	add	r7, sp, #0
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
 800f866:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f86e:	3307      	adds	r3, #7
 800f870:	2b00      	cmp	r3, #0
 800f872:	da00      	bge.n	800f876 <bits2int+0x1c>
 800f874:	3307      	adds	r3, #7
 800f876:	10db      	asrs	r3, r3, #3
 800f878:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f880:	331f      	adds	r3, #31
 800f882:	2b00      	cmp	r3, #0
 800f884:	da00      	bge.n	800f888 <bits2int+0x2e>
 800f886:	331f      	adds	r3, #31
 800f888:	115b      	asrs	r3, r3, #5
 800f88a:	b25b      	sxtb	r3, r3
 800f88c:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	429a      	cmp	r2, r3
 800f894:	d901      	bls.n	800f89a <bits2int+0x40>
    bits_size = num_n_bytes;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	b25b      	sxtb	r3, r3
 800f89e:	4619      	mov	r1, r3
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7fe fa1a 	bl	800dcda <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	68b9      	ldr	r1, [r7, #8]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff ff98 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	683a      	ldr	r2, [r7, #0]
 800f8b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d93a      	bls.n	800f936 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f8ca:	1a9b      	subs	r3, r3, r2
 800f8cc:	617b      	str	r3, [r7, #20]
  carry = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	4413      	add	r3, r2
 800f8da:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 800f8dc:	e010      	b.n	800f900 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	40da      	lsrs	r2, r3
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ec:	431a      	orrs	r2, r3
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	f1c3 0320 	rsb	r3, r3, #32
 800f8f8:	693a      	ldr	r2, [r7, #16]
 800f8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f8fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	1f1a      	subs	r2, r3, #4
 800f904:	623a      	str	r2, [r7, #32]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d3e8      	bcc.n	800f8de <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	3324      	adds	r3, #36	@ 0x24
 800f910:	69ba      	ldr	r2, [r7, #24]
 800f912:	b252      	sxtb	r2, r2
 800f914:	68f9      	ldr	r1, [r7, #12]
 800f916:	4618      	mov	r0, r3
 800f918:	f7fe fac9 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d00a      	beq.n	800f938 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	b25b      	sxtb	r3, r3
 800f92c:	68f9      	ldr	r1, [r7, #12]
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7fe fbd0 	bl	800e0d4 <mg_uecc_vli_sub>
 800f934:	e000      	b.n	800f938 <bits2int+0xde>
    return;
 800f936:	bf00      	nop
  }
}
 800f938:	3728      	adds	r7, #40	@ 0x28
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
	...

0800f940 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 800f940:	b590      	push	{r4, r7, lr}
 800f942:	b0ad      	sub	sp, #180	@ 0xb4
 800f944:	af02      	add	r7, sp, #8
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 800f94e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800f952:	657b      	str	r3, [r7, #84]	@ 0x54
 800f954:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800f958:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 800f960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800f96a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f96e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f972:	331f      	adds	r3, #31
 800f974:	2b00      	cmp	r3, #0
 800f976:	da00      	bge.n	800f97a <mg_uecc_sign_with_k_internal+0x3a>
 800f978:	331f      	adds	r3, #31
 800f97a:	115b      	asrs	r3, r3, #5
 800f97c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 800f980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f984:	885b      	ldrh	r3, [r3, #2]
 800f986:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 800f98a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 800f98e:	4619      	mov	r1, r3
 800f990:	6838      	ldr	r0, [r7, #0]
 800f992:	f7fe f9c3 	bl	800dd1c <mg_uecc_vli_isZero>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10b      	bne.n	800f9b4 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 800f99c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f9a0:	3324      	adds	r3, #36	@ 0x24
 800f9a2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe faee 	bl	800df8a <mg_uecc_vli_cmp>
 800f9ae:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d001      	beq.n	800f9b8 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	e128      	b.n	800fc0a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 800f9b8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800f9bc:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800f9c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f9c4:	6838      	ldr	r0, [r7, #0]
 800f9c6:	f7ff fe33 	bl	800f630 <regularize_k>
 800f9ca:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 800f9ce:	4b91      	ldr	r3, [pc, #580]	@ (800fc14 <mg_uecc_sign_with_k_internal+0x2d4>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d01c      	beq.n	800fa10 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 800f9d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	33a8      	adds	r3, #168	@ 0xa8
 800f9de:	443b      	add	r3, r7
 800f9e0:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800f9e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	f7ff fe60 	bl	800f6b4 <mg_uecc_generate_random_int>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d101      	bne.n	800f9fe <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e105      	b.n	800fc0a <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 800f9fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	33a8      	adds	r3, #168	@ 0xa8
 800fa06:	443b      	add	r3, r7
 800fa08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800fa0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 800fa10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fa14:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 800fa18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	bf0c      	ite	eq
 800fa20:	2301      	moveq	r3, #1
 800fa22:	2300      	movne	r3, #0
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	33a8      	adds	r3, #168	@ 0xa8
 800fa2a:	443b      	add	r3, r7
 800fa2c:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 800fa30:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800fa34:	3301      	adds	r3, #1
 800fa36:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 800fa38:	b21b      	sxth	r3, r3
 800fa3a:	f107 0014 	add.w	r0, r7, #20
 800fa3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800fa42:	9201      	str	r2, [sp, #4]
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	f7ff fc8f 	bl	800f36e <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 800fa50:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 800fa54:	f107 0314 	add.w	r3, r7, #20
 800fa58:	4611      	mov	r1, r2
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe f95e 	bl	800dd1c <mg_uecc_vli_isZero>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	e0cf      	b.n	800fc0a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 800fa6a:	4b6a      	ldr	r3, [pc, #424]	@ (800fc14 <mg_uecc_sign_with_k_internal+0x2d4>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d10a      	bne.n	800fa88 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 800fa72:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 800fa76:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fe f92c 	bl	800dcda <mg_uecc_vli_clear>
    tmp[0] = 1;
 800fa82:	2301      	movs	r3, #1
 800fa84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fa86:	e00f      	b.n	800faa8 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 800fa88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fa8c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fa90:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 800fa94:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff fe0b 	bl	800f6b4 <mg_uecc_generate_random_int>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d101      	bne.n	800faa8 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 800faa4:	2300      	movs	r3, #0
 800faa6:	e0b0      	b.n	800fc0a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 800faa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800faac:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fab0:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800fab4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	460b      	mov	r3, r1
 800fabc:	6839      	ldr	r1, [r7, #0]
 800fabe:	6838      	ldr	r0, [r7, #0]
 800fac0:	f7fe fddc 	bl	800e67c <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 800fac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fac8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800facc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6838      	ldr	r0, [r7, #0]
 800fad4:	f7fe fe51 	bl	800e77a <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 800fad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fadc:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fae0:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800fae4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	460b      	mov	r3, r1
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6838      	ldr	r0, [r7, #0]
 800faf0:	f7fe fdc4 	bl	800e67c <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 800faf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800faf8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800fafc:	4619      	mov	r1, r3
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	461a      	mov	r2, r3
 800fb04:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800fb08:	f7ff fe3e 	bl	800f788 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 800fb0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fb10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb14:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	da00      	bge.n	800fb1c <mg_uecc_sign_with_k_internal+0x1dc>
 800fb1a:	3307      	adds	r3, #7
 800fb1c:	10db      	asrs	r3, r3, #3
 800fb1e:	461a      	mov	r2, r3
 800fb20:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800fb24:	68f9      	ldr	r1, [r7, #12]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fe5b 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 800fb2c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fb30:	3b01      	subs	r3, #1
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	33a8      	adds	r3, #168	@ 0xa8
 800fb36:	443b      	add	r3, r7
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 800fb3e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 800fb42:	f107 0114 	add.w	r1, r7, #20
 800fb46:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fe f988 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 800fb50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fb54:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800fb58:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800fb5c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800fb60:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800fb64:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	4623      	mov	r3, r4
 800fb6c:	f7fe fd86 	bl	800e67c <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 800fb70:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800fb74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	68b9      	ldr	r1, [r7, #8]
 800fb7c:	f7ff fe6d 	bl	800f85a <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 800fb80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fb84:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800fb88:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800fb8c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800fb90:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800fb94:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	4623      	mov	r3, r4
 800fb9c:	f7fe fbee 	bl	800e37c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 800fba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fba4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800fba8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800fbac:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800fbb0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	683a      	ldr	r2, [r7, #0]
 800fbba:	f7fe fd5f 	bl	800e67c <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 800fbbe:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 800fbc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7fe f911 	bl	800ddf0 <mg_uecc_vli_numBits>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fbd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	dd01      	ble.n	800fbe4 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e012      	b.n	800fc0a <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 800fbe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fbe8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800fbec:	461a      	mov	r2, r3
 800fbee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fbf2:	1898      	adds	r0, r3, r2
 800fbf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fbf8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7ff fdc0 	bl	800f788 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 800fc08:	2301      	movs	r3, #1
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	37ac      	adds	r7, #172	@ 0xac
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd90      	pop	{r4, r7, pc}
 800fc12:	bf00      	nop
 800fc14:	24004ddc 	.word	0x24004ddc

0800fc18 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	695a      	ldr	r2, [r3, #20]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 800fc30:	2300      	movs	r3, #0
 800fc32:	60fb      	str	r3, [r7, #12]
 800fc34:	e00d      	b.n	800fc52 <HMAC_init+0x3a>
 800fc36:	683a      	ldr	r2, [r7, #0]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	781a      	ldrb	r2, [r3, #0]
 800fc3e:	68b9      	ldr	r1, [r7, #8]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	440b      	add	r3, r1
 800fc44:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 800fc48:	b2d2      	uxtb	r2, r2
 800fc4a:	701a      	strb	r2, [r3, #0]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d3ec      	bcc.n	800fc36 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 800fc5c:	e007      	b.n	800fc6e <HMAC_init+0x56>
 800fc5e:	68ba      	ldr	r2, [r7, #8]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4413      	add	r3, r2
 800fc64:	2236      	movs	r2, #54	@ 0x36
 800fc66:	701a      	strb	r2, [r3, #0]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d3f2      	bcc.n	800fc5e <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	68d2      	ldr	r2, [r2, #12]
 800fc88:	68b9      	ldr	r1, [r7, #8]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	4798      	blx	r3
}
 800fc8e:	bf00      	nop
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	60f8      	str	r0, [r7, #12]
 800fc9e:	60b9      	str	r1, [r7, #8]
 800fca0:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	68b9      	ldr	r1, [r7, #8]
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	4798      	blx	r3
}
 800fcae:	bf00      	nop
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b086      	sub	sp, #24
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	60f8      	str	r0, [r7, #12]
 800fcbe:	60b9      	str	r1, [r7, #8]
 800fcc0:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	695a      	ldr	r2, [r3, #20]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	005b      	lsls	r3, r3, #1
 800fccc:	4413      	add	r3, r2
 800fcce:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	e00d      	b.n	800fcf2 <HMAC_finish+0x3c>
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	4413      	add	r3, r2
 800fcdc:	781a      	ldrb	r2, [r3, #0]
 800fcde:	6939      	ldr	r1, [r7, #16]
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	440b      	add	r3, r1
 800fce4:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 800fce8:	b2d2      	uxtb	r2, r2
 800fcea:	701a      	strb	r2, [r3, #0]
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d3ec      	bcc.n	800fcd6 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 800fcfc:	e007      	b.n	800fd0e <HMAC_finish+0x58>
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	4413      	add	r3, r2
 800fd04:	225c      	movs	r2, #92	@ 0x5c
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	617b      	str	r3, [r7, #20]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d3f2      	bcc.n	800fcfe <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	68d2      	ldr	r2, [r2, #12]
 800fd32:	6939      	ldr	r1, [r7, #16]
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	6912      	ldr	r2, [r2, #16]
 800fd40:	6879      	ldr	r1, [r7, #4]
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	4798      	blx	r3
}
 800fd50:	bf00      	nop
 800fd52:	3718      	adds	r7, #24
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f7ff ff56 	bl	800fc18 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	461a      	mov	r2, r3
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f7ff ff8e 	bl	800fc96 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	68b9      	ldr	r1, [r7, #8]
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f7ff ff99 	bl	800fcb6 <HMAC_finish>
}
 800fd84:	bf00      	nop
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b096      	sub	sp, #88	@ 0x58
 800fd90:	af02      	add	r7, sp, #8
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fda6:	4413      	add	r3, r2
 800fda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 800fdaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdac:	785b      	ldrb	r3, [r3, #1]
 800fdae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 800fdb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fdb8:	331f      	adds	r3, #31
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	da00      	bge.n	800fdc0 <mg_uecc_sign_deterministic+0x34>
 800fdbe:	331f      	adds	r3, #31
 800fdc0:	115b      	asrs	r3, r3, #5
 800fdc2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 800fdc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdc8:	885b      	ldrh	r3, [r3, #2]
 800fdca:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 800fdcc:	2300      	movs	r3, #0
 800fdce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdd0:	e00c      	b.n	800fdec <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 800fdd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fdd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fdd6:	4413      	add	r3, r2
 800fdd8:	2201      	movs	r2, #1
 800fdda:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 800fddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fdde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fde0:	4413      	add	r3, r2
 800fde2:	2200      	movs	r2, #0
 800fde4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 800fde6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fde8:	3301      	adds	r3, #1
 800fdea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d3ed      	bcc.n	800fdd2 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 800fdf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fdf8:	6838      	ldr	r0, [r7, #0]
 800fdfa:	f7ff ff0d 	bl	800fc18 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe04:	4413      	add	r3, r2
 800fe06:	2200      	movs	r2, #0
 800fe08:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	461a      	mov	r2, r3
 800fe12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe14:	6838      	ldr	r0, [r7, #0]
 800fe16:	f7ff ff3e 	bl	800fc96 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 800fe1a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800fe1e:	461a      	mov	r2, r3
 800fe20:	68f9      	ldr	r1, [r7, #12]
 800fe22:	6838      	ldr	r0, [r7, #0]
 800fe24:	f7ff ff37 	bl	800fc96 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	6838      	ldr	r0, [r7, #0]
 800fe2e:	f7ff ff32 	bl	800fc96 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 800fe32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe36:	6838      	ldr	r0, [r7, #0]
 800fe38:	f7ff ff3d 	bl	800fcb6 <HMAC_finish>

  update_V(hash_context, K, V);
 800fe3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe40:	6838      	ldr	r0, [r7, #0]
 800fe42:	f7ff ff89 	bl	800fd58 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 800fe46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe48:	6838      	ldr	r0, [r7, #0]
 800fe4a:	f7ff fee5 	bl	800fc18 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe54:	4413      	add	r3, r2
 800fe56:	2201      	movs	r2, #1
 800fe58:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	461a      	mov	r2, r3
 800fe62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe64:	6838      	ldr	r0, [r7, #0]
 800fe66:	f7ff ff16 	bl	800fc96 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 800fe6a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800fe6e:	461a      	mov	r2, r3
 800fe70:	68f9      	ldr	r1, [r7, #12]
 800fe72:	6838      	ldr	r0, [r7, #0]
 800fe74:	f7ff ff0f 	bl	800fc96 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	68b9      	ldr	r1, [r7, #8]
 800fe7c:	6838      	ldr	r0, [r7, #0]
 800fe7e:	f7ff ff0a 	bl	800fc96 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 800fe82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe86:	6838      	ldr	r0, [r7, #0]
 800fe88:	f7ff ff15 	bl	800fcb6 <HMAC_finish>

  update_V(hash_context, K, V);
 800fe8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe90:	6838      	ldr	r0, [r7, #0]
 800fe92:	f7ff ff61 	bl	800fd58 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 800fe96:	2300      	movs	r3, #0
 800fe98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe9a:	e084      	b.n	800ffa6 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 800fe9c:	f107 0310 	add.w	r3, r7, #16
 800fea0:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 800fea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800feaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800feac:	6838      	ldr	r0, [r7, #0]
 800feae:	f7ff ff53 	bl	800fd58 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 800feb2:	2300      	movs	r3, #0
 800feb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800feb6:	e017      	b.n	800fee8 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 800feb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800feba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800febc:	441a      	add	r2, r3
 800febe:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 800fec2:	b2cb      	uxtb	r3, r1
 800fec4:	3301      	adds	r3, #1
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fece:	440b      	add	r3, r1
 800fed0:	7812      	ldrb	r2, [r2, #0]
 800fed2:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 800fed4:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 800fed8:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	429a      	cmp	r2, r3
 800fee0:	da08      	bge.n	800fef4 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 800fee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fee4:	3301      	adds	r3, #1
 800fee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	691b      	ldr	r3, [r3, #16]
 800feec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800feee:	429a      	cmp	r2, r3
 800fef0:	d3e2      	bcc.n	800feb8 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 800fef2:	e7d9      	b.n	800fea8 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 800fef4:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 800fef6:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 800fefa:	015a      	lsls	r2, r3, #5
 800fefc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800ff00:	429a      	cmp	r2, r3
 800ff02:	dd20      	ble.n	800ff46 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295
 800ff08:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 800ff0a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	3350      	adds	r3, #80	@ 0x50
 800ff14:	443b      	add	r3, r7
 800ff16:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 800ff1a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	015b      	lsls	r3, r3, #5
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	b21b      	sxth	r3, r3
 800ff2c:	461a      	mov	r2, r3
          mask >>
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff30:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 800ff34:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	400a      	ands	r2, r1
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	3350      	adds	r3, #80	@ 0x50
 800ff40:	443b      	add	r3, r7
 800ff42:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 800ff46:	f107 0210 	add.w	r2, r7, #16
 800ff4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff4c:	9301      	str	r3, [sp, #4]
 800ff4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	4613      	mov	r3, r2
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	68b9      	ldr	r1, [r7, #8]
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff fcf1 	bl	800f940 <mg_uecc_sign_with_k_internal>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e023      	b.n	800ffb0 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 800ff68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff6a:	6838      	ldr	r0, [r7, #0]
 800ff6c:	f7ff fe54 	bl	800fc18 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	691b      	ldr	r3, [r3, #16]
 800ff74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff76:	4413      	add	r3, r2
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	3301      	adds	r3, #1
 800ff82:	461a      	mov	r2, r3
 800ff84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff86:	6838      	ldr	r0, [r7, #0]
 800ff88:	f7ff fe85 	bl	800fc96 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 800ff8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff90:	6838      	ldr	r0, [r7, #0]
 800ff92:	f7ff fe90 	bl	800fcb6 <HMAC_finish>

    update_V(hash_context, K, V);
 800ff96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff9a:	6838      	ldr	r0, [r7, #0]
 800ff9c:	f7ff fedc 	bl	800fd58 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 800ffa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ffa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffa8:	2b3f      	cmp	r3, #63	@ 0x3f
 800ffaa:	f67f af77 	bls.w	800fe9c <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3750      	adds	r7, #80	@ 0x50
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	460a      	mov	r2, r1
 800ffc2:	80fb      	strh	r3, [r7, #6]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 800ffc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ffcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	bfb8      	it	lt
 800ffd4:	4613      	movlt	r3, r2
 800ffd6:	b21b      	sxth	r3, r3
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	370c      	adds	r7, #12
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 800ffe4:	b590      	push	{r4, r7, lr}
 800ffe6:	b0ff      	sub	sp, #508	@ 0x1fc
 800ffe8:	af02      	add	r7, sp, #8
 800ffea:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 800ffee:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 800fff2:	6020      	str	r0, [r4, #0]
 800fff4:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 800fff8:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 800fffc:	6001      	str	r1, [r0, #0]
 800fffe:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8010002:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8010006:	600a      	str	r2, [r1, #0]
 8010008:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801000c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8010010:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8010012:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801001c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010024:	331f      	adds	r3, #31
 8010026:	2b00      	cmp	r3, #0
 8010028:	da00      	bge.n	801002c <mg_uecc_verify+0x48>
 801002a:	331f      	adds	r3, #31
 801002c:	115b      	asrs	r3, r3, #5
 801002e:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 8010032:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8010036:	3b01      	subs	r3, #1
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801003e:	443b      	add	r3, r7
 8010040:	2200      	movs	r2, #0
 8010042:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 8010046:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801004a:	1e5a      	subs	r2, r3, #1
 801004c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8010050:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8010054:	2100      	movs	r1, #0
 8010056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801005a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801005e:	1e5a      	subs	r2, r3, #1
 8010060:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8010064:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010068:	2100      	movs	r1, #0
 801006a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801006e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010072:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010076:	461a      	mov	r2, r3
 8010078:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801007c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8010080:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8010084:	6819      	ldr	r1, [r3, #0]
 8010086:	f7ff fbac 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801008a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8010094:	18d0      	adds	r0, r2, r3
 8010096:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801009a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801009e:	461a      	mov	r2, r3
 80100a0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80100a4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 80100ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80100b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 80100b4:	461a      	mov	r2, r3
 80100b6:	f7ff fb94 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 80100ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80100be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80100c8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80100cc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80100d0:	6819      	ldr	r1, [r3, #0]
 80100d2:	f7ff fb86 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 80100d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80100da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80100de:	461a      	mov	r2, r3
 80100e0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80100e4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	1899      	adds	r1, r3, r2
 80100ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80100f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80100f4:	461a      	mov	r2, r3
 80100f6:	f107 0310 	add.w	r3, r7, #16
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7ff fb71 	bl	800f7e2 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8010100:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010104:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010108:	4611      	mov	r1, r2
 801010a:	4618      	mov	r0, r3
 801010c:	f7fd fe06 	bl	800dd1c <mg_uecc_vli_isZero>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d10a      	bne.n	801012c <mg_uecc_verify+0x148>
 8010116:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801011a:	f107 0310 	add.w	r3, r7, #16
 801011e:	4611      	mov	r1, r2
 8010120:	4618      	mov	r0, r3
 8010122:	f7fd fdfb 	bl	800dd1c <mg_uecc_vli_isZero>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d001      	beq.n	8010130 <mg_uecc_verify+0x14c>
    return 0;
 801012c:	2300      	movs	r3, #0
 801012e:	e220      	b.n	8010572 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8010130:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010134:	3324      	adds	r3, #36	@ 0x24
 8010136:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801013a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801013e:	4618      	mov	r0, r3
 8010140:	f7fd feb5 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 8010144:	4603      	mov	r3, r0
 8010146:	2b01      	cmp	r3, #1
 8010148:	d10c      	bne.n	8010164 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 801014a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801014e:	3324      	adds	r3, #36	@ 0x24
 8010150:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8010154:	f107 0110 	add.w	r1, r7, #16
 8010158:	4618      	mov	r0, r3
 801015a:	f7fd fea8 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 801015e:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8010160:	2b01      	cmp	r3, #1
 8010162:	d001      	beq.n	8010168 <mg_uecc_verify+0x184>
    return 0;
 8010164:	2300      	movs	r3, #0
 8010166:	e204      	b.n	8010572 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8010168:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801016c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8010170:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8010174:	f107 0110 	add.w	r1, r7, #16
 8010178:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801017c:	f7fe fafd 	bl	800e77a <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8010180:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8010184:	3b01      	subs	r3, #1
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801018c:	443b      	add	r3, r7
 801018e:	2200      	movs	r2, #0
 8010190:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8010194:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8010198:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 801019c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80101a0:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 80101a4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80101a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80101ac:	6812      	ldr	r2, [r2, #0]
 80101ae:	6809      	ldr	r1, [r1, #0]
 80101b0:	f7ff fb53 	bl	800f85a <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 80101b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80101b8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80101bc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80101c0:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80101c4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80101c8:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	4623      	mov	r3, r4
 80101d0:	f7fe fa54 	bl	800e67c <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 80101d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80101d8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80101dc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80101e0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80101e4:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80101e8:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	4623      	mov	r3, r4
 80101f0:	f7fe fa44 	bl	800e67c <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 80101f4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80101f8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80101fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010200:	4618      	mov	r0, r3
 8010202:	f7fd fe2d 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8010206:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010210:	18d0      	adds	r0, r2, r3
 8010212:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801021c:	4413      	add	r3, r2
 801021e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010222:	4619      	mov	r1, r3
 8010224:	f7fd fe1c 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8010228:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801022c:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8010230:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010234:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8010238:	4618      	mov	r0, r3
 801023a:	f7fd fe11 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 801023e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010242:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8010246:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	18d1      	adds	r1, r2, r3
 801024e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010252:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8010256:	4618      	mov	r0, r3
 8010258:	f7fd fe02 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 801025c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010260:	1d1c      	adds	r4, r3, #4
 8010262:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8010266:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801026a:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801026e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	4623      	mov	r3, r4
 8010276:	f7fe f8a8 	bl	800e3ca <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 801027a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010284:	18d4      	adds	r4, r2, r3
 8010286:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801028a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801028e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8010292:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	4623      	mov	r3, r4
 801029a:	f7fe fedd 	bl	800f058 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 801029e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80102a2:	1d1a      	adds	r2, r3, #4
 80102a4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80102a8:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80102ac:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80102b0:	f7fe fa63 	bl	800e77a <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 80102b4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80102be:	18d1      	adds	r1, r2, r3
 80102c0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80102c4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80102c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80102cc:	f7fe fe52 	bl	800ef74 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 80102d0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80102d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80102d8:	2200      	movs	r2, #0
 80102da:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 80102dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80102e0:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80102e4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80102e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80102ec:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 80102ee:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80102f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80102f6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80102fa:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 80102fc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8010300:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010304:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010308:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 801030a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801030e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8010312:	4611      	mov	r1, r2
 8010314:	4618      	mov	r0, r3
 8010316:	f7fd fd6b 	bl	800ddf0 <mg_uecc_vli_numBits>
 801031a:	4603      	mov	r3, r0
 801031c:	461c      	mov	r4, r3
 801031e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8010322:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8010326:	4611      	mov	r1, r2
 8010328:	4618      	mov	r0, r3
 801032a:	f7fd fd61 	bl	800ddf0 <mg_uecc_vli_numBits>
 801032e:	4603      	mov	r3, r0
 8010330:	4619      	mov	r1, r3
 8010332:	4620      	mov	r0, r4
 8010334:	f7ff fe40 	bl	800ffb8 <smax>
 8010338:	4603      	mov	r3, r0
 801033a:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801033e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8010342:	3b01      	subs	r3, #1
 8010344:	b29b      	uxth	r3, r3
 8010346:	b21a      	sxth	r2, r3
 8010348:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801034c:	4611      	mov	r1, r2
 801034e:	4618      	mov	r0, r3
 8010350:	f7fd fd0e 	bl	800dd70 <mg_uecc_vli_testBit>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	bf14      	ite	ne
 801035a:	2301      	movne	r3, #1
 801035c:	2300      	moveq	r3, #0
 801035e:	b2db      	uxtb	r3, r3
 8010360:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8010362:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8010366:	3b01      	subs	r3, #1
 8010368:	b29b      	uxth	r3, r3
 801036a:	b21a      	sxth	r2, r3
 801036c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f7fd fcfc 	bl	800dd70 <mg_uecc_vli_testBit>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <mg_uecc_verify+0x39e>
 801037e:	2302      	movs	r3, #2
 8010380:	e000      	b.n	8010384 <mg_uecc_verify+0x3a0>
 8010382:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8010384:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8010388:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801038c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010394:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8010398:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801039c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80103a0:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fd fd5b 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 80103aa:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80103b4:	18d1      	adds	r1, r2, r3
 80103b6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80103ba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fd fd4e 	bl	800de60 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 80103c4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80103c8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fd fc83 	bl	800dcda <mg_uecc_vli_clear>
  z[0] = 1;
 80103d4:	2301      	movs	r3, #1
 80103d6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 80103da:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80103de:	3b02      	subs	r3, #2
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80103e6:	e087      	b.n	80104f8 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 80103e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80103ec:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80103f0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80103f4:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80103f8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80103fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010400:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8010402:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8010406:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801040a:	4611      	mov	r1, r2
 801040c:	4618      	mov	r0, r3
 801040e:	f7fd fcaf 	bl	800dd70 <mg_uecc_vli_testBit>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	bf14      	ite	ne
 8010418:	2301      	movne	r3, #1
 801041a:	2300      	moveq	r3, #0
 801041c:	b2db      	uxtb	r3, r3
 801041e:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8010420:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8010424:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd fca0 	bl	800dd70 <mg_uecc_vli_testBit>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <mg_uecc_verify+0x456>
 8010436:	2302      	movs	r3, #2
 8010438:	e000      	b.n	801043c <mg_uecc_verify+0x458>
 801043a:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801043c:	4323      	orrs	r3, r4
 801043e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8010442:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8010446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801044a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801044e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010452:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8010456:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801045a:	2b00      	cmp	r3, #0
 801045c:	d046      	beq.n	80104ec <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 801045e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010462:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8010466:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801046a:	4618      	mov	r0, r3
 801046c:	f7fd fcf8 	bl	800de60 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8010470:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8010474:	009b      	lsls	r3, r3, #2
 8010476:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801047a:	18d1      	adds	r1, r2, r3
 801047c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010480:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8010484:	4618      	mov	r0, r3
 8010486:	f7fd fceb 	bl	800de60 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 801048a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801048e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8010492:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8010496:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801049a:	f7fe fd6b 	bl	800ef74 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 801049e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80104a2:	1d1c      	adds	r4, r3, #4
 80104a4:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80104a8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80104ac:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80104b0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80104b4:	9300      	str	r3, [sp, #0]
 80104b6:	4623      	mov	r3, r4
 80104b8:	f7fd ff87 	bl	800e3ca <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 80104bc:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 80104c0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80104c4:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80104c8:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80104cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	4623      	mov	r3, r4
 80104d4:	f7fe fdc0 	bl	800f058 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 80104d8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80104dc:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80104e0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80104e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80104e8:	f7fe f8e3 	bl	800e6b2 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 80104ec:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 80104f0:	3b01      	subs	r3, #1
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80104f8:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f6bf af73 	bge.w	80103e8 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8010502:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010506:	1d1a      	adds	r2, r3, #4
 8010508:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801050c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8010510:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8010514:	f7fe f931 	bl	800e77a <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8010518:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801051c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8010520:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8010524:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010528:	f7fe fd24 	bl	800ef74 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 801052c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8010530:	3324      	adds	r3, #36	@ 0x24
 8010532:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8010536:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801053a:	4618      	mov	r0, r3
 801053c:	f7fd fcb7 	bl	800deae <mg_uecc_vli_cmp_unsafe>
 8010540:	4603      	mov	r3, r0
 8010542:	2b01      	cmp	r3, #1
 8010544:	d00b      	beq.n	801055e <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8010546:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801054a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801054e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8010552:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8010556:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801055a:	f7fd fdbb 	bl	800e0d4 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 801055e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8010562:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801056a:	4618      	mov	r0, r3
 801056c:	f7fd fcdb 	bl	800df26 <mg_uecc_vli_equal>
 8010570:	4603      	mov	r3, r0
}
 8010572:	4618      	mov	r0, r3
 8010574:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8010578:	46bd      	mov	sp, r7
 801057a:	bd90      	pop	{r4, r7, pc}

0801057c <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 801057c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010580:	b08f      	sub	sp, #60	@ 0x3c
 8010582:	af00      	add	r7, sp, #0
 8010584:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010586:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010588:	627a      	str	r2, [r7, #36]	@ 0x24
 801058a:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 801058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058e:	2200      	movs	r2, #0
 8010590:	469a      	mov	sl, r3
 8010592:	4693      	mov	fp, r2
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	2200      	movs	r2, #0
 8010598:	61bb      	str	r3, [r7, #24]
 801059a:	61fa      	str	r2, [r7, #28]
 801059c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80105a0:	4603      	mov	r3, r0
 80105a2:	fb03 f20b 	mul.w	r2, r3, fp
 80105a6:	460b      	mov	r3, r1
 80105a8:	fb0a f303 	mul.w	r3, sl, r3
 80105ac:	4413      	add	r3, r2
 80105ae:	4602      	mov	r2, r0
 80105b0:	fbaa 4502 	umull	r4, r5, sl, r2
 80105b4:	442b      	add	r3, r5
 80105b6:	461d      	mov	r5, r3
 80105b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ba:	2200      	movs	r2, #0
 80105bc:	613b      	str	r3, [r7, #16]
 80105be:	617a      	str	r2, [r7, #20]
 80105c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80105c4:	460b      	mov	r3, r1
 80105c6:	eb14 0803 	adds.w	r8, r4, r3
 80105ca:	4613      	mov	r3, r2
 80105cc:	eb45 0903 	adc.w	r9, r5, r3
 80105d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2200      	movs	r2, #0
 80105d6:	60bb      	str	r3, [r7, #8]
 80105d8:	60fa      	str	r2, [r7, #12]
 80105da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80105de:	460b      	mov	r3, r1
 80105e0:	eb18 0303 	adds.w	r3, r8, r3
 80105e4:	603b      	str	r3, [r7, #0]
 80105e6:	4613      	mov	r3, r2
 80105e8:	eb49 0303 	adc.w	r3, r9, r3
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80105f2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 80105f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80105fa:	f04f 0200 	mov.w	r2, #0
 80105fe:	f04f 0300 	mov.w	r3, #0
 8010602:	000a      	movs	r2, r1
 8010604:	2300      	movs	r3, #0
 8010606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010608:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 801060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801060c:	4618      	mov	r0, r3
 801060e:	373c      	adds	r7, #60	@ 0x3c
 8010610:	46bd      	mov	sp, r7
 8010612:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010616:	4770      	bx	lr

08010618 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8010618:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801061c:	b08b      	sub	sp, #44	@ 0x2c
 801061e:	af00      	add	r7, sp, #0
 8010620:	61f8      	str	r0, [r7, #28]
 8010622:	61b9      	str	r1, [r7, #24]
 8010624:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2200      	movs	r2, #0
 801062c:	60bb      	str	r3, [r7, #8]
 801062e:	60fa      	str	r2, [r7, #12]
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	2200      	movs	r2, #0
 8010634:	469a      	mov	sl, r3
 8010636:	4693      	mov	fp, r2
 8010638:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801063c:	460b      	mov	r3, r1
 801063e:	eb13 040a 	adds.w	r4, r3, sl
 8010642:	4613      	mov	r3, r2
 8010644:	eb43 050b 	adc.w	r5, r3, fp
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	2200      	movs	r2, #0
 801064c:	4698      	mov	r8, r3
 801064e:	4691      	mov	r9, r2
 8010650:	eb14 0308 	adds.w	r3, r4, r8
 8010654:	603b      	str	r3, [r7, #0]
 8010656:	eb45 0309 	adc.w	r3, r5, r9
 801065a:	607b      	str	r3, [r7, #4]
 801065c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010660:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8010664:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010668:	f04f 0200 	mov.w	r2, #0
 801066c:	f04f 0300 	mov.w	r3, #0
 8010670:	000a      	movs	r2, r1
 8010672:	2300      	movs	r3, #0
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8010678:	6a3b      	ldr	r3, [r7, #32]
}
 801067a:	4618      	mov	r0, r3
 801067c:	372c      	adds	r7, #44	@ 0x2c
 801067e:	46bd      	mov	sp, r7
 8010680:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010684:	4770      	bx	lr

08010686 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 8010686:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 8010692:	6879      	ldr	r1, [r7, #4]
 8010694:	6809      	ldr	r1, [r1, #0]
 8010696:	2000      	movs	r0, #0
 8010698:	460c      	mov	r4, r1
 801069a:	4605      	mov	r5, r0
 801069c:	6839      	ldr	r1, [r7, #0]
 801069e:	2000      	movs	r0, #0
 80106a0:	460a      	mov	r2, r1
 80106a2:	4603      	mov	r3, r0
 80106a4:	eb14 0802 	adds.w	r8, r4, r2
 80106a8:	eb45 0903 	adc.w	r9, r5, r3
 80106ac:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 80106b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106b4:	f04f 0200 	mov.w	r2, #0
 80106b8:	f04f 0300 	mov.w	r3, #0
 80106bc:	000a      	movs	r2, r1
 80106be:	2300      	movs	r3, #0
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80106c4:	68bb      	ldr	r3, [r7, #8]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80106d0:	4770      	bx	lr

080106d2 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 80106d2:	b590      	push	{r4, r7, lr}
 80106d4:	b085      	sub	sp, #20
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	331c      	adds	r3, #28
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	0fda      	lsrs	r2, r3, #31
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	4313      	orrs	r3, r2
 80106ea:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	331c      	adds	r3, #28
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	331c      	adds	r3, #28
 80106f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80106fa:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	4613      	mov	r3, r2
 8010700:	00db      	lsls	r3, r3, #3
 8010702:	4413      	add	r3, r2
 8010704:	005b      	lsls	r3, r3, #1
 8010706:	4413      	add	r3, r2
 8010708:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 801070a:	2300      	movs	r3, #0
 801070c:	60fb      	str	r3, [r7, #12]
 801070e:	e012      	b.n	8010736 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	4413      	add	r3, r2
 8010718:	6819      	ldr	r1, [r3, #0]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	18d4      	adds	r4, r2, r3
 8010722:	f107 0308 	add.w	r3, r7, #8
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff ffad 	bl	8010686 <adc0>
 801072c:	4603      	mov	r3, r0
 801072e:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	3301      	adds	r3, #1
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b07      	cmp	r3, #7
 801073a:	d9e9      	bls.n	8010710 <propagate+0x3e>
  }
}
 801073c:	bf00      	nop
 801073e:	bf00      	nop
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	bd90      	pop	{r4, r7, pc}

08010746 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8010746:	b590      	push	{r4, r7, lr}
 8010748:	b087      	sub	sp, #28
 801074a:	af00      	add	r7, sp, #0
 801074c:	60f8      	str	r0, [r7, #12]
 801074e:	60b9      	str	r1, [r7, #8]
 8010750:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 8010756:	2300      	movs	r3, #0
 8010758:	617b      	str	r3, [r7, #20]
 801075a:	e018      	b.n	801078e <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	4413      	add	r3, r2
 8010764:	6819      	ldr	r1, [r3, #0]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	6818      	ldr	r0, [r3, #0]
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	18d4      	adds	r4, r2, r3
 8010778:	f107 0310 	add.w	r3, r7, #16
 801077c:	4602      	mov	r2, r0
 801077e:	4618      	mov	r0, r3
 8010780:	f7ff ff4a 	bl	8010618 <adc>
 8010784:	4603      	mov	r3, r0
 8010786:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	3301      	adds	r3, #1
 801078c:	617b      	str	r3, [r7, #20]
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	2b07      	cmp	r3, #7
 8010792:	d9e3      	bls.n	801075c <add+0x16>
  }
  propagate(out, carry);
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	4619      	mov	r1, r3
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f7ff ff9a 	bl	80106d2 <propagate>
}
 801079e:	bf00      	nop
 80107a0:	371c      	adds	r7, #28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd90      	pop	{r4, r7, pc}

080107a6 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80107a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107aa:	b08a      	sub	sp, #40	@ 0x28
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6178      	str	r0, [r7, #20]
 80107b0:	6139      	str	r1, [r7, #16]
 80107b2:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 80107b4:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 80107b8:	f04f 33ff 	mov.w	r3, #4294967295
 80107bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80107c0:	2300      	movs	r3, #0
 80107c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80107c4:	e032      	b.n	801082c <sub+0x86>
    carry = carry + a[i] - b[i];
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	4413      	add	r3, r2
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2200      	movs	r2, #0
 80107d2:	4698      	mov	r8, r3
 80107d4:	4691      	mov	r9, r2
 80107d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107da:	eb18 0402 	adds.w	r4, r8, r2
 80107de:	eb49 0503 	adc.w	r5, r9, r3
 80107e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	4413      	add	r3, r2
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	2200      	movs	r2, #0
 80107ee:	469a      	mov	sl, r3
 80107f0:	4693      	mov	fp, r2
 80107f2:	ebb4 030a 	subs.w	r3, r4, sl
 80107f6:	603b      	str	r3, [r7, #0]
 80107f8:	eb65 030b 	sbc.w	r3, r5, fp
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010802:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8010806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	697a      	ldr	r2, [r7, #20]
 801080c:	4413      	add	r3, r2
 801080e:	69ba      	ldr	r2, [r7, #24]
 8010810:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8010812:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010816:	f04f 0200 	mov.w	r2, #0
 801081a:	f04f 0300 	mov.w	r3, #0
 801081e:	000a      	movs	r2, r1
 8010820:	17cb      	asrs	r3, r1, #31
 8010822:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8010826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010828:	3301      	adds	r3, #1
 801082a:	627b      	str	r3, [r7, #36]	@ 0x24
 801082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082e:	2b07      	cmp	r3, #7
 8010830:	d9c9      	bls.n	80107c6 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	3301      	adds	r3, #1
 8010836:	4619      	mov	r1, r3
 8010838:	6978      	ldr	r0, [r7, #20]
 801083a:	f7ff ff4a 	bl	80106d2 <propagate>
}
 801083e:	bf00      	nop
 8010840:	3728      	adds	r7, #40	@ 0x28
 8010842:	46bd      	mov	sp, r7
 8010844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010848 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8010848:	b5b0      	push	{r4, r5, r7, lr}
 801084a:	b09a      	sub	sp, #104	@ 0x68
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 8010856:	f107 031c 	add.w	r3, r7, #28
 801085a:	2240      	movs	r2, #64	@ 0x40
 801085c:	2100      	movs	r1, #0
 801085e:	4618      	mov	r0, r3
 8010860:	f018 ff30 	bl	80296c4 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8010864:	2300      	movs	r3, #0
 8010866:	667b      	str	r3, [r7, #100]	@ 0x64
 8010868:	e03a      	b.n	80108e0 <mul+0x98>
    limb_t mand = b[i];
 801086a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	4413      	add	r3, r2
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 801087a:	2300      	movs	r3, #0
 801087c:	663b      	str	r3, [r7, #96]	@ 0x60
 801087e:	e020      	b.n	80108c2 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 8010880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	4413      	add	r3, r2
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 801088c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801088e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010890:	4413      	add	r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	3368      	adds	r3, #104	@ 0x68
 8010896:	443b      	add	r3, r7
 8010898:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801089c:	697d      	ldr	r5, [r7, #20]
 801089e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80108a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108a2:	18d4      	adds	r4, r2, r3
 80108a4:	f107 0018 	add.w	r0, r7, #24
 80108a8:	462b      	mov	r3, r5
 80108aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80108ac:	f7ff fe66 	bl	801057c <umaal>
 80108b0:	4602      	mov	r2, r0
 80108b2:	00a3      	lsls	r3, r4, #2
 80108b4:	3368      	adds	r3, #104	@ 0x68
 80108b6:	443b      	add	r3, r7
 80108b8:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 80108bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108be:	3301      	adds	r3, #1
 80108c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80108c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108c4:	2b07      	cmp	r3, #7
 80108c6:	d9db      	bls.n	8010880 <mul+0x38>
    }
    accum[i + j] = carry2;
 80108c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80108ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108cc:	4413      	add	r3, r2
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	3368      	adds	r3, #104	@ 0x68
 80108d4:	443b      	add	r3, r7
 80108d6:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 80108da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108dc:	3301      	adds	r3, #1
 80108de:	667b      	str	r3, [r7, #100]	@ 0x64
 80108e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d3c0      	bcc.n	801086a <mul+0x22>
  }

  carry2 = 0;
 80108e8:	2300      	movs	r3, #0
 80108ea:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 80108ec:	2300      	movs	r3, #0
 80108ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80108f0:	e01b      	b.n	801092a <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 80108f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	3368      	adds	r3, #104	@ 0x68
 80108f8:	443b      	add	r3, r7
 80108fa:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80108fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010900:	3308      	adds	r3, #8
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	3368      	adds	r3, #104	@ 0x68
 8010906:	443b      	add	r3, r7
 8010908:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801090c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	18d4      	adds	r4, r2, r3
 8010914:	f107 0018 	add.w	r0, r7, #24
 8010918:	462b      	mov	r3, r5
 801091a:	2226      	movs	r2, #38	@ 0x26
 801091c:	f7ff fe2e 	bl	801057c <umaal>
 8010920:	4603      	mov	r3, r0
 8010922:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8010924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010926:	3301      	adds	r3, #1
 8010928:	663b      	str	r3, [r7, #96]	@ 0x60
 801092a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801092c:	2b07      	cmp	r3, #7
 801092e:	d9e0      	bls.n	80108f2 <mul+0xaa>
  }
  propagate(out, carry2);
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	4619      	mov	r1, r3
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f7ff fecc 	bl	80106d2 <propagate>
}
 801093a:	bf00      	nop
 801093c:	3768      	adds	r7, #104	@ 0x68
 801093e:	46bd      	mov	sp, r7
 8010940:	bdb0      	pop	{r4, r5, r7, pc}

08010942 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 8010942:	b580      	push	{r7, lr}
 8010944:	b082      	sub	sp, #8
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 801094c:	2308      	movs	r3, #8
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	6839      	ldr	r1, [r7, #0]
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff ff78 	bl	8010848 <mul>
}
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 801096a:	2308      	movs	r3, #8
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff ff69 	bl	8010848 <mul>
}
 8010976:	bf00      	nop
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <sqr1>:
static void sqr1(mg_fe a) {
 801097e:	b580      	push	{r7, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 8010986:	6879      	ldr	r1, [r7, #4]
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f7ff ffe9 	bl	8010960 <mul1>
}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 8010996:	b480      	push	{r7}
 8010998:	b087      	sub	sp, #28
 801099a:	af00      	add	r7, sp, #0
 801099c:	60f8      	str	r0, [r7, #12]
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80109a2:	2300      	movs	r3, #0
 80109a4:	617b      	str	r3, [r7, #20]
 80109a6:	e028      	b.n	80109fa <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	4413      	add	r3, r2
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	68b9      	ldr	r1, [r7, #8]
 80109b8:	440b      	add	r3, r1
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4053      	eors	r3, r2
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	4013      	ands	r3, r2
 80109c2:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	4413      	add	r3, r2
 80109cc:	6819      	ldr	r1, [r3, #0]
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4413      	add	r3, r2
 80109d6:	693a      	ldr	r2, [r7, #16]
 80109d8:	404a      	eors	r2, r1
 80109da:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	68ba      	ldr	r2, [r7, #8]
 80109e2:	4413      	add	r3, r2
 80109e4:	6819      	ldr	r1, [r3, #0]
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	4413      	add	r3, r2
 80109ee:	693a      	ldr	r2, [r7, #16]
 80109f0:	404a      	eors	r2, r1
 80109f2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	3301      	adds	r3, #1
 80109f8:	617b      	str	r3, [r7, #20]
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	2b0f      	cmp	r3, #15
 80109fe:	d9d3      	bls.n	80109a8 <condswap+0x12>
  }
}
 8010a00:	bf00      	nop
 8010a02:	bf00      	nop
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 8010a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a12:	b08b      	sub	sp, #44	@ 0x2c
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8010a18:	2313      	movs	r3, #19
 8010a1a:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a20:	e012      	b.n	8010a48 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 8010a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	4413      	add	r3, r2
 8010a2a:	6819      	ldr	r1, [r3, #0]
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	18d6      	adds	r6, r2, r3
 8010a34:	f107 0314 	add.w	r3, r7, #20
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7ff fe24 	bl	8010686 <adc0>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a44:	3301      	adds	r3, #1
 8010a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4a:	2b07      	cmp	r3, #7
 8010a4c:	d9e9      	bls.n	8010a22 <canon+0x14>
  }
  propagate(x, carry0);
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	4619      	mov	r1, r3
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	f7ff fe3d 	bl	80106d2 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 8010a58:	f06f 0212 	mvn.w	r2, #18
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a60:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 8010a68:	2300      	movs	r3, #0
 8010a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a6c:	e02a      	b.n	8010ac4 <canon+0xb6>
    carry += x[i];
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	4413      	add	r3, r2
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	4698      	mov	r8, r3
 8010a7c:	4691      	mov	r9, r2
 8010a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a82:	eb12 0108 	adds.w	r1, r2, r8
 8010a86:	6039      	str	r1, [r7, #0]
 8010a88:	eb43 0309 	adc.w	r3, r3, r9
 8010a8c:	607b      	str	r3, [r7, #4]
 8010a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 8010a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	69ba      	ldr	r2, [r7, #24]
 8010aa0:	601a      	str	r2, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	6a3a      	ldr	r2, [r7, #32]
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 8010aaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010aae:	f04f 0200 	mov.w	r2, #0
 8010ab2:	f04f 0300 	mov.w	r3, #0
 8010ab6:	000a      	movs	r2, r1
 8010ab8:	17cb      	asrs	r3, r1, #31
 8010aba:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8010abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac6:	2b07      	cmp	r3, #7
 8010ac8:	d9d1      	bls.n	8010a6e <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	2200      	movs	r2, #0
 8010ace:	461c      	mov	r4, r3
 8010ad0:	4615      	mov	r5, r2
 8010ad2:	f114 3aff 	adds.w	sl, r4, #4294967295
 8010ad6:	f145 3bff 	adc.w	fp, r5, #4294967295
 8010ada:	f04f 0200 	mov.w	r2, #0
 8010ade:	f04f 0300 	mov.w	r3, #0
 8010ae2:	465a      	mov	r2, fp
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	4613      	mov	r3, r2
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	372c      	adds	r7, #44	@ 0x2c
 8010aec:	46bd      	mov	sp, r7
 8010aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010af4 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b088      	sub	sp, #32
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	61fb      	str	r3, [r7, #28]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	3320      	adds	r3, #32
 8010b04:	61bb      	str	r3, [r7, #24]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	3340      	adds	r3, #64	@ 0x40
 8010b0a:	617b      	str	r3, [r7, #20]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	3360      	adds	r3, #96	@ 0x60
 8010b10:	613b      	str	r3, [r7, #16]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	3380      	adds	r3, #128	@ 0x80
 8010b16:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8010b18:	69ba      	ldr	r2, [r7, #24]
 8010b1a:	69f9      	ldr	r1, [r7, #28]
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f7ff fe12 	bl	8010746 <add>
  sub(z2, x2, z2);                                 // z2 = B
 8010b22:	69ba      	ldr	r2, [r7, #24]
 8010b24:	69f9      	ldr	r1, [r7, #28]
 8010b26:	69b8      	ldr	r0, [r7, #24]
 8010b28:	f7ff fe3d 	bl	80107a6 <sub>
  add(x2, x3, z3);                                 // x2 = C
 8010b2c:	693a      	ldr	r2, [r7, #16]
 8010b2e:	6979      	ldr	r1, [r7, #20]
 8010b30:	69f8      	ldr	r0, [r7, #28]
 8010b32:	f7ff fe08 	bl	8010746 <add>
  sub(z3, x3, z3);                                 // z3 = D
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	6979      	ldr	r1, [r7, #20]
 8010b3a:	6938      	ldr	r0, [r7, #16]
 8010b3c:	f7ff fe33 	bl	80107a6 <sub>
  mul1(z3, t1);                                    // z3 = DA
 8010b40:	68f9      	ldr	r1, [r7, #12]
 8010b42:	6938      	ldr	r0, [r7, #16]
 8010b44:	f7ff ff0c 	bl	8010960 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8010b48:	69b9      	ldr	r1, [r7, #24]
 8010b4a:	69f8      	ldr	r0, [r7, #28]
 8010b4c:	f7ff ff08 	bl	8010960 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 8010b50:	69fa      	ldr	r2, [r7, #28]
 8010b52:	6939      	ldr	r1, [r7, #16]
 8010b54:	6978      	ldr	r0, [r7, #20]
 8010b56:	f7ff fdf6 	bl	8010746 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 8010b5a:	69fa      	ldr	r2, [r7, #28]
 8010b5c:	6939      	ldr	r1, [r7, #16]
 8010b5e:	6938      	ldr	r0, [r7, #16]
 8010b60:	f7ff fe21 	bl	80107a6 <sub>
  sqr1(t1);                                        // t1 = AA
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f7ff ff0a 	bl	801097e <sqr1>
  sqr1(z2);                                        // z2 = BB
 8010b6a:	69b8      	ldr	r0, [r7, #24]
 8010b6c:	f7ff ff07 	bl	801097e <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8010b70:	69ba      	ldr	r2, [r7, #24]
 8010b72:	68f9      	ldr	r1, [r7, #12]
 8010b74:	69f8      	ldr	r0, [r7, #28]
 8010b76:	f7ff fe16 	bl	80107a6 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	4a06      	ldr	r2, [pc, #24]	@ (8010b98 <ladder_part1+0xa4>)
 8010b7e:	69f9      	ldr	r1, [r7, #28]
 8010b80:	69b8      	ldr	r0, [r7, #24]
 8010b82:	f7ff fe61 	bl	8010848 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	69b9      	ldr	r1, [r7, #24]
 8010b8a:	69b8      	ldr	r0, [r7, #24]
 8010b8c:	f7ff fddb 	bl	8010746 <add>
}
 8010b90:	bf00      	nop
 8010b92:	3720      	adds	r7, #32
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	08030ae8 	.word	0x08030ae8

08010b9c <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	61fb      	str	r3, [r7, #28]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3320      	adds	r3, #32
 8010bae:	61bb      	str	r3, [r7, #24]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3340      	adds	r3, #64	@ 0x40
 8010bb4:	617b      	str	r3, [r7, #20]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3360      	adds	r3, #96	@ 0x60
 8010bba:	613b      	str	r3, [r7, #16]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3380      	adds	r3, #128	@ 0x80
 8010bc0:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 8010bc2:	6938      	ldr	r0, [r7, #16]
 8010bc4:	f7ff fedb 	bl	801097e <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	6938      	ldr	r0, [r7, #16]
 8010bcc:	f7ff fec8 	bl	8010960 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8010bd0:	6978      	ldr	r0, [r7, #20]
 8010bd2:	f7ff fed4 	bl	801097e <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 8010bd6:	69f9      	ldr	r1, [r7, #28]
 8010bd8:	69b8      	ldr	r0, [r7, #24]
 8010bda:	f7ff fec1 	bl	8010960 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 8010bde:	69fa      	ldr	r2, [r7, #28]
 8010be0:	68f9      	ldr	r1, [r7, #12]
 8010be2:	69f8      	ldr	r0, [r7, #28]
 8010be4:	f7ff fddf 	bl	80107a6 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8010be8:	68f9      	ldr	r1, [r7, #12]
 8010bea:	69f8      	ldr	r0, [r7, #28]
 8010bec:	f7ff feb8 	bl	8010960 <mul1>
}
 8010bf0:	bf00      	nop
 8010bf2:	3720      	adds	r7, #32
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b094      	sub	sp, #80	@ 0x50
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	3340      	adds	r3, #64	@ 0x40
 8010c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	3360      	adds	r3, #96	@ 0x60
 8010c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 8010c1a:	2280      	movs	r2, #128	@ 0x80
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	f018 fd50 	bl	80296c4 <memset>
  x2[0] = z3[0] = 1;
 8010c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c26:	2201      	movs	r2, #1
 8010c28:	601a      	str	r2, [r3, #0]
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c30:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010c32:	2300      	movs	r3, #0
 8010c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c36:	e031      	b.n	8010c9c <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8010c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	3303      	adds	r3, #3
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	4413      	add	r3, r2
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	061a      	lsls	r2, r3, #24
 8010c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	3302      	adds	r3, #2
 8010c4c:	6879      	ldr	r1, [r7, #4]
 8010c4e:	440b      	add	r3, r1
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	041b      	lsls	r3, r3, #16
 8010c54:	431a      	orrs	r2, r3
 8010c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	440b      	add	r3, r1
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	021b      	lsls	r3, r3, #8
 8010c64:	4313      	orrs	r3, r2
 8010c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c68:	0092      	lsls	r2, r2, #2
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	440a      	add	r2, r1
 8010c70:	7812      	ldrb	r2, [r2, #0]
 8010c72:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 8010c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	3350      	adds	r3, #80	@ 0x50
 8010c7a:	443b      	add	r3, r7
 8010c7c:	f843 2c3c 	str.w	r2, [r3, #-60]
 8010c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c86:	441a      	add	r2, r3
 8010c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	3350      	adds	r3, #80	@ 0x50
 8010c8e:	443b      	add	r3, r7
 8010c90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010c94:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c98:	3301      	adds	r3, #1
 8010c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c9e:	2b07      	cmp	r3, #7
 8010ca0:	ddca      	ble.n	8010c38 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 8010ca2:	23ff      	movs	r3, #255	@ 0xff
 8010ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ca6:	e049      	b.n	8010d3c <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8010ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	da00      	bge.n	8010cb0 <x25519_core+0xb8>
 8010cae:	3307      	adds	r3, #7
 8010cb0:	10db      	asrs	r3, r3, #3
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d01a      	beq.n	8010cfa <x25519_core+0x102>
      if (i / 8 == 0) {
 8010cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cc6:	3307      	adds	r3, #7
 8010cc8:	2b0e      	cmp	r3, #14
 8010cca:	d806      	bhi.n	8010cda <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8010ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010cd0:	f023 0307 	bic.w	r3, r3, #7
 8010cd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010cd8:	e00f      	b.n	8010cfa <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8010cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cdc:	3bf8      	subs	r3, #248	@ 0xf8
 8010cde:	2b07      	cmp	r3, #7
 8010ce0:	d80b      	bhi.n	8010cfa <x25519_core+0x102>
        bytei &= 0x7F;
 8010ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8010cee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8010cfa:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d00:	f003 0307 	and.w	r3, r3, #7
 8010d04:	fa42 f303 	asr.w	r3, r2, r3
 8010d08:	f003 0301 	and.w	r3, r3, #1
 8010d0c:	425b      	negs	r3, r3
 8010d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 8010d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d14:	4053      	eors	r3, r2
 8010d16:	461a      	mov	r2, r3
 8010d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d1a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010d1c:	f7ff fe3b 	bl	8010996 <condswap>
    swap = doswap;
 8010d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d22:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7ff fee5 	bl	8010af4 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8010d2a:	f107 0314 	add.w	r3, r7, #20
 8010d2e:	4619      	mov	r1, r3
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f7ff ff33 	bl	8010b9c <ladder_part2>
  for (i = 255; i >= 0; i--) {
 8010d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dab2      	bge.n	8010ca8 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 8010d42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d46:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010d48:	f7ff fe25 	bl	8010996 <condswap>
}
 8010d4c:	bf00      	nop
 8010d4e:	3750      	adds	r7, #80	@ 0x50
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b0be      	sub	sp, #248	@ 0xf8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 8010d62:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	68b9      	ldr	r1, [r7, #8]
 8010d6c:	f7ff ff44 	bl	8010bf8 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8010d70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010d74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8010d78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010d7c:	3320      	adds	r3, #32
 8010d7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 8010d82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010d86:	3360      	adds	r3, #96	@ 0x60
 8010d88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8010d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8010d94:	2300      	movs	r3, #0
 8010d96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010d9a:	e043      	b.n	8010e24 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8010d9c:	4952      	ldr	r1, [pc, #328]	@ (8010ee8 <mg_tls_x25519+0x194>)
 8010d9e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010da2:	4613      	mov	r3, r2
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4413      	add	r3, r2
 8010da8:	440b      	add	r3, r1
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010db0:	015b      	lsls	r3, r3, #5
 8010db2:	4413      	add	r3, r2
 8010db4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8010db8:	494b      	ldr	r1, [pc, #300]	@ (8010ee8 <mg_tls_x25519+0x194>)
 8010dba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	4413      	add	r3, r2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3302      	adds	r3, #2
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010dce:	e00e      	b.n	8010dee <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8010dd0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8010dd4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8010dd8:	f7ff fdb3 	bl	8010942 <sqr>
      prev = a;
 8010ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010de0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8010de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010de8:	3b01      	subs	r3, #1
 8010dea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	dcec      	bgt.n	8010dd0 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8010df6:	493c      	ldr	r1, [pc, #240]	@ (8010ee8 <mg_tls_x25519+0x194>)
 8010df8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	4413      	add	r3, r2
 8010e02:	440b      	add	r3, r1
 8010e04:	3301      	adds	r3, #1
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010e0c:	015b      	lsls	r3, r3, #5
 8010e0e:	4413      	add	r3, r2
 8010e10:	4619      	mov	r1, r3
 8010e12:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8010e16:	f7ff fda3 	bl	8010960 <mul1>
  for (i = 0; i < 13; i++) {
 8010e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e1e:	3301      	adds	r3, #1
 8010e20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e28:	2b0c      	cmp	r3, #12
 8010e2a:	ddb7      	ble.n	8010d9c <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8010e2c:	f107 0014 	add.w	r0, r7, #20
 8010e30:	2308      	movs	r3, #8
 8010e32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010e36:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8010e3a:	f7ff fd05 	bl	8010848 <mul>
  ret = (int) canon(out_limbs);
 8010e3e:	f107 0314 	add.w	r3, r7, #20
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7ff fde3 	bl	8010a0e <canon>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d102      	bne.n	8010e5a <mg_tls_x25519+0x106>
 8010e54:	2300      	movs	r3, #0
 8010e56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010e60:	e038      	b.n	8010ed4 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 8010e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	33f8      	adds	r3, #248	@ 0xf8
 8010e6a:	443b      	add	r3, r7
 8010e6c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8010e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8010e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	4413      	add	r3, r2
 8010e80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010e84:	b2d2      	uxtb	r2, r2
 8010e86:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8010e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e8c:	0a19      	lsrs	r1, r3, #8
 8010e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	3301      	adds	r3, #1
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	4413      	add	r3, r2
 8010e9a:	b2ca      	uxtb	r2, r1
 8010e9c:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8010e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ea2:	0c19      	lsrs	r1, r3, #16
 8010ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	3302      	adds	r3, #2
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	4413      	add	r3, r2
 8010eb0:	b2ca      	uxtb	r2, r1
 8010eb2:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8010eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010eb8:	0e19      	lsrs	r1, r3, #24
 8010eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	3303      	adds	r3, #3
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	b2ca      	uxtb	r2, r1
 8010ec8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8010eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ece:	3301      	adds	r3, #1
 8010ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ed8:	2b07      	cmp	r3, #7
 8010eda:	ddc2      	ble.n	8010e62 <mg_tls_x25519+0x10e>
  }
  return ret;
 8010edc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	37f8      	adds	r7, #248	@ 0xf8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	08030d0c 	.word	0x08030d0c

08010eec <urlparse>:
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
}

static struct url urlparse(const char *url) {
 8010eec:	b5b0      	push	{r4, r5, r7, lr}
 8010eee:	b08a      	sub	sp, #40	@ 0x28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8010ef6:	f107 0308 	add.w	r3, r7, #8
 8010efa:	221c      	movs	r2, #28
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f018 fbe0 	bl	80296c4 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8010f04:	2300      	movs	r3, #0
 8010f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f08:	e05b      	b.n	8010fc2 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8010f0a:	683a      	ldr	r2, [r7, #0]
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	4413      	add	r3, r2
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f14:	d112      	bne.n	8010f3c <urlparse+0x50>
 8010f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d00f      	beq.n	8010f3c <urlparse+0x50>
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d10c      	bne.n	8010f3c <urlparse+0x50>
 8010f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f24:	3b01      	subs	r3, #1
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	4413      	add	r3, r2
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f2e:	d105      	bne.n	8010f3c <urlparse+0x50>
      u.host = i + 1;
 8010f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f32:	3301      	adds	r3, #1
 8010f34:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	61bb      	str	r3, [r7, #24]
 8010f3a:	e03f      	b.n	8010fbc <urlparse+0xd0>
    } else if (url[i] == ']') {
 8010f3c:	683a      	ldr	r2, [r7, #0]
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f40:	4413      	add	r3, r2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b5d      	cmp	r3, #93	@ 0x5d
 8010f46:	d102      	bne.n	8010f4e <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8010f48:	2300      	movs	r3, #0
 8010f4a:	61bb      	str	r3, [r7, #24]
 8010f4c:	e036      	b.n	8010fbc <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f52:	4413      	add	r3, r2
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	2b3a      	cmp	r3, #58	@ 0x3a
 8010f58:	d109      	bne.n	8010f6e <urlparse+0x82>
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d106      	bne.n	8010f6e <urlparse+0x82>
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d103      	bne.n	8010f6e <urlparse+0x82>
      u.port = i + 1;
 8010f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f68:	3301      	adds	r3, #1
 8010f6a:	61bb      	str	r3, [r7, #24]
 8010f6c:	e026      	b.n	8010fbc <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8010f6e:	683a      	ldr	r2, [r7, #0]
 8010f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f72:	4413      	add	r3, r2
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2b40      	cmp	r3, #64	@ 0x40
 8010f78:	d112      	bne.n	8010fa0 <urlparse+0xb4>
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10f      	bne.n	8010fa0 <urlparse+0xb4>
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10c      	bne.n	8010fa0 <urlparse+0xb4>
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d109      	bne.n	8010fa0 <urlparse+0xb4>
      u.user = u.host;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8010f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f96:	3301      	adds	r3, #1
 8010f98:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	e00d      	b.n	8010fbc <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8010fa0:	683a      	ldr	r2, [r7, #0]
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa4:	4413      	add	r3, r2
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	2b2f      	cmp	r3, #47	@ 0x2f
 8010faa:	d107      	bne.n	8010fbc <urlparse+0xd0>
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d004      	beq.n	8010fbc <urlparse+0xd0>
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <urlparse+0xd0>
      u.uri = i;
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fba:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fc2:	683a      	ldr	r2, [r7, #0]
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc6:	4413      	add	r3, r2
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d19d      	bne.n	8010f0a <urlparse+0x1e>
    }
  }
  u.end = i;
 8010fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd0:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	461d      	mov	r5, r3
 8010fd6:	f107 0408 	add.w	r4, r7, #8
 8010fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010fe2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	3728      	adds	r7, #40	@ 0x28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bdb0      	pop	{r4, r5, r7, pc}

08010fee <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b08c      	sub	sp, #48	@ 0x30
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
 8010ff6:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8010ff8:	f107 0310 	add.w	r3, r7, #16
 8010ffc:	6839      	ldr	r1, [r7, #0]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff ff74 	bl	8010eec <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8011004:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8011006:	2b00      	cmp	r3, #0
 8011008:	d004      	beq.n	8011014 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 801100a:	6a3a      	ldr	r2, [r7, #32]
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8011010:	3b01      	subs	r3, #1
 8011012:	e009      	b.n	8011028 <mg_url_host+0x3a>
 8011014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8011016:	2b00      	cmp	r3, #0
 8011018:	d003      	beq.n	8011022 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 801101a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801101c:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	e002      	b.n	8011028 <mg_url_host+0x3a>
 8011022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8011028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	683a      	ldr	r2, [r7, #0]
 801102e:	18d1      	adds	r1, r2, r3
 8011030:	f107 0308 	add.w	r3, r7, #8
 8011034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011036:	4618      	mov	r0, r3
 8011038:	f7f7 fd88 	bl	8008b4c <mg_str_n>
  return s;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	461a      	mov	r2, r3
 8011040:	f107 0308 	add.w	r3, r7, #8
 8011044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011048:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	3730      	adds	r7, #48	@ 0x30
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8011054:	b580      	push	{r7, lr}
 8011056:	b08a      	sub	sp, #40	@ 0x28
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801105c:	f107 0308 	add.w	r3, r7, #8
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff ff42 	bl	8010eec <urlparse>
  unsigned short port = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801106c:	2205      	movs	r2, #5
 801106e:	4925      	ldr	r1, [pc, #148]	@ (8011104 <mg_url_port+0xb0>)
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f018 fb3c 	bl	80296ee <strncmp>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d007      	beq.n	801108c <mg_url_port+0x38>
 801107c:	2203      	movs	r2, #3
 801107e:	4922      	ldr	r1, [pc, #136]	@ (8011108 <mg_url_port+0xb4>)
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f018 fb34 	bl	80296ee <strncmp>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d101      	bne.n	8011090 <mg_url_port+0x3c>
 801108c:	2350      	movs	r3, #80	@ 0x50
 801108e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8011090:	2204      	movs	r2, #4
 8011092:	491e      	ldr	r1, [pc, #120]	@ (801110c <mg_url_port+0xb8>)
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f018 fb2a 	bl	80296ee <strncmp>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d007      	beq.n	80110b0 <mg_url_port+0x5c>
 80110a0:	2206      	movs	r2, #6
 80110a2:	491b      	ldr	r1, [pc, #108]	@ (8011110 <mg_url_port+0xbc>)
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f018 fb22 	bl	80296ee <strncmp>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d102      	bne.n	80110b6 <mg_url_port+0x62>
    port = 443;
 80110b0:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80110b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80110b6:	2205      	movs	r2, #5
 80110b8:	4916      	ldr	r1, [pc, #88]	@ (8011114 <mg_url_port+0xc0>)
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f018 fb17 	bl	80296ee <strncmp>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d102      	bne.n	80110cc <mg_url_port+0x78>
 80110c6:	f240 735b 	movw	r3, #1883	@ 0x75b
 80110ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80110cc:	2206      	movs	r2, #6
 80110ce:	4912      	ldr	r1, [pc, #72]	@ (8011118 <mg_url_port+0xc4>)
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f018 fb0c 	bl	80296ee <strncmp>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d102      	bne.n	80110e2 <mg_url_port+0x8e>
 80110dc:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 80110e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d007      	beq.n	80110f8 <mg_url_port+0xa4>
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	4413      	add	r3, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f017 fa60 	bl	80285b4 <atoi>
 80110f4:	4603      	mov	r3, r0
 80110f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 80110f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3728      	adds	r7, #40	@ 0x28
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	0802d648 	.word	0x0802d648
 8011108:	0802d650 	.word	0x0802d650
 801110c:	0802d618 	.word	0x0802d618
 8011110:	0802d620 	.word	0x0802d620
 8011114:	0802d654 	.word	0x0802d654
 8011118:	0802d628 	.word	0x0802d628

0801111c <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00a      	beq.n	8011142 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 801112c:	e004      	b.n	8011138 <mg_bzero+0x1c>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	701a      	strb	r2, [r3, #0]
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	1e5a      	subs	r2, r3, #1
 801113c:	603a      	str	r2, [r7, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1f5      	bne.n	801112e <mg_bzero+0x12>
  }
}
 8011142:	bf00      	nop
 8011144:	370c      	adds	r7, #12
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
	...

08011150 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 ff0f 	bl	8011f80 <mg_random>
  for (i = 0; i < len; i++) {
 8011162:	2300      	movs	r3, #0
 8011164:	60fb      	str	r3, [r7, #12]
 8011166:	e02d      	b.n	80111c4 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	4413      	add	r3, r2
 801116e:	781a      	ldrb	r2, [r3, #0]
 8011170:	0853      	lsrs	r3, r2, #1
 8011172:	4919      	ldr	r1, [pc, #100]	@ (80111d8 <mg_random_str+0x88>)
 8011174:	fba1 1303 	umull	r1, r3, r1, r3
 8011178:	0919      	lsrs	r1, r3, #4
 801117a:	460b      	mov	r3, r1
 801117c:	015b      	lsls	r3, r3, #5
 801117e:	1a5b      	subs	r3, r3, r1
 8011180:	005b      	lsls	r3, r3, #1
 8011182:	1ad3      	subs	r3, r2, r3
 8011184:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	3b01      	subs	r3, #1
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	429a      	cmp	r2, r3
 801118e:	d011      	beq.n	80111b4 <mg_random_str+0x64>
 8011190:	7afb      	ldrb	r3, [r7, #11]
 8011192:	2b19      	cmp	r3, #25
 8011194:	d803      	bhi.n	801119e <mg_random_str+0x4e>
 8011196:	7afb      	ldrb	r3, [r7, #11]
 8011198:	3361      	adds	r3, #97	@ 0x61
 801119a:	b2db      	uxtb	r3, r3
 801119c:	e00b      	b.n	80111b6 <mg_random_str+0x66>
 801119e:	7afb      	ldrb	r3, [r7, #11]
 80111a0:	2b33      	cmp	r3, #51	@ 0x33
 80111a2:	d803      	bhi.n	80111ac <mg_random_str+0x5c>
 80111a4:	7afb      	ldrb	r3, [r7, #11]
 80111a6:	3327      	adds	r3, #39	@ 0x27
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	e004      	b.n	80111b6 <mg_random_str+0x66>
 80111ac:	7afb      	ldrb	r3, [r7, #11]
 80111ae:	3b04      	subs	r3, #4
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	e000      	b.n	80111b6 <mg_random_str+0x66>
 80111b4:	2300      	movs	r3, #0
 80111b6:	6879      	ldr	r1, [r7, #4]
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	440a      	add	r2, r1
 80111bc:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	3301      	adds	r3, #1
 80111c2:	60fb      	str	r3, [r7, #12]
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d3cd      	bcc.n	8011168 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 80111cc:	687b      	ldr	r3, [r7, #4]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	84210843 	.word	0x84210843

080111dc <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80111e4:	2300      	movs	r3, #0
 80111e6:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80111ec:	7bfb      	ldrb	r3, [r7, #15]
 80111ee:	461a      	mov	r2, r3
 80111f0:	7bbb      	ldrb	r3, [r7, #14]
 80111f2:	021b      	lsls	r3, r3, #8
 80111f4:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80111f6:	7b7b      	ldrb	r3, [r7, #13]
 80111f8:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80111fa:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80111fc:	7b3b      	ldrb	r3, [r7, #12]
 80111fe:	061b      	lsls	r3, r3, #24
 8011200:	4313      	orrs	r3, r2
}
 8011202:	4618      	mov	r0, r3
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 801120e:	b480      	push	{r7}
 8011210:	b085      	sub	sp, #20
 8011212:	af00      	add	r7, sp, #0
 8011214:	4603      	mov	r3, r0
 8011216:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8011218:	2300      	movs	r3, #0
 801121a:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 801121c:	88fb      	ldrh	r3, [r7, #6]
 801121e:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8011220:	7b7b      	ldrb	r3, [r7, #13]
 8011222:	b21a      	sxth	r2, r3
 8011224:	7b3b      	ldrb	r3, [r7, #12]
 8011226:	021b      	lsls	r3, r3, #8
 8011228:	b21b      	sxth	r3, r3
 801122a:	4313      	orrs	r3, r2
 801122c:	b21b      	sxth	r3, r3
 801122e:	b29b      	uxth	r3, r3
}
 8011230:	4618      	mov	r0, r3
 8011232:	3714      	adds	r7, #20
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 801123c:	b480      	push	{r7}
 801123e:	b087      	sub	sp, #28
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	43db      	mvns	r3, r3
 801124c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801124e:	e01f      	b.n	8011290 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	1c5a      	adds	r2, r3, #1
 8011254:	60ba      	str	r2, [r7, #8]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 801125a:	7dfa      	ldrb	r2, [r7, #23]
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	4053      	eors	r3, r2
 8011260:	f003 030f 	and.w	r3, r3, #15
 8011264:	4a11      	ldr	r2, [pc, #68]	@ (80112ac <mg_crc32+0x70>)
 8011266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	091b      	lsrs	r3, r3, #4
 801126e:	4053      	eors	r3, r2
 8011270:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8011272:	7dfb      	ldrb	r3, [r7, #23]
 8011274:	091b      	lsrs	r3, r3, #4
 8011276:	b2db      	uxtb	r3, r3
 8011278:	461a      	mov	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	4053      	eors	r3, r2
 801127e:	f003 030f 	and.w	r3, r3, #15
 8011282:	4a0a      	ldr	r2, [pc, #40]	@ (80112ac <mg_crc32+0x70>)
 8011284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	091b      	lsrs	r3, r3, #4
 801128c:	4053      	eors	r3, r2
 801128e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	1e5a      	subs	r2, r3, #1
 8011294:	607a      	str	r2, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1da      	bne.n	8011250 <mg_crc32+0x14>
  }
  return ~crc;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	43db      	mvns	r3, r3
}
 801129e:	4618      	mov	r0, r3
 80112a0:	371c      	adds	r7, #28
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	08030d34 	.word	0x08030d34

080112b0 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	460a      	mov	r2, r1
 80112ba:	80fb      	strh	r3, [r7, #6]
 80112bc:	4613      	mov	r3, r2
 80112be:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 80112c0:	88fb      	ldrh	r3, [r7, #6]
 80112c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112c6:	d00b      	beq.n	80112e0 <mg_phy_id_to_str+0x30>
 80112c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112cc:	dc28      	bgt.n	8011320 <mg_phy_id_to_str+0x70>
 80112ce:	2b22      	cmp	r3, #34	@ 0x22
 80112d0:	d020      	beq.n	8011314 <mg_phy_id_to_str+0x64>
 80112d2:	2b22      	cmp	r3, #34	@ 0x22
 80112d4:	dc24      	bgt.n	8011320 <mg_phy_id_to_str+0x70>
 80112d6:	2b07      	cmp	r3, #7
 80112d8:	d01e      	beq.n	8011318 <mg_phy_id_to_str+0x68>
 80112da:	2b1c      	cmp	r3, #28
 80112dc:	d01e      	beq.n	801131c <mg_phy_id_to_str+0x6c>
 80112de:	e01f      	b.n	8011320 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 80112e0:	88bb      	ldrh	r3, [r7, #4]
 80112e2:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d00c      	beq.n	8011304 <mg_phy_id_to_str+0x54>
 80112ea:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80112ee:	4293      	cmp	r3, r2
 80112f0:	dc0e      	bgt.n	8011310 <mg_phy_id_to_str+0x60>
 80112f2:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d006      	beq.n	8011308 <mg_phy_id_to_str+0x58>
 80112fa:	f24a 1240 	movw	r2, #41280	@ 0xa140
 80112fe:	4293      	cmp	r3, r2
 8011300:	d004      	beq.n	801130c <mg_phy_id_to_str+0x5c>
 8011302:	e005      	b.n	8011310 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 8011304:	4b0a      	ldr	r3, [pc, #40]	@ (8011330 <mg_phy_id_to_str+0x80>)
 8011306:	e00c      	b.n	8011322 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 8011308:	4b0a      	ldr	r3, [pc, #40]	@ (8011334 <mg_phy_id_to_str+0x84>)
 801130a:	e00a      	b.n	8011322 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 801130c:	4b0a      	ldr	r3, [pc, #40]	@ (8011338 <mg_phy_id_to_str+0x88>)
 801130e:	e008      	b.n	8011322 <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 8011310:	4b0a      	ldr	r3, [pc, #40]	@ (801133c <mg_phy_id_to_str+0x8c>)
 8011312:	e006      	b.n	8011322 <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8011314:	4b0a      	ldr	r3, [pc, #40]	@ (8011340 <mg_phy_id_to_str+0x90>)
 8011316:	e004      	b.n	8011322 <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8011318:	4b0a      	ldr	r3, [pc, #40]	@ (8011344 <mg_phy_id_to_str+0x94>)
 801131a:	e002      	b.n	8011322 <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 801131c:	4b0a      	ldr	r3, [pc, #40]	@ (8011348 <mg_phy_id_to_str+0x98>)
 801131e:	e000      	b.n	8011322 <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 8011320:	4b0a      	ldr	r3, [pc, #40]	@ (801134c <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 8011322:	4618      	mov	r0, r3
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	0802d854 	.word	0x0802d854
 8011334:	0802d85c 	.word	0x0802d85c
 8011338:	0802d864 	.word	0x0802d864
 801133c:	0802d86c 	.word	0x0802d86c
 8011340:	0802d874 	.word	0x0802d874
 8011344:	0802d87c 	.word	0x0802d87c
 8011348:	0802d884 	.word	0x0802d884
 801134c:	0802d88c 	.word	0x0802d88c

08011350 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8011350:	b5b0      	push	{r4, r5, r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	460b      	mov	r3, r1
 801135a:	70fb      	strb	r3, [r7, #3]
 801135c:	4613      	mov	r3, r2
 801135e:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	78f8      	ldrb	r0, [r7, #3]
 8011366:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801136a:	2100      	movs	r1, #0
 801136c:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 801136e:	bf00      	nop
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	78fa      	ldrb	r2, [r7, #3]
 8011376:	2100      	movs	r1, #0
 8011378:	4610      	mov	r0, r2
 801137a:	4798      	blx	r3
 801137c:	4603      	mov	r3, r0
 801137e:	b21b      	sxth	r3, r3
 8011380:	2b00      	cmp	r3, #0
 8011382:	dbf5      	blt.n	8011370 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	78fa      	ldrb	r2, [r7, #3]
 801138a:	2102      	movs	r1, #2
 801138c:	4610      	mov	r0, r2
 801138e:	4798      	blx	r3
 8011390:	4603      	mov	r3, r0
 8011392:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	78fa      	ldrb	r2, [r7, #3]
 801139a:	2103      	movs	r1, #3
 801139c:	4610      	mov	r0, r2
 801139e:	4798      	blx	r3
 80113a0:	4603      	mov	r3, r0
 80113a2:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 80113a4:	4b42      	ldr	r3, [pc, #264]	@ (80114b0 <mg_phy_init+0x160>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	dd14      	ble.n	80113d6 <mg_phy_init+0x86>
 80113ac:	4b41      	ldr	r3, [pc, #260]	@ (80114b4 <mg_phy_init+0x164>)
 80113ae:	f244 5237 	movw	r2, #17719	@ 0x4537
 80113b2:	4941      	ldr	r1, [pc, #260]	@ (80114b8 <mg_phy_init+0x168>)
 80113b4:	2002      	movs	r0, #2
 80113b6:	f7f1 fd3f 	bl	8002e38 <mg_log_prefix>
 80113ba:	89fc      	ldrh	r4, [r7, #14]
 80113bc:	89bd      	ldrh	r5, [r7, #12]
 80113be:	89ba      	ldrh	r2, [r7, #12]
 80113c0:	89fb      	ldrh	r3, [r7, #14]
 80113c2:	4611      	mov	r1, r2
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff ff73 	bl	80112b0 <mg_phy_id_to_str>
 80113ca:	4603      	mov	r3, r0
 80113cc:	462a      	mov	r2, r5
 80113ce:	4621      	mov	r1, r4
 80113d0:	483a      	ldr	r0, [pc, #232]	@ (80114bc <mg_phy_init+0x16c>)
 80113d2:	f7f1 fd81 	bl	8002ed8 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 80113d6:	89fb      	ldrh	r3, [r7, #14]
 80113d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113dc:	d11f      	bne.n	801141e <mg_phy_init+0xce>
 80113de:	89bb      	ldrh	r3, [r7, #12]
 80113e0:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d11a      	bne.n	801141e <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	78f8      	ldrb	r0, [r7, #3]
 80113ee:	221f      	movs	r2, #31
 80113f0:	210d      	movs	r1, #13
 80113f2:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	78f8      	ldrb	r0, [r7, #3]
 80113fa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80113fe:	210e      	movs	r1, #14
 8011400:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	78f8      	ldrb	r0, [r7, #3]
 8011408:	f244 021f 	movw	r2, #16415	@ 0x401f
 801140c:	210d      	movs	r1, #13
 801140e:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	78f8      	ldrb	r0, [r7, #3]
 8011416:	f240 120d 	movw	r2, #269	@ 0x10d
 801141a:	210e      	movs	r1, #14
 801141c:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 801141e:	78bb      	ldrb	r3, [r7, #2]
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d12e      	bne.n	8011486 <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8011428:	89fb      	ldrh	r3, [r7, #14]
 801142a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801142e:	d110      	bne.n	8011452 <mg_phy_init+0x102>
 8011430:	89bb      	ldrh	r3, [r7, #12]
 8011432:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8011436:	4293      	cmp	r3, r2
 8011438:	d00b      	beq.n	8011452 <mg_phy_init+0x102>
 801143a:	89bb      	ldrh	r3, [r7, #12]
 801143c:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8011440:	4293      	cmp	r3, r2
 8011442:	d006      	beq.n	8011452 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	78f8      	ldrb	r0, [r7, #3]
 801144a:	2281      	movs	r2, #129	@ 0x81
 801144c:	2117      	movs	r1, #23
 801144e:	4798      	blx	r3
 8011450:	e019      	b.n	8011486 <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8011452:	89fb      	ldrh	r3, [r7, #14]
 8011454:	2b22      	cmp	r3, #34	@ 0x22
 8011456:	d116      	bne.n	8011486 <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	78fa      	ldrb	r2, [r7, #3]
 8011462:	2100      	movs	r1, #0
 8011464:	4610      	mov	r0, r2
 8011466:	4798      	blx	r3
 8011468:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 801146a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801146e:	b29a      	uxth	r2, r3
 8011470:	78fb      	ldrb	r3, [r7, #3]
 8011472:	2100      	movs	r1, #0
 8011474:	4618      	mov	r0, r3
 8011476:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	78f8      	ldrb	r0, [r7, #3]
 801147e:	f248 1280 	movw	r2, #33152	@ 0x8180
 8011482:	211f      	movs	r1, #31
 8011484:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8011486:	78bb      	ldrb	r3, [r7, #2]
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00a      	beq.n	80114a6 <mg_phy_init+0x156>
 8011490:	89fb      	ldrh	r3, [r7, #14]
 8011492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011496:	d106      	bne.n	80114a6 <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	78f8      	ldrb	r0, [r7, #3]
 801149e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114a2:	2118      	movs	r1, #24
 80114a4:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 80114a6:	bf00      	nop
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bdb0      	pop	{r4, r5, r7, pc}
 80114ae:	bf00      	nop
 80114b0:	24000000 	.word	0x24000000
 80114b4:	08030d74 	.word	0x08030d74
 80114b8:	0802b5b0 	.word	0x0802b5b0
 80114bc:	0802d894 	.word	0x0802d894

080114c0 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b08a      	sub	sp, #40	@ 0x28
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	607a      	str	r2, [r7, #4]
 80114ca:	603b      	str	r3, [r7, #0]
 80114cc:	460b      	mov	r3, r1
 80114ce:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 80114d0:	2300      	movs	r3, #0
 80114d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	7afa      	ldrb	r2, [r7, #11]
 80114dc:	2101      	movs	r1, #1
 80114de:	4610      	mov	r0, r2
 80114e0:	4798      	blx	r3
 80114e2:	4603      	mov	r3, r0
 80114e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 80114e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80114e8:	f003 0320 	and.w	r3, r3, #32
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00c      	beq.n	801150a <mg_phy_up+0x4a>
 80114f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80114f2:	f003 0304 	and.w	r3, r3, #4
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d107      	bne.n	801150a <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	7afa      	ldrb	r2, [r7, #11]
 8011500:	2101      	movs	r1, #1
 8011502:	4610      	mov	r0, r2
 8011504:	4798      	blx	r3
 8011506:	4603      	mov	r3, r0
 8011508:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 801150a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801150c:	f003 0304 	and.w	r3, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	bf14      	ite	ne
 8011514:	2301      	movne	r3, #1
 8011516:	2300      	moveq	r3, #0
 8011518:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 801151c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 80bc 	beq.w	801169e <mg_phy_up+0x1de>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 80b8 	beq.w	801169e <mg_phy_up+0x1de>
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 80b4 	beq.w	801169e <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	7afa      	ldrb	r2, [r7, #11]
 801153c:	2102      	movs	r1, #2
 801153e:	4610      	mov	r0, r2
 8011540:	4798      	blx	r3
 8011542:	4603      	mov	r3, r0
 8011544:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8011546:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801154c:	d14b      	bne.n	80115e6 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	7afa      	ldrb	r2, [r7, #11]
 8011554:	2103      	movs	r1, #3
 8011556:	4610      	mov	r0, r2
 8011558:	4798      	blx	r3
 801155a:	4603      	mov	r3, r0
 801155c:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 801155e:	8b7b      	ldrh	r3, [r7, #26]
 8011560:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8011564:	4293      	cmp	r3, r2
 8011566:	d120      	bne.n	80115aa <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	7afa      	ldrb	r2, [r7, #11]
 801156e:	2111      	movs	r1, #17
 8011570:	4610      	mov	r0, r2
 8011572:	4798      	blx	r3
 8011574:	4603      	mov	r3, r0
 8011576:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8011578:	8afb      	ldrh	r3, [r7, #22]
 801157a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801157e:	2b00      	cmp	r3, #0
 8011580:	bf14      	ite	ne
 8011582:	2301      	movne	r3, #1
 8011584:	2300      	moveq	r3, #0
 8011586:	b2da      	uxtb	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 801158c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011590:	2b00      	cmp	r3, #0
 8011592:	db06      	blt.n	80115a2 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8011594:	8afb      	ldrh	r3, [r7, #22]
 8011596:	0b9b      	lsrs	r3, r3, #14
 8011598:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 801159a:	f003 0301 	and.w	r3, r3, #1
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	e000      	b.n	80115a4 <mg_phy_up+0xe4>
 80115a2:	2202      	movs	r2, #2
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	701a      	strb	r2, [r3, #0]
 80115a8:	e079      	b.n	801169e <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	7afa      	ldrb	r2, [r7, #11]
 80115b0:	2110      	movs	r1, #16
 80115b2:	4610      	mov	r0, r2
 80115b4:	4798      	blx	r3
 80115b6:	4603      	mov	r3, r0
 80115b8:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 80115ba:	8b3b      	ldrh	r3, [r7, #24]
 80115bc:	f003 0304 	and.w	r3, r3, #4
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	bf14      	ite	ne
 80115c4:	2301      	movne	r3, #1
 80115c6:	2300      	moveq	r3, #0
 80115c8:	b2da      	uxtb	r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80115ce:	8b3b      	ldrh	r3, [r7, #24]
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	bf0c      	ite	eq
 80115d8:	2301      	moveq	r3, #1
 80115da:	2300      	movne	r3, #0
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	461a      	mov	r2, r3
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	701a      	strb	r2, [r3, #0]
 80115e4:	e05b      	b.n	801169e <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 80115e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115e8:	2b22      	cmp	r3, #34	@ 0x22
 80115ea:	d11d      	bne.n	8011628 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	7afa      	ldrb	r2, [r7, #11]
 80115f2:	211e      	movs	r1, #30
 80115f4:	4610      	mov	r0, r2
 80115f6:	4798      	blx	r3
 80115f8:	4603      	mov	r3, r0
 80115fa:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 80115fc:	8bbb      	ldrh	r3, [r7, #28]
 80115fe:	f003 0304 	and.w	r3, r3, #4
 8011602:	2b00      	cmp	r3, #0
 8011604:	bf14      	ite	ne
 8011606:	2301      	movne	r3, #1
 8011608:	2300      	moveq	r3, #0
 801160a:	b2da      	uxtb	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8011610:	8bbb      	ldrh	r3, [r7, #28]
 8011612:	f003 0303 	and.w	r3, r3, #3
 8011616:	2b01      	cmp	r3, #1
 8011618:	bf14      	ite	ne
 801161a:	2301      	movne	r3, #1
 801161c:	2300      	moveq	r3, #0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	461a      	mov	r2, r3
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	701a      	strb	r2, [r3, #0]
 8011626:	e03a      	b.n	801169e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 8011628:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801162a:	2b07      	cmp	r3, #7
 801162c:	d11a      	bne.n	8011664 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	7afa      	ldrb	r2, [r7, #11]
 8011634:	211f      	movs	r1, #31
 8011636:	4610      	mov	r0, r2
 8011638:	4798      	blx	r3
 801163a:	4603      	mov	r3, r0
 801163c:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 801163e:	8bfb      	ldrh	r3, [r7, #30]
 8011640:	f003 0310 	and.w	r3, r3, #16
 8011644:	2b00      	cmp	r3, #0
 8011646:	bf14      	ite	ne
 8011648:	2301      	movne	r3, #1
 801164a:	2300      	moveq	r3, #0
 801164c:	b2da      	uxtb	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8011652:	8bfb      	ldrh	r3, [r7, #30]
 8011654:	08db      	lsrs	r3, r3, #3
 8011656:	b2db      	uxtb	r3, r3
 8011658:	f003 0301 	and.w	r3, r3, #1
 801165c:	b2da      	uxtb	r2, r3
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	701a      	strb	r2, [r3, #0]
 8011662:	e01c      	b.n	801169e <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 8011664:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011666:	2b1c      	cmp	r3, #28
 8011668:	d119      	bne.n	801169e <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	7afa      	ldrb	r2, [r7, #11]
 8011670:	2100      	movs	r1, #0
 8011672:	4610      	mov	r0, r2
 8011674:	4798      	blx	r3
 8011676:	4603      	mov	r3, r0
 8011678:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 801167a:	8c3b      	ldrh	r3, [r7, #32]
 801167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011680:	2b00      	cmp	r3, #0
 8011682:	bf14      	ite	ne
 8011684:	2301      	movne	r3, #1
 8011686:	2300      	moveq	r3, #0
 8011688:	b2da      	uxtb	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 801168e:	8c3b      	ldrh	r3, [r7, #32]
 8011690:	0b5b      	lsrs	r3, r3, #13
 8011692:	b2db      	uxtb	r3, r3
 8011694:	f003 0301 	and.w	r3, r3, #1
 8011698:	b2da      	uxtb	r2, r3
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 801169e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3728      	adds	r7, #40	@ 0x28
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
	...

080116ac <eth_read_phy>:
static uint8_t s_txno;                               // Current TX descriptor
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	460a      	mov	r2, r1
 80116b6:	71fb      	strb	r3, [r7, #7]
 80116b8:	4613      	mov	r3, r2
 80116ba:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 80116bc:	4b12      	ldr	r3, [pc, #72]	@ (8011708 <eth_read_phy+0x5c>)
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	4a11      	ldr	r2, [pc, #68]	@ (8011708 <eth_read_phy+0x5c>)
 80116c2:	f003 031c 	and.w	r3, r3, #28
 80116c6:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 80116c8:	4b0f      	ldr	r3, [pc, #60]	@ (8011708 <eth_read_phy+0x5c>)
 80116ca:	691a      	ldr	r2, [r3, #16]
 80116cc:	79fb      	ldrb	r3, [r7, #7]
 80116ce:	02d9      	lsls	r1, r3, #11
 80116d0:	79bb      	ldrb	r3, [r7, #6]
 80116d2:	019b      	lsls	r3, r3, #6
 80116d4:	430b      	orrs	r3, r1
 80116d6:	490c      	ldr	r1, [pc, #48]	@ (8011708 <eth_read_phy+0x5c>)
 80116d8:	4313      	orrs	r3, r2
 80116da:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 80116dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011708 <eth_read_phy+0x5c>)
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	4a09      	ldr	r2, [pc, #36]	@ (8011708 <eth_read_phy+0x5c>)
 80116e2:	f043 0301 	orr.w	r3, r3, #1
 80116e6:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 80116e8:	bf00      	nop
 80116ea:	4b07      	ldr	r3, [pc, #28]	@ (8011708 <eth_read_phy+0x5c>)
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	f003 0301 	and.w	r3, r3, #1
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1f9      	bne.n	80116ea <eth_read_phy+0x3e>
  return ETH->MACMIIDR & 0xffff;
 80116f6:	4b04      	ldr	r3, [pc, #16]	@ (8011708 <eth_read_phy+0x5c>)
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	b29b      	uxth	r3, r3
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	370c      	adds	r7, #12
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr
 8011708:	40028000 	.word	0x40028000

0801170c <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	71fb      	strb	r3, [r7, #7]
 8011716:	460b      	mov	r3, r1
 8011718:	71bb      	strb	r3, [r7, #6]
 801171a:	4613      	mov	r3, r2
 801171c:	80bb      	strh	r3, [r7, #4]
  ETH->MACMIIDR = val;
 801171e:	4a14      	ldr	r2, [pc, #80]	@ (8011770 <eth_write_phy+0x64>)
 8011720:	88bb      	ldrh	r3, [r7, #4]
 8011722:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8011724:	4b12      	ldr	r3, [pc, #72]	@ (8011770 <eth_write_phy+0x64>)
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	4a11      	ldr	r2, [pc, #68]	@ (8011770 <eth_write_phy+0x64>)
 801172a:	f003 031c 	and.w	r3, r3, #28
 801172e:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | MG_BIT(1);
 8011730:	4b0f      	ldr	r3, [pc, #60]	@ (8011770 <eth_write_phy+0x64>)
 8011732:	691a      	ldr	r2, [r3, #16]
 8011734:	79fb      	ldrb	r3, [r7, #7]
 8011736:	02d9      	lsls	r1, r3, #11
 8011738:	79bb      	ldrb	r3, [r7, #6]
 801173a:	019b      	lsls	r3, r3, #6
 801173c:	430b      	orrs	r3, r1
 801173e:	4313      	orrs	r3, r2
 8011740:	4a0b      	ldr	r2, [pc, #44]	@ (8011770 <eth_write_phy+0x64>)
 8011742:	f043 0302 	orr.w	r3, r3, #2
 8011746:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 8011748:	4b09      	ldr	r3, [pc, #36]	@ (8011770 <eth_write_phy+0x64>)
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	4a08      	ldr	r2, [pc, #32]	@ (8011770 <eth_write_phy+0x64>)
 801174e:	f043 0301 	orr.w	r3, r3, #1
 8011752:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 8011754:	bf00      	nop
 8011756:	4b06      	ldr	r3, [pc, #24]	@ (8011770 <eth_write_phy+0x64>)
 8011758:	691b      	ldr	r3, [r3, #16]
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1f9      	bne.n	8011756 <eth_write_phy+0x4a>
}
 8011762:	bf00      	nop
 8011764:	bf00      	nop
 8011766:	370c      	adds	r7, #12
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	40028000 	.word	0x40028000

08011774 <get_hclk>:

static uint32_t get_hclk(void) {
 8011774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011778:	b08d      	sub	sp, #52	@ 0x34
 801177a:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 801177c:	4e3c      	ldr	r6, [pc, #240]	@ (8011870 <get_hclk+0xfc>)
 801177e:	62be      	str	r6, [r7, #40]	@ 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8011780:	2600      	movs	r6, #0
 8011782:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8011784:	4e3b      	ldr	r6, [pc, #236]	@ (8011874 <get_hclk+0x100>)
 8011786:	627e      	str	r6, [r7, #36]	@ 0x24
 8011788:	4e3b      	ldr	r6, [pc, #236]	@ (8011878 <get_hclk+0x104>)
 801178a:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 801178c:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801178e:	68b6      	ldr	r6, [r6, #8]
 8011790:	f006 0604 	and.w	r6, r6, #4
 8011794:	2e00      	cmp	r6, #0
 8011796:	d002      	beq.n	801179e <get_hclk+0x2a>
    clk = hse;
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801179c:	e049      	b.n	8011832 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 801179e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80117a0:	68b6      	ldr	r6, [r6, #8]
 80117a2:	f006 0608 	and.w	r6, r6, #8
 80117a6:	2e00      	cmp	r6, #0
 80117a8:	d041      	beq.n	801182e <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 80117aa:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80117ac:	6876      	ldr	r6, [r6, #4]
 80117ae:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80117b2:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 80117b4:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80117b6:	6876      	ldr	r6, [r6, #4]
 80117b8:	09b6      	lsrs	r6, r6, #6
 80117ba:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80117be:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 80117c0:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80117c2:	6876      	ldr	r6, [r6, #4]
 80117c4:	0c36      	lsrs	r6, r6, #16
 80117c6:	f006 0603 	and.w	r6, r6, #3
 80117ca:	3601      	adds	r6, #1
 80117cc:	0076      	lsls	r6, r6, #1
 80117ce:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 80117d0:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80117d2:	6876      	ldr	r6, [r6, #4]
 80117d4:	f406 0680 	and.w	r6, r6, #4194304	@ 0x400000
 80117d8:	2e00      	cmp	r6, #0
 80117da:	d001      	beq.n	80117e0 <get_hclk+0x6c>
 80117dc:	6a3e      	ldr	r6, [r7, #32]
 80117de:	e000      	b.n	80117e2 <get_hclk+0x6e>
 80117e0:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80117e2:	62fe      	str	r6, [r7, #44]	@ 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 80117e4:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80117e6:	f04f 0c00 	mov.w	ip, #0
 80117ea:	4634      	mov	r4, r6
 80117ec:	4665      	mov	r5, ip
 80117ee:	69be      	ldr	r6, [r7, #24]
 80117f0:	f04f 0c00 	mov.w	ip, #0
 80117f4:	4632      	mov	r2, r6
 80117f6:	4663      	mov	r3, ip
 80117f8:	fb02 fc05 	mul.w	ip, r2, r5
 80117fc:	fb04 f603 	mul.w	r6, r4, r3
 8011800:	4466      	add	r6, ip
 8011802:	fba4 0102 	umull	r0, r1, r4, r2
 8011806:	1873      	adds	r3, r6, r1
 8011808:	4619      	mov	r1, r3
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	2200      	movs	r2, #0
 801180e:	4698      	mov	r8, r3
 8011810:	4691      	mov	r9, r2
 8011812:	4642      	mov	r2, r8
 8011814:	464b      	mov	r3, r9
 8011816:	f7ee fdbb 	bl	8000390 <__aeabi_uldivmod>
 801181a:	4602      	mov	r2, r0
 801181c:	460b      	mov	r3, r1
 801181e:	4613      	mov	r3, r2
 8011820:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 8011822:	693a      	ldr	r2, [r7, #16]
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	fbb2 f3f3 	udiv	r3, r2, r3
 801182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801182c:	e001      	b.n	8011832 <get_hclk+0xbe>
  } else {
    clk = hsi;
 801182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 8011832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	091b      	lsrs	r3, r3, #4
 8011838:	f003 030f 	and.w	r3, r3, #15
 801183c:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2b07      	cmp	r3, #7
 8011842:	d801      	bhi.n	8011848 <get_hclk+0xd4>
 8011844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011846:	e00e      	b.n	8011866 <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 8011848:	4a0c      	ldr	r2, [pc, #48]	@ (801187c <get_hclk+0x108>)
 801184a:	1d3b      	adds	r3, r7, #4
 801184c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011850:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	3b08      	subs	r3, #8
 8011858:	3330      	adds	r3, #48	@ 0x30
 801185a:	443b      	add	r3, r7
 801185c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8011860:	461a      	mov	r2, r3
 8011862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011864:	40d3      	lsrs	r3, r2
}
 8011866:	4618      	mov	r0, r3
 8011868:	3734      	adds	r7, #52	@ 0x34
 801186a:	46bd      	mov	sp, r7
 801186c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011870:	40023800 	.word	0x40023800
 8011874:	00f42400 	.word	0x00f42400
 8011878:	007a1200 	.word	0x007a1200
 801187c:	0802d8b0 	.word	0x0802d8b0

08011880 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8011880:	b580      	push	{r7, lr}
 8011882:	b088      	sub	sp, #32
 8011884:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8011886:	4a34      	ldr	r2, [pc, #208]	@ (8011958 <guess_mdc_cr+0xd8>)
 8011888:	f107 030c 	add.w	r3, r7, #12
 801188c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011890:	6018      	str	r0, [r3, #0]
 8011892:	3304      	adds	r3, #4
 8011894:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8011896:	4a31      	ldr	r2, [pc, #196]	@ (801195c <guess_mdc_cr+0xdc>)
 8011898:	1d3b      	adds	r3, r7, #4
 801189a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801189e:	6018      	str	r0, [r3, #0]
 80118a0:	3304      	adds	r3, #4
 80118a2:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 80118a4:	f7ff ff66 	bl	8011774 <get_hclk>
 80118a8:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	4a2b      	ldr	r2, [pc, #172]	@ (8011960 <guess_mdc_cr+0xe0>)
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d80e      	bhi.n	80118d6 <guess_mdc_cr+0x56>
    MG_ERROR(("HCLK too low"));
 80118b8:	4b2a      	ldr	r3, [pc, #168]	@ (8011964 <guess_mdc_cr+0xe4>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	dd36      	ble.n	801192e <guess_mdc_cr+0xae>
 80118c0:	4b29      	ldr	r3, [pc, #164]	@ (8011968 <guess_mdc_cr+0xe8>)
 80118c2:	f644 1248 	movw	r2, #18760	@ 0x4948
 80118c6:	4929      	ldr	r1, [pc, #164]	@ (801196c <guess_mdc_cr+0xec>)
 80118c8:	2001      	movs	r0, #1
 80118ca:	f7f1 fab5 	bl	8002e38 <mg_log_prefix>
 80118ce:	4828      	ldr	r0, [pc, #160]	@ (8011970 <guess_mdc_cr+0xf0>)
 80118d0:	f7f1 fb02 	bl	8002ed8 <mg_log>
 80118d4:	e02b      	b.n	801192e <guess_mdc_cr+0xae>
  } else {
    for (int i = 0; i < 6; i++) {
 80118d6:	2300      	movs	r3, #0
 80118d8:	61bb      	str	r3, [r7, #24]
 80118da:	e014      	b.n	8011906 <guess_mdc_cr+0x86>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 80118dc:	1d3a      	adds	r2, r7, #4
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	4413      	add	r3, r2
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	461a      	mov	r2, r3
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ec:	4a21      	ldr	r2, [pc, #132]	@ (8011974 <guess_mdc_cr+0xf4>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d806      	bhi.n	8011900 <guess_mdc_cr+0x80>
        result = crs[i];
 80118f2:	f107 020c 	add.w	r2, r7, #12
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	4413      	add	r3, r2
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	61fb      	str	r3, [r7, #28]
        break;
 80118fe:	e005      	b.n	801190c <guess_mdc_cr+0x8c>
    for (int i = 0; i < 6; i++) {
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	3301      	adds	r3, #1
 8011904:	61bb      	str	r3, [r7, #24]
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	2b05      	cmp	r3, #5
 801190a:	dde7      	ble.n	80118dc <guess_mdc_cr+0x5c>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	2b00      	cmp	r3, #0
 8011910:	da0d      	bge.n	801192e <guess_mdc_cr+0xae>
 8011912:	4b14      	ldr	r3, [pc, #80]	@ (8011964 <guess_mdc_cr+0xe4>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	dd09      	ble.n	801192e <guess_mdc_cr+0xae>
 801191a:	4b13      	ldr	r3, [pc, #76]	@ (8011968 <guess_mdc_cr+0xe8>)
 801191c:	f644 1250 	movw	r2, #18768	@ 0x4950
 8011920:	4912      	ldr	r1, [pc, #72]	@ (801196c <guess_mdc_cr+0xec>)
 8011922:	2001      	movs	r0, #1
 8011924:	f7f1 fa88 	bl	8002e38 <mg_log_prefix>
 8011928:	4813      	ldr	r0, [pc, #76]	@ (8011978 <guess_mdc_cr+0xf8>)
 801192a:	f7f1 fad5 	bl	8002ed8 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 801192e:	4b0d      	ldr	r3, [pc, #52]	@ (8011964 <guess_mdc_cr+0xe4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b02      	cmp	r3, #2
 8011934:	dd0b      	ble.n	801194e <guess_mdc_cr+0xce>
 8011936:	4b0c      	ldr	r3, [pc, #48]	@ (8011968 <guess_mdc_cr+0xe8>)
 8011938:	f644 1252 	movw	r2, #18770	@ 0x4952
 801193c:	490b      	ldr	r1, [pc, #44]	@ (801196c <guess_mdc_cr+0xec>)
 801193e:	2003      	movs	r0, #3
 8011940:	f7f1 fa7a 	bl	8002e38 <mg_log_prefix>
 8011944:	69fa      	ldr	r2, [r7, #28]
 8011946:	6979      	ldr	r1, [r7, #20]
 8011948:	480c      	ldr	r0, [pc, #48]	@ (801197c <guess_mdc_cr+0xfc>)
 801194a:	f7f1 fac5 	bl	8002ed8 <mg_log>
  return result;
 801194e:	69fb      	ldr	r3, [r7, #28]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3720      	adds	r7, #32
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	0802d8ec 	.word	0x0802d8ec
 801195c:	0802d8f4 	.word	0x0802d8f4
 8011960:	017d783f 	.word	0x017d783f
 8011964:	24000000 	.word	0x24000000
 8011968:	08030d80 	.word	0x08030d80
 801196c:	0802b5b0 	.word	0x0802b5b0
 8011970:	0802d8b8 	.word	0x0802d8b8
 8011974:	00243d58 	.word	0x00243d58
 8011978:	0802d8c8 	.word	0x0802d8c8
 801197c:	0802d8d8 	.word	0x0802d8d8

08011980 <mg_tcpip_driver_stm32f_init>:

static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {
 8011980:	b580      	push	{r7, lr}
 8011982:	b08a      	sub	sp, #40	@ 0x28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801198c:	61fb      	str	r3, [r7, #28]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <mg_tcpip_driver_stm32f_init+0x1a>
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	791b      	ldrb	r3, [r3, #4]
 8011998:	e000      	b.n	801199c <mg_tcpip_driver_stm32f_init+0x1c>
 801199a:	2300      	movs	r3, #0
 801199c:	76fb      	strb	r3, [r7, #27]
  s_ifp = ifp;
 801199e:	4a6d      	ldr	r2, [pc, #436]	@ (8011b54 <mg_tcpip_driver_stm32f_init+0x1d4>)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80119a4:	2300      	movs	r3, #0
 80119a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80119a8:	e032      	b.n	8011a10 <mg_tcpip_driver_stm32f_init+0x90>
    s_rxdesc[i][0] = MG_BIT(31);                         // Own
 80119aa:	4a6b      	ldr	r2, [pc, #428]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 80119ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ae:	011b      	lsls	r3, r3, #4
 80119b0:	4413      	add	r3, r2
 80119b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80119b6:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | MG_BIT(14);    // 2nd address chained
 80119b8:	4a67      	ldr	r2, [pc, #412]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 80119ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	4413      	add	r3, r2
 80119c0:	3304      	adds	r3, #4
 80119c2:	f244 6204 	movw	r2, #17924	@ 0x4604
 80119c6:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 80119c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ca:	f240 6204 	movw	r2, #1540	@ 0x604
 80119ce:	fb02 f303 	mul.w	r3, r2, r3
 80119d2:	4a62      	ldr	r2, [pc, #392]	@ (8011b5c <mg_tcpip_driver_stm32f_init+0x1dc>)
 80119d4:	4413      	add	r3, r2
 80119d6:	4619      	mov	r1, r3
 80119d8:	4a5f      	ldr	r2, [pc, #380]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	4413      	add	r3, r2
 80119e0:	3308      	adds	r3, #8
 80119e2:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80119e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e6:	3301      	adds	r3, #1
 80119e8:	425a      	negs	r2, r3
 80119ea:	f003 0303 	and.w	r3, r3, #3
 80119ee:	f002 0203 	and.w	r2, r2, #3
 80119f2:	bf58      	it	pl
 80119f4:	4253      	negpl	r3, r2
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	4a57      	ldr	r2, [pc, #348]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 80119fa:	4413      	add	r3, r2
 80119fc:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 80119fe:	4a56      	ldr	r2, [pc, #344]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 8011a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	4413      	add	r3, r2
 8011a06:	330c      	adds	r3, #12
 8011a08:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	ddc9      	ble.n	80119aa <mg_tcpip_driver_stm32f_init+0x2a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8011a16:	2300      	movs	r3, #0
 8011a18:	623b      	str	r3, [r7, #32]
 8011a1a:	e023      	b.n	8011a64 <mg_tcpip_driver_stm32f_init+0xe4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	f240 6204 	movw	r2, #1540	@ 0x604
 8011a22:	fb02 f303 	mul.w	r3, r2, r3
 8011a26:	4a4e      	ldr	r2, [pc, #312]	@ (8011b60 <mg_tcpip_driver_stm32f_init+0x1e0>)
 8011a28:	4413      	add	r3, r2
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8011b64 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8011a2e:	6a3b      	ldr	r3, [r7, #32]
 8011a30:	011b      	lsls	r3, r3, #4
 8011a32:	4413      	add	r3, r2
 8011a34:	3308      	adds	r3, #8
 8011a36:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	425a      	negs	r2, r3
 8011a3e:	f003 0303 	and.w	r3, r3, #3
 8011a42:	f002 0203 	and.w	r2, r2, #3
 8011a46:	bf58      	it	pl
 8011a48:	4253      	negpl	r3, r2
 8011a4a:	011b      	lsls	r3, r3, #4
 8011a4c:	4a45      	ldr	r2, [pc, #276]	@ (8011b64 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8011a4e:	4413      	add	r3, r2
 8011a50:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 8011a52:	4a44      	ldr	r2, [pc, #272]	@ (8011b64 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8011a54:	6a3b      	ldr	r3, [r7, #32]
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	4413      	add	r3, r2
 8011a5a:	330c      	adds	r3, #12
 8011a5c:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	3301      	adds	r3, #1
 8011a62:	623b      	str	r3, [r7, #32]
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	2b03      	cmp	r3, #3
 8011a68:	ddd8      	ble.n	8011a1c <mg_tcpip_driver_stm32f_init+0x9c>
  }

  ETH->DMABMR |= MG_BIT(0);                         // Software reset
 8011a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4a3d      	ldr	r2, [pc, #244]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011a74:	f043 0301 	orr.w	r3, r3, #1
 8011a78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011a7c:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8011a7e:	bf00      	nop
 8011a80:	4b39      	ldr	r3, [pc, #228]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f003 0301 	and.w	r3, r3, #1
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1f7      	bne.n	8011a80 <mg_tcpip_driver_stm32f_init+0x100>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <mg_tcpip_driver_stm32f_init+0x11e>
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	da03      	bge.n	8011aa6 <mg_tcpip_driver_stm32f_init+0x126>
 8011a9e:	f7ff feef 	bl	8011880 <guess_mdc_cr>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	e001      	b.n	8011aaa <mg_tcpip_driver_stm32f_init+0x12a>
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	617b      	str	r3, [r7, #20]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	009b      	lsls	r3, r3, #2
 8011ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011ab2:	f003 031c 	and.w	r3, r3, #28
 8011ab6:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = MG_BIT(13) | MG_BIT(16) | MG_BIT(22) | MG_BIT(23) |
  // MG_BIT(25);
  ETH->MACIMR = MG_BIT(3) | MG_BIT(9);  // Mask timestamp & PMT IT
 8011ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011aba:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8011abe:	63da      	str	r2, [r3, #60]	@ 0x3c
  ETH->MACFCR = MG_BIT(7);              // Disable zero quarta pause
 8011ac0:	4b29      	ldr	r3, [pc, #164]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011ac2:	2280      	movs	r2, #128	@ 0x80
 8011ac4:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = MG_BIT(31);                            // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8011ac6:	4a29      	ldr	r2, [pc, #164]	@ (8011b6c <mg_tcpip_driver_stm32f_init+0x1ec>)
 8011ac8:	f107 030c 	add.w	r3, r7, #12
 8011acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ad0:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, MG_PHY_CLOCKS_MAC);
 8011ad4:	7ef9      	ldrb	r1, [r7, #27]
 8011ad6:	f107 030c 	add.w	r3, r7, #12
 8011ada:	2202      	movs	r2, #2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff fc37 	bl	8011350 <mg_phy_init>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 8011ae2:	4a21      	ldr	r2, [pc, #132]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8011b58 <mg_tcpip_driver_stm32f_init+0x1d8>)
 8011ae6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011aea:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 8011aec:	4a1e      	ldr	r2, [pc, #120]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011aee:	4b1d      	ldr	r3, [pc, #116]	@ (8011b64 <mg_tcpip_driver_stm32f_init+0x1e4>)
 8011af0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011af4:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = MG_BIT(6) | MG_BIT(16);             // RIE, NISE
 8011af6:	4b1c      	ldr	r3, [pc, #112]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011afc:	461a      	mov	r2, r3
 8011afe:	4b1c      	ldr	r3, [pc, #112]	@ (8011b70 <mg_tcpip_driver_stm32f_init+0x1f0>)
 8011b00:	61d3      	str	r3, [r2, #28]
  ETH->MACCR =
 8011b02:	4b19      	ldr	r3, [pc, #100]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011b04:	f644 020c 	movw	r2, #18444	@ 0x480c
 8011b08:	601a      	str	r2, [r3, #0]
      MG_BIT(2) | MG_BIT(3) | MG_BIT(11) | MG_BIT(14);  // RE, TE, Duplex, Fast
  ETH->DMAOMR =
 8011b0a:	4b17      	ldr	r3, [pc, #92]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011b10:	461a      	mov	r2, r3
 8011b12:	4b18      	ldr	r3, [pc, #96]	@ (8011b74 <mg_tcpip_driver_stm32f_init+0x1f4>)
 8011b14:	6193      	str	r3, [r2, #24]
      MG_BIT(1) | MG_BIT(13) | MG_BIT(21) | MG_BIT(25);  // SR, ST, TSF, RSF

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	795b      	ldrb	r3, [r3, #5]
 8011b1a:	021b      	lsls	r3, r3, #8
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	7912      	ldrb	r2, [r2, #4]
 8011b20:	4611      	mov	r1, r2
 8011b22:	4a11      	ldr	r2, [pc, #68]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
 8011b24:	430b      	orrs	r3, r1
 8011b26:	6413      	str	r3, [r2, #64]	@ 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	78db      	ldrb	r3, [r3, #3]
 8011b2c:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	789b      	ldrb	r3, [r3, #2]
 8011b32:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8011b34:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	785b      	ldrb	r3, [r3, #1]
 8011b3a:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8011b3c:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	7812      	ldrb	r2, [r2, #0]
 8011b42:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8011b44:	4a08      	ldr	r2, [pc, #32]	@ (8011b68 <mg_tcpip_driver_stm32f_init+0x1e8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8011b46:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8011b48:	6453      	str	r3, [r2, #68]	@ 0x44
  return true;
 8011b4a:	2301      	movs	r3, #1
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3728      	adds	r7, #40	@ 0x28
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	24007e84 	.word	0x24007e84
 8011b58:	24004de0 	.word	0x24004de0
 8011b5c:	24004e60 	.word	0x24004e60
 8011b60:	24006670 	.word	0x24006670
 8011b64:	24004e20 	.word	0x24004e20
 8011b68:	40028000 	.word	0x40028000
 8011b6c:	0802d8fc 	.word	0x0802d8fc
 8011b70:	00010040 	.word	0x00010040
 8011b74:	02202002 	.word	0x02202002

08011b78 <mg_tcpip_driver_stm32f_tx>:

static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	f240 6204 	movw	r2, #1540	@ 0x604
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d912      	bls.n	8011bb4 <mg_tcpip_driver_stm32f_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8011b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8011c88 <mg_tcpip_driver_stm32f_tx+0x110>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	dd0b      	ble.n	8011bae <mg_tcpip_driver_stm32f_tx+0x36>
 8011b96:	4b3d      	ldr	r3, [pc, #244]	@ (8011c8c <mg_tcpip_driver_stm32f_tx+0x114>)
 8011b98:	f644 128f 	movw	r2, #18831	@ 0x498f
 8011b9c:	493c      	ldr	r1, [pc, #240]	@ (8011c90 <mg_tcpip_driver_stm32f_tx+0x118>)
 8011b9e:	2001      	movs	r0, #1
 8011ba0:	f7f1 f94a 	bl	8002e38 <mg_log_prefix>
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	483a      	ldr	r0, [pc, #232]	@ (8011c94 <mg_tcpip_driver_stm32f_tx+0x11c>)
 8011baa:	f7f1 f995 	bl	8002ed8 <mg_log>
    len = 0;  // Frame is too big
 8011bae:	2300      	movs	r3, #0
 8011bb0:	60bb      	str	r3, [r7, #8]
 8011bb2:	e056      	b.n	8011c62 <mg_tcpip_driver_stm32f_tx+0xea>
  } else if ((s_txdesc[s_txno][0] & MG_BIT(31))) {
 8011bb4:	4b38      	ldr	r3, [pc, #224]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	4a38      	ldr	r2, [pc, #224]	@ (8011c9c <mg_tcpip_driver_stm32f_tx+0x124>)
 8011bba:	011b      	lsls	r3, r3, #4
 8011bbc:	4413      	add	r3, r2
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	da15      	bge.n	8011bf0 <mg_tcpip_driver_stm32f_tx+0x78>
    ifp->nerr++;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bc8:	1c5a      	adds	r2, r3, #1
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	679a      	str	r2, [r3, #120]	@ 0x78
    MG_ERROR(("No free descriptors"));
 8011bce:	4b2e      	ldr	r3, [pc, #184]	@ (8011c88 <mg_tcpip_driver_stm32f_tx+0x110>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	dd09      	ble.n	8011bea <mg_tcpip_driver_stm32f_tx+0x72>
 8011bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8011c8c <mg_tcpip_driver_stm32f_tx+0x114>)
 8011bd8:	f644 1293 	movw	r2, #18835	@ 0x4993
 8011bdc:	492c      	ldr	r1, [pc, #176]	@ (8011c90 <mg_tcpip_driver_stm32f_tx+0x118>)
 8011bde:	2001      	movs	r0, #1
 8011be0:	f7f1 f92a 	bl	8002e38 <mg_log_prefix>
 8011be4:	482e      	ldr	r0, [pc, #184]	@ (8011ca0 <mg_tcpip_driver_stm32f_tx+0x128>)
 8011be6:	f7f1 f977 	bl	8002ed8 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 8011bea:	2300      	movs	r3, #0
 8011bec:	60bb      	str	r3, [r7, #8]
 8011bee:	e038      	b.n	8011c62 <mg_tcpip_driver_stm32f_tx+0xea>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);                           // Copy data
 8011bf0:	4b29      	ldr	r3, [pc, #164]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	f240 6304 	movw	r3, #1540	@ 0x604
 8011bfa:	fb02 f303 	mul.w	r3, r2, r3
 8011bfe:	4a29      	ldr	r2, [pc, #164]	@ (8011ca4 <mg_tcpip_driver_stm32f_tx+0x12c>)
 8011c00:	4413      	add	r3, r2
 8011c02:	68ba      	ldr	r2, [r7, #8]
 8011c04:	68f9      	ldr	r1, [r7, #12]
 8011c06:	4618      	mov	r0, r3
 8011c08:	f017 fe21 	bl	802984e <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;                        // Set data len
 8011c0c:	4b22      	ldr	r3, [pc, #136]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	4a22      	ldr	r2, [pc, #136]	@ (8011c9c <mg_tcpip_driver_stm32f_tx+0x124>)
 8011c12:	011b      	lsls	r3, r3, #4
 8011c14:	4413      	add	r3, r2
 8011c16:	3304      	adds	r3, #4
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = MG_BIT(20) | MG_BIT(28) | MG_BIT(29);  // Chain,FS,LS
 8011c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	4a1e      	ldr	r2, [pc, #120]	@ (8011c9c <mg_tcpip_driver_stm32f_tx+0x124>)
 8011c22:	011b      	lsls	r3, r3, #4
 8011c24:	4413      	add	r3, r2
 8011c26:	4a20      	ldr	r2, [pc, #128]	@ (8011ca8 <mg_tcpip_driver_stm32f_tx+0x130>)
 8011c28:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8011c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8011c9c <mg_tcpip_driver_stm32f_tx+0x124>)
 8011c30:	011b      	lsls	r3, r3, #4
 8011c32:	4413      	add	r3, r2
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a18      	ldr	r2, [pc, #96]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c38:	7812      	ldrb	r2, [r2, #0]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011c40:	4916      	ldr	r1, [pc, #88]	@ (8011c9c <mg_tcpip_driver_stm32f_tx+0x124>)
 8011c42:	0103      	lsls	r3, r0, #4
 8011c44:	440b      	add	r3, r1
 8011c46:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8011c48:	4b13      	ldr	r3, [pc, #76]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	b2da      	uxtb	r2, r3
 8011c50:	4b11      	ldr	r3, [pc, #68]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c52:	701a      	strb	r2, [r3, #0]
 8011c54:	4b10      	ldr	r3, [pc, #64]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b03      	cmp	r3, #3
 8011c5a:	d902      	bls.n	8011c62 <mg_tcpip_driver_stm32f_tx+0xea>
 8011c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8011c98 <mg_tcpip_driver_stm32f_tx+0x120>)
 8011c5e:	2200      	movs	r2, #0
 8011c60:	701a      	strb	r2, [r3, #0]
  }
  MG_DSB();                            // ensure descriptors have been written
 8011c62:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = MG_BIT(2) | MG_BIT(5);  // Clear any prior TBUS/TUS
 8011c66:	4b11      	ldr	r3, [pc, #68]	@ (8011cac <mg_tcpip_driver_stm32f_tx+0x134>)
 8011c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	2324      	movs	r3, #36	@ 0x24
 8011c70:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;                    // and resume
 8011c72:	4b0e      	ldr	r3, [pc, #56]	@ (8011cac <mg_tcpip_driver_stm32f_tx+0x134>)
 8011c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c78:	461a      	mov	r2, r3
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	6053      	str	r3, [r2, #4]
  return len;
 8011c7e:	68bb      	ldr	r3, [r7, #8]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3710      	adds	r7, #16
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	24000000 	.word	0x24000000
 8011c8c:	08030d90 	.word	0x08030d90
 8011c90:	0802b5b0 	.word	0x0802b5b0
 8011c94:	0802d904 	.word	0x0802d904
 8011c98:	24007e80 	.word	0x24007e80
 8011c9c:	24004e20 	.word	0x24004e20
 8011ca0:	0802d918 	.word	0x0802d918
 8011ca4:	24006670 	.word	0x24006670
 8011ca8:	30100000 	.word	0x30100000
 8011cac:	40028000 	.word	0x40028000

08011cb0 <mg_tcpip_driver_stm32f_up>:

static bool mg_tcpip_driver_stm32f_up(struct mg_tcpip_if *ifp) {
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b088      	sub	sp, #32
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cbc:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d002      	beq.n	8011cca <mg_tcpip_driver_stm32f_up+0x1a>
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	791b      	ldrb	r3, [r3, #4]
 8011cc8:	e000      	b.n	8011ccc <mg_tcpip_driver_stm32f_up+0x1c>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	75bb      	strb	r3, [r7, #22]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8011cda:	4a2b      	ldr	r2, [pc, #172]	@ (8011d88 <mg_tcpip_driver_stm32f_up+0xd8>)
 8011cdc:	f107 030c 	add.w	r3, r7, #12
 8011ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ce4:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8011ce8:	f107 0315 	add.w	r3, r7, #21
 8011cec:	f107 0214 	add.w	r2, r7, #20
 8011cf0:	7df9      	ldrb	r1, [r7, #23]
 8011cf2:	f107 000c 	add.w	r0, r7, #12
 8011cf6:	f7ff fbe3 	bl	80114c0 <mg_phy_up>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d13a      	bne.n	8011d7e <mg_tcpip_driver_stm32f_up+0xce>
 8011d08:	7dbb      	ldrb	r3, [r7, #22]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d037      	beq.n	8011d7e <mg_tcpip_driver_stm32f_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(11);  // 100M, Full-duplex
 8011d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8011d8c <mg_tcpip_driver_stm32f_up+0xdc>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 8011d16:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8011d18:	7d7b      	ldrb	r3, [r7, #21]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d103      	bne.n	8011d26 <mg_tcpip_driver_stm32f_up+0x76>
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d24:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(11);         // Half-duplex
 8011d26:	7d3b      	ldrb	r3, [r7, #20]
 8011d28:	f083 0301 	eor.w	r3, r3, #1
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d003      	beq.n	8011d3a <mg_tcpip_driver_stm32f_up+0x8a>
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011d38:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8011d3a:	4a14      	ldr	r2, [pc, #80]	@ (8011d8c <mg_tcpip_driver_stm32f_up+0xdc>)
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 8011d40:	4b13      	ldr	r3, [pc, #76]	@ (8011d90 <mg_tcpip_driver_stm32f_up+0xe0>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	dd1a      	ble.n	8011d7e <mg_tcpip_driver_stm32f_up+0xce>
 8011d48:	4b12      	ldr	r3, [pc, #72]	@ (8011d94 <mg_tcpip_driver_stm32f_up+0xe4>)
 8011d4a:	f644 12b3 	movw	r2, #18867	@ 0x49b3
 8011d4e:	4912      	ldr	r1, [pc, #72]	@ (8011d98 <mg_tcpip_driver_stm32f_up+0xe8>)
 8011d50:	2003      	movs	r0, #3
 8011d52:	f7f1 f871 	bl	8002e38 <mg_log_prefix>
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d001      	beq.n	8011d64 <mg_tcpip_driver_stm32f_up+0xb4>
 8011d60:	2164      	movs	r1, #100	@ 0x64
 8011d62:	e000      	b.n	8011d66 <mg_tcpip_driver_stm32f_up+0xb6>
 8011d64:	210a      	movs	r1, #10
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <mg_tcpip_driver_stm32f_up+0xc4>
 8011d70:	4b0a      	ldr	r3, [pc, #40]	@ (8011d9c <mg_tcpip_driver_stm32f_up+0xec>)
 8011d72:	e000      	b.n	8011d76 <mg_tcpip_driver_stm32f_up+0xc6>
 8011d74:	4b0a      	ldr	r3, [pc, #40]	@ (8011da0 <mg_tcpip_driver_stm32f_up+0xf0>)
 8011d76:	461a      	mov	r2, r3
 8011d78:	480a      	ldr	r0, [pc, #40]	@ (8011da4 <mg_tcpip_driver_stm32f_up+0xf4>)
 8011d7a:	f7f1 f8ad 	bl	8002ed8 <mg_log>
              maccr & MG_BIT(11) ? "full" : "half"));
  }
  return up;
 8011d7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3720      	adds	r7, #32
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	0802d8fc 	.word	0x0802d8fc
 8011d8c:	40028000 	.word	0x40028000
 8011d90:	24000000 	.word	0x24000000
 8011d94:	08030dac 	.word	0x08030dac
 8011d98:	0802b5b0 	.word	0x0802b5b0
 8011d9c:	0802d92c 	.word	0x0802d92c
 8011da0:	0802d934 	.word	0x0802d934
 8011da4:	0802d93c 	.word	0x0802d93c

08011da8 <mqtt_event_handler>:

// Prototipuri de funcții
void mqtt_init(void);

// Callback pentru evenimente MQTT
static void mqtt_event_handler(struct mg_connection *c, int ev, void *ev_data) {
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	af02      	add	r7, sp, #8
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
    if (ev == MG_EV_MQTT_OPEN) {
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	2b11      	cmp	r3, #17
 8011db8:	d103      	bne.n	8011dc2 <mqtt_event_handler+0x1a>
        printf("Conectat la broker MQTT!\n");
 8011dba:	4816      	ldr	r0, [pc, #88]	@ (8011e14 <mqtt_event_handler+0x6c>)
 8011dbc:	f017 fb44 	bl	8029448 <puts>
        struct mg_mqtt_message *msg = (struct mg_mqtt_message *)ev_data;
        printf("Mesaj primit pe topic: %.*s, Payload: %.*s\n",
               (int)msg->topic.len, msg->topic.buf,
               (int)msg->data.len, msg->data.buf);
    }
}
 8011dc0:	e023      	b.n	8011e0a <mqtt_event_handler+0x62>
    } else if (ev == MG_EV_CLOSE) {
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	2b09      	cmp	r3, #9
 8011dc6:	d10c      	bne.n	8011de2 <mqtt_event_handler+0x3a>
        printf("Conexiunea MQTT s-a închis. Încercare reconectare...\n");
 8011dc8:	4813      	ldr	r0, [pc, #76]	@ (8011e18 <mqtt_event_handler+0x70>)
 8011dca:	f017 fb3d 	bl	8029448 <puts>
        mqtt_conn = NULL; // Marchează conexiunea ca invalidă
 8011dce:	4b13      	ldr	r3, [pc, #76]	@ (8011e1c <mqtt_event_handler+0x74>)
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	601a      	str	r2, [r3, #0]
        HAL_Delay(5000);
 8011dd4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8011dd8:	f000 fda0 	bl	801291c <HAL_Delay>
        mqtt_init();  // Reîncearcă inițializarea
 8011ddc:	f000 f822 	bl	8011e24 <mqtt_init>
}
 8011de0:	e013      	b.n	8011e0a <mqtt_event_handler+0x62>
    } else if (ev == MG_EV_MQTT_MSG) {
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b10      	cmp	r3, #16
 8011de6:	d110      	bne.n	8011e0a <mqtt_event_handler+0x62>
        struct mg_mqtt_message *msg = (struct mg_mqtt_message *)ev_data;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	617b      	str	r3, [r7, #20]
               (int)msg->topic.len, msg->topic.buf,
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	685b      	ldr	r3, [r3, #4]
        printf("Mesaj primit pe topic: %.*s, Payload: %.*s\n",
 8011df0:	4619      	mov	r1, r3
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	681a      	ldr	r2, [r3, #0]
               (int)msg->data.len, msg->data.buf);
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	68db      	ldr	r3, [r3, #12]
        printf("Mesaj primit pe topic: %.*s, Payload: %.*s\n",
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	689b      	ldr	r3, [r3, #8]
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	4603      	mov	r3, r0
 8011e04:	4806      	ldr	r0, [pc, #24]	@ (8011e20 <mqtt_event_handler+0x78>)
 8011e06:	f017 faaf 	bl	8029368 <iprintf>
}
 8011e0a:	bf00      	nop
 8011e0c:	3718      	adds	r7, #24
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	0802d954 	.word	0x0802d954
 8011e18:	0802d970 	.word	0x0802d970
 8011e1c:	24007f58 	.word	0x24007f58
 8011e20:	0802d9a8 	.word	0x0802d9a8

08011e24 <mqtt_init>:

void mqtt_init(void) {
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b0a2      	sub	sp, #136	@ 0x88
 8011e28:	af02      	add	r7, sp, #8
    mg_mgr_init(&mgr);
 8011e2a:	4816      	ldr	r0, [pc, #88]	@ (8011e84 <mqtt_init+0x60>)
 8011e2c:	f7f2 fc8c 	bl	8004748 <mg_mgr_init>
    char url[64];
    snprintf(url, sizeof(url), "mqtt://%s:%d", MQTT_BROKER, MQTT_PORT);
 8011e30:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8011e34:	f240 735b 	movw	r3, #1883	@ 0x75b
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	4b13      	ldr	r3, [pc, #76]	@ (8011e88 <mqtt_init+0x64>)
 8011e3c:	4a13      	ldr	r2, [pc, #76]	@ (8011e8c <mqtt_init+0x68>)
 8011e3e:	2140      	movs	r1, #64	@ 0x40
 8011e40:	f017 fb0a 	bl	8029458 <sniprintf>
    struct mg_mqtt_opts opts = {
 8011e44:	463b      	mov	r3, r7
 8011e46:	2240      	movs	r2, #64	@ 0x40
 8011e48:	2100      	movs	r1, #0
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f017 fc3a 	bl	80296c4 <memset>
 8011e50:	2301      	movs	r3, #1
 8011e52:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        .qos = 1,
    };
    mqtt_conn = mg_mqtt_connect(&mgr, url, &opts, mqtt_event_handler, NULL);
 8011e56:	463a      	mov	r2, r7
 8011e58:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	4b0b      	ldr	r3, [pc, #44]	@ (8011e90 <mqtt_init+0x6c>)
 8011e62:	4808      	ldr	r0, [pc, #32]	@ (8011e84 <mqtt_init+0x60>)
 8011e64:	f7f2 f8ac 	bl	8003fc0 <mg_mqtt_connect>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8011e94 <mqtt_init+0x70>)
 8011e6c:	6013      	str	r3, [r2, #0]
    if (!mqtt_conn) {
 8011e6e:	4b09      	ldr	r3, [pc, #36]	@ (8011e94 <mqtt_init+0x70>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d102      	bne.n	8011e7c <mqtt_init+0x58>
        printf("Eroare: Nu s-a putut conecta la broker MQTT.\n");
 8011e76:	4808      	ldr	r0, [pc, #32]	@ (8011e98 <mqtt_init+0x74>)
 8011e78:	f017 fae6 	bl	8029448 <puts>
    }
}
 8011e7c:	bf00      	nop
 8011e7e:	3780      	adds	r7, #128	@ 0x80
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	24007f10 	.word	0x24007f10
 8011e88:	0802d9d4 	.word	0x0802d9d4
 8011e8c:	0802d9e4 	.word	0x0802d9e4
 8011e90:	08011da9 	.word	0x08011da9
 8011e94:	24007f58 	.word	0x24007f58
 8011e98:	0802d9f4 	.word	0x0802d9f4

08011e9c <mqtt_publish_message>:

void mqtt_publish_message(float temperature) {
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b0a4      	sub	sp, #144	@ 0x90
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (!mqtt_conn) {
 8011ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8011f18 <mqtt_publish_message+0x7c>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d103      	bne.n	8011eb6 <mqtt_publish_message+0x1a>
        printf("Eroare: MQTT nu este conectat.\n");
 8011eae:	481b      	ldr	r0, [pc, #108]	@ (8011f1c <mqtt_publish_message+0x80>)
 8011eb0:	f017 faca 	bl	8029448 <puts>
 8011eb4:	e02c      	b.n	8011f10 <mqtt_publish_message+0x74>
        return;
    }
    char payload[64];
    snprintf(payload, sizeof(payload), "{\"temperature\": %.2f}", temperature);
 8011eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8011eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011ebe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011ec2:	ed8d 7b00 	vstr	d7, [sp]
 8011ec6:	4a16      	ldr	r2, [pc, #88]	@ (8011f20 <mqtt_publish_message+0x84>)
 8011ec8:	2140      	movs	r1, #64	@ 0x40
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f017 fac4 	bl	8029458 <sniprintf>

    // ✅ Folosește corect structura mg_mqtt_opts
    struct mg_mqtt_opts pub_opts = {
 8011ed0:	f107 0308 	add.w	r3, r7, #8
 8011ed4:	2240      	movs	r2, #64	@ 0x40
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f017 fbf3 	bl	80296c4 <memset>
        .topic = mg_str(MQTT_TOPIC),
 8011ede:	f107 0320 	add.w	r3, r7, #32
 8011ee2:	4910      	ldr	r1, [pc, #64]	@ (8011f24 <mqtt_publish_message+0x88>)
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7f6 fe14 	bl	8008b12 <mg_str_s>
        .message = mg_str(payload),
 8011eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011eee:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7f6 fe0c 	bl	8008b12 <mg_str_s>
    struct mg_mqtt_opts pub_opts = {
 8011efa:	2301      	movs	r3, #1
 8011efc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        .qos = 1
    };
    mg_mqtt_pub(mqtt_conn, &pub_opts);
 8011f00:	4b05      	ldr	r3, [pc, #20]	@ (8011f18 <mqtt_publish_message+0x7c>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f107 0208 	add.w	r2, r7, #8
 8011f08:	4611      	mov	r1, r2
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7f1 fd24 	bl	8003958 <mg_mqtt_pub>
}
 8011f10:	3788      	adds	r7, #136	@ 0x88
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	24007f58 	.word	0x24007f58
 8011f1c:	0802da24 	.word	0x0802da24
 8011f20:	0802da44 	.word	0x0802da44
 8011f24:	0802da5c 	.word	0x0802da5c

08011f28 <mqtt_poll>:

void mqtt_poll(int ms) {
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
    mg_mgr_poll(&mgr, ms);
 8011f30:	6879      	ldr	r1, [r7, #4]
 8011f32:	4803      	ldr	r0, [pc, #12]	@ (8011f40 <mqtt_poll+0x18>)
 8011f34:	f7f5 fd58 	bl	80079e8 <mg_mgr_poll>
}
 8011f38:	bf00      	nop
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	24007f10 	.word	0x24007f10

08011f44 <print_ip_address>:
void mqtt_cleanup(void) {
    mg_mgr_free(&mgr);
    printf("Manager MQTT curățat.\n");
}

void print_ip_address(void) {
 8011f44:	b580      	push	{r7, lr}
 8011f46:	af00      	add	r7, sp, #0
    printf("IP Address: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 8011f48:	4804      	ldr	r0, [pc, #16]	@ (8011f5c <print_ip_address+0x18>)
 8011f4a:	f015 fb71 	bl	8027630 <ip4addr_ntoa>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	4619      	mov	r1, r3
 8011f52:	4803      	ldr	r0, [pc, #12]	@ (8011f60 <print_ip_address+0x1c>)
 8011f54:	f017 fa08 	bl	8029368 <iprintf>
}
 8011f58:	bf00      	nop
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	24007f68 	.word	0x24007f68
 8011f60:	0802da88 	.word	0x0802da88

08011f64 <mg_millis>:

float read_temperature(void) {
    return BMP180_ReadTemperature();
}

uint64_t mg_millis(void) {
 8011f64:	b5b0      	push	{r4, r5, r7, lr}
 8011f66:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8011f68:	f000 fccc 	bl	8012904 <HAL_GetTick>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2200      	movs	r2, #0
 8011f70:	461c      	mov	r4, r3
 8011f72:	4615      	mov	r5, r2
 8011f74:	4622      	mov	r2, r4
 8011f76:	462b      	mov	r3, r5
}
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011f80 <mg_random>:

// ✅ RNG îmbunătățit fără hardware RNG
bool mg_random(void *buf, size_t len) {
 8011f80:	b480      	push	{r7}
 8011f82:	b085      	sub	sp, #20
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6039      	str	r1, [r7, #0]
    static uint32_t seed = 0x12345678;
    uint8_t *p = (uint8_t *)buf;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < len; i++) {
 8011f8e:	2300      	movs	r3, #0
 8011f90:	60fb      	str	r3, [r7, #12]
 8011f92:	e021      	b.n	8011fd8 <mg_random+0x58>
        seed ^= seed << 13;
 8011f94:	4b16      	ldr	r3, [pc, #88]	@ (8011ff0 <mg_random+0x70>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	035a      	lsls	r2, r3, #13
 8011f9a:	4b15      	ldr	r3, [pc, #84]	@ (8011ff0 <mg_random+0x70>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	4053      	eors	r3, r2
 8011fa0:	4a13      	ldr	r2, [pc, #76]	@ (8011ff0 <mg_random+0x70>)
 8011fa2:	6013      	str	r3, [r2, #0]
        seed ^= seed >> 17;
 8011fa4:	4b12      	ldr	r3, [pc, #72]	@ (8011ff0 <mg_random+0x70>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	0c5a      	lsrs	r2, r3, #17
 8011faa:	4b11      	ldr	r3, [pc, #68]	@ (8011ff0 <mg_random+0x70>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4053      	eors	r3, r2
 8011fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8011ff0 <mg_random+0x70>)
 8011fb2:	6013      	str	r3, [r2, #0]
        seed ^= seed << 5;
 8011fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8011ff0 <mg_random+0x70>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	015a      	lsls	r2, r3, #5
 8011fba:	4b0d      	ldr	r3, [pc, #52]	@ (8011ff0 <mg_random+0x70>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4053      	eors	r3, r2
 8011fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8011ff0 <mg_random+0x70>)
 8011fc2:	6013      	str	r3, [r2, #0]
        p[i] = (uint8_t)(seed & 0xFF);
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff0 <mg_random+0x70>)
 8011fc6:	6819      	ldr	r1, [r3, #0]
 8011fc8:	68ba      	ldr	r2, [r7, #8]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	4413      	add	r3, r2
 8011fce:	b2ca      	uxtb	r2, r1
 8011fd0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; i++) {
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	60fb      	str	r3, [r7, #12]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d3d9      	bcc.n	8011f94 <mg_random+0x14>
    }
    return true;
 8011fe0:	2301      	movs	r3, #1
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3714      	adds	r7, #20
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	24000038 	.word	0x24000038

08011ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8012024 <HAL_MspInit+0x30>)
 8011ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012000:	4a08      	ldr	r2, [pc, #32]	@ (8012024 <HAL_MspInit+0x30>)
 8012002:	f043 0302 	orr.w	r3, r3, #2
 8012006:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801200a:	4b06      	ldr	r3, [pc, #24]	@ (8012024 <HAL_MspInit+0x30>)
 801200c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012010:	f003 0302 	and.w	r3, r3, #2
 8012014:	607b      	str	r3, [r7, #4]
 8012016:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr
 8012024:	58024400 	.word	0x58024400

08012028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b0ba      	sub	sp, #232	@ 0xe8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
 8012038:	605a      	str	r2, [r3, #4]
 801203a:	609a      	str	r2, [r3, #8]
 801203c:	60da      	str	r2, [r3, #12]
 801203e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012040:	f107 0310 	add.w	r3, r7, #16
 8012044:	22c0      	movs	r2, #192	@ 0xc0
 8012046:	2100      	movs	r1, #0
 8012048:	4618      	mov	r0, r3
 801204a:	f017 fb3b 	bl	80296c4 <memset>
  if(hi2c->Instance==I2C1)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4a2f      	ldr	r2, [pc, #188]	@ (8012110 <HAL_I2C_MspInit+0xe8>)
 8012054:	4293      	cmp	r3, r2
 8012056:	d156      	bne.n	8012106 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012058:	f04f 0208 	mov.w	r2, #8
 801205c:	f04f 0300 	mov.w	r3, #0
 8012060:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8012064:	2300      	movs	r3, #0
 8012066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801206a:	f107 0310 	add.w	r3, r7, #16
 801206e:	4618      	mov	r0, r3
 8012070:	f005 fe46 	bl	8017d00 <HAL_RCCEx_PeriphCLKConfig>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 801207a:	f7ee fefd 	bl	8000e78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801207e:	4b25      	ldr	r3, [pc, #148]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 8012080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012084:	4a23      	ldr	r2, [pc, #140]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 8012086:	f043 0302 	orr.w	r3, r3, #2
 801208a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801208e:	4b21      	ldr	r3, [pc, #132]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 8012090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012094:	f003 0302 	and.w	r3, r3, #2
 8012098:	60fb      	str	r3, [r7, #12]
 801209a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801209c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80120a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80120a4:	2312      	movs	r3, #18
 80120a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120aa:	2300      	movs	r3, #0
 80120ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80120b0:	2300      	movs	r3, #0
 80120b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80120b6:	2304      	movs	r3, #4
 80120b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80120c0:	4619      	mov	r1, r3
 80120c2:	4815      	ldr	r0, [pc, #84]	@ (8012118 <HAL_I2C_MspInit+0xf0>)
 80120c4:	f002 ff82 	bl	8014fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80120c8:	4b12      	ldr	r3, [pc, #72]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 80120ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80120ce:	4a11      	ldr	r2, [pc, #68]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 80120d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80120d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80120d8:	4b0e      	ldr	r3, [pc, #56]	@ (8012114 <HAL_I2C_MspInit+0xec>)
 80120da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80120de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80120e2:	60bb      	str	r3, [r7, #8]
 80120e4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80120e6:	2200      	movs	r2, #0
 80120e8:	2100      	movs	r1, #0
 80120ea:	201f      	movs	r0, #31
 80120ec:	f000 fd35 	bl	8012b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80120f0:	201f      	movs	r0, #31
 80120f2:	f000 fd4c 	bl	8012b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80120f6:	2200      	movs	r2, #0
 80120f8:	2100      	movs	r1, #0
 80120fa:	2020      	movs	r0, #32
 80120fc:	f000 fd2d 	bl	8012b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8012100:	2020      	movs	r0, #32
 8012102:	f000 fd44 	bl	8012b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8012106:	bf00      	nop
 8012108:	37e8      	adds	r7, #232	@ 0xe8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	40005400 	.word	0x40005400
 8012114:	58024400 	.word	0x58024400
 8012118:	58020400 	.word	0x58020400

0801211c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b0ba      	sub	sp, #232	@ 0xe8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012124:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012128:	2200      	movs	r2, #0
 801212a:	601a      	str	r2, [r3, #0]
 801212c:	605a      	str	r2, [r3, #4]
 801212e:	609a      	str	r2, [r3, #8]
 8012130:	60da      	str	r2, [r3, #12]
 8012132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012134:	f107 0310 	add.w	r3, r7, #16
 8012138:	22c0      	movs	r2, #192	@ 0xc0
 801213a:	2100      	movs	r1, #0
 801213c:	4618      	mov	r0, r3
 801213e:	f017 fac1 	bl	80296c4 <memset>
  if(huart->Instance==USART1)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4a2a      	ldr	r2, [pc, #168]	@ (80121f0 <HAL_UART_MspInit+0xd4>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d14d      	bne.n	80121e8 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801214c:	f04f 0201 	mov.w	r2, #1
 8012150:	f04f 0300 	mov.w	r3, #0
 8012154:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8012158:	2300      	movs	r3, #0
 801215a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801215e:	f107 0310 	add.w	r3, r7, #16
 8012162:	4618      	mov	r0, r3
 8012164:	f005 fdcc 	bl	8017d00 <HAL_RCCEx_PeriphCLKConfig>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d001      	beq.n	8012172 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 801216e:	f7ee fe83 	bl	8000e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8012172:	4b20      	ldr	r3, [pc, #128]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 8012174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012178:	4a1e      	ldr	r2, [pc, #120]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 801217a:	f043 0310 	orr.w	r3, r3, #16
 801217e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012182:	4b1c      	ldr	r3, [pc, #112]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 8012184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012188:	f003 0310 	and.w	r3, r3, #16
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012190:	4b18      	ldr	r3, [pc, #96]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 8012192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012196:	4a17      	ldr	r2, [pc, #92]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 8012198:	f043 0302 	orr.w	r3, r3, #2
 801219c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80121a0:	4b14      	ldr	r3, [pc, #80]	@ (80121f4 <HAL_UART_MspInit+0xd8>)
 80121a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80121a6:	f003 0302 	and.w	r3, r3, #2
 80121aa:	60bb      	str	r3, [r7, #8]
 80121ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80121ae:	23c0      	movs	r3, #192	@ 0xc0
 80121b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121b4:	2302      	movs	r3, #2
 80121b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121c0:	2300      	movs	r3, #0
 80121c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80121c6:	2307      	movs	r3, #7
 80121c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80121d0:	4619      	mov	r1, r3
 80121d2:	4809      	ldr	r0, [pc, #36]	@ (80121f8 <HAL_UART_MspInit+0xdc>)
 80121d4:	f002 fefa 	bl	8014fcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80121d8:	2200      	movs	r2, #0
 80121da:	2100      	movs	r1, #0
 80121dc:	2025      	movs	r0, #37	@ 0x25
 80121de:	f000 fcbc 	bl	8012b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80121e2:	2025      	movs	r0, #37	@ 0x25
 80121e4:	f000 fcd3 	bl	8012b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80121e8:	bf00      	nop
 80121ea:	37e8      	adds	r7, #232	@ 0xe8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	40011000 	.word	0x40011000
 80121f4:	58024400 	.word	0x58024400
 80121f8:	58020400 	.word	0x58020400

080121fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80121fc:	b480      	push	{r7}
 80121fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012200:	bf00      	nop
 8012202:	e7fd      	b.n	8012200 <NMI_Handler+0x4>

08012204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012204:	b480      	push	{r7}
 8012206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012208:	bf00      	nop
 801220a:	e7fd      	b.n	8012208 <HardFault_Handler+0x4>

0801220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801220c:	b480      	push	{r7}
 801220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012210:	bf00      	nop
 8012212:	e7fd      	b.n	8012210 <MemManage_Handler+0x4>

08012214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012214:	b480      	push	{r7}
 8012216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012218:	bf00      	nop
 801221a:	e7fd      	b.n	8012218 <BusFault_Handler+0x4>

0801221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801221c:	b480      	push	{r7}
 801221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012220:	bf00      	nop
 8012222:	e7fd      	b.n	8012220 <UsageFault_Handler+0x4>

08012224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012224:	b480      	push	{r7}
 8012226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012228:	bf00      	nop
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr

08012232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012232:	b480      	push	{r7}
 8012234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012236:	bf00      	nop
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012240:	b480      	push	{r7}
 8012242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012244:	bf00      	nop
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr

0801224e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801224e:	b580      	push	{r7, lr}
 8012250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012252:	f000 fb43 	bl	80128dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012256:	bf00      	nop
 8012258:	bd80      	pop	{r7, pc}
	...

0801225c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8012260:	4802      	ldr	r0, [pc, #8]	@ (801226c <I2C1_EV_IRQHandler+0x10>)
 8012262:	f003 fb27 	bl	80158b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8012266:	bf00      	nop
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	24004c9c 	.word	0x24004c9c

08012270 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8012274:	4802      	ldr	r0, [pc, #8]	@ (8012280 <I2C1_ER_IRQHandler+0x10>)
 8012276:	f003 fb37 	bl	80158e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801227a:	bf00      	nop
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	24004c9c 	.word	0x24004c9c

08012284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012288:	4802      	ldr	r0, [pc, #8]	@ (8012294 <USART1_IRQHandler+0x10>)
 801228a:	f007 fc43 	bl	8019b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801228e:	bf00      	nop
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	24004cf0 	.word	0x24004cf0

08012298 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801229c:	4802      	ldr	r0, [pc, #8]	@ (80122a8 <ETH_IRQHandler+0x10>)
 801229e:	f001 fcfd 	bl	8013c9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80122a2:	bf00      	nop
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	24007fb0 	.word	0x24007fb0

080122ac <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80122b0:	4802      	ldr	r0, [pc, #8]	@ (80122bc <ETH_WKUP_IRQHandler+0x10>)
 80122b2:	f001 fcf3 	bl	8013c9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80122b6:	bf00      	nop
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	24007fb0 	.word	0x24007fb0

080122c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80122c0:	b480      	push	{r7}
 80122c2:	af00      	add	r7, sp, #0
  return 1;
 80122c4:	2301      	movs	r3, #1
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <_kill>:

int _kill(int pid, int sig)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80122da:	4b05      	ldr	r3, [pc, #20]	@ (80122f0 <_kill+0x20>)
 80122dc:	2216      	movs	r2, #22
 80122de:	601a      	str	r2, [r3, #0]
  return -1;
 80122e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr
 80122f0:	2400b77c 	.word	0x2400b77c

080122f4 <_exit>:

void _exit (int status)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80122fc:	f04f 31ff 	mov.w	r1, #4294967295
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7ff ffe5 	bl	80122d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012306:	bf00      	nop
 8012308:	e7fd      	b.n	8012306 <_exit+0x12>

0801230a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b086      	sub	sp, #24
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012316:	2300      	movs	r3, #0
 8012318:	617b      	str	r3, [r7, #20]
 801231a:	e00a      	b.n	8012332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801231c:	f3af 8000 	nop.w
 8012320:	4601      	mov	r1, r0
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	1c5a      	adds	r2, r3, #1
 8012326:	60ba      	str	r2, [r7, #8]
 8012328:	b2ca      	uxtb	r2, r1
 801232a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	3301      	adds	r3, #1
 8012330:	617b      	str	r3, [r7, #20]
 8012332:	697a      	ldr	r2, [r7, #20]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	429a      	cmp	r2, r3
 8012338:	dbf0      	blt.n	801231c <_read+0x12>
  }

  return len;
 801233a:	687b      	ldr	r3, [r7, #4]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3718      	adds	r7, #24
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012350:	2300      	movs	r3, #0
 8012352:	617b      	str	r3, [r7, #20]
 8012354:	e009      	b.n	801236a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	1c5a      	adds	r2, r3, #1
 801235a:	60ba      	str	r2, [r7, #8]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	4618      	mov	r0, r3
 8012360:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	3301      	adds	r3, #1
 8012368:	617b      	str	r3, [r7, #20]
 801236a:	697a      	ldr	r2, [r7, #20]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	429a      	cmp	r2, r3
 8012370:	dbf1      	blt.n	8012356 <_write+0x12>
  }
  return len;
 8012372:	687b      	ldr	r3, [r7, #4]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3718      	adds	r7, #24
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <_close>:

int _close(int file)
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012388:	4618      	mov	r0, r3
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012394:	b480      	push	{r7}
 8012396:	b083      	sub	sp, #12
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80123a4:	605a      	str	r2, [r3, #4]
  return 0;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <_isatty>:

int _isatty(int file)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80123bc:	2301      	movs	r3, #1
}
 80123be:	4618      	mov	r0, r3
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr

080123ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b085      	sub	sp, #20
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	60f8      	str	r0, [r7, #12]
 80123d2:	60b9      	str	r1, [r7, #8]
 80123d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3714      	adds	r7, #20
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80123ec:	4a14      	ldr	r2, [pc, #80]	@ (8012440 <_sbrk+0x5c>)
 80123ee:	4b15      	ldr	r3, [pc, #84]	@ (8012444 <_sbrk+0x60>)
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80123f8:	4b13      	ldr	r3, [pc, #76]	@ (8012448 <_sbrk+0x64>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d102      	bne.n	8012406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012400:	4b11      	ldr	r3, [pc, #68]	@ (8012448 <_sbrk+0x64>)
 8012402:	4a12      	ldr	r2, [pc, #72]	@ (801244c <_sbrk+0x68>)
 8012404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012406:	4b10      	ldr	r3, [pc, #64]	@ (8012448 <_sbrk+0x64>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4413      	add	r3, r2
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	429a      	cmp	r2, r3
 8012412:	d205      	bcs.n	8012420 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8012414:	4b0e      	ldr	r3, [pc, #56]	@ (8012450 <_sbrk+0x6c>)
 8012416:	220c      	movs	r2, #12
 8012418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801241a:	f04f 33ff 	mov.w	r3, #4294967295
 801241e:	e009      	b.n	8012434 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8012420:	4b09      	ldr	r3, [pc, #36]	@ (8012448 <_sbrk+0x64>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012426:	4b08      	ldr	r3, [pc, #32]	@ (8012448 <_sbrk+0x64>)
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4413      	add	r3, r2
 801242e:	4a06      	ldr	r2, [pc, #24]	@ (8012448 <_sbrk+0x64>)
 8012430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012432:	68fb      	ldr	r3, [r7, #12]
}
 8012434:	4618      	mov	r0, r3
 8012436:	371c      	adds	r7, #28
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	24080000 	.word	0x24080000
 8012444:	00000400 	.word	0x00000400
 8012448:	24007f5c 	.word	0x24007f5c
 801244c:	2400b788 	.word	0x2400b788
 8012450:	2400b77c 	.word	0x2400b77c

08012454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012454:	b480      	push	{r7}
 8012456:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8012458:	4b37      	ldr	r3, [pc, #220]	@ (8012538 <SystemInit+0xe4>)
 801245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801245e:	4a36      	ldr	r2, [pc, #216]	@ (8012538 <SystemInit+0xe4>)
 8012460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8012468:	4b34      	ldr	r3, [pc, #208]	@ (801253c <SystemInit+0xe8>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f003 030f 	and.w	r3, r3, #15
 8012470:	2b06      	cmp	r3, #6
 8012472:	d807      	bhi.n	8012484 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8012474:	4b31      	ldr	r3, [pc, #196]	@ (801253c <SystemInit+0xe8>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f023 030f 	bic.w	r3, r3, #15
 801247c:	4a2f      	ldr	r2, [pc, #188]	@ (801253c <SystemInit+0xe8>)
 801247e:	f043 0307 	orr.w	r3, r3, #7
 8012482:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8012484:	4b2e      	ldr	r3, [pc, #184]	@ (8012540 <SystemInit+0xec>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a2d      	ldr	r2, [pc, #180]	@ (8012540 <SystemInit+0xec>)
 801248a:	f043 0301 	orr.w	r3, r3, #1
 801248e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012490:	4b2b      	ldr	r3, [pc, #172]	@ (8012540 <SystemInit+0xec>)
 8012492:	2200      	movs	r2, #0
 8012494:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8012496:	4b2a      	ldr	r3, [pc, #168]	@ (8012540 <SystemInit+0xec>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	4929      	ldr	r1, [pc, #164]	@ (8012540 <SystemInit+0xec>)
 801249c:	4b29      	ldr	r3, [pc, #164]	@ (8012544 <SystemInit+0xf0>)
 801249e:	4013      	ands	r3, r2
 80124a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80124a2:	4b26      	ldr	r3, [pc, #152]	@ (801253c <SystemInit+0xe8>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f003 0308 	and.w	r3, r3, #8
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d007      	beq.n	80124be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80124ae:	4b23      	ldr	r3, [pc, #140]	@ (801253c <SystemInit+0xe8>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f023 030f 	bic.w	r3, r3, #15
 80124b6:	4a21      	ldr	r2, [pc, #132]	@ (801253c <SystemInit+0xe8>)
 80124b8:	f043 0307 	orr.w	r3, r3, #7
 80124bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80124be:	4b20      	ldr	r3, [pc, #128]	@ (8012540 <SystemInit+0xec>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80124c4:	4b1e      	ldr	r3, [pc, #120]	@ (8012540 <SystemInit+0xec>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80124ca:	4b1d      	ldr	r3, [pc, #116]	@ (8012540 <SystemInit+0xec>)
 80124cc:	2200      	movs	r2, #0
 80124ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80124d0:	4b1b      	ldr	r3, [pc, #108]	@ (8012540 <SystemInit+0xec>)
 80124d2:	4a1d      	ldr	r2, [pc, #116]	@ (8012548 <SystemInit+0xf4>)
 80124d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80124d6:	4b1a      	ldr	r3, [pc, #104]	@ (8012540 <SystemInit+0xec>)
 80124d8:	4a1c      	ldr	r2, [pc, #112]	@ (801254c <SystemInit+0xf8>)
 80124da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80124dc:	4b18      	ldr	r3, [pc, #96]	@ (8012540 <SystemInit+0xec>)
 80124de:	4a1c      	ldr	r2, [pc, #112]	@ (8012550 <SystemInit+0xfc>)
 80124e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80124e2:	4b17      	ldr	r3, [pc, #92]	@ (8012540 <SystemInit+0xec>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80124e8:	4b15      	ldr	r3, [pc, #84]	@ (8012540 <SystemInit+0xec>)
 80124ea:	4a19      	ldr	r2, [pc, #100]	@ (8012550 <SystemInit+0xfc>)
 80124ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80124ee:	4b14      	ldr	r3, [pc, #80]	@ (8012540 <SystemInit+0xec>)
 80124f0:	2200      	movs	r2, #0
 80124f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80124f4:	4b12      	ldr	r3, [pc, #72]	@ (8012540 <SystemInit+0xec>)
 80124f6:	4a16      	ldr	r2, [pc, #88]	@ (8012550 <SystemInit+0xfc>)
 80124f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80124fa:	4b11      	ldr	r3, [pc, #68]	@ (8012540 <SystemInit+0xec>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8012500:	4b0f      	ldr	r3, [pc, #60]	@ (8012540 <SystemInit+0xec>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	4a0e      	ldr	r2, [pc, #56]	@ (8012540 <SystemInit+0xec>)
 8012506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801250a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801250c:	4b0c      	ldr	r3, [pc, #48]	@ (8012540 <SystemInit+0xec>)
 801250e:	2200      	movs	r2, #0
 8012510:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8012512:	4b10      	ldr	r3, [pc, #64]	@ (8012554 <SystemInit+0x100>)
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	4b10      	ldr	r3, [pc, #64]	@ (8012558 <SystemInit+0x104>)
 8012518:	4013      	ands	r3, r2
 801251a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801251e:	d202      	bcs.n	8012526 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8012520:	4b0e      	ldr	r3, [pc, #56]	@ (801255c <SystemInit+0x108>)
 8012522:	2201      	movs	r2, #1
 8012524:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8012526:	4b0e      	ldr	r3, [pc, #56]	@ (8012560 <SystemInit+0x10c>)
 8012528:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 801252c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801252e:	bf00      	nop
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr
 8012538:	e000ed00 	.word	0xe000ed00
 801253c:	52002000 	.word	0x52002000
 8012540:	58024400 	.word	0x58024400
 8012544:	eaf6ed7f 	.word	0xeaf6ed7f
 8012548:	02020200 	.word	0x02020200
 801254c:	01ff0000 	.word	0x01ff0000
 8012550:	01010280 	.word	0x01010280
 8012554:	5c001000 	.word	0x5c001000
 8012558:	ffff0000 	.word	0xffff0000
 801255c:	51008108 	.word	0x51008108
 8012560:	52004000 	.word	0x52004000

08012564 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8012564:	b480      	push	{r7}
 8012566:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8012568:	4b09      	ldr	r3, [pc, #36]	@ (8012590 <ExitRun0Mode+0x2c>)
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	4a08      	ldr	r2, [pc, #32]	@ (8012590 <ExitRun0Mode+0x2c>)
 801256e:	f043 0302 	orr.w	r3, r3, #2
 8012572:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8012574:	bf00      	nop
 8012576:	4b06      	ldr	r3, [pc, #24]	@ (8012590 <ExitRun0Mode+0x2c>)
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801257e:	2b00      	cmp	r3, #0
 8012580:	d0f9      	beq.n	8012576 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8012582:	bf00      	nop
 8012584:	bf00      	nop
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	58024800 	.word	0x58024800

08012594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8012594:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80125d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8012598:	f7ff ffe4 	bl	8012564 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 801259c:	f7ff ff5a 	bl	8012454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80125a0:	480c      	ldr	r0, [pc, #48]	@ (80125d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80125a2:	490d      	ldr	r1, [pc, #52]	@ (80125d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80125a4:	4a0d      	ldr	r2, [pc, #52]	@ (80125dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80125a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80125a8:	e002      	b.n	80125b0 <LoopCopyDataInit>

080125aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80125aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80125ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80125ae:	3304      	adds	r3, #4

080125b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80125b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80125b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80125b4:	d3f9      	bcc.n	80125aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80125b6:	4a0a      	ldr	r2, [pc, #40]	@ (80125e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80125b8:	4c0a      	ldr	r4, [pc, #40]	@ (80125e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80125ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80125bc:	e001      	b.n	80125c2 <LoopFillZerobss>

080125be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80125be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80125c0:	3204      	adds	r2, #4

080125c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80125c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80125c4:	d3fb      	bcc.n	80125be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80125c6:	f017 f91b 	bl	8029800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80125ca:	f7ee fa71 	bl	8000ab0 <main>
  bx  lr
 80125ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80125d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80125d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80125d8:	24000238 	.word	0x24000238
  ldr r2, =_sidata
 80125dc:	080312e4 	.word	0x080312e4
  ldr r2, =_sbss
 80125e0:	24004c80 	.word	0x24004c80
  ldr r4, =_ebss
 80125e4:	2400b784 	.word	0x2400b784

080125e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80125e8:	e7fe      	b.n	80125e8 <ADC3_IRQHandler>

080125ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80125ea:	b480      	push	{r7}
 80125ec:	b083      	sub	sp, #12
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	6078      	str	r0, [r7, #4]
 80125f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d00b      	beq.n	8012612 <LAN8742_RegisterBusIO+0x28>
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d007      	beq.n	8012612 <LAN8742_RegisterBusIO+0x28>
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d003      	beq.n	8012612 <LAN8742_RegisterBusIO+0x28>
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	691b      	ldr	r3, [r3, #16]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d102      	bne.n	8012618 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8012612:	f04f 33ff 	mov.w	r3, #4294967295
 8012616:	e014      	b.n	8012642 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	685a      	ldr	r2, [r3, #4]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	68da      	ldr	r2, [r3, #12]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	689a      	ldr	r2, [r3, #8]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	691a      	ldr	r2, [r3, #16]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8012640:	2300      	movs	r3, #0
}
 8012642:	4618      	mov	r0, r3
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 801264e:	b580      	push	{r7, lr}
 8012650:	b086      	sub	sp, #24
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8012656:	2300      	movs	r3, #0
 8012658:	60fb      	str	r3, [r7, #12]
 801265a:	2300      	movs	r3, #0
 801265c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 801265e:	2300      	movs	r3, #0
 8012660:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d139      	bne.n	80126de <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	689b      	ldr	r3, [r3, #8]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d002      	beq.n	8012678 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	689b      	ldr	r3, [r3, #8]
 8012676:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2220      	movs	r2, #32
 801267c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 801267e:	2300      	movs	r3, #0
 8012680:	617b      	str	r3, [r7, #20]
 8012682:	e01c      	b.n	80126be <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	695b      	ldr	r3, [r3, #20]
 8012688:	f107 020c 	add.w	r2, r7, #12
 801268c:	2112      	movs	r1, #18
 801268e:	6978      	ldr	r0, [r7, #20]
 8012690:	4798      	blx	r3
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	da03      	bge.n	80126a0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8012698:	f06f 0304 	mvn.w	r3, #4
 801269c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 801269e:	e00b      	b.n	80126b8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	f003 031f 	and.w	r3, r3, #31
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d105      	bne.n	80126b8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	697a      	ldr	r2, [r7, #20]
 80126b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80126b2:	2300      	movs	r3, #0
 80126b4:	613b      	str	r3, [r7, #16]
         break;
 80126b6:	e005      	b.n	80126c4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	3301      	adds	r3, #1
 80126bc:	617b      	str	r3, [r7, #20]
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	2b1f      	cmp	r3, #31
 80126c2:	d9df      	bls.n	8012684 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2b1f      	cmp	r3, #31
 80126ca:	d902      	bls.n	80126d2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80126cc:	f06f 0302 	mvn.w	r3, #2
 80126d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d102      	bne.n	80126de <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2201      	movs	r2, #1
 80126dc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80126de:	693b      	ldr	r3, [r7, #16]
 }
 80126e0:	4618      	mov	r0, r3
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80126f0:	2300      	movs	r3, #0
 80126f2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	6810      	ldr	r0, [r2, #0]
 80126fc:	f107 020c 	add.w	r2, r7, #12
 8012700:	2101      	movs	r1, #1
 8012702:	4798      	blx	r3
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	da02      	bge.n	8012710 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 801270a:	f06f 0304 	mvn.w	r3, #4
 801270e:	e06e      	b.n	80127ee <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	695b      	ldr	r3, [r3, #20]
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	6810      	ldr	r0, [r2, #0]
 8012718:	f107 020c 	add.w	r2, r7, #12
 801271c:	2101      	movs	r1, #1
 801271e:	4798      	blx	r3
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	da02      	bge.n	801272c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8012726:	f06f 0304 	mvn.w	r3, #4
 801272a:	e060      	b.n	80127ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f003 0304 	and.w	r3, r3, #4
 8012732:	2b00      	cmp	r3, #0
 8012734:	d101      	bne.n	801273a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8012736:	2301      	movs	r3, #1
 8012738:	e059      	b.n	80127ee <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	695b      	ldr	r3, [r3, #20]
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	6810      	ldr	r0, [r2, #0]
 8012742:	f107 020c 	add.w	r2, r7, #12
 8012746:	2100      	movs	r1, #0
 8012748:	4798      	blx	r3
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	da02      	bge.n	8012756 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8012750:	f06f 0304 	mvn.w	r3, #4
 8012754:	e04b      	b.n	80127ee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801275c:	2b00      	cmp	r3, #0
 801275e:	d11b      	bne.n	8012798 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012766:	2b00      	cmp	r3, #0
 8012768:	d006      	beq.n	8012778 <LAN8742_GetLinkState+0x90>
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8012774:	2302      	movs	r3, #2
 8012776:	e03a      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8012782:	2303      	movs	r3, #3
 8012784:	e033      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8012790:	2304      	movs	r3, #4
 8012792:	e02c      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8012794:	2305      	movs	r3, #5
 8012796:	e02a      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	695b      	ldr	r3, [r3, #20]
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	6810      	ldr	r0, [r2, #0]
 80127a0:	f107 020c 	add.w	r2, r7, #12
 80127a4:	211f      	movs	r1, #31
 80127a6:	4798      	blx	r3
 80127a8:	4603      	mov	r3, r0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	da02      	bge.n	80127b4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80127ae:	f06f 0304 	mvn.w	r3, #4
 80127b2:	e01c      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d101      	bne.n	80127c2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80127be:	2306      	movs	r3, #6
 80127c0:	e015      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f003 031c 	and.w	r3, r3, #28
 80127c8:	2b18      	cmp	r3, #24
 80127ca:	d101      	bne.n	80127d0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80127cc:	2302      	movs	r3, #2
 80127ce:	e00e      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f003 031c 	and.w	r3, r3, #28
 80127d6:	2b08      	cmp	r3, #8
 80127d8:	d101      	bne.n	80127de <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80127da:	2303      	movs	r3, #3
 80127dc:	e007      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	f003 031c 	and.w	r3, r3, #28
 80127e4:	2b14      	cmp	r3, #20
 80127e6:	d101      	bne.n	80127ec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80127e8:	2304      	movs	r3, #4
 80127ea:	e000      	b.n	80127ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80127ec:	2305      	movs	r3, #5
    }
  }
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3710      	adds	r7, #16
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80127fe:	2003      	movs	r0, #3
 8012800:	f000 f9a0 	bl	8012b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012804:	f005 f8a6 	bl	8017954 <HAL_RCC_GetSysClockFreq>
 8012808:	4602      	mov	r2, r0
 801280a:	4b15      	ldr	r3, [pc, #84]	@ (8012860 <HAL_Init+0x68>)
 801280c:	699b      	ldr	r3, [r3, #24]
 801280e:	0a1b      	lsrs	r3, r3, #8
 8012810:	f003 030f 	and.w	r3, r3, #15
 8012814:	4913      	ldr	r1, [pc, #76]	@ (8012864 <HAL_Init+0x6c>)
 8012816:	5ccb      	ldrb	r3, [r1, r3]
 8012818:	f003 031f 	and.w	r3, r3, #31
 801281c:	fa22 f303 	lsr.w	r3, r2, r3
 8012820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012822:	4b0f      	ldr	r3, [pc, #60]	@ (8012860 <HAL_Init+0x68>)
 8012824:	699b      	ldr	r3, [r3, #24]
 8012826:	f003 030f 	and.w	r3, r3, #15
 801282a:	4a0e      	ldr	r2, [pc, #56]	@ (8012864 <HAL_Init+0x6c>)
 801282c:	5cd3      	ldrb	r3, [r2, r3]
 801282e:	f003 031f 	and.w	r3, r3, #31
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	fa22 f303 	lsr.w	r3, r2, r3
 8012838:	4a0b      	ldr	r2, [pc, #44]	@ (8012868 <HAL_Init+0x70>)
 801283a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801283c:	4a0b      	ldr	r2, [pc, #44]	@ (801286c <HAL_Init+0x74>)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012842:	2000      	movs	r0, #0
 8012844:	f000 f814 	bl	8012870 <HAL_InitTick>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d001      	beq.n	8012852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	e002      	b.n	8012858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012852:	f7ff fbcf 	bl	8011ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012856:	2300      	movs	r3, #0
}
 8012858:	4618      	mov	r0, r3
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	58024400 	.word	0x58024400
 8012864:	08030dc8 	.word	0x08030dc8
 8012868:	24000040 	.word	0x24000040
 801286c:	2400003c 	.word	0x2400003c

08012870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012878:	4b15      	ldr	r3, [pc, #84]	@ (80128d0 <HAL_InitTick+0x60>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d101      	bne.n	8012884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012880:	2301      	movs	r3, #1
 8012882:	e021      	b.n	80128c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8012884:	4b13      	ldr	r3, [pc, #76]	@ (80128d4 <HAL_InitTick+0x64>)
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	4b11      	ldr	r3, [pc, #68]	@ (80128d0 <HAL_InitTick+0x60>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	4619      	mov	r1, r3
 801288e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012892:	fbb3 f3f1 	udiv	r3, r3, r1
 8012896:	fbb2 f3f3 	udiv	r3, r2, r3
 801289a:	4618      	mov	r0, r3
 801289c:	f000 f985 	bl	8012baa <HAL_SYSTICK_Config>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d001      	beq.n	80128aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80128a6:	2301      	movs	r3, #1
 80128a8:	e00e      	b.n	80128c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b0f      	cmp	r3, #15
 80128ae:	d80a      	bhi.n	80128c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80128b0:	2200      	movs	r2, #0
 80128b2:	6879      	ldr	r1, [r7, #4]
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295
 80128b8:	f000 f94f 	bl	8012b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80128bc:	4a06      	ldr	r2, [pc, #24]	@ (80128d8 <HAL_InitTick+0x68>)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80128c2:	2300      	movs	r3, #0
 80128c4:	e000      	b.n	80128c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80128c6:	2301      	movs	r3, #1
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	24000048 	.word	0x24000048
 80128d4:	2400003c 	.word	0x2400003c
 80128d8:	24000044 	.word	0x24000044

080128dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80128e0:	4b06      	ldr	r3, [pc, #24]	@ (80128fc <HAL_IncTick+0x20>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	461a      	mov	r2, r3
 80128e6:	4b06      	ldr	r3, [pc, #24]	@ (8012900 <HAL_IncTick+0x24>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4413      	add	r3, r2
 80128ec:	4a04      	ldr	r2, [pc, #16]	@ (8012900 <HAL_IncTick+0x24>)
 80128ee:	6013      	str	r3, [r2, #0]
}
 80128f0:	bf00      	nop
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	24000048 	.word	0x24000048
 8012900:	24007f60 	.word	0x24007f60

08012904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012904:	b480      	push	{r7}
 8012906:	af00      	add	r7, sp, #0
  return uwTick;
 8012908:	4b03      	ldr	r3, [pc, #12]	@ (8012918 <HAL_GetTick+0x14>)
 801290a:	681b      	ldr	r3, [r3, #0]
}
 801290c:	4618      	mov	r0, r3
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	24007f60 	.word	0x24007f60

0801291c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012924:	f7ff ffee 	bl	8012904 <HAL_GetTick>
 8012928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012934:	d005      	beq.n	8012942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012936:	4b0a      	ldr	r3, [pc, #40]	@ (8012960 <HAL_Delay+0x44>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	461a      	mov	r2, r3
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	4413      	add	r3, r2
 8012940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012942:	bf00      	nop
 8012944:	f7ff ffde 	bl	8012904 <HAL_GetTick>
 8012948:	4602      	mov	r2, r0
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	1ad3      	subs	r3, r2, r3
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	429a      	cmp	r2, r3
 8012952:	d8f7      	bhi.n	8012944 <HAL_Delay+0x28>
  {
  }
}
 8012954:	bf00      	nop
 8012956:	bf00      	nop
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	24000048 	.word	0x24000048

08012964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012964:	b480      	push	{r7}
 8012966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012968:	4b03      	ldr	r3, [pc, #12]	@ (8012978 <HAL_GetREVID+0x14>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	0c1b      	lsrs	r3, r3, #16
}
 801296e:	4618      	mov	r0, r3
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr
 8012978:	5c001000 	.word	0x5c001000

0801297c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8012984:	4b06      	ldr	r3, [pc, #24]	@ (80129a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801298c:	4904      	ldr	r1, [pc, #16]	@ (80129a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	4313      	orrs	r3, r2
 8012992:	604b      	str	r3, [r1, #4]
}
 8012994:	bf00      	nop
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr
 80129a0:	58000400 	.word	0x58000400

080129a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b085      	sub	sp, #20
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f003 0307 	and.w	r3, r3, #7
 80129b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80129b4:	4b0b      	ldr	r3, [pc, #44]	@ (80129e4 <__NVIC_SetPriorityGrouping+0x40>)
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80129c0:	4013      	ands	r3, r2
 80129c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80129cc:	4b06      	ldr	r3, [pc, #24]	@ (80129e8 <__NVIC_SetPriorityGrouping+0x44>)
 80129ce:	4313      	orrs	r3, r2
 80129d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80129d2:	4a04      	ldr	r2, [pc, #16]	@ (80129e4 <__NVIC_SetPriorityGrouping+0x40>)
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	60d3      	str	r3, [r2, #12]
}
 80129d8:	bf00      	nop
 80129da:	3714      	adds	r7, #20
 80129dc:	46bd      	mov	sp, r7
 80129de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e2:	4770      	bx	lr
 80129e4:	e000ed00 	.word	0xe000ed00
 80129e8:	05fa0000 	.word	0x05fa0000

080129ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80129ec:	b480      	push	{r7}
 80129ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80129f0:	4b04      	ldr	r3, [pc, #16]	@ (8012a04 <__NVIC_GetPriorityGrouping+0x18>)
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	0a1b      	lsrs	r3, r3, #8
 80129f6:	f003 0307 	and.w	r3, r3, #7
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr
 8012a04:	e000ed00 	.word	0xe000ed00

08012a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	4603      	mov	r3, r0
 8012a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	db0b      	blt.n	8012a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a1a:	88fb      	ldrh	r3, [r7, #6]
 8012a1c:	f003 021f 	and.w	r2, r3, #31
 8012a20:	4907      	ldr	r1, [pc, #28]	@ (8012a40 <__NVIC_EnableIRQ+0x38>)
 8012a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a26:	095b      	lsrs	r3, r3, #5
 8012a28:	2001      	movs	r0, #1
 8012a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8012a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8012a32:	bf00      	nop
 8012a34:	370c      	adds	r7, #12
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	e000e100 	.word	0xe000e100

08012a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	6039      	str	r1, [r7, #0]
 8012a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	db0a      	blt.n	8012a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	b2da      	uxtb	r2, r3
 8012a5c:	490c      	ldr	r1, [pc, #48]	@ (8012a90 <__NVIC_SetPriority+0x4c>)
 8012a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a62:	0112      	lsls	r2, r2, #4
 8012a64:	b2d2      	uxtb	r2, r2
 8012a66:	440b      	add	r3, r1
 8012a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012a6c:	e00a      	b.n	8012a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	4908      	ldr	r1, [pc, #32]	@ (8012a94 <__NVIC_SetPriority+0x50>)
 8012a74:	88fb      	ldrh	r3, [r7, #6]
 8012a76:	f003 030f 	and.w	r3, r3, #15
 8012a7a:	3b04      	subs	r3, #4
 8012a7c:	0112      	lsls	r2, r2, #4
 8012a7e:	b2d2      	uxtb	r2, r2
 8012a80:	440b      	add	r3, r1
 8012a82:	761a      	strb	r2, [r3, #24]
}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr
 8012a90:	e000e100 	.word	0xe000e100
 8012a94:	e000ed00 	.word	0xe000ed00

08012a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b089      	sub	sp, #36	@ 0x24
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f003 0307 	and.w	r3, r3, #7
 8012aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	f1c3 0307 	rsb	r3, r3, #7
 8012ab2:	2b04      	cmp	r3, #4
 8012ab4:	bf28      	it	cs
 8012ab6:	2304      	movcs	r3, #4
 8012ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	3304      	adds	r3, #4
 8012abe:	2b06      	cmp	r3, #6
 8012ac0:	d902      	bls.n	8012ac8 <NVIC_EncodePriority+0x30>
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	3b03      	subs	r3, #3
 8012ac6:	e000      	b.n	8012aca <NVIC_EncodePriority+0x32>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012acc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad6:	43da      	mvns	r2, r3
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	401a      	ands	r2, r3
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8012aea:	43d9      	mvns	r1, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012af0:	4313      	orrs	r3, r2
         );
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3724      	adds	r7, #36	@ 0x24
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
	...

08012b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012b10:	d301      	bcc.n	8012b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012b12:	2301      	movs	r3, #1
 8012b14:	e00f      	b.n	8012b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012b16:	4a0a      	ldr	r2, [pc, #40]	@ (8012b40 <SysTick_Config+0x40>)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012b1e:	210f      	movs	r1, #15
 8012b20:	f04f 30ff 	mov.w	r0, #4294967295
 8012b24:	f7ff ff8e 	bl	8012a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012b28:	4b05      	ldr	r3, [pc, #20]	@ (8012b40 <SysTick_Config+0x40>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012b2e:	4b04      	ldr	r3, [pc, #16]	@ (8012b40 <SysTick_Config+0x40>)
 8012b30:	2207      	movs	r2, #7
 8012b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012b34:	2300      	movs	r3, #0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	e000e010 	.word	0xe000e010

08012b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7ff ff29 	bl	80129a4 <__NVIC_SetPriorityGrouping>
}
 8012b52:	bf00      	nop
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b086      	sub	sp, #24
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	4603      	mov	r3, r0
 8012b62:	60b9      	str	r1, [r7, #8]
 8012b64:	607a      	str	r2, [r7, #4]
 8012b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012b68:	f7ff ff40 	bl	80129ec <__NVIC_GetPriorityGrouping>
 8012b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	68b9      	ldr	r1, [r7, #8]
 8012b72:	6978      	ldr	r0, [r7, #20]
 8012b74:	f7ff ff90 	bl	8012a98 <NVIC_EncodePriority>
 8012b78:	4602      	mov	r2, r0
 8012b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b7e:	4611      	mov	r1, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff ff5f 	bl	8012a44 <__NVIC_SetPriority>
}
 8012b86:	bf00      	nop
 8012b88:	3718      	adds	r7, #24
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b082      	sub	sp, #8
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	4603      	mov	r3, r0
 8012b96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7ff ff33 	bl	8012a08 <__NVIC_EnableIRQ>
}
 8012ba2:	bf00      	nop
 8012ba4:	3708      	adds	r7, #8
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012baa:	b580      	push	{r7, lr}
 8012bac:	b082      	sub	sp, #8
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f7ff ffa4 	bl	8012b00 <SysTick_Config>
 8012bb8:	4603      	mov	r3, r0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
	...

08012bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8012bcc:	f7ff fe9a 	bl	8012904 <HAL_GetTick>
 8012bd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d101      	bne.n	8012bdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e2dc      	b.n	8013196 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d008      	beq.n	8012bfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2280      	movs	r2, #128	@ 0x80
 8012bec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e2cd      	b.n	8013196 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	4a76      	ldr	r2, [pc, #472]	@ (8012dd8 <HAL_DMA_Abort+0x214>)
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d04a      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	4a74      	ldr	r2, [pc, #464]	@ (8012ddc <HAL_DMA_Abort+0x218>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d045      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4a73      	ldr	r2, [pc, #460]	@ (8012de0 <HAL_DMA_Abort+0x21c>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d040      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4a71      	ldr	r2, [pc, #452]	@ (8012de4 <HAL_DMA_Abort+0x220>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d03b      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a70      	ldr	r2, [pc, #448]	@ (8012de8 <HAL_DMA_Abort+0x224>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d036      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a6e      	ldr	r2, [pc, #440]	@ (8012dec <HAL_DMA_Abort+0x228>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d031      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a6d      	ldr	r2, [pc, #436]	@ (8012df0 <HAL_DMA_Abort+0x22c>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d02c      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a6b      	ldr	r2, [pc, #428]	@ (8012df4 <HAL_DMA_Abort+0x230>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d027      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	4a6a      	ldr	r2, [pc, #424]	@ (8012df8 <HAL_DMA_Abort+0x234>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d022      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a68      	ldr	r2, [pc, #416]	@ (8012dfc <HAL_DMA_Abort+0x238>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d01d      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4a67      	ldr	r2, [pc, #412]	@ (8012e00 <HAL_DMA_Abort+0x23c>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d018      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4a65      	ldr	r2, [pc, #404]	@ (8012e04 <HAL_DMA_Abort+0x240>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d013      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	4a64      	ldr	r2, [pc, #400]	@ (8012e08 <HAL_DMA_Abort+0x244>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d00e      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4a62      	ldr	r2, [pc, #392]	@ (8012e0c <HAL_DMA_Abort+0x248>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d009      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a61      	ldr	r2, [pc, #388]	@ (8012e10 <HAL_DMA_Abort+0x24c>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d004      	beq.n	8012c9a <HAL_DMA_Abort+0xd6>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4a5f      	ldr	r2, [pc, #380]	@ (8012e14 <HAL_DMA_Abort+0x250>)
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d101      	bne.n	8012c9e <HAL_DMA_Abort+0xda>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e000      	b.n	8012ca0 <HAL_DMA_Abort+0xdc>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d013      	beq.n	8012ccc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f022 021e 	bic.w	r2, r2, #30
 8012cb2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	695a      	ldr	r2, [r3, #20]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012cc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	617b      	str	r3, [r7, #20]
 8012cca:	e00a      	b.n	8012ce2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f022 020e 	bic.w	r2, r2, #14
 8012cda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8012dd8 <HAL_DMA_Abort+0x214>)
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d072      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8012ddc <HAL_DMA_Abort+0x218>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d06d      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a39      	ldr	r2, [pc, #228]	@ (8012de0 <HAL_DMA_Abort+0x21c>)
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d068      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4a37      	ldr	r2, [pc, #220]	@ (8012de4 <HAL_DMA_Abort+0x220>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d063      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a36      	ldr	r2, [pc, #216]	@ (8012de8 <HAL_DMA_Abort+0x224>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d05e      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a34      	ldr	r2, [pc, #208]	@ (8012dec <HAL_DMA_Abort+0x228>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d059      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4a33      	ldr	r2, [pc, #204]	@ (8012df0 <HAL_DMA_Abort+0x22c>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d054      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4a31      	ldr	r2, [pc, #196]	@ (8012df4 <HAL_DMA_Abort+0x230>)
 8012d2e:	4293      	cmp	r3, r2
 8012d30:	d04f      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	4a30      	ldr	r2, [pc, #192]	@ (8012df8 <HAL_DMA_Abort+0x234>)
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	d04a      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a2e      	ldr	r2, [pc, #184]	@ (8012dfc <HAL_DMA_Abort+0x238>)
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d045      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8012e00 <HAL_DMA_Abort+0x23c>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d040      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4a2b      	ldr	r2, [pc, #172]	@ (8012e04 <HAL_DMA_Abort+0x240>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d03b      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8012e08 <HAL_DMA_Abort+0x244>)
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d036      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4a28      	ldr	r2, [pc, #160]	@ (8012e0c <HAL_DMA_Abort+0x248>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d031      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	4a27      	ldr	r2, [pc, #156]	@ (8012e10 <HAL_DMA_Abort+0x24c>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d02c      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a25      	ldr	r2, [pc, #148]	@ (8012e14 <HAL_DMA_Abort+0x250>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d027      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4a24      	ldr	r2, [pc, #144]	@ (8012e18 <HAL_DMA_Abort+0x254>)
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d022      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4a22      	ldr	r2, [pc, #136]	@ (8012e1c <HAL_DMA_Abort+0x258>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d01d      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a21      	ldr	r2, [pc, #132]	@ (8012e20 <HAL_DMA_Abort+0x25c>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d018      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	4a1f      	ldr	r2, [pc, #124]	@ (8012e24 <HAL_DMA_Abort+0x260>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d013      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	4a1e      	ldr	r2, [pc, #120]	@ (8012e28 <HAL_DMA_Abort+0x264>)
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d00e      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	4a1c      	ldr	r2, [pc, #112]	@ (8012e2c <HAL_DMA_Abort+0x268>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d009      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8012e30 <HAL_DMA_Abort+0x26c>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d004      	beq.n	8012dd2 <HAL_DMA_Abort+0x20e>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	4a19      	ldr	r2, [pc, #100]	@ (8012e34 <HAL_DMA_Abort+0x270>)
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	d132      	bne.n	8012e38 <HAL_DMA_Abort+0x274>
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e031      	b.n	8012e3a <HAL_DMA_Abort+0x276>
 8012dd6:	bf00      	nop
 8012dd8:	40020010 	.word	0x40020010
 8012ddc:	40020028 	.word	0x40020028
 8012de0:	40020040 	.word	0x40020040
 8012de4:	40020058 	.word	0x40020058
 8012de8:	40020070 	.word	0x40020070
 8012dec:	40020088 	.word	0x40020088
 8012df0:	400200a0 	.word	0x400200a0
 8012df4:	400200b8 	.word	0x400200b8
 8012df8:	40020410 	.word	0x40020410
 8012dfc:	40020428 	.word	0x40020428
 8012e00:	40020440 	.word	0x40020440
 8012e04:	40020458 	.word	0x40020458
 8012e08:	40020470 	.word	0x40020470
 8012e0c:	40020488 	.word	0x40020488
 8012e10:	400204a0 	.word	0x400204a0
 8012e14:	400204b8 	.word	0x400204b8
 8012e18:	58025408 	.word	0x58025408
 8012e1c:	5802541c 	.word	0x5802541c
 8012e20:	58025430 	.word	0x58025430
 8012e24:	58025444 	.word	0x58025444
 8012e28:	58025458 	.word	0x58025458
 8012e2c:	5802546c 	.word	0x5802546c
 8012e30:	58025480 	.word	0x58025480
 8012e34:	58025494 	.word	0x58025494
 8012e38:	2300      	movs	r3, #0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d007      	beq.n	8012e4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a6d      	ldr	r2, [pc, #436]	@ (8013008 <HAL_DMA_Abort+0x444>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d04a      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a6b      	ldr	r2, [pc, #428]	@ (801300c <HAL_DMA_Abort+0x448>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d045      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a6a      	ldr	r2, [pc, #424]	@ (8013010 <HAL_DMA_Abort+0x44c>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d040      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4a68      	ldr	r2, [pc, #416]	@ (8013014 <HAL_DMA_Abort+0x450>)
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d03b      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4a67      	ldr	r2, [pc, #412]	@ (8013018 <HAL_DMA_Abort+0x454>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d036      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a65      	ldr	r2, [pc, #404]	@ (801301c <HAL_DMA_Abort+0x458>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d031      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4a64      	ldr	r2, [pc, #400]	@ (8013020 <HAL_DMA_Abort+0x45c>)
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d02c      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a62      	ldr	r2, [pc, #392]	@ (8013024 <HAL_DMA_Abort+0x460>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d027      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4a61      	ldr	r2, [pc, #388]	@ (8013028 <HAL_DMA_Abort+0x464>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d022      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4a5f      	ldr	r2, [pc, #380]	@ (801302c <HAL_DMA_Abort+0x468>)
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d01d      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4a5e      	ldr	r2, [pc, #376]	@ (8013030 <HAL_DMA_Abort+0x46c>)
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d018      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8013034 <HAL_DMA_Abort+0x470>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d013      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a5b      	ldr	r2, [pc, #364]	@ (8013038 <HAL_DMA_Abort+0x474>)
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	d00e      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	4a59      	ldr	r2, [pc, #356]	@ (801303c <HAL_DMA_Abort+0x478>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d009      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4a58      	ldr	r2, [pc, #352]	@ (8013040 <HAL_DMA_Abort+0x47c>)
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d004      	beq.n	8012eee <HAL_DMA_Abort+0x32a>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4a56      	ldr	r2, [pc, #344]	@ (8013044 <HAL_DMA_Abort+0x480>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d108      	bne.n	8012f00 <HAL_DMA_Abort+0x33c>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	f022 0201 	bic.w	r2, r2, #1
 8012efc:	601a      	str	r2, [r3, #0]
 8012efe:	e007      	b.n	8012f10 <HAL_DMA_Abort+0x34c>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f022 0201 	bic.w	r2, r2, #1
 8012f0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8012f10:	e013      	b.n	8012f3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012f12:	f7ff fcf7 	bl	8012904 <HAL_GetTick>
 8012f16:	4602      	mov	r2, r0
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	2b05      	cmp	r3, #5
 8012f1e:	d90c      	bls.n	8012f3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2220      	movs	r2, #32
 8012f24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2203      	movs	r2, #3
 8012f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2200      	movs	r2, #0
 8012f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012f36:	2301      	movs	r3, #1
 8012f38:	e12d      	b.n	8013196 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f003 0301 	and.w	r3, r3, #1
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1e5      	bne.n	8012f12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8013008 <HAL_DMA_Abort+0x444>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d04a      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a2d      	ldr	r2, [pc, #180]	@ (801300c <HAL_DMA_Abort+0x448>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d045      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8013010 <HAL_DMA_Abort+0x44c>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d040      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4a2a      	ldr	r2, [pc, #168]	@ (8013014 <HAL_DMA_Abort+0x450>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d03b      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4a29      	ldr	r2, [pc, #164]	@ (8013018 <HAL_DMA_Abort+0x454>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d036      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a27      	ldr	r2, [pc, #156]	@ (801301c <HAL_DMA_Abort+0x458>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d031      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4a26      	ldr	r2, [pc, #152]	@ (8013020 <HAL_DMA_Abort+0x45c>)
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d02c      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a24      	ldr	r2, [pc, #144]	@ (8013024 <HAL_DMA_Abort+0x460>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d027      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4a23      	ldr	r2, [pc, #140]	@ (8013028 <HAL_DMA_Abort+0x464>)
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d022      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	4a21      	ldr	r2, [pc, #132]	@ (801302c <HAL_DMA_Abort+0x468>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d01d      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4a20      	ldr	r2, [pc, #128]	@ (8013030 <HAL_DMA_Abort+0x46c>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d018      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8013034 <HAL_DMA_Abort+0x470>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d013      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8013038 <HAL_DMA_Abort+0x474>)
 8012fc4:	4293      	cmp	r3, r2
 8012fc6:	d00e      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4a1b      	ldr	r2, [pc, #108]	@ (801303c <HAL_DMA_Abort+0x478>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d009      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8013040 <HAL_DMA_Abort+0x47c>)
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d004      	beq.n	8012fe6 <HAL_DMA_Abort+0x422>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a18      	ldr	r2, [pc, #96]	@ (8013044 <HAL_DMA_Abort+0x480>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d101      	bne.n	8012fea <HAL_DMA_Abort+0x426>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e000      	b.n	8012fec <HAL_DMA_Abort+0x428>
 8012fea:	2300      	movs	r3, #0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d02b      	beq.n	8013048 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ff4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ffa:	f003 031f 	and.w	r3, r3, #31
 8012ffe:	223f      	movs	r2, #63	@ 0x3f
 8013000:	409a      	lsls	r2, r3
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	609a      	str	r2, [r3, #8]
 8013006:	e02a      	b.n	801305e <HAL_DMA_Abort+0x49a>
 8013008:	40020010 	.word	0x40020010
 801300c:	40020028 	.word	0x40020028
 8013010:	40020040 	.word	0x40020040
 8013014:	40020058 	.word	0x40020058
 8013018:	40020070 	.word	0x40020070
 801301c:	40020088 	.word	0x40020088
 8013020:	400200a0 	.word	0x400200a0
 8013024:	400200b8 	.word	0x400200b8
 8013028:	40020410 	.word	0x40020410
 801302c:	40020428 	.word	0x40020428
 8013030:	40020440 	.word	0x40020440
 8013034:	40020458 	.word	0x40020458
 8013038:	40020470 	.word	0x40020470
 801303c:	40020488 	.word	0x40020488
 8013040:	400204a0 	.word	0x400204a0
 8013044:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801304c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013052:	f003 031f 	and.w	r3, r3, #31
 8013056:	2201      	movs	r2, #1
 8013058:	409a      	lsls	r2, r3
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a4f      	ldr	r2, [pc, #316]	@ (80131a0 <HAL_DMA_Abort+0x5dc>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d072      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a4d      	ldr	r2, [pc, #308]	@ (80131a4 <HAL_DMA_Abort+0x5e0>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d06d      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a4c      	ldr	r2, [pc, #304]	@ (80131a8 <HAL_DMA_Abort+0x5e4>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d068      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a4a      	ldr	r2, [pc, #296]	@ (80131ac <HAL_DMA_Abort+0x5e8>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d063      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a49      	ldr	r2, [pc, #292]	@ (80131b0 <HAL_DMA_Abort+0x5ec>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d05e      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a47      	ldr	r2, [pc, #284]	@ (80131b4 <HAL_DMA_Abort+0x5f0>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d059      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a46      	ldr	r2, [pc, #280]	@ (80131b8 <HAL_DMA_Abort+0x5f4>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d054      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4a44      	ldr	r2, [pc, #272]	@ (80131bc <HAL_DMA_Abort+0x5f8>)
 80130aa:	4293      	cmp	r3, r2
 80130ac:	d04f      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4a43      	ldr	r2, [pc, #268]	@ (80131c0 <HAL_DMA_Abort+0x5fc>)
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d04a      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4a41      	ldr	r2, [pc, #260]	@ (80131c4 <HAL_DMA_Abort+0x600>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d045      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a40      	ldr	r2, [pc, #256]	@ (80131c8 <HAL_DMA_Abort+0x604>)
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d040      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a3e      	ldr	r2, [pc, #248]	@ (80131cc <HAL_DMA_Abort+0x608>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d03b      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4a3d      	ldr	r2, [pc, #244]	@ (80131d0 <HAL_DMA_Abort+0x60c>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d036      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a3b      	ldr	r2, [pc, #236]	@ (80131d4 <HAL_DMA_Abort+0x610>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d031      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	4a3a      	ldr	r2, [pc, #232]	@ (80131d8 <HAL_DMA_Abort+0x614>)
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d02c      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a38      	ldr	r2, [pc, #224]	@ (80131dc <HAL_DMA_Abort+0x618>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d027      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4a37      	ldr	r2, [pc, #220]	@ (80131e0 <HAL_DMA_Abort+0x61c>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d022      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a35      	ldr	r2, [pc, #212]	@ (80131e4 <HAL_DMA_Abort+0x620>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d01d      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a34      	ldr	r2, [pc, #208]	@ (80131e8 <HAL_DMA_Abort+0x624>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d018      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a32      	ldr	r2, [pc, #200]	@ (80131ec <HAL_DMA_Abort+0x628>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d013      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4a31      	ldr	r2, [pc, #196]	@ (80131f0 <HAL_DMA_Abort+0x62c>)
 801312c:	4293      	cmp	r3, r2
 801312e:	d00e      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4a2f      	ldr	r2, [pc, #188]	@ (80131f4 <HAL_DMA_Abort+0x630>)
 8013136:	4293      	cmp	r3, r2
 8013138:	d009      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	4a2e      	ldr	r2, [pc, #184]	@ (80131f8 <HAL_DMA_Abort+0x634>)
 8013140:	4293      	cmp	r3, r2
 8013142:	d004      	beq.n	801314e <HAL_DMA_Abort+0x58a>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4a2c      	ldr	r2, [pc, #176]	@ (80131fc <HAL_DMA_Abort+0x638>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d101      	bne.n	8013152 <HAL_DMA_Abort+0x58e>
 801314e:	2301      	movs	r3, #1
 8013150:	e000      	b.n	8013154 <HAL_DMA_Abort+0x590>
 8013152:	2300      	movs	r3, #0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d015      	beq.n	8013184 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013160:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013166:	2b00      	cmp	r3, #0
 8013168:	d00c      	beq.n	8013184 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013178:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013182:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2201      	movs	r2, #1
 8013188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3718      	adds	r7, #24
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	40020010 	.word	0x40020010
 80131a4:	40020028 	.word	0x40020028
 80131a8:	40020040 	.word	0x40020040
 80131ac:	40020058 	.word	0x40020058
 80131b0:	40020070 	.word	0x40020070
 80131b4:	40020088 	.word	0x40020088
 80131b8:	400200a0 	.word	0x400200a0
 80131bc:	400200b8 	.word	0x400200b8
 80131c0:	40020410 	.word	0x40020410
 80131c4:	40020428 	.word	0x40020428
 80131c8:	40020440 	.word	0x40020440
 80131cc:	40020458 	.word	0x40020458
 80131d0:	40020470 	.word	0x40020470
 80131d4:	40020488 	.word	0x40020488
 80131d8:	400204a0 	.word	0x400204a0
 80131dc:	400204b8 	.word	0x400204b8
 80131e0:	58025408 	.word	0x58025408
 80131e4:	5802541c 	.word	0x5802541c
 80131e8:	58025430 	.word	0x58025430
 80131ec:	58025444 	.word	0x58025444
 80131f0:	58025458 	.word	0x58025458
 80131f4:	5802546c 	.word	0x5802546c
 80131f8:	58025480 	.word	0x58025480
 80131fc:	58025494 	.word	0x58025494

08013200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d101      	bne.n	8013212 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801320e:	2301      	movs	r3, #1
 8013210:	e237      	b.n	8013682 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013218:	b2db      	uxtb	r3, r3
 801321a:	2b02      	cmp	r3, #2
 801321c:	d004      	beq.n	8013228 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2280      	movs	r2, #128	@ 0x80
 8013222:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8013224:	2301      	movs	r3, #1
 8013226:	e22c      	b.n	8013682 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a5c      	ldr	r2, [pc, #368]	@ (80133a0 <HAL_DMA_Abort_IT+0x1a0>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d04a      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4a5b      	ldr	r2, [pc, #364]	@ (80133a4 <HAL_DMA_Abort_IT+0x1a4>)
 8013238:	4293      	cmp	r3, r2
 801323a:	d045      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a59      	ldr	r2, [pc, #356]	@ (80133a8 <HAL_DMA_Abort_IT+0x1a8>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d040      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a58      	ldr	r2, [pc, #352]	@ (80133ac <HAL_DMA_Abort_IT+0x1ac>)
 801324c:	4293      	cmp	r3, r2
 801324e:	d03b      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	4a56      	ldr	r2, [pc, #344]	@ (80133b0 <HAL_DMA_Abort_IT+0x1b0>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d036      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4a55      	ldr	r2, [pc, #340]	@ (80133b4 <HAL_DMA_Abort_IT+0x1b4>)
 8013260:	4293      	cmp	r3, r2
 8013262:	d031      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4a53      	ldr	r2, [pc, #332]	@ (80133b8 <HAL_DMA_Abort_IT+0x1b8>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d02c      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	4a52      	ldr	r2, [pc, #328]	@ (80133bc <HAL_DMA_Abort_IT+0x1bc>)
 8013274:	4293      	cmp	r3, r2
 8013276:	d027      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a50      	ldr	r2, [pc, #320]	@ (80133c0 <HAL_DMA_Abort_IT+0x1c0>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d022      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	4a4f      	ldr	r2, [pc, #316]	@ (80133c4 <HAL_DMA_Abort_IT+0x1c4>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d01d      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a4d      	ldr	r2, [pc, #308]	@ (80133c8 <HAL_DMA_Abort_IT+0x1c8>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d018      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4a4c      	ldr	r2, [pc, #304]	@ (80133cc <HAL_DMA_Abort_IT+0x1cc>)
 801329c:	4293      	cmp	r3, r2
 801329e:	d013      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a4a      	ldr	r2, [pc, #296]	@ (80133d0 <HAL_DMA_Abort_IT+0x1d0>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d00e      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4a49      	ldr	r2, [pc, #292]	@ (80133d4 <HAL_DMA_Abort_IT+0x1d4>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d009      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	4a47      	ldr	r2, [pc, #284]	@ (80133d8 <HAL_DMA_Abort_IT+0x1d8>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d004      	beq.n	80132c8 <HAL_DMA_Abort_IT+0xc8>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	4a46      	ldr	r2, [pc, #280]	@ (80133dc <HAL_DMA_Abort_IT+0x1dc>)
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d101      	bne.n	80132cc <HAL_DMA_Abort_IT+0xcc>
 80132c8:	2301      	movs	r3, #1
 80132ca:	e000      	b.n	80132ce <HAL_DMA_Abort_IT+0xce>
 80132cc:	2300      	movs	r3, #0
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	f000 8086 	beq.w	80133e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2204      	movs	r2, #4
 80132d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4a2f      	ldr	r2, [pc, #188]	@ (80133a0 <HAL_DMA_Abort_IT+0x1a0>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d04a      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4a2e      	ldr	r2, [pc, #184]	@ (80133a4 <HAL_DMA_Abort_IT+0x1a4>)
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d045      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4a2c      	ldr	r2, [pc, #176]	@ (80133a8 <HAL_DMA_Abort_IT+0x1a8>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d040      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	4a2b      	ldr	r2, [pc, #172]	@ (80133ac <HAL_DMA_Abort_IT+0x1ac>)
 8013300:	4293      	cmp	r3, r2
 8013302:	d03b      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4a29      	ldr	r2, [pc, #164]	@ (80133b0 <HAL_DMA_Abort_IT+0x1b0>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d036      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4a28      	ldr	r2, [pc, #160]	@ (80133b4 <HAL_DMA_Abort_IT+0x1b4>)
 8013314:	4293      	cmp	r3, r2
 8013316:	d031      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4a26      	ldr	r2, [pc, #152]	@ (80133b8 <HAL_DMA_Abort_IT+0x1b8>)
 801331e:	4293      	cmp	r3, r2
 8013320:	d02c      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	4a25      	ldr	r2, [pc, #148]	@ (80133bc <HAL_DMA_Abort_IT+0x1bc>)
 8013328:	4293      	cmp	r3, r2
 801332a:	d027      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	4a23      	ldr	r2, [pc, #140]	@ (80133c0 <HAL_DMA_Abort_IT+0x1c0>)
 8013332:	4293      	cmp	r3, r2
 8013334:	d022      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4a22      	ldr	r2, [pc, #136]	@ (80133c4 <HAL_DMA_Abort_IT+0x1c4>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d01d      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4a20      	ldr	r2, [pc, #128]	@ (80133c8 <HAL_DMA_Abort_IT+0x1c8>)
 8013346:	4293      	cmp	r3, r2
 8013348:	d018      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a1f      	ldr	r2, [pc, #124]	@ (80133cc <HAL_DMA_Abort_IT+0x1cc>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d013      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a1d      	ldr	r2, [pc, #116]	@ (80133d0 <HAL_DMA_Abort_IT+0x1d0>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d00e      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4a1c      	ldr	r2, [pc, #112]	@ (80133d4 <HAL_DMA_Abort_IT+0x1d4>)
 8013364:	4293      	cmp	r3, r2
 8013366:	d009      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a1a      	ldr	r2, [pc, #104]	@ (80133d8 <HAL_DMA_Abort_IT+0x1d8>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d004      	beq.n	801337c <HAL_DMA_Abort_IT+0x17c>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	4a19      	ldr	r2, [pc, #100]	@ (80133dc <HAL_DMA_Abort_IT+0x1dc>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d108      	bne.n	801338e <HAL_DMA_Abort_IT+0x18e>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	f022 0201 	bic.w	r2, r2, #1
 801338a:	601a      	str	r2, [r3, #0]
 801338c:	e178      	b.n	8013680 <HAL_DMA_Abort_IT+0x480>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f022 0201 	bic.w	r2, r2, #1
 801339c:	601a      	str	r2, [r3, #0]
 801339e:	e16f      	b.n	8013680 <HAL_DMA_Abort_IT+0x480>
 80133a0:	40020010 	.word	0x40020010
 80133a4:	40020028 	.word	0x40020028
 80133a8:	40020040 	.word	0x40020040
 80133ac:	40020058 	.word	0x40020058
 80133b0:	40020070 	.word	0x40020070
 80133b4:	40020088 	.word	0x40020088
 80133b8:	400200a0 	.word	0x400200a0
 80133bc:	400200b8 	.word	0x400200b8
 80133c0:	40020410 	.word	0x40020410
 80133c4:	40020428 	.word	0x40020428
 80133c8:	40020440 	.word	0x40020440
 80133cc:	40020458 	.word	0x40020458
 80133d0:	40020470 	.word	0x40020470
 80133d4:	40020488 	.word	0x40020488
 80133d8:	400204a0 	.word	0x400204a0
 80133dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f022 020e 	bic.w	r2, r2, #14
 80133ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a6c      	ldr	r2, [pc, #432]	@ (80135a8 <HAL_DMA_Abort_IT+0x3a8>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d04a      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	4a6b      	ldr	r2, [pc, #428]	@ (80135ac <HAL_DMA_Abort_IT+0x3ac>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d045      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4a69      	ldr	r2, [pc, #420]	@ (80135b0 <HAL_DMA_Abort_IT+0x3b0>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d040      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a68      	ldr	r2, [pc, #416]	@ (80135b4 <HAL_DMA_Abort_IT+0x3b4>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d03b      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a66      	ldr	r2, [pc, #408]	@ (80135b8 <HAL_DMA_Abort_IT+0x3b8>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d036      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4a65      	ldr	r2, [pc, #404]	@ (80135bc <HAL_DMA_Abort_IT+0x3bc>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d031      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a63      	ldr	r2, [pc, #396]	@ (80135c0 <HAL_DMA_Abort_IT+0x3c0>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d02c      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a62      	ldr	r2, [pc, #392]	@ (80135c4 <HAL_DMA_Abort_IT+0x3c4>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d027      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a60      	ldr	r2, [pc, #384]	@ (80135c8 <HAL_DMA_Abort_IT+0x3c8>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d022      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	4a5f      	ldr	r2, [pc, #380]	@ (80135cc <HAL_DMA_Abort_IT+0x3cc>)
 8013450:	4293      	cmp	r3, r2
 8013452:	d01d      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4a5d      	ldr	r2, [pc, #372]	@ (80135d0 <HAL_DMA_Abort_IT+0x3d0>)
 801345a:	4293      	cmp	r3, r2
 801345c:	d018      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	4a5c      	ldr	r2, [pc, #368]	@ (80135d4 <HAL_DMA_Abort_IT+0x3d4>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d013      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4a5a      	ldr	r2, [pc, #360]	@ (80135d8 <HAL_DMA_Abort_IT+0x3d8>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d00e      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4a59      	ldr	r2, [pc, #356]	@ (80135dc <HAL_DMA_Abort_IT+0x3dc>)
 8013478:	4293      	cmp	r3, r2
 801347a:	d009      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4a57      	ldr	r2, [pc, #348]	@ (80135e0 <HAL_DMA_Abort_IT+0x3e0>)
 8013482:	4293      	cmp	r3, r2
 8013484:	d004      	beq.n	8013490 <HAL_DMA_Abort_IT+0x290>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a56      	ldr	r2, [pc, #344]	@ (80135e4 <HAL_DMA_Abort_IT+0x3e4>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d108      	bne.n	80134a2 <HAL_DMA_Abort_IT+0x2a2>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	f022 0201 	bic.w	r2, r2, #1
 801349e:	601a      	str	r2, [r3, #0]
 80134a0:	e007      	b.n	80134b2 <HAL_DMA_Abort_IT+0x2b2>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	681a      	ldr	r2, [r3, #0]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f022 0201 	bic.w	r2, r2, #1
 80134b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	4a3c      	ldr	r2, [pc, #240]	@ (80135a8 <HAL_DMA_Abort_IT+0x3a8>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d072      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a3a      	ldr	r2, [pc, #232]	@ (80135ac <HAL_DMA_Abort_IT+0x3ac>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d06d      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	4a39      	ldr	r2, [pc, #228]	@ (80135b0 <HAL_DMA_Abort_IT+0x3b0>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d068      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4a37      	ldr	r2, [pc, #220]	@ (80135b4 <HAL_DMA_Abort_IT+0x3b4>)
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d063      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4a36      	ldr	r2, [pc, #216]	@ (80135b8 <HAL_DMA_Abort_IT+0x3b8>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d05e      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	4a34      	ldr	r2, [pc, #208]	@ (80135bc <HAL_DMA_Abort_IT+0x3bc>)
 80134ea:	4293      	cmp	r3, r2
 80134ec:	d059      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	4a33      	ldr	r2, [pc, #204]	@ (80135c0 <HAL_DMA_Abort_IT+0x3c0>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d054      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4a31      	ldr	r2, [pc, #196]	@ (80135c4 <HAL_DMA_Abort_IT+0x3c4>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d04f      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	4a30      	ldr	r2, [pc, #192]	@ (80135c8 <HAL_DMA_Abort_IT+0x3c8>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d04a      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a2e      	ldr	r2, [pc, #184]	@ (80135cc <HAL_DMA_Abort_IT+0x3cc>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d045      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a2d      	ldr	r2, [pc, #180]	@ (80135d0 <HAL_DMA_Abort_IT+0x3d0>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d040      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a2b      	ldr	r2, [pc, #172]	@ (80135d4 <HAL_DMA_Abort_IT+0x3d4>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d03b      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4a2a      	ldr	r2, [pc, #168]	@ (80135d8 <HAL_DMA_Abort_IT+0x3d8>)
 8013530:	4293      	cmp	r3, r2
 8013532:	d036      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4a28      	ldr	r2, [pc, #160]	@ (80135dc <HAL_DMA_Abort_IT+0x3dc>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d031      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	4a27      	ldr	r2, [pc, #156]	@ (80135e0 <HAL_DMA_Abort_IT+0x3e0>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d02c      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a25      	ldr	r2, [pc, #148]	@ (80135e4 <HAL_DMA_Abort_IT+0x3e4>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d027      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	4a24      	ldr	r2, [pc, #144]	@ (80135e8 <HAL_DMA_Abort_IT+0x3e8>)
 8013558:	4293      	cmp	r3, r2
 801355a:	d022      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a22      	ldr	r2, [pc, #136]	@ (80135ec <HAL_DMA_Abort_IT+0x3ec>)
 8013562:	4293      	cmp	r3, r2
 8013564:	d01d      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4a21      	ldr	r2, [pc, #132]	@ (80135f0 <HAL_DMA_Abort_IT+0x3f0>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d018      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4a1f      	ldr	r2, [pc, #124]	@ (80135f4 <HAL_DMA_Abort_IT+0x3f4>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d013      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a1e      	ldr	r2, [pc, #120]	@ (80135f8 <HAL_DMA_Abort_IT+0x3f8>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d00e      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4a1c      	ldr	r2, [pc, #112]	@ (80135fc <HAL_DMA_Abort_IT+0x3fc>)
 801358a:	4293      	cmp	r3, r2
 801358c:	d009      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4a1b      	ldr	r2, [pc, #108]	@ (8013600 <HAL_DMA_Abort_IT+0x400>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d004      	beq.n	80135a2 <HAL_DMA_Abort_IT+0x3a2>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4a19      	ldr	r2, [pc, #100]	@ (8013604 <HAL_DMA_Abort_IT+0x404>)
 801359e:	4293      	cmp	r3, r2
 80135a0:	d132      	bne.n	8013608 <HAL_DMA_Abort_IT+0x408>
 80135a2:	2301      	movs	r3, #1
 80135a4:	e031      	b.n	801360a <HAL_DMA_Abort_IT+0x40a>
 80135a6:	bf00      	nop
 80135a8:	40020010 	.word	0x40020010
 80135ac:	40020028 	.word	0x40020028
 80135b0:	40020040 	.word	0x40020040
 80135b4:	40020058 	.word	0x40020058
 80135b8:	40020070 	.word	0x40020070
 80135bc:	40020088 	.word	0x40020088
 80135c0:	400200a0 	.word	0x400200a0
 80135c4:	400200b8 	.word	0x400200b8
 80135c8:	40020410 	.word	0x40020410
 80135cc:	40020428 	.word	0x40020428
 80135d0:	40020440 	.word	0x40020440
 80135d4:	40020458 	.word	0x40020458
 80135d8:	40020470 	.word	0x40020470
 80135dc:	40020488 	.word	0x40020488
 80135e0:	400204a0 	.word	0x400204a0
 80135e4:	400204b8 	.word	0x400204b8
 80135e8:	58025408 	.word	0x58025408
 80135ec:	5802541c 	.word	0x5802541c
 80135f0:	58025430 	.word	0x58025430
 80135f4:	58025444 	.word	0x58025444
 80135f8:	58025458 	.word	0x58025458
 80135fc:	5802546c 	.word	0x5802546c
 8013600:	58025480 	.word	0x58025480
 8013604:	58025494 	.word	0x58025494
 8013608:	2300      	movs	r3, #0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d028      	beq.n	8013660 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801361c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013622:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013628:	f003 031f 	and.w	r3, r3, #31
 801362c:	2201      	movs	r2, #1
 801362e:	409a      	lsls	r2, r3
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801363c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00c      	beq.n	8013660 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013654:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801365e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2201      	movs	r2, #1
 8013664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013674:	2b00      	cmp	r3, #0
 8013676:	d003      	beq.n	8013680 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop

0801368c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801369a:	b2db      	uxtb	r3, r3
}
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d101      	bne.n	80136ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80136b6:	2301      	movs	r3, #1
 80136b8:	e0e3      	b.n	8013882 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d106      	bne.n	80136d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2220      	movs	r2, #32
 80136c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f008 f8b1 	bl	801b834 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80136d2:	4b6e      	ldr	r3, [pc, #440]	@ (801388c <HAL_ETH_Init+0x1e4>)
 80136d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80136d8:	4a6c      	ldr	r2, [pc, #432]	@ (801388c <HAL_ETH_Init+0x1e4>)
 80136da:	f043 0302 	orr.w	r3, r3, #2
 80136de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80136e2:	4b6a      	ldr	r3, [pc, #424]	@ (801388c <HAL_ETH_Init+0x1e4>)
 80136e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80136e8:	f003 0302 	and.w	r3, r3, #2
 80136ec:	60bb      	str	r3, [r7, #8]
 80136ee:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	7a1b      	ldrb	r3, [r3, #8]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d103      	bne.n	8013700 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80136f8:	2000      	movs	r0, #0
 80136fa:	f7ff f93f 	bl	801297c <HAL_SYSCFG_ETHInterfaceSelect>
 80136fe:	e003      	b.n	8013708 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8013700:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8013704:	f7ff f93a 	bl	801297c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8013708:	4b61      	ldr	r3, [pc, #388]	@ (8013890 <HAL_ETH_Init+0x1e8>)
 801370a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	6812      	ldr	r2, [r2, #0]
 801371a:	f043 0301 	orr.w	r3, r3, #1
 801371e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013722:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8013724:	f7ff f8ee 	bl	8012904 <HAL_GetTick>
 8013728:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801372a:	e011      	b.n	8013750 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801372c:	f7ff f8ea 	bl	8012904 <HAL_GetTick>
 8013730:	4602      	mov	r2, r0
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801373a:	d909      	bls.n	8013750 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2204      	movs	r2, #4
 8013740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	22e0      	movs	r2, #224	@ 0xe0
 8013748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 801374c:	2301      	movs	r3, #1
 801374e:	e098      	b.n	8013882 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f003 0301 	and.w	r3, r3, #1
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1e4      	bne.n	801372c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 fe60 	bl	8014428 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8013768:	f004 fa6e 	bl	8017c48 <HAL_RCC_GetHCLKFreq>
 801376c:	4603      	mov	r3, r0
 801376e:	4a49      	ldr	r2, [pc, #292]	@ (8013894 <HAL_ETH_Init+0x1ec>)
 8013770:	fba2 2303 	umull	r2, r3, r2, r3
 8013774:	0c9a      	lsrs	r2, r3, #18
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	3a01      	subs	r2, #1
 801377c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f001 f843 	bl	801480c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801378e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8013792:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	6812      	ldr	r2, [r2, #0]
 801379a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801379e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137a2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	695b      	ldr	r3, [r3, #20]
 80137aa:	f003 0303 	and.w	r3, r3, #3
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d009      	beq.n	80137c6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2201      	movs	r2, #1
 80137b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	22e0      	movs	r2, #224	@ 0xe0
 80137be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80137c2:	2301      	movs	r3, #1
 80137c4:	e05d      	b.n	8013882 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80137ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80137d2:	4b31      	ldr	r3, [pc, #196]	@ (8013898 <HAL_ETH_Init+0x1f0>)
 80137d4:	4013      	ands	r3, r2
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	6952      	ldr	r2, [r2, #20]
 80137da:	0051      	lsls	r1, r2, #1
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	6812      	ldr	r2, [r2, #0]
 80137e0:	430b      	orrs	r3, r1
 80137e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137e6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f001 f8ab 	bl	8014946 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f001 f8f1 	bl	80149d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	3305      	adds	r3, #5
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	021a      	lsls	r2, r3, #8
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	3304      	adds	r3, #4
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	4619      	mov	r1, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	430a      	orrs	r2, r1
 8013810:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	3303      	adds	r3, #3
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	061a      	lsls	r2, r3, #24
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	3302      	adds	r3, #2
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	041b      	lsls	r3, r3, #16
 8013828:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	685b      	ldr	r3, [r3, #4]
 801382e:	3301      	adds	r3, #1
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8013834:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8013842:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8013844:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	4b11      	ldr	r3, [pc, #68]	@ (801389c <HAL_ETH_Init+0x1f4>)
 8013856:	430b      	orrs	r3, r1
 8013858:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	4b0d      	ldr	r3, [pc, #52]	@ (80138a0 <HAL_ETH_Init+0x1f8>)
 801386a:	430b      	orrs	r3, r1
 801386c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2200      	movs	r2, #0
 8013874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2210      	movs	r2, #16
 801387c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013880:	2300      	movs	r3, #0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3710      	adds	r7, #16
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	58024400 	.word	0x58024400
 8013890:	58000400 	.word	0x58000400
 8013894:	431bde83 	.word	0x431bde83
 8013898:	ffff8001 	.word	0xffff8001
 801389c:	0c020060 	.word	0x0c020060
 80138a0:	0c20c000 	.word	0x0c20c000

080138a4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138b2:	2b10      	cmp	r3, #16
 80138b4:	d165      	bne.n	8013982 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2220      	movs	r2, #32
 80138ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2201      	movs	r2, #1
 80138c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2204      	movs	r2, #4
 80138c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 f96d 	bl	8013baa <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	6812      	ldr	r2, [r2, #0]
 80138e0:	f043 0301 	orr.w	r3, r3, #1
 80138e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80138e8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	6812      	ldr	r2, [r2, #0]
 80138fc:	f043 0301 	orr.w	r3, r3, #1
 8013900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013904:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013910:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	6812      	ldr	r2, [r2, #0]
 8013918:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 801391c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013920:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f042 0201 	orr.w	r2, r2, #1
 8013934:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f042 0202 	orr.w	r2, r2, #2
 8013946:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f042 0201 	orr.w	r2, r2, #1
 8013956:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013960:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681a      	ldr	r2, [r3, #0]
 8013968:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 801396c:	430b      	orrs	r3, r1
 801396e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013972:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2240      	movs	r2, #64	@ 0x40
 801397a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 801397e:	2300      	movs	r3, #0
 8013980:	e000      	b.n	8013984 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8013982:	2301      	movs	r3, #1
  }
}
 8013984:	4618      	mov	r0, r3
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801399a:	2b40      	cmp	r3, #64	@ 0x40
 801399c:	d165      	bne.n	8013a6a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2220      	movs	r2, #32
 80139a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80139ae:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	4b30      	ldr	r3, [pc, #192]	@ (8013a78 <HAL_ETH_Stop_IT+0xec>)
 80139b8:	400b      	ands	r3, r1
 80139ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80139be:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80139ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	6812      	ldr	r2, [r2, #0]
 80139d2:	f023 0301 	bic.w	r3, r3, #1
 80139d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80139da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80139e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	6812      	ldr	r2, [r2, #0]
 80139ee:	f023 0301 	bic.w	r3, r3, #1
 80139f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80139f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f022 0201 	bic.w	r2, r2, #1
 8013a08:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f042 0201 	orr.w	r2, r2, #1
 8013a1a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f022 0202 	bic.w	r2, r2, #2
 8013a2c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8013a2e:	2300      	movs	r3, #0
 8013a30:	60fb      	str	r3, [r7, #12]
 8013a32:	e00e      	b.n	8013a52 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	3212      	adds	r2, #18
 8013a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a3e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	3301      	adds	r3, #1
 8013a50:	60fb      	str	r3, [r7, #12]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2b03      	cmp	r3, #3
 8013a56:	d9ed      	bls.n	8013a34 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2210      	movs	r2, #16
 8013a62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8013a66:	2300      	movs	r3, #0
 8013a68:	e000      	b.n	8013a6c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8013a6a:	2301      	movs	r3, #1
  }
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	ffff2f3e 	.word	0xffff2f3e

08013a7c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b086      	sub	sp, #24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a94:	f043 0201 	orr.w	r2, r3, #1
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	e07f      	b.n	8013ba2 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013aa8:	2b40      	cmp	r3, #64	@ 0x40
 8013aaa:	d179      	bne.n	8013ba0 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8013aac:	2200      	movs	r2, #0
 8013aae:	68b9      	ldr	r1, [r7, #8]
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f000 ffef 	bl	8014a94 <ETH_Prepare_Tx_Descriptors>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d009      	beq.n	8013ad0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013ac2:	f043 0202 	orr.w	r2, r3, #2
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8013acc:	2301      	movs	r3, #1
 8013ace:	e068      	b.n	8013ba2 <HAL_ETH_Transmit+0x126>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013ad0:	f3bf 8f4f 	dsb	sy
}
 8013ad4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	3206      	adds	r2, #6
 8013ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ae8:	1c5a      	adds	r2, r3, #1
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	629a      	str	r2, [r3, #40]	@ 0x28
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013af2:	2b03      	cmp	r3, #3
 8013af4:	d904      	bls.n	8013b00 <HAL_ETH_Transmit+0x84>
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013afa:	1f1a      	subs	r2, r3, #4
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	3106      	adds	r1, #6
 8013b0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013b14:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8013b18:	f7fe fef4 	bl	8012904 <HAL_GetTick>
 8013b1c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8013b1e:	e039      	b.n	8013b94 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013b28:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8013b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d012      	beq.n	8013b5a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013b3a:	f043 0208 	orr.w	r2, r3, #8
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013b4c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8013b56:	2301      	movs	r3, #1
 8013b58:	e023      	b.n	8013ba2 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b60:	d018      	beq.n	8013b94 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8013b62:	f7fe fecf 	bl	8012904 <HAL_GetTick>
 8013b66:	4602      	mov	r2, r0
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	1ad3      	subs	r3, r2, r3
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d302      	bcc.n	8013b78 <HAL_ETH_Transmit+0xfc>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d10d      	bne.n	8013b94 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013b7e:	f043 0204 	orr.w	r2, r3, #4
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8013b8e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8013b90:	2301      	movs	r3, #1
 8013b92:	e006      	b.n	8013ba2 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	dbc1      	blt.n	8013b20 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e000      	b.n	8013ba2 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8013ba0:	2301      	movs	r3, #1
  }
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3718      	adds	r7, #24
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}

08013baa <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b088      	sub	sp, #32
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013bbe:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	69fa      	ldr	r2, [r7, #28]
 8013bc4:	3212      	adds	r2, #18
 8013bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bca:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bd0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8013bd2:	e038      	b.n	8013c46 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	691b      	ldr	r3, [r3, #16]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d112      	bne.n	8013c02 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8013bdc:	f107 0308 	add.w	r3, r7, #8
 8013be0:	4618      	mov	r0, r3
 8013be2:	f007 ffbd 	bl	801bb60 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d102      	bne.n	8013bf2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8013bec:	2300      	movs	r3, #0
 8013bee:	74fb      	strb	r3, [r7, #19]
 8013bf0:	e007      	b.n	8013c02 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8013c02:	7cfb      	ldrb	r3, [r7, #19]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d01e      	beq.n	8013c46 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8013c16:	60da      	str	r2, [r3, #12]
 8013c18:	e003      	b.n	8013c22 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8013c20:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	3301      	adds	r3, #1
 8013c26:	61fb      	str	r3, [r7, #28]
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	2b03      	cmp	r3, #3
 8013c2c:	d902      	bls.n	8013c34 <ETH_UpdateDescriptor+0x8a>
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	3b04      	subs	r3, #4
 8013c32:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	69fa      	ldr	r2, [r7, #28]
 8013c38:	3212      	adds	r2, #18
 8013c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c3e:	617b      	str	r3, [r7, #20]
      desccount--;
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	3b01      	subs	r3, #1
 8013c44:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d002      	beq.n	8013c52 <ETH_UpdateDescriptor+0xa8>
 8013c4c:	7cfb      	ldrb	r3, [r7, #19]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d1c0      	bne.n	8013bd4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c56:	69ba      	ldr	r2, [r7, #24]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d01b      	beq.n	8013c94 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	3303      	adds	r3, #3
 8013c60:	f003 0303 	and.w	r3, r3, #3
 8013c64:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8013c66:	f3bf 8f5f 	dmb	sy
}
 8013c6a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6919      	ldr	r1, [r3, #16]
 8013c70:	68fa      	ldr	r2, [r7, #12]
 8013c72:	4613      	mov	r3, r2
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	4413      	add	r3, r2
 8013c78:	00db      	lsls	r3, r3, #3
 8013c7a:	18ca      	adds	r2, r1, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013c84:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	69fa      	ldr	r2, [r7, #28]
 8013c8c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	69ba      	ldr	r2, [r7, #24]
 8013c92:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8013c94:	bf00      	nop
 8013c96:	3720      	adds	r7, #32
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013cac:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013cb6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8013cba:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013cc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8013cc8:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8013cca:	4b6d      	ldr	r3, [pc, #436]	@ (8013e80 <HAL_ETH_IRQHandler+0x1e4>)
 8013ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cce:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d010      	beq.n	8013cfc <HAL_ETH_IRQHandler+0x60>
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00b      	beq.n	8013cfc <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013cec:	461a      	mov	r2, r3
 8013cee:	f248 0340 	movw	r3, #32832	@ 0x8040
 8013cf2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 f8ce 	bl	8013e98 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	f003 0301 	and.w	r3, r3, #1
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d010      	beq.n	8013d28 <HAL_ETH_IRQHandler+0x8c>
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f003 0301 	and.w	r3, r3, #1
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00b      	beq.n	8013d28 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d18:	461a      	mov	r2, r3
 8013d1a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8013d1e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 f8ae 	bl	8013e84 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d047      	beq.n	8013dc2 <HAL_ETH_IRQHandler+0x126>
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d042      	beq.n	8013dc2 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013d42:	f043 0208 	orr.w	r2, r3, #8
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d01e      	beq.n	8013d94 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d5e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8013d62:	f241 1302 	movw	r3, #4354	@ 0x1102
 8013d66:	4013      	ands	r3, r2
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d76:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	6812      	ldr	r2, [r2, #0]
 8013d7e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8013d82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013d86:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	22e0      	movs	r2, #224	@ 0xe0
 8013d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8013d92:	e013      	b.n	8013dbc <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013d9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8013da0:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013db2:	461a      	mov	r2, r3
 8013db4:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8013db8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 f875 	bl	8013eac <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d104      	bne.n	8013dd6 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d019      	beq.n	8013e0a <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013ddc:	f043 0210 	orr.w	r2, r3, #16
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	22e0      	movs	r2, #224	@ 0xe0
 8013df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 f855 	bl	8013eac <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2200      	movs	r2, #0
 8013e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	f003 0310 	and.w	r3, r3, #16
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d00f      	beq.n	8013e34 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8013e1c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 f84a 	bl	8013ec0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	f003 0320 	and.w	r3, r3, #32
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d00f      	beq.n	8013e5e <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013e46:	f003 020f 	and.w	r2, r3, #15
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f000 f83f 	bl	8013ed4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d006      	beq.n	8013e76 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8013e68:	4b05      	ldr	r3, [pc, #20]	@ (8013e80 <HAL_ETH_IRQHandler+0x1e4>)
 8013e6a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8013e6e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f000 f839 	bl	8013ee8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8013e76:	bf00      	nop
 8013e78:	3718      	adds	r7, #24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	58000080 	.word	0x58000080

08013e84 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8013e8c:	bf00      	nop
 8013e8e:	370c      	adds	r7, #12
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr

08013e98 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b083      	sub	sp, #12
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8013ea0:	bf00      	nop
 8013ea2:	370c      	adds	r7, #12
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr

08013eac <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b083      	sub	sp, #12
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8013eb4:	bf00      	nop
 8013eb6:	370c      	adds	r7, #12
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebe:	4770      	bx	lr

08013ec0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b083      	sub	sp, #12
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8013ec8:	bf00      	nop
 8013eca:	370c      	adds	r7, #12
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr

08013ed4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8013edc:	bf00      	nop
 8013ede:	370c      	adds	r7, #12
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b083      	sub	sp, #12
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8013ef0:	bf00      	nop
 8013ef2:	370c      	adds	r7, #12
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
 8013f08:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8013f12:	f003 0301 	and.w	r3, r3, #1
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d001      	beq.n	8013f1e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e03e      	b.n	8013f9c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8013f26:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	055b      	lsls	r3, r3, #21
 8013f32:	4313      	orrs	r3, r2
 8013f34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	041b      	lsls	r3, r3, #16
 8013f40:	4313      	orrs	r3, r2
 8013f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	f043 030c 	orr.w	r3, r3, #12
 8013f4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	f043 0301 	orr.w	r3, r3, #1
 8013f52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	697a      	ldr	r2, [r7, #20]
 8013f5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8013f5e:	f7fe fcd1 	bl	8012904 <HAL_GetTick>
 8013f62:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8013f64:	e009      	b.n	8013f7a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8013f66:	f7fe fccd 	bl	8012904 <HAL_GetTick>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	1ad3      	subs	r3, r2, r3
 8013f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013f74:	d901      	bls.n	8013f7a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e010      	b.n	8013f9c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1ed      	bne.n	8013f66 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	461a      	mov	r2, r3
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013f9a:	2300      	movs	r3, #0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3718      	adds	r7, #24
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8013fba:	f003 0301 	and.w	r3, r3, #1
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e03c      	b.n	8014040 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8013fce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	055b      	lsls	r3, r3, #21
 8013fda:	4313      	orrs	r3, r2
 8013fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	041b      	lsls	r3, r3, #16
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	f023 030c 	bic.w	r3, r3, #12
 8013ff2:	f043 0304 	orr.w	r3, r3, #4
 8013ff6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	f043 0301 	orr.w	r3, r3, #1
 8013ffe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	b29a      	uxth	r2, r3
 8014004:	4b10      	ldr	r3, [pc, #64]	@ (8014048 <HAL_ETH_WritePHYRegister+0xa4>)
 8014006:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 801400a:	4a0f      	ldr	r2, [pc, #60]	@ (8014048 <HAL_ETH_WritePHYRegister+0xa4>)
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8014012:	f7fe fc77 	bl	8012904 <HAL_GetTick>
 8014016:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8014018:	e009      	b.n	801402e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 801401a:	f7fe fc73 	bl	8012904 <HAL_GetTick>
 801401e:	4602      	mov	r2, r0
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014028:	d901      	bls.n	801402e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 801402a:	2301      	movs	r3, #1
 801402c:	e008      	b.n	8014040 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1ed      	bne.n	801401a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3718      	adds	r7, #24
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	40028000 	.word	0x40028000

0801404c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801404c:	b480      	push	{r7}
 801404e:	b083      	sub	sp, #12
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d101      	bne.n	8014060 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801405c:	2301      	movs	r3, #1
 801405e:	e1c3      	b.n	80143e8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	f003 020c 	and.w	r2, r3, #12
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f003 0310 	and.w	r3, r3, #16
 8014078:	2b00      	cmp	r3, #0
 801407a:	bf14      	ite	ne
 801407c:	2301      	movne	r3, #1
 801407e:	2300      	moveq	r3, #0
 8014080:	b2db      	uxtb	r3, r3
 8014082:	461a      	mov	r2, r3
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	bf0c      	ite	eq
 80140a6:	2301      	moveq	r3, #1
 80140a8:	2300      	movne	r3, #0
 80140aa:	b2db      	uxtb	r3, r3
 80140ac:	461a      	mov	r2, r3
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80140be:	2b00      	cmp	r3, #0
 80140c0:	bf14      	ite	ne
 80140c2:	2301      	movne	r3, #1
 80140c4:	2300      	moveq	r3, #0
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80140d8:	2b00      	cmp	r3, #0
 80140da:	bf0c      	ite	eq
 80140dc:	2301      	moveq	r3, #1
 80140de:	2300      	movne	r3, #0
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	461a      	mov	r2, r3
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80140ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	bf14      	ite	ne
 80140f6:	2301      	movne	r3, #1
 80140f8:	2300      	moveq	r3, #0
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801410c:	2b00      	cmp	r3, #0
 801410e:	bf14      	ite	ne
 8014110:	2301      	movne	r3, #1
 8014112:	2300      	moveq	r3, #0
 8014114:	b2db      	uxtb	r3, r3
 8014116:	461a      	mov	r2, r3
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014142:	2b00      	cmp	r3, #0
 8014144:	bf14      	ite	ne
 8014146:	2301      	movne	r3, #1
 8014148:	2300      	moveq	r3, #0
 801414a:	b2db      	uxtb	r3, r3
 801414c:	461a      	mov	r2, r3
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801415c:	2b00      	cmp	r3, #0
 801415e:	bf0c      	ite	eq
 8014160:	2301      	moveq	r3, #1
 8014162:	2300      	movne	r3, #0
 8014164:	b2db      	uxtb	r3, r3
 8014166:	461a      	mov	r2, r3
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014176:	2b00      	cmp	r3, #0
 8014178:	bf0c      	ite	eq
 801417a:	2301      	moveq	r3, #1
 801417c:	2300      	movne	r3, #0
 801417e:	b2db      	uxtb	r3, r3
 8014180:	461a      	mov	r2, r3
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014190:	2b00      	cmp	r3, #0
 8014192:	bf14      	ite	ne
 8014194:	2301      	movne	r3, #1
 8014196:	2300      	moveq	r3, #0
 8014198:	b2db      	uxtb	r3, r3
 801419a:	461a      	mov	r2, r3
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	bf14      	ite	ne
 80141ae:	2301      	movne	r3, #1
 80141b0:	2300      	moveq	r3, #0
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	461a      	mov	r2, r3
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	bf14      	ite	ne
 80141c8:	2301      	movne	r3, #1
 80141ca:	2300      	moveq	r3, #0
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	461a      	mov	r2, r3
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80141da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80141de:	2b00      	cmp	r3, #0
 80141e0:	bf14      	ite	ne
 80141e2:	2301      	movne	r3, #1
 80141e4:	2300      	moveq	r3, #0
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014206:	2b00      	cmp	r3, #0
 8014208:	bf14      	ite	ne
 801420a:	2301      	movne	r3, #1
 801420c:	2300      	moveq	r3, #0
 801420e:	b2db      	uxtb	r3, r3
 8014210:	461a      	mov	r2, r3
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801423c:	2b00      	cmp	r3, #0
 801423e:	bf0c      	ite	eq
 8014240:	2301      	moveq	r3, #1
 8014242:	2300      	movne	r3, #0
 8014244:	b2db      	uxtb	r3, r3
 8014246:	461a      	mov	r2, r3
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014258:	2b00      	cmp	r3, #0
 801425a:	bf14      	ite	ne
 801425c:	2301      	movne	r3, #1
 801425e:	2300      	moveq	r3, #0
 8014260:	b2db      	uxtb	r3, r3
 8014262:	461a      	mov	r2, r3
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8014270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014274:	2b00      	cmp	r3, #0
 8014276:	bf14      	ite	ne
 8014278:	2301      	movne	r3, #1
 801427a:	2300      	moveq	r3, #0
 801427c:	b2db      	uxtb	r3, r3
 801427e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	685b      	ldr	r3, [r3, #4]
 801428c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8014290:	2b00      	cmp	r3, #0
 8014292:	bf14      	ite	ne
 8014294:	2301      	movne	r3, #1
 8014296:	2300      	moveq	r3, #0
 8014298:	b2db      	uxtb	r3, r3
 801429a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	0e5b      	lsrs	r3, r3, #25
 80142aa:	f003 021f 	and.w	r2, r3, #31
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80142bc:	2b00      	cmp	r3, #0
 80142be:	bf14      	ite	ne
 80142c0:	2301      	movne	r3, #1
 80142c2:	2300      	moveq	r3, #0
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	461a      	mov	r2, r3
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	f003 020f 	and.w	r2, r3, #15
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142e2:	f003 0302 	and.w	r3, r3, #2
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	bf14      	ite	ne
 80142ea:	2301      	movne	r3, #1
 80142ec:	2300      	moveq	r3, #0
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	461a      	mov	r2, r3
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014302:	2b00      	cmp	r3, #0
 8014304:	bf0c      	ite	eq
 8014306:	2301      	moveq	r3, #1
 8014308:	2300      	movne	r3, #0
 801430a:	b2db      	uxtb	r3, r3
 801430c:	461a      	mov	r2, r3
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801431a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014328:	0c1b      	lsrs	r3, r3, #16
 801432a:	b29a      	uxth	r2, r3
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014338:	f003 0301 	and.w	r3, r3, #1
 801433c:	2b00      	cmp	r3, #0
 801433e:	bf14      	ite	ne
 8014340:	2301      	movne	r3, #1
 8014342:	2300      	moveq	r3, #0
 8014344:	b2db      	uxtb	r3, r3
 8014346:	461a      	mov	r2, r3
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014356:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 801435a:	2b00      	cmp	r3, #0
 801435c:	bf14      	ite	ne
 801435e:	2301      	movne	r3, #1
 8014360:	2300      	moveq	r3, #0
 8014362:	b2db      	uxtb	r3, r3
 8014364:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8014374:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8014384:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8014394:	f003 0308 	and.w	r3, r3, #8
 8014398:	2b00      	cmp	r3, #0
 801439a:	bf14      	ite	ne
 801439c:	2301      	movne	r3, #1
 801439e:	2300      	moveq	r3, #0
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80143b2:	f003 0310 	and.w	r3, r3, #16
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	bf14      	ite	ne
 80143ba:	2301      	movne	r3, #1
 80143bc:	2300      	moveq	r3, #0
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	461a      	mov	r2, r3
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80143d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	bf0c      	ite	eq
 80143d8:	2301      	moveq	r3, #1
 80143da:	2300      	movne	r3, #0
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d101      	bne.n	8014408 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8014404:	2301      	movs	r3, #1
 8014406:	e00b      	b.n	8014420 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801440e:	2b10      	cmp	r3, #16
 8014410:	d105      	bne.n	801441e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8014412:	6839      	ldr	r1, [r7, #0]
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f000 f857 	bl	80144c8 <ETH_SetMACConfig>

    return HAL_OK;
 801441a:	2300      	movs	r3, #0
 801441c:	e000      	b.n	8014420 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801441e:	2301      	movs	r3, #1
  }
}
 8014420:	4618      	mov	r0, r3
 8014422:	3708      	adds	r7, #8
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}

08014428 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8014438:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8014440:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8014442:	f003 fc01 	bl	8017c48 <HAL_RCC_GetHCLKFreq>
 8014446:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	4a1a      	ldr	r2, [pc, #104]	@ (80144b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 801444c:	4293      	cmp	r3, r2
 801444e:	d804      	bhi.n	801445a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8014456:	60fb      	str	r3, [r7, #12]
 8014458:	e022      	b.n	80144a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	4a16      	ldr	r2, [pc, #88]	@ (80144b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 801445e:	4293      	cmp	r3, r2
 8014460:	d204      	bcs.n	801446c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8014468:	60fb      	str	r3, [r7, #12]
 801446a:	e019      	b.n	80144a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	4a13      	ldr	r2, [pc, #76]	@ (80144bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8014470:	4293      	cmp	r3, r2
 8014472:	d915      	bls.n	80144a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	4a12      	ldr	r2, [pc, #72]	@ (80144c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d804      	bhi.n	8014486 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014482:	60fb      	str	r3, [r7, #12]
 8014484:	e00c      	b.n	80144a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	4a0e      	ldr	r2, [pc, #56]	@ (80144c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d804      	bhi.n	8014498 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8014494:	60fb      	str	r3, [r7, #12]
 8014496:	e003      	b.n	80144a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801449e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	68fa      	ldr	r2, [r7, #12]
 80144a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80144aa:	bf00      	nop
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	02160ebf 	.word	0x02160ebf
 80144b8:	03938700 	.word	0x03938700
 80144bc:	05f5e0ff 	.word	0x05f5e0ff
 80144c0:	08f0d17f 	.word	0x08f0d17f
 80144c4:	0ee6b27f 	.word	0x0ee6b27f

080144c8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80144c8:	b480      	push	{r7}
 80144ca:	b085      	sub	sp, #20
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80144da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	791b      	ldrb	r3, [r3, #4]
 80144e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80144e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	7b1b      	ldrb	r3, [r3, #12]
 80144e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80144ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	7b5b      	ldrb	r3, [r3, #13]
 80144f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80144f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	7b9b      	ldrb	r3, [r3, #14]
 80144f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80144fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	7bdb      	ldrb	r3, [r3, #15]
 8014500:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8014502:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	7c12      	ldrb	r2, [r2, #16]
 8014508:	2a00      	cmp	r2, #0
 801450a:	d102      	bne.n	8014512 <ETH_SetMACConfig+0x4a>
 801450c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8014510:	e000      	b.n	8014514 <ETH_SetMACConfig+0x4c>
 8014512:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8014514:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	7c52      	ldrb	r2, [r2, #17]
 801451a:	2a00      	cmp	r2, #0
 801451c:	d102      	bne.n	8014524 <ETH_SetMACConfig+0x5c>
 801451e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8014522:	e000      	b.n	8014526 <ETH_SetMACConfig+0x5e>
 8014524:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8014526:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	7c9b      	ldrb	r3, [r3, #18]
 801452c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801452e:	431a      	orrs	r2, r3
               macconf->Speed |
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8014534:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 801453a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	7f1b      	ldrb	r3, [r3, #28]
 8014540:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8014542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	7f5b      	ldrb	r3, [r3, #29]
 8014548:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 801454a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	7f92      	ldrb	r2, [r2, #30]
 8014550:	2a00      	cmp	r2, #0
 8014552:	d102      	bne.n	801455a <ETH_SetMACConfig+0x92>
 8014554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014558:	e000      	b.n	801455c <ETH_SetMACConfig+0x94>
 801455a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801455c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	7fdb      	ldrb	r3, [r3, #31]
 8014562:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8014564:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	f892 2020 	ldrb.w	r2, [r2, #32]
 801456c:	2a00      	cmp	r2, #0
 801456e:	d102      	bne.n	8014576 <ETH_SetMACConfig+0xae>
 8014570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014574:	e000      	b.n	8014578 <ETH_SetMACConfig+0xb0>
 8014576:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8014578:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801457e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014586:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8014588:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 801458e:	4313      	orrs	r3, r2
 8014590:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	4b56      	ldr	r3, [pc, #344]	@ (80146f4 <ETH_SetMACConfig+0x22c>)
 801459a:	4013      	ands	r3, r2
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	6812      	ldr	r2, [r2, #0]
 80145a0:	68f9      	ldr	r1, [r7, #12]
 80145a2:	430b      	orrs	r3, r1
 80145a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80145b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80145b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80145bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80145be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80145c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80145c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80145ca:	683a      	ldr	r2, [r7, #0]
 80145cc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80145d0:	2a00      	cmp	r2, #0
 80145d2:	d102      	bne.n	80145da <ETH_SetMACConfig+0x112>
 80145d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80145d8:	e000      	b.n	80145dc <ETH_SetMACConfig+0x114>
 80145da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80145dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80145e2:	4313      	orrs	r3, r2
 80145e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	685a      	ldr	r2, [r3, #4]
 80145ec:	4b42      	ldr	r3, [pc, #264]	@ (80146f8 <ETH_SetMACConfig+0x230>)
 80145ee:	4013      	ands	r3, r2
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	6812      	ldr	r2, [r2, #0]
 80145f4:	68f9      	ldr	r1, [r7, #12]
 80145f6:	430b      	orrs	r3, r1
 80145f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014600:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8014606:	4313      	orrs	r3, r2
 8014608:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	68da      	ldr	r2, [r3, #12]
 8014610:	4b3a      	ldr	r3, [pc, #232]	@ (80146fc <ETH_SetMACConfig+0x234>)
 8014612:	4013      	ands	r3, r2
 8014614:	687a      	ldr	r2, [r7, #4]
 8014616:	6812      	ldr	r2, [r2, #0]
 8014618:	68f9      	ldr	r1, [r7, #12]
 801461a:	430b      	orrs	r3, r1
 801461c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8014624:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801462a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801462c:	683a      	ldr	r2, [r7, #0]
 801462e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8014632:	2a00      	cmp	r2, #0
 8014634:	d101      	bne.n	801463a <ETH_SetMACConfig+0x172>
 8014636:	2280      	movs	r2, #128	@ 0x80
 8014638:	e000      	b.n	801463c <ETH_SetMACConfig+0x174>
 801463a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 801463c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014642:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8014644:	4313      	orrs	r3, r2
 8014646:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801464e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8014652:	4013      	ands	r3, r2
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	6812      	ldr	r2, [r2, #0]
 8014658:	68f9      	ldr	r1, [r7, #12]
 801465a:	430b      	orrs	r3, r1
 801465c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8014664:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801466c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801466e:	4313      	orrs	r3, r2
 8014670:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801467a:	f023 0103 	bic.w	r1, r3, #3
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	430a      	orrs	r2, r1
 8014686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8014692:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	430a      	orrs	r2, r1
 80146a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80146ae:	2a00      	cmp	r2, #0
 80146b0:	d101      	bne.n	80146b6 <ETH_SetMACConfig+0x1ee>
 80146b2:	2240      	movs	r2, #64	@ 0x40
 80146b4:	e000      	b.n	80146b8 <ETH_SetMACConfig+0x1f0>
 80146b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80146b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80146c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80146c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80146ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80146cc:	4313      	orrs	r3, r2
 80146ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80146d8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	430a      	orrs	r2, r1
 80146e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80146e8:	bf00      	nop
 80146ea:	3714      	adds	r7, #20
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr
 80146f4:	00048083 	.word	0x00048083
 80146f8:	c0f88000 	.word	0xc0f88000
 80146fc:	fffffef0 	.word	0xfffffef0

08014700 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	4b38      	ldr	r3, [pc, #224]	@ (80147f8 <ETH_SetDMAConfig+0xf8>)
 8014716:	4013      	ands	r3, r2
 8014718:	683a      	ldr	r2, [r7, #0]
 801471a:	6811      	ldr	r1, [r2, #0]
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	6812      	ldr	r2, [r2, #0]
 8014720:	430b      	orrs	r3, r1
 8014722:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014726:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	791b      	ldrb	r3, [r3, #4]
 801472c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8014732:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	7b1b      	ldrb	r3, [r3, #12]
 8014738:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801473a:	4313      	orrs	r3, r2
 801473c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	4b2c      	ldr	r3, [pc, #176]	@ (80147fc <ETH_SetDMAConfig+0xfc>)
 801474a:	4013      	ands	r3, r2
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	6812      	ldr	r2, [r2, #0]
 8014750:	68f9      	ldr	r1, [r7, #12]
 8014752:	430b      	orrs	r3, r1
 8014754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014758:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	7b5b      	ldrb	r3, [r3, #13]
 801475e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8014764:	4313      	orrs	r3, r2
 8014766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014770:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8014774:	4b22      	ldr	r3, [pc, #136]	@ (8014800 <ETH_SetDMAConfig+0x100>)
 8014776:	4013      	ands	r3, r2
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	6812      	ldr	r2, [r2, #0]
 801477c:	68f9      	ldr	r1, [r7, #12]
 801477e:	430b      	orrs	r3, r1
 8014780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014784:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	7d1b      	ldrb	r3, [r3, #20]
 8014790:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8014792:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	7f5b      	ldrb	r3, [r3, #29]
 8014798:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 801479a:	4313      	orrs	r3, r2
 801479c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80147a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80147aa:	4b16      	ldr	r3, [pc, #88]	@ (8014804 <ETH_SetDMAConfig+0x104>)
 80147ac:	4013      	ands	r3, r2
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	6812      	ldr	r2, [r2, #0]
 80147b2:	68f9      	ldr	r1, [r7, #12]
 80147b4:	430b      	orrs	r3, r1
 80147b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80147ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	7f1b      	ldrb	r3, [r3, #28]
 80147c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80147c8:	4313      	orrs	r3, r2
 80147ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80147d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80147d8:	4b0b      	ldr	r3, [pc, #44]	@ (8014808 <ETH_SetDMAConfig+0x108>)
 80147da:	4013      	ands	r3, r2
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	6812      	ldr	r2, [r2, #0]
 80147e0:	68f9      	ldr	r1, [r7, #12]
 80147e2:	430b      	orrs	r3, r1
 80147e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80147e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80147ec:	bf00      	nop
 80147ee:	3714      	adds	r7, #20
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr
 80147f8:	ffff87fd 	.word	0xffff87fd
 80147fc:	ffff2ffe 	.word	0xffff2ffe
 8014800:	fffec000 	.word	0xfffec000
 8014804:	ffc0efef 	.word	0xffc0efef
 8014808:	7fc0ffff 	.word	0x7fc0ffff

0801480c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b0a4      	sub	sp, #144	@ 0x90
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8014814:	2301      	movs	r3, #1
 8014816:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801481a:	2300      	movs	r3, #0
 801481c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801481e:	2300      	movs	r3, #0
 8014820:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8014824:	2300      	movs	r3, #0
 8014826:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 801482a:	2301      	movs	r3, #1
 801482c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8014830:	2301      	movs	r3, #1
 8014832:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8014836:	2301      	movs	r3, #1
 8014838:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 801483c:	2300      	movs	r3, #0
 801483e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8014842:	2301      	movs	r3, #1
 8014844:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8014848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801484c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801484e:	2300      	movs	r3, #0
 8014850:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8014854:	2300      	movs	r3, #0
 8014856:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8014858:	2300      	movs	r3, #0
 801485a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801485e:	2300      	movs	r3, #0
 8014860:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8014864:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8014868:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801486a:	2300      	movs	r3, #0
 801486c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8014870:	2300      	movs	r3, #0
 8014872:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8014874:	2301      	movs	r3, #1
 8014876:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801487a:	2300      	movs	r3, #0
 801487c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8014880:	2300      	movs	r3, #0
 8014882:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8014886:	2300      	movs	r3, #0
 8014888:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 801488a:	2300      	movs	r3, #0
 801488c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801488e:	2300      	movs	r3, #0
 8014890:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8014892:	2300      	movs	r3, #0
 8014894:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8014898:	2300      	movs	r3, #0
 801489a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 801489e:	2301      	movs	r3, #1
 80148a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80148a4:	2320      	movs	r3, #32
 80148a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80148aa:	2301      	movs	r3, #1
 80148ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80148b0:	2300      	movs	r3, #0
 80148b2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80148b6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80148ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80148bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80148c0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80148c2:	2300      	movs	r3, #0
 80148c4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80148c8:	2302      	movs	r3, #2
 80148ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80148ce:	2300      	movs	r3, #0
 80148d0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80148d4:	2300      	movs	r3, #0
 80148d6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80148da:	2300      	movs	r3, #0
 80148dc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80148e0:	2301      	movs	r3, #1
 80148e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80148e6:	2300      	movs	r3, #0
 80148e8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80148ea:	2301      	movs	r3, #1
 80148ec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80148f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80148f4:	4619      	mov	r1, r3
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7ff fde6 	bl	80144c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80148fc:	2301      	movs	r3, #1
 80148fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8014900:	2301      	movs	r3, #1
 8014902:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8014904:	2300      	movs	r3, #0
 8014906:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8014908:	2300      	movs	r3, #0
 801490a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 801490e:	2300      	movs	r3, #0
 8014910:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8014912:	2300      	movs	r3, #0
 8014914:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8014916:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801491a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 801491c:	2300      	movs	r3, #0
 801491e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8014920:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8014924:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8014926:	2300      	movs	r3, #0
 8014928:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 801492c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8014930:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8014932:	f107 0308 	add.w	r3, r7, #8
 8014936:	4619      	mov	r1, r3
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7ff fee1 	bl	8014700 <ETH_SetDMAConfig>
}
 801493e:	bf00      	nop
 8014940:	3790      	adds	r7, #144	@ 0x90
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8014946:	b480      	push	{r7}
 8014948:	b085      	sub	sp, #20
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801494e:	2300      	movs	r3, #0
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	e01d      	b.n	8014990 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	68d9      	ldr	r1, [r3, #12]
 8014958:	68fa      	ldr	r2, [r7, #12]
 801495a:	4613      	mov	r3, r2
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4413      	add	r3, r2
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	440b      	add	r3, r1
 8014964:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	2200      	movs	r2, #0
 801496a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	2200      	movs	r2, #0
 8014970:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	2200      	movs	r2, #0
 8014976:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	2200      	movs	r2, #0
 801497c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801497e:	68b9      	ldr	r1, [r7, #8]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	3206      	adds	r2, #6
 8014986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	3301      	adds	r3, #1
 801498e:	60fb      	str	r3, [r7, #12]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b03      	cmp	r3, #3
 8014994:	d9de      	bls.n	8014954 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2200      	movs	r2, #0
 801499a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149a4:	461a      	mov	r2, r3
 80149a6:	2303      	movs	r3, #3
 80149a8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	68da      	ldr	r2, [r3, #12]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149b8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	68da      	ldr	r2, [r3, #12]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149c8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80149cc:	bf00      	nop
 80149ce:	3714      	adds	r7, #20
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80149d8:	b480      	push	{r7}
 80149da:	b085      	sub	sp, #20
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80149e0:	2300      	movs	r3, #0
 80149e2:	60fb      	str	r3, [r7, #12]
 80149e4:	e023      	b.n	8014a2e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6919      	ldr	r1, [r3, #16]
 80149ea:	68fa      	ldr	r2, [r7, #12]
 80149ec:	4613      	mov	r3, r2
 80149ee:	005b      	lsls	r3, r3, #1
 80149f0:	4413      	add	r3, r2
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	440b      	add	r3, r1
 80149f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	2200      	movs	r2, #0
 80149fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	2200      	movs	r2, #0
 8014a02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	2200      	movs	r2, #0
 8014a08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	2200      	movs	r2, #0
 8014a14:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8014a1c:	68b9      	ldr	r1, [r7, #8]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	68fa      	ldr	r2, [r7, #12]
 8014a22:	3212      	adds	r2, #18
 8014a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	60fb      	str	r3, [r7, #12]
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2b03      	cmp	r3, #3
 8014a32:	d9d8      	bls.n	80149e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2200      	movs	r2, #0
 8014a44:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	691a      	ldr	r2, [r3, #16]
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a6e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	691b      	ldr	r3, [r3, #16]
 8014a76:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a82:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8014a86:	bf00      	nop
 8014a88:	3714      	adds	r7, #20
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a90:	4770      	bx	lr
	...

08014a94 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b091      	sub	sp, #68	@ 0x44
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	3318      	adds	r3, #24
 8014aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aa8:	691b      	ldr	r3, [r3, #16]
 8014aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8014aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aae:	691b      	ldr	r3, [r3, #16]
 8014ab0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8014ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014abe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	689b      	ldr	r3, [r3, #8]
 8014ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8014aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014acc:	68db      	ldr	r3, [r3, #12]
 8014ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ad6:	d007      	beq.n	8014ae8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8014ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014adc:	3304      	adds	r3, #4
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	4413      	add	r3, r2
 8014ae2:	685b      	ldr	r3, [r3, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8014ae8:	2302      	movs	r3, #2
 8014aea:	e266      	b.n	8014fba <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f003 0304 	and.w	r3, r3, #4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d044      	beq.n	8014b82 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8014af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afa:	68da      	ldr	r2, [r3, #12]
 8014afc:	4b75      	ldr	r3, [pc, #468]	@ (8014cd4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8014afe:	4013      	ands	r3, r2
 8014b00:	68ba      	ldr	r2, [r7, #8]
 8014b02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8014b04:	431a      	orrs	r2, r3
 8014b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b08:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8014b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b14:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8014b24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f003 0308 	and.w	r3, r3, #8
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d027      	beq.n	8014b82 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8014b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b34:	689b      	ldr	r3, [r3, #8]
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b3c:	041b      	lsls	r3, r3, #16
 8014b3e:	431a      	orrs	r2, r3
 8014b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b42:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8014b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8014b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8014b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b5c:	431a      	orrs	r2, r3
 8014b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b60:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8014b70:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8014b80:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f003 0310 	and.w	r3, r3, #16
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d00e      	beq.n	8014bac <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b90:	689a      	ldr	r2, [r3, #8]
 8014b92:	4b51      	ldr	r3, [pc, #324]	@ (8014cd8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8014b94:	4013      	ands	r3, r2
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	6992      	ldr	r2, [r2, #24]
 8014b9a:	431a      	orrs	r2, r3
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8014ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8014ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014baa:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f003 0304 	and.w	r3, r3, #4
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d105      	bne.n	8014bc4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f003 0310 	and.w	r3, r3, #16
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d036      	beq.n	8014c32 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8014bd0:	f3bf 8f5f 	dmb	sy
}
 8014bd4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8014bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8014be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014be4:	3301      	adds	r3, #1
 8014be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	d902      	bls.n	8014bf4 <ETH_Prepare_Tx_Descriptors+0x160>
 8014bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bf0:	3b04      	subs	r3, #4
 8014bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bfc:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8014bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c00:	3301      	adds	r3, #1
 8014c02:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8014c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014c10:	d10f      	bne.n	8014c32 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8014c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c14:	6a3a      	ldr	r2, [r7, #32]
 8014c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8014c1c:	f3bf 8f5f 	dmb	sy
}
 8014c20:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8014c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c2c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8014c2e:	2302      	movs	r3, #2
 8014c30:	e1c3      	b.n	8014fba <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8014c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c34:	3301      	adds	r3, #1
 8014c36:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8014c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	461a      	mov	r2, r3
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c40:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8014c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c44:	689a      	ldr	r2, [r3, #8]
 8014c46:	4b24      	ldr	r3, [pc, #144]	@ (8014cd8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8014c48:	4013      	ands	r3, r2
 8014c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c4c:	6852      	ldr	r2, [r2, #4]
 8014c4e:	431a      	orrs	r2, r3
 8014c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c52:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8014c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c56:	689b      	ldr	r3, [r3, #8]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d012      	beq.n	8014c82 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8014c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8014c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	461a      	mov	r2, r3
 8014c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c6a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c6e:	689a      	ldr	r2, [r3, #8]
 8014c70:	4b1a      	ldr	r3, [pc, #104]	@ (8014cdc <ETH_Prepare_Tx_Descriptors+0x248>)
 8014c72:	4013      	ands	r3, r2
 8014c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c76:	6852      	ldr	r2, [r2, #4]
 8014c78:	0412      	lsls	r2, r2, #16
 8014c7a:	431a      	orrs	r2, r3
 8014c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c7e:	609a      	str	r2, [r3, #8]
 8014c80:	e008      	b.n	8014c94 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8014c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c84:	2200      	movs	r2, #0
 8014c86:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8014c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c8a:	689a      	ldr	r2, [r3, #8]
 8014c8c:	4b13      	ldr	r3, [pc, #76]	@ (8014cdc <ETH_Prepare_Tx_Descriptors+0x248>)
 8014c8e:	4013      	ands	r3, r2
 8014c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c92:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f003 0310 	and.w	r3, r3, #16
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d021      	beq.n	8014ce4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	6a1b      	ldr	r3, [r3, #32]
 8014cac:	04db      	lsls	r3, r3, #19
 8014cae:	431a      	orrs	r2, r3
 8014cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb6:	68da      	ldr	r2, [r3, #12]
 8014cb8:	4b09      	ldr	r3, [pc, #36]	@ (8014ce0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8014cba:	4013      	ands	r3, r2
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	69d2      	ldr	r2, [r2, #28]
 8014cc0:	431a      	orrs	r2, r3
 8014cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8014cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd0:	60da      	str	r2, [r3, #12]
 8014cd2:	e02e      	b.n	8014d32 <ETH_Prepare_Tx_Descriptors+0x29e>
 8014cd4:	ffff0000 	.word	0xffff0000
 8014cd8:	ffffc000 	.word	0xffffc000
 8014cdc:	c000ffff 	.word	0xc000ffff
 8014ce0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8014ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce6:	68da      	ldr	r2, [r3, #12]
 8014ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8014ed8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8014cea:	4013      	ands	r3, r2
 8014cec:	68ba      	ldr	r2, [r7, #8]
 8014cee:	6852      	ldr	r2, [r2, #4]
 8014cf0:	431a      	orrs	r2, r3
 8014cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f003 0301 	and.w	r3, r3, #1
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d008      	beq.n	8014d14 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8014d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	695b      	ldr	r3, [r3, #20]
 8014d0e:	431a      	orrs	r2, r3
 8014d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d12:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f003 0320 	and.w	r3, r3, #32
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d008      	beq.n	8014d32 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8014d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d22:	68db      	ldr	r3, [r3, #12]
 8014d24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	691b      	ldr	r3, [r3, #16]
 8014d2c:	431a      	orrs	r2, r3
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d30:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	f003 0304 	and.w	r3, r3, #4
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d008      	beq.n	8014d50 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8014d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d40:	689b      	ldr	r3, [r3, #8]
 8014d42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d4a:	431a      	orrs	r2, r3
 8014d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d4e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8014d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8014d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8014d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d66:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8014d68:	f3bf 8f5f 	dmb	sy
}
 8014d6c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8014d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d70:	68db      	ldr	r3, [r3, #12]
 8014d72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d78:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f003 0302 	and.w	r3, r3, #2
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 80da 	beq.w	8014f3c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8014d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	431a      	orrs	r2, r3
 8014d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d98:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8014d9a:	e0cf      	b.n	8014f3c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8014d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8014da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8014da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014daa:	3301      	adds	r3, #1
 8014dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014db0:	2b03      	cmp	r3, #3
 8014db2:	d902      	bls.n	8014dba <ETH_Prepare_Tx_Descriptors+0x326>
 8014db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014db6:	3b04      	subs	r3, #4
 8014db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8014dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dc2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8014dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8014dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dce:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd2:	68db      	ldr	r3, [r3, #12]
 8014dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ddc:	d007      	beq.n	8014dee <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8014dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014de2:	3304      	adds	r3, #4
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	4413      	add	r3, r2
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d029      	beq.n	8014e42 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8014dee:	6a3b      	ldr	r3, [r7, #32]
 8014df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8014df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dfa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e00:	e019      	b.n	8014e36 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8014e02:	f3bf 8f5f 	dmb	sy
}
 8014e06:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8014e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e12:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8014e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e16:	3301      	adds	r3, #1
 8014e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e1c:	2b03      	cmp	r3, #3
 8014e1e:	d902      	bls.n	8014e26 <ETH_Prepare_Tx_Descriptors+0x392>
 8014e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e22:	3b04      	subs	r3, #4
 8014e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8014e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8014e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e32:	3301      	adds	r3, #1
 8014e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d3e1      	bcc.n	8014e02 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8014e3e:	2302      	movs	r3, #2
 8014e40:	e0bb      	b.n	8014fba <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8014e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e44:	3301      	adds	r3, #1
 8014e46:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8014e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e4a:	689b      	ldr	r3, [r3, #8]
 8014e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8014e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e56:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8014e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e5a:	689a      	ldr	r2, [r3, #8]
 8014e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8014edc <ETH_Prepare_Tx_Descriptors+0x448>)
 8014e5e:	4013      	ands	r3, r2
 8014e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e62:	6852      	ldr	r2, [r2, #4]
 8014e64:	431a      	orrs	r2, r3
 8014e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e68:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8014e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d012      	beq.n	8014e98 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8014e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e74:	689b      	ldr	r3, [r3, #8]
 8014e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8014e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e80:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8014e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e84:	689a      	ldr	r2, [r3, #8]
 8014e86:	4b16      	ldr	r3, [pc, #88]	@ (8014ee0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8014e88:	4013      	ands	r3, r2
 8014e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e8c:	6852      	ldr	r2, [r2, #4]
 8014e8e:	0412      	lsls	r2, r2, #16
 8014e90:	431a      	orrs	r2, r3
 8014e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e94:	609a      	str	r2, [r3, #8]
 8014e96:	e008      	b.n	8014eaa <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8014e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8014e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ea0:	689a      	ldr	r2, [r3, #8]
 8014ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8014ee0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8014ea4:	4013      	ands	r3, r2
 8014ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ea8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f003 0310 	and.w	r3, r3, #16
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d018      	beq.n	8014ee8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8014eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eb8:	68da      	ldr	r2, [r3, #12]
 8014eba:	4b0a      	ldr	r3, [pc, #40]	@ (8014ee4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	68ba      	ldr	r2, [r7, #8]
 8014ec0:	69d2      	ldr	r2, [r2, #28]
 8014ec2:	431a      	orrs	r2, r3
 8014ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ec6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8014ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8014ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ed2:	60da      	str	r2, [r3, #12]
 8014ed4:	e020      	b.n	8014f18 <ETH_Prepare_Tx_Descriptors+0x484>
 8014ed6:	bf00      	nop
 8014ed8:	ffff8000 	.word	0xffff8000
 8014edc:	ffffc000 	.word	0xffffc000
 8014ee0:	c000ffff 	.word	0xc000ffff
 8014ee4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8014ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eea:	68da      	ldr	r2, [r3, #12]
 8014eec:	4b36      	ldr	r3, [pc, #216]	@ (8014fc8 <ETH_Prepare_Tx_Descriptors+0x534>)
 8014eee:	4013      	ands	r3, r2
 8014ef0:	68ba      	ldr	r2, [r7, #8]
 8014ef2:	6852      	ldr	r2, [r2, #4]
 8014ef4:	431a      	orrs	r2, r3
 8014ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	f003 0301 	and.w	r3, r3, #1
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d008      	beq.n	8014f18 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8014f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f08:	68db      	ldr	r3, [r3, #12]
 8014f0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	695b      	ldr	r3, [r3, #20]
 8014f12:	431a      	orrs	r2, r3
 8014f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f16:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8014f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8014f1e:	f3bf 8f5f 	dmb	sy
}
 8014f22:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8014f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8014f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8014f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f3a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8014f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f3e:	689b      	ldr	r3, [r3, #8]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f47f af2b 	bne.w	8014d9c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d006      	beq.n	8014f5a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8014f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f4e:	689b      	ldr	r3, [r3, #8]
 8014f50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f56:	609a      	str	r2, [r3, #8]
 8014f58:	e005      	b.n	8014f66 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8014f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f5c:	689b      	ldr	r3, [r3, #8]
 8014f5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f64:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8014f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f70:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8014f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	440b      	add	r3, r1
 8014f80:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8014f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f86:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f88:	f3ef 8310 	mrs	r3, PRIMASK
 8014f8c:	613b      	str	r3, [r7, #16]
  return(result);
 8014f8e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8014f90:	61fb      	str	r3, [r7, #28]
 8014f92:	2301      	movs	r3, #1
 8014f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	f383 8810 	msr	PRIMASK, r3
}
 8014f9c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8014f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa4:	4413      	add	r3, r2
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	f383 8810 	msr	PRIMASK, r3
}
 8014fb6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3744      	adds	r7, #68	@ 0x44
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	ffff8000 	.word	0xffff8000

08014fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b089      	sub	sp, #36	@ 0x24
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8014fda:	4b89      	ldr	r3, [pc, #548]	@ (8015200 <HAL_GPIO_Init+0x234>)
 8014fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8014fde:	e194      	b.n	801530a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8014fec:	4013      	ands	r3, r2
 8014fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	f000 8186 	beq.w	8015304 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	f003 0303 	and.w	r3, r3, #3
 8015000:	2b01      	cmp	r3, #1
 8015002:	d005      	beq.n	8015010 <HAL_GPIO_Init+0x44>
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	f003 0303 	and.w	r3, r3, #3
 801500c:	2b02      	cmp	r3, #2
 801500e:	d130      	bne.n	8015072 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	689b      	ldr	r3, [r3, #8]
 8015014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8015016:	69fb      	ldr	r3, [r7, #28]
 8015018:	005b      	lsls	r3, r3, #1
 801501a:	2203      	movs	r2, #3
 801501c:	fa02 f303 	lsl.w	r3, r2, r3
 8015020:	43db      	mvns	r3, r3
 8015022:	69ba      	ldr	r2, [r7, #24]
 8015024:	4013      	ands	r3, r2
 8015026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	68da      	ldr	r2, [r3, #12]
 801502c:	69fb      	ldr	r3, [r7, #28]
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	fa02 f303 	lsl.w	r3, r2, r3
 8015034:	69ba      	ldr	r2, [r7, #24]
 8015036:	4313      	orrs	r3, r2
 8015038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	69ba      	ldr	r2, [r7, #24]
 801503e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8015046:	2201      	movs	r2, #1
 8015048:	69fb      	ldr	r3, [r7, #28]
 801504a:	fa02 f303 	lsl.w	r3, r2, r3
 801504e:	43db      	mvns	r3, r3
 8015050:	69ba      	ldr	r2, [r7, #24]
 8015052:	4013      	ands	r3, r2
 8015054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	091b      	lsrs	r3, r3, #4
 801505c:	f003 0201 	and.w	r2, r3, #1
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	fa02 f303 	lsl.w	r3, r2, r3
 8015066:	69ba      	ldr	r2, [r7, #24]
 8015068:	4313      	orrs	r3, r2
 801506a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	69ba      	ldr	r2, [r7, #24]
 8015070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	f003 0303 	and.w	r3, r3, #3
 801507a:	2b03      	cmp	r3, #3
 801507c:	d017      	beq.n	80150ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	68db      	ldr	r3, [r3, #12]
 8015082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015084:	69fb      	ldr	r3, [r7, #28]
 8015086:	005b      	lsls	r3, r3, #1
 8015088:	2203      	movs	r2, #3
 801508a:	fa02 f303 	lsl.w	r3, r2, r3
 801508e:	43db      	mvns	r3, r3
 8015090:	69ba      	ldr	r2, [r7, #24]
 8015092:	4013      	ands	r3, r2
 8015094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	689a      	ldr	r2, [r3, #8]
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	fa02 f303 	lsl.w	r3, r2, r3
 80150a2:	69ba      	ldr	r2, [r7, #24]
 80150a4:	4313      	orrs	r3, r2
 80150a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	69ba      	ldr	r2, [r7, #24]
 80150ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	f003 0303 	and.w	r3, r3, #3
 80150b6:	2b02      	cmp	r3, #2
 80150b8:	d123      	bne.n	8015102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	08da      	lsrs	r2, r3, #3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	3208      	adds	r2, #8
 80150c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80150c8:	69fb      	ldr	r3, [r7, #28]
 80150ca:	f003 0307 	and.w	r3, r3, #7
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	220f      	movs	r2, #15
 80150d2:	fa02 f303 	lsl.w	r3, r2, r3
 80150d6:	43db      	mvns	r3, r3
 80150d8:	69ba      	ldr	r2, [r7, #24]
 80150da:	4013      	ands	r3, r2
 80150dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	691a      	ldr	r2, [r3, #16]
 80150e2:	69fb      	ldr	r3, [r7, #28]
 80150e4:	f003 0307 	and.w	r3, r3, #7
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	fa02 f303 	lsl.w	r3, r2, r3
 80150ee:	69ba      	ldr	r2, [r7, #24]
 80150f0:	4313      	orrs	r3, r2
 80150f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	08da      	lsrs	r2, r3, #3
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	3208      	adds	r2, #8
 80150fc:	69b9      	ldr	r1, [r7, #24]
 80150fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	2203      	movs	r2, #3
 801510e:	fa02 f303 	lsl.w	r3, r2, r3
 8015112:	43db      	mvns	r3, r3
 8015114:	69ba      	ldr	r2, [r7, #24]
 8015116:	4013      	ands	r3, r2
 8015118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	f003 0203 	and.w	r2, r3, #3
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	fa02 f303 	lsl.w	r3, r2, r3
 801512a:	69ba      	ldr	r2, [r7, #24]
 801512c:	4313      	orrs	r3, r2
 801512e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	69ba      	ldr	r2, [r7, #24]
 8015134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801513e:	2b00      	cmp	r3, #0
 8015140:	f000 80e0 	beq.w	8015304 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015144:	4b2f      	ldr	r3, [pc, #188]	@ (8015204 <HAL_GPIO_Init+0x238>)
 8015146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801514a:	4a2e      	ldr	r2, [pc, #184]	@ (8015204 <HAL_GPIO_Init+0x238>)
 801514c:	f043 0302 	orr.w	r3, r3, #2
 8015150:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8015154:	4b2b      	ldr	r3, [pc, #172]	@ (8015204 <HAL_GPIO_Init+0x238>)
 8015156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801515a:	f003 0302 	and.w	r3, r3, #2
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015162:	4a29      	ldr	r2, [pc, #164]	@ (8015208 <HAL_GPIO_Init+0x23c>)
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	089b      	lsrs	r3, r3, #2
 8015168:	3302      	adds	r3, #2
 801516a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801516e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	f003 0303 	and.w	r3, r3, #3
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	220f      	movs	r2, #15
 801517a:	fa02 f303 	lsl.w	r3, r2, r3
 801517e:	43db      	mvns	r3, r3
 8015180:	69ba      	ldr	r2, [r7, #24]
 8015182:	4013      	ands	r3, r2
 8015184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	4a20      	ldr	r2, [pc, #128]	@ (801520c <HAL_GPIO_Init+0x240>)
 801518a:	4293      	cmp	r3, r2
 801518c:	d052      	beq.n	8015234 <HAL_GPIO_Init+0x268>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4a1f      	ldr	r2, [pc, #124]	@ (8015210 <HAL_GPIO_Init+0x244>)
 8015192:	4293      	cmp	r3, r2
 8015194:	d031      	beq.n	80151fa <HAL_GPIO_Init+0x22e>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4a1e      	ldr	r2, [pc, #120]	@ (8015214 <HAL_GPIO_Init+0x248>)
 801519a:	4293      	cmp	r3, r2
 801519c:	d02b      	beq.n	80151f6 <HAL_GPIO_Init+0x22a>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4a1d      	ldr	r2, [pc, #116]	@ (8015218 <HAL_GPIO_Init+0x24c>)
 80151a2:	4293      	cmp	r3, r2
 80151a4:	d025      	beq.n	80151f2 <HAL_GPIO_Init+0x226>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4a1c      	ldr	r2, [pc, #112]	@ (801521c <HAL_GPIO_Init+0x250>)
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d01f      	beq.n	80151ee <HAL_GPIO_Init+0x222>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	4a1b      	ldr	r2, [pc, #108]	@ (8015220 <HAL_GPIO_Init+0x254>)
 80151b2:	4293      	cmp	r3, r2
 80151b4:	d019      	beq.n	80151ea <HAL_GPIO_Init+0x21e>
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	4a1a      	ldr	r2, [pc, #104]	@ (8015224 <HAL_GPIO_Init+0x258>)
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d013      	beq.n	80151e6 <HAL_GPIO_Init+0x21a>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	4a19      	ldr	r2, [pc, #100]	@ (8015228 <HAL_GPIO_Init+0x25c>)
 80151c2:	4293      	cmp	r3, r2
 80151c4:	d00d      	beq.n	80151e2 <HAL_GPIO_Init+0x216>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	4a18      	ldr	r2, [pc, #96]	@ (801522c <HAL_GPIO_Init+0x260>)
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d007      	beq.n	80151de <HAL_GPIO_Init+0x212>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4a17      	ldr	r2, [pc, #92]	@ (8015230 <HAL_GPIO_Init+0x264>)
 80151d2:	4293      	cmp	r3, r2
 80151d4:	d101      	bne.n	80151da <HAL_GPIO_Init+0x20e>
 80151d6:	2309      	movs	r3, #9
 80151d8:	e02d      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151da:	230a      	movs	r3, #10
 80151dc:	e02b      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151de:	2308      	movs	r3, #8
 80151e0:	e029      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151e2:	2307      	movs	r3, #7
 80151e4:	e027      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151e6:	2306      	movs	r3, #6
 80151e8:	e025      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151ea:	2305      	movs	r3, #5
 80151ec:	e023      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151ee:	2304      	movs	r3, #4
 80151f0:	e021      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151f2:	2303      	movs	r3, #3
 80151f4:	e01f      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151f6:	2302      	movs	r3, #2
 80151f8:	e01d      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151fa:	2301      	movs	r3, #1
 80151fc:	e01b      	b.n	8015236 <HAL_GPIO_Init+0x26a>
 80151fe:	bf00      	nop
 8015200:	58000080 	.word	0x58000080
 8015204:	58024400 	.word	0x58024400
 8015208:	58000400 	.word	0x58000400
 801520c:	58020000 	.word	0x58020000
 8015210:	58020400 	.word	0x58020400
 8015214:	58020800 	.word	0x58020800
 8015218:	58020c00 	.word	0x58020c00
 801521c:	58021000 	.word	0x58021000
 8015220:	58021400 	.word	0x58021400
 8015224:	58021800 	.word	0x58021800
 8015228:	58021c00 	.word	0x58021c00
 801522c:	58022000 	.word	0x58022000
 8015230:	58022400 	.word	0x58022400
 8015234:	2300      	movs	r3, #0
 8015236:	69fa      	ldr	r2, [r7, #28]
 8015238:	f002 0203 	and.w	r2, r2, #3
 801523c:	0092      	lsls	r2, r2, #2
 801523e:	4093      	lsls	r3, r2
 8015240:	69ba      	ldr	r2, [r7, #24]
 8015242:	4313      	orrs	r3, r2
 8015244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015246:	4938      	ldr	r1, [pc, #224]	@ (8015328 <HAL_GPIO_Init+0x35c>)
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	089b      	lsrs	r3, r3, #2
 801524c:	3302      	adds	r3, #2
 801524e:	69ba      	ldr	r2, [r7, #24]
 8015250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	43db      	mvns	r3, r3
 8015260:	69ba      	ldr	r2, [r7, #24]
 8015262:	4013      	ands	r3, r2
 8015264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801526e:	2b00      	cmp	r3, #0
 8015270:	d003      	beq.n	801527a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8015272:	69ba      	ldr	r2, [r7, #24]
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	4313      	orrs	r3, r2
 8015278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801527a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	43db      	mvns	r3, r3
 801528e:	69ba      	ldr	r2, [r7, #24]
 8015290:	4013      	ands	r3, r2
 8015292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801529c:	2b00      	cmp	r3, #0
 801529e:	d003      	beq.n	80152a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80152a0:	69ba      	ldr	r2, [r7, #24]
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	4313      	orrs	r3, r2
 80152a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80152a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80152ac:	69bb      	ldr	r3, [r7, #24]
 80152ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	685b      	ldr	r3, [r3, #4]
 80152b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	43db      	mvns	r3, r3
 80152ba:	69ba      	ldr	r2, [r7, #24]
 80152bc:	4013      	ands	r3, r2
 80152be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d003      	beq.n	80152d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80152cc:	69ba      	ldr	r2, [r7, #24]
 80152ce:	693b      	ldr	r3, [r7, #16]
 80152d0:	4313      	orrs	r3, r2
 80152d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	69ba      	ldr	r2, [r7, #24]
 80152d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	43db      	mvns	r3, r3
 80152e4:	69ba      	ldr	r2, [r7, #24]
 80152e6:	4013      	ands	r3, r2
 80152e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d003      	beq.n	80152fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80152f6:	69ba      	ldr	r2, [r7, #24]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	4313      	orrs	r3, r2
 80152fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	69ba      	ldr	r2, [r7, #24]
 8015302:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	3301      	adds	r3, #1
 8015308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	fa22 f303 	lsr.w	r3, r2, r3
 8015314:	2b00      	cmp	r3, #0
 8015316:	f47f ae63 	bne.w	8014fe0 <HAL_GPIO_Init+0x14>
  }
}
 801531a:	bf00      	nop
 801531c:	bf00      	nop
 801531e:	3724      	adds	r7, #36	@ 0x24
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr
 8015328:	58000400 	.word	0x58000400

0801532c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	460b      	mov	r3, r1
 8015336:	807b      	strh	r3, [r7, #2]
 8015338:	4613      	mov	r3, r2
 801533a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801533c:	787b      	ldrb	r3, [r7, #1]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d003      	beq.n	801534a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015342:	887a      	ldrh	r2, [r7, #2]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8015348:	e003      	b.n	8015352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801534a:	887b      	ldrh	r3, [r7, #2]
 801534c:	041a      	lsls	r2, r3, #16
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	619a      	str	r2, [r3, #24]
}
 8015352:	bf00      	nop
 8015354:	370c      	adds	r7, #12
 8015356:	46bd      	mov	sp, r7
 8015358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535c:	4770      	bx	lr
	...

08015360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d101      	bne.n	8015372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801536e:	2301      	movs	r3, #1
 8015370:	e08b      	b.n	801548a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015378:	b2db      	uxtb	r3, r3
 801537a:	2b00      	cmp	r3, #0
 801537c:	d106      	bne.n	801538c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2200      	movs	r2, #0
 8015382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f7fc fe4e 	bl	8012028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2224      	movs	r2, #36	@ 0x24
 8015390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	681a      	ldr	r2, [r3, #0]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	f022 0201 	bic.w	r2, r2, #1
 80153a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	685a      	ldr	r2, [r3, #4]
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80153b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	689a      	ldr	r2, [r3, #8]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80153c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d107      	bne.n	80153da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	689a      	ldr	r2, [r3, #8]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80153d6:	609a      	str	r2, [r3, #8]
 80153d8:	e006      	b.n	80153e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	689a      	ldr	r2, [r3, #8]
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80153e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	2b02      	cmp	r3, #2
 80153ee:	d108      	bne.n	8015402 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	685a      	ldr	r2, [r3, #4]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80153fe:	605a      	str	r2, [r3, #4]
 8015400:	e007      	b.n	8015412 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	685a      	ldr	r2, [r3, #4]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8015410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	6859      	ldr	r1, [r3, #4]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681a      	ldr	r2, [r3, #0]
 801541c:	4b1d      	ldr	r3, [pc, #116]	@ (8015494 <HAL_I2C_Init+0x134>)
 801541e:	430b      	orrs	r3, r1
 8015420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	68da      	ldr	r2, [r3, #12]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	691a      	ldr	r2, [r3, #16]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	695b      	ldr	r3, [r3, #20]
 801543a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	699b      	ldr	r3, [r3, #24]
 8015442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	430a      	orrs	r2, r1
 801544a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	69d9      	ldr	r1, [r3, #28]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6a1a      	ldr	r2, [r3, #32]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	430a      	orrs	r2, r1
 801545a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	f042 0201 	orr.w	r2, r2, #1
 801546a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2200      	movs	r2, #0
 8015470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2220      	movs	r2, #32
 8015476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2200      	movs	r2, #0
 801547e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2200      	movs	r2, #0
 8015484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	02008000 	.word	0x02008000

08015498 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b088      	sub	sp, #32
 801549c:	af02      	add	r7, sp, #8
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	607a      	str	r2, [r7, #4]
 80154a2:	461a      	mov	r2, r3
 80154a4:	460b      	mov	r3, r1
 80154a6:	817b      	strh	r3, [r7, #10]
 80154a8:	4613      	mov	r3, r2
 80154aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	2b20      	cmp	r3, #32
 80154b6:	f040 80fd 	bne.w	80156b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d101      	bne.n	80154c8 <HAL_I2C_Master_Transmit+0x30>
 80154c4:	2302      	movs	r3, #2
 80154c6:	e0f6      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2201      	movs	r2, #1
 80154cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80154d0:	f7fd fa18 	bl	8012904 <HAL_GetTick>
 80154d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	2319      	movs	r3, #25
 80154dc:	2201      	movs	r2, #1
 80154de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f001 f875 	bl	80165d2 <I2C_WaitOnFlagUntilTimeout>
 80154e8:	4603      	mov	r3, r0
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d001      	beq.n	80154f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80154ee:	2301      	movs	r3, #1
 80154f0:	e0e1      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2221      	movs	r2, #33	@ 0x21
 80154f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	2210      	movs	r2, #16
 80154fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2200      	movs	r2, #0
 8015506:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	893a      	ldrh	r2, [r7, #8]
 8015512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	2200      	movs	r2, #0
 8015518:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801551e:	b29b      	uxth	r3, r3
 8015520:	2bff      	cmp	r3, #255	@ 0xff
 8015522:	d906      	bls.n	8015532 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	22ff      	movs	r2, #255	@ 0xff
 8015528:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801552a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801552e:	617b      	str	r3, [r7, #20]
 8015530:	e007      	b.n	8015542 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015536:	b29a      	uxth	r2, r3
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801553c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015540:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015546:	2b00      	cmp	r3, #0
 8015548:	d024      	beq.n	8015594 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801554e:	781a      	ldrb	r2, [r3, #0]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801555a:	1c5a      	adds	r2, r3, #1
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015564:	b29b      	uxth	r3, r3
 8015566:	3b01      	subs	r3, #1
 8015568:	b29a      	uxth	r2, r3
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015572:	3b01      	subs	r3, #1
 8015574:	b29a      	uxth	r2, r3
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801557e:	b2db      	uxtb	r3, r3
 8015580:	3301      	adds	r3, #1
 8015582:	b2da      	uxtb	r2, r3
 8015584:	8979      	ldrh	r1, [r7, #10]
 8015586:	4b4e      	ldr	r3, [pc, #312]	@ (80156c0 <HAL_I2C_Master_Transmit+0x228>)
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f001 fa6f 	bl	8016a70 <I2C_TransferConfig>
 8015592:	e066      	b.n	8015662 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015598:	b2da      	uxtb	r2, r3
 801559a:	8979      	ldrh	r1, [r7, #10]
 801559c:	4b48      	ldr	r3, [pc, #288]	@ (80156c0 <HAL_I2C_Master_Transmit+0x228>)
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f001 fa64 	bl	8016a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80155a8:	e05b      	b.n	8015662 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80155aa:	693a      	ldr	r2, [r7, #16]
 80155ac:	6a39      	ldr	r1, [r7, #32]
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f001 f868 	bl	8016684 <I2C_WaitOnTXISFlagUntilTimeout>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d001      	beq.n	80155be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80155ba:	2301      	movs	r3, #1
 80155bc:	e07b      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155c2:	781a      	ldrb	r2, [r3, #0]
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155ce:	1c5a      	adds	r2, r3, #1
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155d8:	b29b      	uxth	r3, r3
 80155da:	3b01      	subs	r3, #1
 80155dc:	b29a      	uxth	r2, r3
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155e6:	3b01      	subs	r3, #1
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d034      	beq.n	8015662 <HAL_I2C_Master_Transmit+0x1ca>
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d130      	bne.n	8015662 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	6a3b      	ldr	r3, [r7, #32]
 8015606:	2200      	movs	r2, #0
 8015608:	2180      	movs	r1, #128	@ 0x80
 801560a:	68f8      	ldr	r0, [r7, #12]
 801560c:	f000 ffe1 	bl	80165d2 <I2C_WaitOnFlagUntilTimeout>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d001      	beq.n	801561a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8015616:	2301      	movs	r3, #1
 8015618:	e04d      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801561e:	b29b      	uxth	r3, r3
 8015620:	2bff      	cmp	r3, #255	@ 0xff
 8015622:	d90e      	bls.n	8015642 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	22ff      	movs	r2, #255	@ 0xff
 8015628:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801562e:	b2da      	uxtb	r2, r3
 8015630:	8979      	ldrh	r1, [r7, #10]
 8015632:	2300      	movs	r3, #0
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801563a:	68f8      	ldr	r0, [r7, #12]
 801563c:	f001 fa18 	bl	8016a70 <I2C_TransferConfig>
 8015640:	e00f      	b.n	8015662 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015646:	b29a      	uxth	r2, r3
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015650:	b2da      	uxtb	r2, r3
 8015652:	8979      	ldrh	r1, [r7, #10]
 8015654:	2300      	movs	r3, #0
 8015656:	9300      	str	r3, [sp, #0]
 8015658:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801565c:	68f8      	ldr	r0, [r7, #12]
 801565e:	f001 fa07 	bl	8016a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015666:	b29b      	uxth	r3, r3
 8015668:	2b00      	cmp	r3, #0
 801566a:	d19e      	bne.n	80155aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801566c:	693a      	ldr	r2, [r7, #16]
 801566e:	6a39      	ldr	r1, [r7, #32]
 8015670:	68f8      	ldr	r0, [r7, #12]
 8015672:	f001 f84e 	bl	8016712 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015676:	4603      	mov	r3, r0
 8015678:	2b00      	cmp	r3, #0
 801567a:	d001      	beq.n	8015680 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 801567c:	2301      	movs	r3, #1
 801567e:	e01a      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	2220      	movs	r2, #32
 8015686:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	6859      	ldr	r1, [r3, #4]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	4b0c      	ldr	r3, [pc, #48]	@ (80156c4 <HAL_I2C_Master_Transmit+0x22c>)
 8015694:	400b      	ands	r3, r1
 8015696:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2220      	movs	r2, #32
 801569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2200      	movs	r2, #0
 80156a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80156b0:	2300      	movs	r3, #0
 80156b2:	e000      	b.n	80156b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80156b4:	2302      	movs	r3, #2
  }
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	80002000 	.word	0x80002000
 80156c4:	fe00e800 	.word	0xfe00e800

080156c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b088      	sub	sp, #32
 80156cc:	af02      	add	r7, sp, #8
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	607a      	str	r2, [r7, #4]
 80156d2:	461a      	mov	r2, r3
 80156d4:	460b      	mov	r3, r1
 80156d6:	817b      	strh	r3, [r7, #10]
 80156d8:	4613      	mov	r3, r2
 80156da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	2b20      	cmp	r3, #32
 80156e6:	f040 80db 	bne.w	80158a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d101      	bne.n	80156f8 <HAL_I2C_Master_Receive+0x30>
 80156f4:	2302      	movs	r3, #2
 80156f6:	e0d4      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2201      	movs	r2, #1
 80156fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015700:	f7fd f900 	bl	8012904 <HAL_GetTick>
 8015704:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	9300      	str	r3, [sp, #0]
 801570a:	2319      	movs	r3, #25
 801570c:	2201      	movs	r2, #1
 801570e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015712:	68f8      	ldr	r0, [r7, #12]
 8015714:	f000 ff5d 	bl	80165d2 <I2C_WaitOnFlagUntilTimeout>
 8015718:	4603      	mov	r3, r0
 801571a:	2b00      	cmp	r3, #0
 801571c:	d001      	beq.n	8015722 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801571e:	2301      	movs	r3, #1
 8015720:	e0bf      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	2222      	movs	r2, #34	@ 0x22
 8015726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2210      	movs	r2, #16
 801572e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	2200      	movs	r2, #0
 8015736:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	893a      	ldrh	r2, [r7, #8]
 8015742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2200      	movs	r2, #0
 8015748:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801574e:	b29b      	uxth	r3, r3
 8015750:	2bff      	cmp	r3, #255	@ 0xff
 8015752:	d90e      	bls.n	8015772 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	22ff      	movs	r2, #255	@ 0xff
 8015758:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801575e:	b2da      	uxtb	r2, r3
 8015760:	8979      	ldrh	r1, [r7, #10]
 8015762:	4b52      	ldr	r3, [pc, #328]	@ (80158ac <HAL_I2C_Master_Receive+0x1e4>)
 8015764:	9300      	str	r3, [sp, #0]
 8015766:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801576a:	68f8      	ldr	r0, [r7, #12]
 801576c:	f001 f980 	bl	8016a70 <I2C_TransferConfig>
 8015770:	e06d      	b.n	801584e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015776:	b29a      	uxth	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015780:	b2da      	uxtb	r2, r3
 8015782:	8979      	ldrh	r1, [r7, #10]
 8015784:	4b49      	ldr	r3, [pc, #292]	@ (80158ac <HAL_I2C_Master_Receive+0x1e4>)
 8015786:	9300      	str	r3, [sp, #0]
 8015788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801578c:	68f8      	ldr	r0, [r7, #12]
 801578e:	f001 f96f 	bl	8016a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015792:	e05c      	b.n	801584e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015794:	697a      	ldr	r2, [r7, #20]
 8015796:	6a39      	ldr	r1, [r7, #32]
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f000 fffd 	bl	8016798 <I2C_WaitOnRXNEFlagUntilTimeout>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80157a4:	2301      	movs	r3, #1
 80157a6:	e07c      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157ba:	1c5a      	adds	r2, r3, #1
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c4:	3b01      	subs	r3, #1
 80157c6:	b29a      	uxth	r2, r3
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	3b01      	subs	r3, #1
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157de:	b29b      	uxth	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d034      	beq.n	801584e <HAL_I2C_Master_Receive+0x186>
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d130      	bne.n	801584e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	9300      	str	r3, [sp, #0]
 80157f0:	6a3b      	ldr	r3, [r7, #32]
 80157f2:	2200      	movs	r2, #0
 80157f4:	2180      	movs	r1, #128	@ 0x80
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	f000 feeb 	bl	80165d2 <I2C_WaitOnFlagUntilTimeout>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015802:	2301      	movs	r3, #1
 8015804:	e04d      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801580a:	b29b      	uxth	r3, r3
 801580c:	2bff      	cmp	r3, #255	@ 0xff
 801580e:	d90e      	bls.n	801582e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	22ff      	movs	r2, #255	@ 0xff
 8015814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801581a:	b2da      	uxtb	r2, r3
 801581c:	8979      	ldrh	r1, [r7, #10]
 801581e:	2300      	movs	r3, #0
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8015826:	68f8      	ldr	r0, [r7, #12]
 8015828:	f001 f922 	bl	8016a70 <I2C_TransferConfig>
 801582c:	e00f      	b.n	801584e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015832:	b29a      	uxth	r2, r3
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801583c:	b2da      	uxtb	r2, r3
 801583e:	8979      	ldrh	r1, [r7, #10]
 8015840:	2300      	movs	r3, #0
 8015842:	9300      	str	r3, [sp, #0]
 8015844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8015848:	68f8      	ldr	r0, [r7, #12]
 801584a:	f001 f911 	bl	8016a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015852:	b29b      	uxth	r3, r3
 8015854:	2b00      	cmp	r3, #0
 8015856:	d19d      	bne.n	8015794 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015858:	697a      	ldr	r2, [r7, #20]
 801585a:	6a39      	ldr	r1, [r7, #32]
 801585c:	68f8      	ldr	r0, [r7, #12]
 801585e:	f000 ff58 	bl	8016712 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015862:	4603      	mov	r3, r0
 8015864:	2b00      	cmp	r3, #0
 8015866:	d001      	beq.n	801586c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015868:	2301      	movs	r3, #1
 801586a:	e01a      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2220      	movs	r2, #32
 8015872:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	6859      	ldr	r1, [r3, #4]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	4b0c      	ldr	r3, [pc, #48]	@ (80158b0 <HAL_I2C_Master_Receive+0x1e8>)
 8015880:	400b      	ands	r3, r1
 8015882:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2220      	movs	r2, #32
 8015888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2200      	movs	r2, #0
 8015890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801589c:	2300      	movs	r3, #0
 801589e:	e000      	b.n	80158a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80158a0:	2302      	movs	r3, #2
  }
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3718      	adds	r7, #24
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}
 80158aa:	bf00      	nop
 80158ac:	80002400 	.word	0x80002400
 80158b0:	fe00e800 	.word	0xfe00e800

080158b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	699b      	ldr	r3, [r3, #24]
 80158c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d005      	beq.n	80158e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158d8:	68ba      	ldr	r2, [r7, #8]
 80158da:	68f9      	ldr	r1, [r7, #12]
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	4798      	blx	r3
  }
}
 80158e0:	bf00      	nop
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b086      	sub	sp, #24
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	699b      	ldr	r3, [r3, #24]
 80158f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015906:	2b00      	cmp	r3, #0
 8015908:	d00f      	beq.n	801592a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015910:	2b00      	cmp	r3, #0
 8015912:	d00a      	beq.n	801592a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015918:	f043 0201 	orr.w	r2, r3, #1
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015928:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015930:	2b00      	cmp	r3, #0
 8015932:	d00f      	beq.n	8015954 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801593a:	2b00      	cmp	r3, #0
 801593c:	d00a      	beq.n	8015954 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015942:	f043 0208 	orr.w	r2, r3, #8
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015952:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801595a:	2b00      	cmp	r3, #0
 801595c:	d00f      	beq.n	801597e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015964:	2b00      	cmp	r3, #0
 8015966:	d00a      	beq.n	801597e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801596c:	f043 0202 	orr.w	r2, r3, #2
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801597c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015982:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f003 030b 	and.w	r3, r3, #11
 801598a:	2b00      	cmp	r3, #0
 801598c:	d003      	beq.n	8015996 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 801598e:	68f9      	ldr	r1, [r7, #12]
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f000 fcc5 	bl	8016320 <I2C_ITError>
  }
}
 8015996:	bf00      	nop
 8015998:	3718      	adds	r7, #24
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801599e:	b480      	push	{r7}
 80159a0:	b083      	sub	sp, #12
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80159a6:	bf00      	nop
 80159a8:	370c      	adds	r7, #12
 80159aa:	46bd      	mov	sp, r7
 80159ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b0:	4770      	bx	lr

080159b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159b2:	b480      	push	{r7}
 80159b4:	b083      	sub	sp, #12
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80159ba:	bf00      	nop
 80159bc:	370c      	adds	r7, #12
 80159be:	46bd      	mov	sp, r7
 80159c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c4:	4770      	bx	lr

080159c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80159c6:	b480      	push	{r7}
 80159c8:	b083      	sub	sp, #12
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
 80159ce:	460b      	mov	r3, r1
 80159d0:	70fb      	strb	r3, [r7, #3]
 80159d2:	4613      	mov	r3, r2
 80159d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80159d6:	bf00      	nop
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr

080159e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80159e2:	b480      	push	{r7}
 80159e4:	b083      	sub	sp, #12
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80159ea:	bf00      	nop
 80159ec:	370c      	adds	r7, #12
 80159ee:	46bd      	mov	sp, r7
 80159f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f4:	4770      	bx	lr

080159f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80159f6:	b480      	push	{r7}
 80159f8:	b083      	sub	sp, #12
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80159fe:	bf00      	nop
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015a0a:	b480      	push	{r7}
 8015a0c:	b083      	sub	sp, #12
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8015a12:	bf00      	nop
 8015a14:	370c      	adds	r7, #12
 8015a16:	46bd      	mov	sp, r7
 8015a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1c:	4770      	bx	lr

08015a1e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b086      	sub	sp, #24
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	60f8      	str	r0, [r7, #12]
 8015a26:	60b9      	str	r1, [r7, #8]
 8015a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015a3a:	2b01      	cmp	r3, #1
 8015a3c:	d101      	bne.n	8015a42 <I2C_Slave_ISR_IT+0x24>
 8015a3e:	2302      	movs	r3, #2
 8015a40:	e0e2      	b.n	8015c08 <I2C_Slave_ISR_IT+0x1ea>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2201      	movs	r2, #1
 8015a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	f003 0320 	and.w	r3, r3, #32
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d009      	beq.n	8015a68 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d004      	beq.n	8015a68 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8015a5e:	6939      	ldr	r1, [r7, #16]
 8015a60:	68f8      	ldr	r0, [r7, #12]
 8015a62:	f000 f9b5 	bl	8015dd0 <I2C_ITSlaveCplt>
 8015a66:	e0ca      	b.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	f003 0310 	and.w	r3, r3, #16
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d04b      	beq.n	8015b0a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d046      	beq.n	8015b0a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d128      	bne.n	8015ad8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	2b28      	cmp	r3, #40	@ 0x28
 8015a90:	d108      	bne.n	8015aa4 <I2C_Slave_ISR_IT+0x86>
 8015a92:	697b      	ldr	r3, [r7, #20]
 8015a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015a98:	d104      	bne.n	8015aa4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015a9a:	6939      	ldr	r1, [r7, #16]
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f000 fbeb 	bl	8016278 <I2C_ITListenCplt>
 8015aa2:	e031      	b.n	8015b08 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	2b29      	cmp	r3, #41	@ 0x29
 8015aae:	d10e      	bne.n	8015ace <I2C_Slave_ISR_IT+0xb0>
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8015ab6:	d00a      	beq.n	8015ace <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2210      	movs	r2, #16
 8015abe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015ac0:	68f8      	ldr	r0, [r7, #12]
 8015ac2:	f000 fd44 	bl	801654e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015ac6:	68f8      	ldr	r0, [r7, #12]
 8015ac8:	f000 f926 	bl	8015d18 <I2C_ITSlaveSeqCplt>
 8015acc:	e01c      	b.n	8015b08 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2210      	movs	r2, #16
 8015ad4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015ad6:	e08f      	b.n	8015bf8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2210      	movs	r2, #16
 8015ade:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ae4:	f043 0204 	orr.w	r2, r3, #4
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d003      	beq.n	8015afa <I2C_Slave_ISR_IT+0xdc>
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015af8:	d17e      	bne.n	8015bf8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015afe:	4619      	mov	r1, r3
 8015b00:	68f8      	ldr	r0, [r7, #12]
 8015b02:	f000 fc0d 	bl	8016320 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015b06:	e077      	b.n	8015bf8 <I2C_Slave_ISR_IT+0x1da>
 8015b08:	e076      	b.n	8015bf8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	f003 0304 	and.w	r3, r3, #4
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d02f      	beq.n	8015b74 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d02a      	beq.n	8015b74 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d018      	beq.n	8015b5a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b32:	b2d2      	uxtb	r2, r2
 8015b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b3a:	1c5a      	adds	r2, r3, #1
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b44:	3b01      	subs	r3, #1
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	3b01      	subs	r3, #1
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d14b      	bne.n	8015bfc <I2C_Slave_ISR_IT+0x1de>
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8015b6a:	d047      	beq.n	8015bfc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8015b6c:	68f8      	ldr	r0, [r7, #12]
 8015b6e:	f000 f8d3 	bl	8015d18 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8015b72:	e043      	b.n	8015bfc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	f003 0308 	and.w	r3, r3, #8
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d009      	beq.n	8015b92 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d004      	beq.n	8015b92 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8015b88:	6939      	ldr	r1, [r7, #16]
 8015b8a:	68f8      	ldr	r0, [r7, #12]
 8015b8c:	f000 f840 	bl	8015c10 <I2C_ITAddrCplt>
 8015b90:	e035      	b.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	f003 0302 	and.w	r3, r3, #2
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d030      	beq.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d02b      	beq.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d018      	beq.n	8015be2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bb4:	781a      	ldrb	r2, [r3, #0]
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bc0:	1c5a      	adds	r2, r3, #1
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	b29a      	uxth	r2, r3
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bd8:	3b01      	subs	r3, #1
 8015bda:	b29a      	uxth	r2, r3
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015be0:	e00d      	b.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015be8:	d002      	beq.n	8015bf0 <I2C_Slave_ISR_IT+0x1d2>
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d106      	bne.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f000 f891 	bl	8015d18 <I2C_ITSlaveSeqCplt>
 8015bf6:	e002      	b.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8015bf8:	bf00      	nop
 8015bfa:	e000      	b.n	8015bfe <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8015bfc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2200      	movs	r2, #0
 8015c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3718      	adds	r7, #24
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8015c26:	2b28      	cmp	r3, #40	@ 0x28
 8015c28:	d16a      	bne.n	8015d00 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	699b      	ldr	r3, [r3, #24]
 8015c30:	0c1b      	lsrs	r3, r3, #16
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	f003 0301 	and.w	r3, r3, #1
 8015c38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	699b      	ldr	r3, [r3, #24]
 8015c40:	0c1b      	lsrs	r3, r3, #16
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015c48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	b29b      	uxth	r3, r3
 8015c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015c56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	b29b      	uxth	r3, r3
 8015c60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015c64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	68db      	ldr	r3, [r3, #12]
 8015c6a:	2b02      	cmp	r3, #2
 8015c6c:	d138      	bne.n	8015ce0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8015c6e:	897b      	ldrh	r3, [r7, #10]
 8015c70:	09db      	lsrs	r3, r3, #7
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	89bb      	ldrh	r3, [r7, #12]
 8015c76:	4053      	eors	r3, r2
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	f003 0306 	and.w	r3, r3, #6
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d11c      	bne.n	8015cbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8015c82:	897b      	ldrh	r3, [r7, #10]
 8015c84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015c8a:	1c5a      	adds	r2, r3, #1
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015c94:	2b02      	cmp	r3, #2
 8015c96:	d13b      	bne.n	8015d10 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2208      	movs	r2, #8
 8015ca4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015cae:	89ba      	ldrh	r2, [r7, #12]
 8015cb0:	7bfb      	ldrb	r3, [r7, #15]
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7ff fe86 	bl	80159c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015cba:	e029      	b.n	8015d10 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8015cbc:	893b      	ldrh	r3, [r7, #8]
 8015cbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 ff05 	bl	8016ad4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015cd2:	89ba      	ldrh	r2, [r7, #12]
 8015cd4:	7bfb      	ldrb	r3, [r7, #15]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f7ff fe74 	bl	80159c6 <HAL_I2C_AddrCallback>
}
 8015cde:	e017      	b.n	8015d10 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015ce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f000 fef5 	bl	8016ad4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015cf2:	89ba      	ldrh	r2, [r7, #12]
 8015cf4:	7bfb      	ldrb	r3, [r7, #15]
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f7ff fe64 	bl	80159c6 <HAL_I2C_AddrCallback>
}
 8015cfe:	e007      	b.n	8015d10 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2208      	movs	r2, #8
 8015d06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8015d10:	bf00      	nop
 8015d12:	3710      	adds	r7, #16
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d008      	beq.n	8015d4c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8015d48:	601a      	str	r2, [r3, #0]
 8015d4a:	e00c      	b.n	8015d66 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d007      	beq.n	8015d66 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	681a      	ldr	r2, [r3, #0]
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015d64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b29      	cmp	r3, #41	@ 0x29
 8015d70:	d112      	bne.n	8015d98 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2228      	movs	r2, #40	@ 0x28
 8015d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2221      	movs	r2, #33	@ 0x21
 8015d7e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015d80:	2101      	movs	r1, #1
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 fea6 	bl	8016ad4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f7ff fe04 	bl	801599e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015d96:	e017      	b.n	8015dc8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8015da2:	d111      	bne.n	8015dc8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2228      	movs	r2, #40	@ 0x28
 8015da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2222      	movs	r2, #34	@ 0x22
 8015db0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015db2:	2102      	movs	r1, #2
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 fe8d 	bl	8016ad4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f7ff fdf5 	bl	80159b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8015dc8:	bf00      	nop
 8015dca:	3710      	adds	r7, #16
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b086      	sub	sp, #24
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015df2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2220      	movs	r2, #32
 8015dfa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015dfc:	7afb      	ldrb	r3, [r7, #11]
 8015dfe:	2b21      	cmp	r3, #33	@ 0x21
 8015e00:	d002      	beq.n	8015e08 <I2C_ITSlaveCplt+0x38>
 8015e02:	7afb      	ldrb	r3, [r7, #11]
 8015e04:	2b29      	cmp	r3, #41	@ 0x29
 8015e06:	d108      	bne.n	8015e1a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8015e08:	f248 0101 	movw	r1, #32769	@ 0x8001
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 fe61 	bl	8016ad4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2221      	movs	r2, #33	@ 0x21
 8015e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e18:	e019      	b.n	8015e4e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015e1a:	7afb      	ldrb	r3, [r7, #11]
 8015e1c:	2b22      	cmp	r3, #34	@ 0x22
 8015e1e:	d002      	beq.n	8015e26 <I2C_ITSlaveCplt+0x56>
 8015e20:	7afb      	ldrb	r3, [r7, #11]
 8015e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e24:	d108      	bne.n	8015e38 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015e26:	f248 0102 	movw	r1, #32770	@ 0x8002
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 fe52 	bl	8016ad4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2222      	movs	r2, #34	@ 0x22
 8015e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e36:	e00a      	b.n	8015e4e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8015e38:	7afb      	ldrb	r3, [r7, #11]
 8015e3a:	2b28      	cmp	r3, #40	@ 0x28
 8015e3c:	d107      	bne.n	8015e4e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8015e3e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 fe46 	bl	8016ad4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	685a      	ldr	r2, [r3, #4]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015e5c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	6859      	ldr	r1, [r3, #4]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	4b7f      	ldr	r3, [pc, #508]	@ (8016068 <I2C_ITSlaveCplt+0x298>)
 8015e6a:	400b      	ands	r3, r1
 8015e6c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 fb6d 	bl	801654e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d07a      	beq.n	8015f74 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8015e8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	f000 8111 	beq.w	80160ba <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	4a73      	ldr	r2, [pc, #460]	@ (801606c <I2C_ITSlaveCplt+0x29c>)
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d059      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	4a71      	ldr	r2, [pc, #452]	@ (8016070 <I2C_ITSlaveCplt+0x2a0>)
 8015eac:	4293      	cmp	r3, r2
 8015eae:	d053      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8016074 <I2C_ITSlaveCplt+0x2a4>)
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	d04d      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8016078 <I2C_ITSlaveCplt+0x2a8>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d047      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a6b      	ldr	r2, [pc, #428]	@ (801607c <I2C_ITSlaveCplt+0x2ac>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d041      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4a69      	ldr	r2, [pc, #420]	@ (8016080 <I2C_ITSlaveCplt+0x2b0>)
 8015edc:	4293      	cmp	r3, r2
 8015ede:	d03b      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	4a67      	ldr	r2, [pc, #412]	@ (8016084 <I2C_ITSlaveCplt+0x2b4>)
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	d035      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	4a65      	ldr	r2, [pc, #404]	@ (8016088 <I2C_ITSlaveCplt+0x2b8>)
 8015ef4:	4293      	cmp	r3, r2
 8015ef6:	d02f      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	4a63      	ldr	r2, [pc, #396]	@ (801608c <I2C_ITSlaveCplt+0x2bc>)
 8015f00:	4293      	cmp	r3, r2
 8015f02:	d029      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a61      	ldr	r2, [pc, #388]	@ (8016090 <I2C_ITSlaveCplt+0x2c0>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d023      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	4a5f      	ldr	r2, [pc, #380]	@ (8016094 <I2C_ITSlaveCplt+0x2c4>)
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	d01d      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4a5d      	ldr	r2, [pc, #372]	@ (8016098 <I2C_ITSlaveCplt+0x2c8>)
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d017      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	4a5b      	ldr	r2, [pc, #364]	@ (801609c <I2C_ITSlaveCplt+0x2cc>)
 8015f30:	4293      	cmp	r3, r2
 8015f32:	d011      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	4a59      	ldr	r2, [pc, #356]	@ (80160a0 <I2C_ITSlaveCplt+0x2d0>)
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	d00b      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4a57      	ldr	r2, [pc, #348]	@ (80160a4 <I2C_ITSlaveCplt+0x2d4>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d005      	beq.n	8015f58 <I2C_ITSlaveCplt+0x188>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	4a55      	ldr	r2, [pc, #340]	@ (80160a8 <I2C_ITSlaveCplt+0x2d8>)
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d105      	bne.n	8015f64 <I2C_ITSlaveCplt+0x194>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	e004      	b.n	8015f6e <I2C_ITSlaveCplt+0x19e>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	b29b      	uxth	r3, r3
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8015f72:	e0a2      	b.n	80160ba <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f000 809d 	beq.w	80160ba <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015f8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 8090 	beq.w	80160ba <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4a32      	ldr	r2, [pc, #200]	@ (801606c <I2C_ITSlaveCplt+0x29c>)
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d059      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	4a30      	ldr	r2, [pc, #192]	@ (8016070 <I2C_ITSlaveCplt+0x2a0>)
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	d053      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8016074 <I2C_ITSlaveCplt+0x2a4>)
 8015fba:	4293      	cmp	r3, r2
 8015fbc:	d04d      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8016078 <I2C_ITSlaveCplt+0x2a8>)
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d047      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4a2a      	ldr	r2, [pc, #168]	@ (801607c <I2C_ITSlaveCplt+0x2ac>)
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d041      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4a28      	ldr	r2, [pc, #160]	@ (8016080 <I2C_ITSlaveCplt+0x2b0>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d03b      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4a26      	ldr	r2, [pc, #152]	@ (8016084 <I2C_ITSlaveCplt+0x2b4>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d035      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4a24      	ldr	r2, [pc, #144]	@ (8016088 <I2C_ITSlaveCplt+0x2b8>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d02f      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4a22      	ldr	r2, [pc, #136]	@ (801608c <I2C_ITSlaveCplt+0x2bc>)
 8016002:	4293      	cmp	r3, r2
 8016004:	d029      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4a20      	ldr	r2, [pc, #128]	@ (8016090 <I2C_ITSlaveCplt+0x2c0>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d023      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	4a1e      	ldr	r2, [pc, #120]	@ (8016094 <I2C_ITSlaveCplt+0x2c4>)
 801601a:	4293      	cmp	r3, r2
 801601c:	d01d      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	4a1c      	ldr	r2, [pc, #112]	@ (8016098 <I2C_ITSlaveCplt+0x2c8>)
 8016026:	4293      	cmp	r3, r2
 8016028:	d017      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	4a1a      	ldr	r2, [pc, #104]	@ (801609c <I2C_ITSlaveCplt+0x2cc>)
 8016032:	4293      	cmp	r3, r2
 8016034:	d011      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	4a18      	ldr	r2, [pc, #96]	@ (80160a0 <I2C_ITSlaveCplt+0x2d0>)
 801603e:	4293      	cmp	r3, r2
 8016040:	d00b      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4a16      	ldr	r2, [pc, #88]	@ (80160a4 <I2C_ITSlaveCplt+0x2d4>)
 801604a:	4293      	cmp	r3, r2
 801604c:	d005      	beq.n	801605a <I2C_ITSlaveCplt+0x28a>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	4a14      	ldr	r2, [pc, #80]	@ (80160a8 <I2C_ITSlaveCplt+0x2d8>)
 8016056:	4293      	cmp	r3, r2
 8016058:	d128      	bne.n	80160ac <I2C_ITSlaveCplt+0x2dc>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	b29b      	uxth	r3, r3
 8016064:	e027      	b.n	80160b6 <I2C_ITSlaveCplt+0x2e6>
 8016066:	bf00      	nop
 8016068:	fe00e800 	.word	0xfe00e800
 801606c:	40020010 	.word	0x40020010
 8016070:	40020028 	.word	0x40020028
 8016074:	40020040 	.word	0x40020040
 8016078:	40020058 	.word	0x40020058
 801607c:	40020070 	.word	0x40020070
 8016080:	40020088 	.word	0x40020088
 8016084:	400200a0 	.word	0x400200a0
 8016088:	400200b8 	.word	0x400200b8
 801608c:	40020410 	.word	0x40020410
 8016090:	40020428 	.word	0x40020428
 8016094:	40020440 	.word	0x40020440
 8016098:	40020458 	.word	0x40020458
 801609c:	40020470 	.word	0x40020470
 80160a0:	40020488 	.word	0x40020488
 80160a4:	400204a0 	.word	0x400204a0
 80160a8:	400204b8 	.word	0x400204b8
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	685b      	ldr	r3, [r3, #4]
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	f003 0304 	and.w	r3, r3, #4
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d020      	beq.n	8016106 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	f023 0304 	bic.w	r3, r3, #4
 80160ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160d6:	b2d2      	uxtb	r2, r2
 80160d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160de:	1c5a      	adds	r2, r3, #1
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d00c      	beq.n	8016106 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160f0:	3b01      	subs	r3, #1
 80160f2:	b29a      	uxth	r2, r3
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	3b01      	subs	r3, #1
 8016100:	b29a      	uxth	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801610a:	b29b      	uxth	r3, r3
 801610c:	2b00      	cmp	r3, #0
 801610e:	d005      	beq.n	801611c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016114:	f043 0204 	orr.w	r2, r3, #4
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	f003 0310 	and.w	r3, r3, #16
 8016122:	2b00      	cmp	r3, #0
 8016124:	d049      	beq.n	80161ba <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801612c:	2b00      	cmp	r3, #0
 801612e:	d044      	beq.n	80161ba <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016134:	b29b      	uxth	r3, r3
 8016136:	2b00      	cmp	r3, #0
 8016138:	d128      	bne.n	801618c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b28      	cmp	r3, #40	@ 0x28
 8016144:	d108      	bne.n	8016158 <I2C_ITSlaveCplt+0x388>
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801614c:	d104      	bne.n	8016158 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801614e:	6979      	ldr	r1, [r7, #20]
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f891 	bl	8016278 <I2C_ITListenCplt>
 8016156:	e030      	b.n	80161ba <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801615e:	b2db      	uxtb	r3, r3
 8016160:	2b29      	cmp	r3, #41	@ 0x29
 8016162:	d10e      	bne.n	8016182 <I2C_ITSlaveCplt+0x3b2>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801616a:	d00a      	beq.n	8016182 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2210      	movs	r2, #16
 8016172:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 f9ea 	bl	801654e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f7ff fdcc 	bl	8015d18 <I2C_ITSlaveSeqCplt>
 8016180:	e01b      	b.n	80161ba <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2210      	movs	r2, #16
 8016188:	61da      	str	r2, [r3, #28]
 801618a:	e016      	b.n	80161ba <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2210      	movs	r2, #16
 8016192:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016198:	f043 0204 	orr.w	r2, r3, #4
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d003      	beq.n	80161ae <I2C_ITSlaveCplt+0x3de>
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80161ac:	d105      	bne.n	80161ba <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161b2:	4619      	mov	r1, r3
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 f8b3 	bl	8016320 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2200      	movs	r2, #0
 80161be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2200      	movs	r2, #0
 80161c6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d010      	beq.n	80161f2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161d4:	4619      	mov	r1, r3
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 f8a2 	bl	8016320 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	2b28      	cmp	r3, #40	@ 0x28
 80161e6:	d141      	bne.n	801626c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80161e8:	6979      	ldr	r1, [r7, #20]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 f844 	bl	8016278 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80161f0:	e03c      	b.n	801626c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80161fa:	d014      	beq.n	8016226 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7ff fd8b 	bl	8015d18 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	4a1b      	ldr	r2, [pc, #108]	@ (8016274 <I2C_ITSlaveCplt+0x4a4>)
 8016206:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2220      	movs	r2, #32
 801620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2200      	movs	r2, #0
 8016214:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f7ff fbdf 	bl	80159e2 <HAL_I2C_ListenCpltCallback>
}
 8016224:	e022      	b.n	801626c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801622c:	b2db      	uxtb	r3, r3
 801622e:	2b22      	cmp	r3, #34	@ 0x22
 8016230:	d10e      	bne.n	8016250 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2220      	movs	r2, #32
 8016236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2200      	movs	r2, #0
 801623e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2200      	movs	r2, #0
 8016244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7ff fbb2 	bl	80159b2 <HAL_I2C_SlaveRxCpltCallback>
}
 801624e:	e00d      	b.n	801626c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2220      	movs	r2, #32
 8016254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2200      	movs	r2, #0
 801625c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2200      	movs	r2, #0
 8016262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f7ff fb99 	bl	801599e <HAL_I2C_SlaveTxCpltCallback>
}
 801626c:	bf00      	nop
 801626e:	3718      	adds	r7, #24
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	ffff0000 	.word	0xffff0000

08016278 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	4a25      	ldr	r2, [pc, #148]	@ (801631c <I2C_ITListenCplt+0xa4>)
 8016286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2200      	movs	r2, #0
 801628c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2220      	movs	r2, #32
 8016292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2200      	movs	r2, #0
 80162a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	f003 0304 	and.w	r3, r3, #4
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d022      	beq.n	80162f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b8:	b2d2      	uxtb	r2, r2
 80162ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162c0:	1c5a      	adds	r2, r3, #1
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d012      	beq.n	80162f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d2:	3b01      	subs	r3, #1
 80162d4:	b29a      	uxth	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162de:	b29b      	uxth	r3, r3
 80162e0:	3b01      	subs	r3, #1
 80162e2:	b29a      	uxth	r2, r3
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162ec:	f043 0204 	orr.w	r2, r3, #4
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80162f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f000 fbeb 	bl	8016ad4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2210      	movs	r2, #16
 8016304:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2200      	movs	r2, #0
 801630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7ff fb67 	bl	80159e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8016314:	bf00      	nop
 8016316:	3708      	adds	r7, #8
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	ffff0000 	.word	0xffff0000

08016320 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b084      	sub	sp, #16
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016330:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2200      	movs	r2, #0
 8016336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	4a6d      	ldr	r2, [pc, #436]	@ (80164f4 <I2C_ITError+0x1d4>)
 801633e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2200      	movs	r2, #0
 8016344:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	431a      	orrs	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8016352:	7bfb      	ldrb	r3, [r7, #15]
 8016354:	2b28      	cmp	r3, #40	@ 0x28
 8016356:	d005      	beq.n	8016364 <I2C_ITError+0x44>
 8016358:	7bfb      	ldrb	r3, [r7, #15]
 801635a:	2b29      	cmp	r3, #41	@ 0x29
 801635c:	d002      	beq.n	8016364 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801635e:	7bfb      	ldrb	r3, [r7, #15]
 8016360:	2b2a      	cmp	r3, #42	@ 0x2a
 8016362:	d10b      	bne.n	801637c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016364:	2103      	movs	r1, #3
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f000 fbb4 	bl	8016ad4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2228      	movs	r2, #40	@ 0x28
 8016370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	4a60      	ldr	r2, [pc, #384]	@ (80164f8 <I2C_ITError+0x1d8>)
 8016378:	635a      	str	r2, [r3, #52]	@ 0x34
 801637a:	e030      	b.n	80163de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801637c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 fba7 	bl	8016ad4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f000 f8e1 	bl	801654e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016392:	b2db      	uxtb	r3, r3
 8016394:	2b60      	cmp	r3, #96	@ 0x60
 8016396:	d01f      	beq.n	80163d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2220      	movs	r2, #32
 801639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	699b      	ldr	r3, [r3, #24]
 80163a6:	f003 0320 	and.w	r3, r3, #32
 80163aa:	2b20      	cmp	r3, #32
 80163ac:	d114      	bne.n	80163d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	699b      	ldr	r3, [r3, #24]
 80163b4:	f003 0310 	and.w	r3, r3, #16
 80163b8:	2b10      	cmp	r3, #16
 80163ba:	d109      	bne.n	80163d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2210      	movs	r2, #16
 80163c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163c8:	f043 0204 	orr.w	r2, r3, #4
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2220      	movs	r2, #32
 80163d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2200      	movs	r2, #0
 80163dc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d039      	beq.n	8016460 <I2C_ITError+0x140>
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	2b11      	cmp	r3, #17
 80163f0:	d002      	beq.n	80163f8 <I2C_ITError+0xd8>
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	2b21      	cmp	r3, #33	@ 0x21
 80163f6:	d133      	bne.n	8016460 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016406:	d107      	bne.n	8016418 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8016416:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801641c:	4618      	mov	r0, r3
 801641e:	f7fd f935 	bl	801368c <HAL_DMA_GetState>
 8016422:	4603      	mov	r3, r0
 8016424:	2b01      	cmp	r3, #1
 8016426:	d017      	beq.n	8016458 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801642c:	4a33      	ldr	r2, [pc, #204]	@ (80164fc <I2C_ITError+0x1dc>)
 801642e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2200      	movs	r2, #0
 8016434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801643c:	4618      	mov	r0, r3
 801643e:	f7fc fedf 	bl	8013200 <HAL_DMA_Abort_IT>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d04d      	beq.n	80164e4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801644c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8016452:	4610      	mov	r0, r2
 8016454:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016456:	e045      	b.n	80164e4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f000 f851 	bl	8016500 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801645e:	e041      	b.n	80164e4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016464:	2b00      	cmp	r3, #0
 8016466:	d039      	beq.n	80164dc <I2C_ITError+0x1bc>
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	2b12      	cmp	r3, #18
 801646c:	d002      	beq.n	8016474 <I2C_ITError+0x154>
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	2b22      	cmp	r3, #34	@ 0x22
 8016472:	d133      	bne.n	80164dc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801647e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016482:	d107      	bne.n	8016494 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016492:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016498:	4618      	mov	r0, r3
 801649a:	f7fd f8f7 	bl	801368c <HAL_DMA_GetState>
 801649e:	4603      	mov	r3, r0
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d017      	beq.n	80164d4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164a8:	4a14      	ldr	r2, [pc, #80]	@ (80164fc <I2C_ITError+0x1dc>)
 80164aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2200      	movs	r2, #0
 80164b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7fc fea1 	bl	8013200 <HAL_DMA_Abort_IT>
 80164be:	4603      	mov	r3, r0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d011      	beq.n	80164e8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80164ce:	4610      	mov	r0, r2
 80164d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164d2:	e009      	b.n	80164e8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80164d4:	6878      	ldr	r0, [r7, #4]
 80164d6:	f000 f813 	bl	8016500 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164da:	e005      	b.n	80164e8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f000 f80f 	bl	8016500 <I2C_TreatErrorCallback>
  }
}
 80164e2:	e002      	b.n	80164ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80164e4:	bf00      	nop
 80164e6:	e000      	b.n	80164ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80164e8:	bf00      	nop
}
 80164ea:	bf00      	nop
 80164ec:	3710      	adds	r7, #16
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	ffff0000 	.word	0xffff0000
 80164f8:	08015a1f 	.word	0x08015a1f
 80164fc:	08016597 	.word	0x08016597

08016500 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b082      	sub	sp, #8
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801650e:	b2db      	uxtb	r3, r3
 8016510:	2b60      	cmp	r3, #96	@ 0x60
 8016512:	d10e      	bne.n	8016532 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2220      	movs	r2, #32
 8016518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2200      	movs	r2, #0
 8016520:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2200      	movs	r2, #0
 8016526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f7ff fa6d 	bl	8015a0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016530:	e009      	b.n	8016546 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2200      	movs	r2, #0
 8016536:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2200      	movs	r2, #0
 801653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f7ff fa58 	bl	80159f6 <HAL_I2C_ErrorCallback>
}
 8016546:	bf00      	nop
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801654e:	b480      	push	{r7}
 8016550:	b083      	sub	sp, #12
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	699b      	ldr	r3, [r3, #24]
 801655c:	f003 0302 	and.w	r3, r3, #2
 8016560:	2b02      	cmp	r3, #2
 8016562:	d103      	bne.n	801656c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2200      	movs	r2, #0
 801656a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	699b      	ldr	r3, [r3, #24]
 8016572:	f003 0301 	and.w	r3, r3, #1
 8016576:	2b01      	cmp	r3, #1
 8016578:	d007      	beq.n	801658a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	699a      	ldr	r2, [r3, #24]
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	f042 0201 	orr.w	r2, r2, #1
 8016588:	619a      	str	r2, [r3, #24]
  }
}
 801658a:	bf00      	nop
 801658c:	370c      	adds	r7, #12
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr

08016596 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b084      	sub	sp, #16
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d003      	beq.n	80165b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165b0:	2200      	movs	r2, #0
 80165b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d003      	beq.n	80165c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80165c0:	2200      	movs	r2, #0
 80165c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7ff ff9b 	bl	8016500 <I2C_TreatErrorCallback>
}
 80165ca:	bf00      	nop
 80165cc:	3710      	adds	r7, #16
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b084      	sub	sp, #16
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	60f8      	str	r0, [r7, #12]
 80165da:	60b9      	str	r1, [r7, #8]
 80165dc:	603b      	str	r3, [r7, #0]
 80165de:	4613      	mov	r3, r2
 80165e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80165e2:	e03b      	b.n	801665c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80165e4:	69ba      	ldr	r2, [r7, #24]
 80165e6:	6839      	ldr	r1, [r7, #0]
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f000 f961 	bl	80168b0 <I2C_IsErrorOccurred>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d001      	beq.n	80165f8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80165f4:	2301      	movs	r3, #1
 80165f6:	e041      	b.n	801667c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165fe:	d02d      	beq.n	801665c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016600:	f7fc f980 	bl	8012904 <HAL_GetTick>
 8016604:	4602      	mov	r2, r0
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	1ad3      	subs	r3, r2, r3
 801660a:	683a      	ldr	r2, [r7, #0]
 801660c:	429a      	cmp	r2, r3
 801660e:	d302      	bcc.n	8016616 <I2C_WaitOnFlagUntilTimeout+0x44>
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d122      	bne.n	801665c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	699a      	ldr	r2, [r3, #24]
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	4013      	ands	r3, r2
 8016620:	68ba      	ldr	r2, [r7, #8]
 8016622:	429a      	cmp	r2, r3
 8016624:	bf0c      	ite	eq
 8016626:	2301      	moveq	r3, #1
 8016628:	2300      	movne	r3, #0
 801662a:	b2db      	uxtb	r3, r3
 801662c:	461a      	mov	r2, r3
 801662e:	79fb      	ldrb	r3, [r7, #7]
 8016630:	429a      	cmp	r2, r3
 8016632:	d113      	bne.n	801665c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016638:	f043 0220 	orr.w	r2, r3, #32
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	2220      	movs	r2, #32
 8016644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2200      	movs	r2, #0
 801664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2200      	movs	r2, #0
 8016654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8016658:	2301      	movs	r3, #1
 801665a:	e00f      	b.n	801667c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	699a      	ldr	r2, [r3, #24]
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	4013      	ands	r3, r2
 8016666:	68ba      	ldr	r2, [r7, #8]
 8016668:	429a      	cmp	r2, r3
 801666a:	bf0c      	ite	eq
 801666c:	2301      	moveq	r3, #1
 801666e:	2300      	movne	r3, #0
 8016670:	b2db      	uxtb	r3, r3
 8016672:	461a      	mov	r2, r3
 8016674:	79fb      	ldrb	r3, [r7, #7]
 8016676:	429a      	cmp	r2, r3
 8016678:	d0b4      	beq.n	80165e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801667a:	2300      	movs	r3, #0
}
 801667c:	4618      	mov	r0, r3
 801667e:	3710      	adds	r7, #16
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016690:	e033      	b.n	80166fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016692:	687a      	ldr	r2, [r7, #4]
 8016694:	68b9      	ldr	r1, [r7, #8]
 8016696:	68f8      	ldr	r0, [r7, #12]
 8016698:	f000 f90a 	bl	80168b0 <I2C_IsErrorOccurred>
 801669c:	4603      	mov	r3, r0
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d001      	beq.n	80166a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80166a2:	2301      	movs	r3, #1
 80166a4:	e031      	b.n	801670a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ac:	d025      	beq.n	80166fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80166ae:	f7fc f929 	bl	8012904 <HAL_GetTick>
 80166b2:	4602      	mov	r2, r0
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	68ba      	ldr	r2, [r7, #8]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d302      	bcc.n	80166c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d11a      	bne.n	80166fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	699b      	ldr	r3, [r3, #24]
 80166ca:	f003 0302 	and.w	r3, r3, #2
 80166ce:	2b02      	cmp	r3, #2
 80166d0:	d013      	beq.n	80166fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166d6:	f043 0220 	orr.w	r2, r3, #32
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	2220      	movs	r2, #32
 80166e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	2200      	movs	r2, #0
 80166ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e007      	b.n	801670a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	699b      	ldr	r3, [r3, #24]
 8016700:	f003 0302 	and.w	r3, r3, #2
 8016704:	2b02      	cmp	r3, #2
 8016706:	d1c4      	bne.n	8016692 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016708:	2300      	movs	r3, #0
}
 801670a:	4618      	mov	r0, r3
 801670c:	3710      	adds	r7, #16
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}

08016712 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016712:	b580      	push	{r7, lr}
 8016714:	b084      	sub	sp, #16
 8016716:	af00      	add	r7, sp, #0
 8016718:	60f8      	str	r0, [r7, #12]
 801671a:	60b9      	str	r1, [r7, #8]
 801671c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801671e:	e02f      	b.n	8016780 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	68b9      	ldr	r1, [r7, #8]
 8016724:	68f8      	ldr	r0, [r7, #12]
 8016726:	f000 f8c3 	bl	80168b0 <I2C_IsErrorOccurred>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d001      	beq.n	8016734 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016730:	2301      	movs	r3, #1
 8016732:	e02d      	b.n	8016790 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016734:	f7fc f8e6 	bl	8012904 <HAL_GetTick>
 8016738:	4602      	mov	r2, r0
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	1ad3      	subs	r3, r2, r3
 801673e:	68ba      	ldr	r2, [r7, #8]
 8016740:	429a      	cmp	r2, r3
 8016742:	d302      	bcc.n	801674a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d11a      	bne.n	8016780 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	699b      	ldr	r3, [r3, #24]
 8016750:	f003 0320 	and.w	r3, r3, #32
 8016754:	2b20      	cmp	r3, #32
 8016756:	d013      	beq.n	8016780 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801675c:	f043 0220 	orr.w	r2, r3, #32
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2220      	movs	r2, #32
 8016768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2200      	movs	r2, #0
 8016770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2200      	movs	r2, #0
 8016778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801677c:	2301      	movs	r3, #1
 801677e:	e007      	b.n	8016790 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	699b      	ldr	r3, [r3, #24]
 8016786:	f003 0320 	and.w	r3, r3, #32
 801678a:	2b20      	cmp	r3, #32
 801678c:	d1c8      	bne.n	8016720 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801678e:	2300      	movs	r3, #0
}
 8016790:	4618      	mov	r0, r3
 8016792:	3710      	adds	r7, #16
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}

08016798 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b086      	sub	sp, #24
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80167a4:	2300      	movs	r3, #0
 80167a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80167a8:	e071      	b.n	801688e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	68b9      	ldr	r1, [r7, #8]
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	f000 f87e 	bl	80168b0 <I2C_IsErrorOccurred>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d001      	beq.n	80167be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80167ba:	2301      	movs	r3, #1
 80167bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	699b      	ldr	r3, [r3, #24]
 80167c4:	f003 0320 	and.w	r3, r3, #32
 80167c8:	2b20      	cmp	r3, #32
 80167ca:	d13b      	bne.n	8016844 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80167cc:	7dfb      	ldrb	r3, [r7, #23]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d138      	bne.n	8016844 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	699b      	ldr	r3, [r3, #24]
 80167d8:	f003 0304 	and.w	r3, r3, #4
 80167dc:	2b04      	cmp	r3, #4
 80167de:	d105      	bne.n	80167ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d001      	beq.n	80167ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80167e8:	2300      	movs	r3, #0
 80167ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	699b      	ldr	r3, [r3, #24]
 80167f2:	f003 0310 	and.w	r3, r3, #16
 80167f6:	2b10      	cmp	r3, #16
 80167f8:	d121      	bne.n	801683e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	2210      	movs	r2, #16
 8016800:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2204      	movs	r2, #4
 8016806:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	2220      	movs	r2, #32
 801680e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	6859      	ldr	r1, [r3, #4]
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	4b24      	ldr	r3, [pc, #144]	@ (80168ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 801681c:	400b      	ands	r3, r1
 801681e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2220      	movs	r2, #32
 8016824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2200      	movs	r2, #0
 801682c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2200      	movs	r2, #0
 8016834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8016838:	2301      	movs	r3, #1
 801683a:	75fb      	strb	r3, [r7, #23]
 801683c:	e002      	b.n	8016844 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	2200      	movs	r2, #0
 8016842:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8016844:	f7fc f85e 	bl	8012904 <HAL_GetTick>
 8016848:	4602      	mov	r2, r0
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	1ad3      	subs	r3, r2, r3
 801684e:	68ba      	ldr	r2, [r7, #8]
 8016850:	429a      	cmp	r2, r3
 8016852:	d302      	bcc.n	801685a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d119      	bne.n	801688e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 801685a:	7dfb      	ldrb	r3, [r7, #23]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d116      	bne.n	801688e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	699b      	ldr	r3, [r3, #24]
 8016866:	f003 0304 	and.w	r3, r3, #4
 801686a:	2b04      	cmp	r3, #4
 801686c:	d00f      	beq.n	801688e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016872:	f043 0220 	orr.w	r2, r3, #32
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2220      	movs	r2, #32
 801687e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2200      	movs	r2, #0
 8016886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 801688a:	2301      	movs	r3, #1
 801688c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	699b      	ldr	r3, [r3, #24]
 8016894:	f003 0304 	and.w	r3, r3, #4
 8016898:	2b04      	cmp	r3, #4
 801689a:	d002      	beq.n	80168a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 801689c:	7dfb      	ldrb	r3, [r7, #23]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d083      	beq.n	80167aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80168a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3718      	adds	r7, #24
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	fe00e800 	.word	0xfe00e800

080168b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b08a      	sub	sp, #40	@ 0x28
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80168bc:	2300      	movs	r3, #0
 80168be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	699b      	ldr	r3, [r3, #24]
 80168c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80168ca:	2300      	movs	r3, #0
 80168cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80168d2:	69bb      	ldr	r3, [r7, #24]
 80168d4:	f003 0310 	and.w	r3, r3, #16
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d068      	beq.n	80169ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2210      	movs	r2, #16
 80168e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80168e4:	e049      	b.n	801697a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ec:	d045      	beq.n	801697a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80168ee:	f7fc f809 	bl	8012904 <HAL_GetTick>
 80168f2:	4602      	mov	r2, r0
 80168f4:	69fb      	ldr	r3, [r7, #28]
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d302      	bcc.n	8016904 <I2C_IsErrorOccurred+0x54>
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d13a      	bne.n	801697a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801690e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	699b      	ldr	r3, [r3, #24]
 801691e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016926:	d121      	bne.n	801696c <I2C_IsErrorOccurred+0xbc>
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801692e:	d01d      	beq.n	801696c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016930:	7cfb      	ldrb	r3, [r7, #19]
 8016932:	2b20      	cmp	r3, #32
 8016934:	d01a      	beq.n	801696c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	685a      	ldr	r2, [r3, #4]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016944:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016946:	f7fb ffdd 	bl	8012904 <HAL_GetTick>
 801694a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801694c:	e00e      	b.n	801696c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801694e:	f7fb ffd9 	bl	8012904 <HAL_GetTick>
 8016952:	4602      	mov	r2, r0
 8016954:	69fb      	ldr	r3, [r7, #28]
 8016956:	1ad3      	subs	r3, r2, r3
 8016958:	2b19      	cmp	r3, #25
 801695a:	d907      	bls.n	801696c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801695c:	6a3b      	ldr	r3, [r7, #32]
 801695e:	f043 0320 	orr.w	r3, r3, #32
 8016962:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016964:	2301      	movs	r3, #1
 8016966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801696a:	e006      	b.n	801697a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	699b      	ldr	r3, [r3, #24]
 8016972:	f003 0320 	and.w	r3, r3, #32
 8016976:	2b20      	cmp	r3, #32
 8016978:	d1e9      	bne.n	801694e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	699b      	ldr	r3, [r3, #24]
 8016980:	f003 0320 	and.w	r3, r3, #32
 8016984:	2b20      	cmp	r3, #32
 8016986:	d003      	beq.n	8016990 <I2C_IsErrorOccurred+0xe0>
 8016988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801698c:	2b00      	cmp	r3, #0
 801698e:	d0aa      	beq.n	80168e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016994:	2b00      	cmp	r3, #0
 8016996:	d103      	bne.n	80169a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2220      	movs	r2, #32
 801699e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80169a0:	6a3b      	ldr	r3, [r7, #32]
 80169a2:	f043 0304 	orr.w	r3, r3, #4
 80169a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80169a8:	2301      	movs	r3, #1
 80169aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	699b      	ldr	r3, [r3, #24]
 80169b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80169b6:	69bb      	ldr	r3, [r7, #24]
 80169b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00b      	beq.n	80169d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80169c0:	6a3b      	ldr	r3, [r7, #32]
 80169c2:	f043 0301 	orr.w	r3, r3, #1
 80169c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80169d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80169d2:	2301      	movs	r3, #1
 80169d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00b      	beq.n	80169fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80169e2:	6a3b      	ldr	r3, [r7, #32]
 80169e4:	f043 0308 	orr.w	r3, r3, #8
 80169e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80169f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80169f4:	2301      	movs	r3, #1
 80169f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d00b      	beq.n	8016a1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016a04:	6a3b      	ldr	r3, [r7, #32]
 8016a06:	f043 0302 	orr.w	r3, r3, #2
 8016a0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016a16:	2301      	movs	r3, #1
 8016a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8016a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d01c      	beq.n	8016a5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016a24:	68f8      	ldr	r0, [r7, #12]
 8016a26:	f7ff fd92 	bl	801654e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	6859      	ldr	r1, [r3, #4]
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	681a      	ldr	r2, [r3, #0]
 8016a34:	4b0d      	ldr	r3, [pc, #52]	@ (8016a6c <I2C_IsErrorOccurred+0x1bc>)
 8016a36:	400b      	ands	r3, r1
 8016a38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016a3e:	6a3b      	ldr	r3, [r7, #32]
 8016a40:	431a      	orrs	r2, r3
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2220      	movs	r2, #32
 8016a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2200      	movs	r2, #0
 8016a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8016a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3728      	adds	r7, #40	@ 0x28
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	fe00e800 	.word	0xfe00e800

08016a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016a70:	b480      	push	{r7}
 8016a72:	b087      	sub	sp, #28
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	60f8      	str	r0, [r7, #12]
 8016a78:	607b      	str	r3, [r7, #4]
 8016a7a:	460b      	mov	r3, r1
 8016a7c:	817b      	strh	r3, [r7, #10]
 8016a7e:	4613      	mov	r3, r2
 8016a80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016a82:	897b      	ldrh	r3, [r7, #10]
 8016a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016a88:	7a7b      	ldrb	r3, [r7, #9]
 8016a8a:	041b      	lsls	r3, r3, #16
 8016a8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016a90:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	4313      	orrs	r3, r2
 8016a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016a9e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	685a      	ldr	r2, [r3, #4]
 8016aa6:	6a3b      	ldr	r3, [r7, #32]
 8016aa8:	0d5b      	lsrs	r3, r3, #21
 8016aaa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8016aae:	4b08      	ldr	r3, [pc, #32]	@ (8016ad0 <I2C_TransferConfig+0x60>)
 8016ab0:	430b      	orrs	r3, r1
 8016ab2:	43db      	mvns	r3, r3
 8016ab4:	ea02 0103 	and.w	r1, r2, r3
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	697a      	ldr	r2, [r7, #20]
 8016abe:	430a      	orrs	r2, r1
 8016ac0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8016ac2:	bf00      	nop
 8016ac4:	371c      	adds	r7, #28
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop
 8016ad0:	03ff63ff 	.word	0x03ff63ff

08016ad4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b085      	sub	sp, #20
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	460b      	mov	r3, r1
 8016ade:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8016ae4:	887b      	ldrh	r3, [r7, #2]
 8016ae6:	f003 0301 	and.w	r3, r3, #1
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d00f      	beq.n	8016b0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8016af4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8016b02:	2b28      	cmp	r3, #40	@ 0x28
 8016b04:	d003      	beq.n	8016b0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8016b0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016b0e:	887b      	ldrh	r3, [r7, #2]
 8016b10:	f003 0302 	and.w	r3, r3, #2
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d00f      	beq.n	8016b38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8016b1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8016b2c:	2b28      	cmp	r3, #40	@ 0x28
 8016b2e:	d003      	beq.n	8016b38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8016b36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	da03      	bge.n	8016b48 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8016b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016b48:	887b      	ldrh	r3, [r7, #2]
 8016b4a:	2b10      	cmp	r3, #16
 8016b4c:	d103      	bne.n	8016b56 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8016b54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016b56:	887b      	ldrh	r3, [r7, #2]
 8016b58:	2b20      	cmp	r3, #32
 8016b5a:	d103      	bne.n	8016b64 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	f043 0320 	orr.w	r3, r3, #32
 8016b62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8016b64:	887b      	ldrh	r3, [r7, #2]
 8016b66:	2b40      	cmp	r3, #64	@ 0x40
 8016b68:	d103      	bne.n	8016b72 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b70:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	6819      	ldr	r1, [r3, #0]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	43da      	mvns	r2, r3
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	400a      	ands	r2, r1
 8016b82:	601a      	str	r2, [r3, #0]
}
 8016b84:	bf00      	nop
 8016b86:	3714      	adds	r7, #20
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8e:	4770      	bx	lr

08016b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016b90:	b480      	push	{r7}
 8016b92:	b083      	sub	sp, #12
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	2b20      	cmp	r3, #32
 8016ba4:	d138      	bne.n	8016c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016bac:	2b01      	cmp	r3, #1
 8016bae:	d101      	bne.n	8016bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016bb0:	2302      	movs	r3, #2
 8016bb2:	e032      	b.n	8016c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2201      	movs	r2, #1
 8016bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2224      	movs	r2, #36	@ 0x24
 8016bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	681a      	ldr	r2, [r3, #0]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f022 0201 	bic.w	r2, r2, #1
 8016bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	681a      	ldr	r2, [r3, #0]
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8016be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	6819      	ldr	r1, [r3, #0]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	683a      	ldr	r2, [r7, #0]
 8016bf0:	430a      	orrs	r2, r1
 8016bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f042 0201 	orr.w	r2, r2, #1
 8016c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2220      	movs	r2, #32
 8016c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8016c14:	2300      	movs	r3, #0
 8016c16:	e000      	b.n	8016c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016c18:	2302      	movs	r3, #2
  }
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	370c      	adds	r7, #12
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr

08016c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016c26:	b480      	push	{r7}
 8016c28:	b085      	sub	sp, #20
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
 8016c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016c36:	b2db      	uxtb	r3, r3
 8016c38:	2b20      	cmp	r3, #32
 8016c3a:	d139      	bne.n	8016cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016c42:	2b01      	cmp	r3, #1
 8016c44:	d101      	bne.n	8016c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016c46:	2302      	movs	r3, #2
 8016c48:	e033      	b.n	8016cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	2224      	movs	r2, #36	@ 0x24
 8016c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	f022 0201 	bic.w	r2, r2, #1
 8016c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8016c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	021b      	lsls	r3, r3, #8
 8016c7e:	68fa      	ldr	r2, [r7, #12]
 8016c80:	4313      	orrs	r3, r2
 8016c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	681a      	ldr	r2, [r3, #0]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f042 0201 	orr.w	r2, r2, #1
 8016c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2220      	movs	r2, #32
 8016ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8016cac:	2300      	movs	r3, #0
 8016cae:	e000      	b.n	8016cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016cb0:	2302      	movs	r3, #2
  }
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3714      	adds	r7, #20
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr
	...

08016cc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b084      	sub	sp, #16
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8016cc8:	4b19      	ldr	r3, [pc, #100]	@ (8016d30 <HAL_PWREx_ConfigSupply+0x70>)
 8016cca:	68db      	ldr	r3, [r3, #12]
 8016ccc:	f003 0304 	and.w	r3, r3, #4
 8016cd0:	2b04      	cmp	r3, #4
 8016cd2:	d00a      	beq.n	8016cea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8016cd4:	4b16      	ldr	r3, [pc, #88]	@ (8016d30 <HAL_PWREx_ConfigSupply+0x70>)
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	f003 0307 	and.w	r3, r3, #7
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	d001      	beq.n	8016ce6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	e01f      	b.n	8016d26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	e01d      	b.n	8016d26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8016cea:	4b11      	ldr	r3, [pc, #68]	@ (8016d30 <HAL_PWREx_ConfigSupply+0x70>)
 8016cec:	68db      	ldr	r3, [r3, #12]
 8016cee:	f023 0207 	bic.w	r2, r3, #7
 8016cf2:	490f      	ldr	r1, [pc, #60]	@ (8016d30 <HAL_PWREx_ConfigSupply+0x70>)
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4313      	orrs	r3, r2
 8016cf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8016cfa:	f7fb fe03 	bl	8012904 <HAL_GetTick>
 8016cfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8016d00:	e009      	b.n	8016d16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8016d02:	f7fb fdff 	bl	8012904 <HAL_GetTick>
 8016d06:	4602      	mov	r2, r0
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	1ad3      	subs	r3, r2, r3
 8016d0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016d10:	d901      	bls.n	8016d16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8016d12:	2301      	movs	r3, #1
 8016d14:	e007      	b.n	8016d26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8016d16:	4b06      	ldr	r3, [pc, #24]	@ (8016d30 <HAL_PWREx_ConfigSupply+0x70>)
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016d22:	d1ee      	bne.n	8016d02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8016d24:	2300      	movs	r3, #0
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	58024800 	.word	0x58024800

08016d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08c      	sub	sp, #48	@ 0x30
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d102      	bne.n	8016d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8016d42:	2301      	movs	r3, #1
 8016d44:	f000 bc48 	b.w	80175d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f003 0301 	and.w	r3, r3, #1
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f000 8088 	beq.w	8016e66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016d56:	4b99      	ldr	r3, [pc, #612]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016d58:	691b      	ldr	r3, [r3, #16]
 8016d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8016d60:	4b96      	ldr	r3, [pc, #600]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d64:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8016d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d68:	2b10      	cmp	r3, #16
 8016d6a:	d007      	beq.n	8016d7c <HAL_RCC_OscConfig+0x48>
 8016d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d6e:	2b18      	cmp	r3, #24
 8016d70:	d111      	bne.n	8016d96 <HAL_RCC_OscConfig+0x62>
 8016d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d74:	f003 0303 	and.w	r3, r3, #3
 8016d78:	2b02      	cmp	r3, #2
 8016d7a:	d10c      	bne.n	8016d96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d06d      	beq.n	8016e64 <HAL_RCC_OscConfig+0x130>
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	685b      	ldr	r3, [r3, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d169      	bne.n	8016e64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8016d90:	2301      	movs	r3, #1
 8016d92:	f000 bc21 	b.w	80175d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016d9e:	d106      	bne.n	8016dae <HAL_RCC_OscConfig+0x7a>
 8016da0:	4b86      	ldr	r3, [pc, #536]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4a85      	ldr	r2, [pc, #532]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016daa:	6013      	str	r3, [r2, #0]
 8016dac:	e02e      	b.n	8016e0c <HAL_RCC_OscConfig+0xd8>
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	685b      	ldr	r3, [r3, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10c      	bne.n	8016dd0 <HAL_RCC_OscConfig+0x9c>
 8016db6:	4b81      	ldr	r3, [pc, #516]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	4a80      	ldr	r2, [pc, #512]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016dc0:	6013      	str	r3, [r2, #0]
 8016dc2:	4b7e      	ldr	r3, [pc, #504]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016dc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016dcc:	6013      	str	r3, [r2, #0]
 8016dce:	e01d      	b.n	8016e0c <HAL_RCC_OscConfig+0xd8>
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016dd8:	d10c      	bne.n	8016df4 <HAL_RCC_OscConfig+0xc0>
 8016dda:	4b78      	ldr	r3, [pc, #480]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	4a77      	ldr	r2, [pc, #476]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016de4:	6013      	str	r3, [r2, #0]
 8016de6:	4b75      	ldr	r3, [pc, #468]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	4a74      	ldr	r2, [pc, #464]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016df0:	6013      	str	r3, [r2, #0]
 8016df2:	e00b      	b.n	8016e0c <HAL_RCC_OscConfig+0xd8>
 8016df4:	4b71      	ldr	r3, [pc, #452]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4a70      	ldr	r2, [pc, #448]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016dfe:	6013      	str	r3, [r2, #0]
 8016e00:	4b6e      	ldr	r3, [pc, #440]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	4a6d      	ldr	r2, [pc, #436]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d013      	beq.n	8016e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e14:	f7fb fd76 	bl	8012904 <HAL_GetTick>
 8016e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016e1a:	e008      	b.n	8016e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016e1c:	f7fb fd72 	bl	8012904 <HAL_GetTick>
 8016e20:	4602      	mov	r2, r0
 8016e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e24:	1ad3      	subs	r3, r2, r3
 8016e26:	2b64      	cmp	r3, #100	@ 0x64
 8016e28:	d901      	bls.n	8016e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8016e2a:	2303      	movs	r3, #3
 8016e2c:	e3d4      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016e2e:	4b63      	ldr	r3, [pc, #396]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d0f0      	beq.n	8016e1c <HAL_RCC_OscConfig+0xe8>
 8016e3a:	e014      	b.n	8016e66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e3c:	f7fb fd62 	bl	8012904 <HAL_GetTick>
 8016e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016e42:	e008      	b.n	8016e56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016e44:	f7fb fd5e 	bl	8012904 <HAL_GetTick>
 8016e48:	4602      	mov	r2, r0
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4c:	1ad3      	subs	r3, r2, r3
 8016e4e:	2b64      	cmp	r3, #100	@ 0x64
 8016e50:	d901      	bls.n	8016e56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8016e52:	2303      	movs	r3, #3
 8016e54:	e3c0      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8016e56:	4b59      	ldr	r3, [pc, #356]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d1f0      	bne.n	8016e44 <HAL_RCC_OscConfig+0x110>
 8016e62:	e000      	b.n	8016e66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f003 0302 	and.w	r3, r3, #2
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	f000 80ca 	beq.w	8017008 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016e74:	4b51      	ldr	r3, [pc, #324]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e76:	691b      	ldr	r3, [r3, #16]
 8016e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016e7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8016e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8016e84:	6a3b      	ldr	r3, [r7, #32]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d007      	beq.n	8016e9a <HAL_RCC_OscConfig+0x166>
 8016e8a:	6a3b      	ldr	r3, [r7, #32]
 8016e8c:	2b18      	cmp	r3, #24
 8016e8e:	d156      	bne.n	8016f3e <HAL_RCC_OscConfig+0x20a>
 8016e90:	69fb      	ldr	r3, [r7, #28]
 8016e92:	f003 0303 	and.w	r3, r3, #3
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d151      	bne.n	8016f3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016e9a:	4b48      	ldr	r3, [pc, #288]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f003 0304 	and.w	r3, r3, #4
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d005      	beq.n	8016eb2 <HAL_RCC_OscConfig+0x17e>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	68db      	ldr	r3, [r3, #12]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d101      	bne.n	8016eb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e392      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8016eb2:	4b42      	ldr	r3, [pc, #264]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f023 0219 	bic.w	r2, r3, #25
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	68db      	ldr	r3, [r3, #12]
 8016ebe:	493f      	ldr	r1, [pc, #252]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016ec0:	4313      	orrs	r3, r2
 8016ec2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016ec4:	f7fb fd1e 	bl	8012904 <HAL_GetTick>
 8016ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016eca:	e008      	b.n	8016ede <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016ecc:	f7fb fd1a 	bl	8012904 <HAL_GetTick>
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	2b02      	cmp	r3, #2
 8016ed8:	d901      	bls.n	8016ede <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8016eda:	2303      	movs	r3, #3
 8016edc:	e37c      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016ede:	4b37      	ldr	r3, [pc, #220]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	f003 0304 	and.w	r3, r3, #4
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d0f0      	beq.n	8016ecc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016eea:	f7fb fd3b 	bl	8012964 <HAL_GetREVID>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8016ef4:	4293      	cmp	r3, r2
 8016ef6:	d817      	bhi.n	8016f28 <HAL_RCC_OscConfig+0x1f4>
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	691b      	ldr	r3, [r3, #16]
 8016efc:	2b40      	cmp	r3, #64	@ 0x40
 8016efe:	d108      	bne.n	8016f12 <HAL_RCC_OscConfig+0x1de>
 8016f00:	4b2e      	ldr	r3, [pc, #184]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8016f08:	4a2c      	ldr	r2, [pc, #176]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016f0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016f10:	e07a      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016f12:	4b2a      	ldr	r3, [pc, #168]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	691b      	ldr	r3, [r3, #16]
 8016f1e:	031b      	lsls	r3, r3, #12
 8016f20:	4926      	ldr	r1, [pc, #152]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f22:	4313      	orrs	r3, r2
 8016f24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016f26:	e06f      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016f28:	4b24      	ldr	r3, [pc, #144]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f2a:	685b      	ldr	r3, [r3, #4]
 8016f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	691b      	ldr	r3, [r3, #16]
 8016f34:	061b      	lsls	r3, r3, #24
 8016f36:	4921      	ldr	r1, [pc, #132]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f38:	4313      	orrs	r3, r2
 8016f3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016f3c:	e064      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d047      	beq.n	8016fd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8016f46:	4b1d      	ldr	r3, [pc, #116]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	f023 0219 	bic.w	r2, r3, #25
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	68db      	ldr	r3, [r3, #12]
 8016f52:	491a      	ldr	r1, [pc, #104]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f54:	4313      	orrs	r3, r2
 8016f56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016f58:	f7fb fcd4 	bl	8012904 <HAL_GetTick>
 8016f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016f5e:	e008      	b.n	8016f72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016f60:	f7fb fcd0 	bl	8012904 <HAL_GetTick>
 8016f64:	4602      	mov	r2, r0
 8016f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f68:	1ad3      	subs	r3, r2, r3
 8016f6a:	2b02      	cmp	r3, #2
 8016f6c:	d901      	bls.n	8016f72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8016f6e:	2303      	movs	r3, #3
 8016f70:	e332      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016f72:	4b12      	ldr	r3, [pc, #72]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	f003 0304 	and.w	r3, r3, #4
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d0f0      	beq.n	8016f60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016f7e:	f7fb fcf1 	bl	8012964 <HAL_GetREVID>
 8016f82:	4603      	mov	r3, r0
 8016f84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8016f88:	4293      	cmp	r3, r2
 8016f8a:	d819      	bhi.n	8016fc0 <HAL_RCC_OscConfig+0x28c>
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	691b      	ldr	r3, [r3, #16]
 8016f90:	2b40      	cmp	r3, #64	@ 0x40
 8016f92:	d108      	bne.n	8016fa6 <HAL_RCC_OscConfig+0x272>
 8016f94:	4b09      	ldr	r3, [pc, #36]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8016f9c:	4a07      	ldr	r2, [pc, #28]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016fa2:	6053      	str	r3, [r2, #4]
 8016fa4:	e030      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
 8016fa6:	4b05      	ldr	r3, [pc, #20]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	691b      	ldr	r3, [r3, #16]
 8016fb2:	031b      	lsls	r3, r3, #12
 8016fb4:	4901      	ldr	r1, [pc, #4]	@ (8016fbc <HAL_RCC_OscConfig+0x288>)
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	604b      	str	r3, [r1, #4]
 8016fba:	e025      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
 8016fbc:	58024400 	.word	0x58024400
 8016fc0:	4b9a      	ldr	r3, [pc, #616]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	691b      	ldr	r3, [r3, #16]
 8016fcc:	061b      	lsls	r3, r3, #24
 8016fce:	4997      	ldr	r1, [pc, #604]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8016fd0:	4313      	orrs	r3, r2
 8016fd2:	604b      	str	r3, [r1, #4]
 8016fd4:	e018      	b.n	8017008 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016fd6:	4b95      	ldr	r3, [pc, #596]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	4a94      	ldr	r2, [pc, #592]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8016fdc:	f023 0301 	bic.w	r3, r3, #1
 8016fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fe2:	f7fb fc8f 	bl	8012904 <HAL_GetTick>
 8016fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016fe8:	e008      	b.n	8016ffc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016fea:	f7fb fc8b 	bl	8012904 <HAL_GetTick>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff2:	1ad3      	subs	r3, r2, r3
 8016ff4:	2b02      	cmp	r3, #2
 8016ff6:	d901      	bls.n	8016ffc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8016ff8:	2303      	movs	r3, #3
 8016ffa:	e2ed      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8016ffc:	4b8b      	ldr	r3, [pc, #556]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	f003 0304 	and.w	r3, r3, #4
 8017004:	2b00      	cmp	r3, #0
 8017006:	d1f0      	bne.n	8016fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	f003 0310 	and.w	r3, r3, #16
 8017010:	2b00      	cmp	r3, #0
 8017012:	f000 80a9 	beq.w	8017168 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017016:	4b85      	ldr	r3, [pc, #532]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017018:	691b      	ldr	r3, [r3, #16]
 801701a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801701e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8017020:	4b82      	ldr	r3, [pc, #520]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017024:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8017026:	69bb      	ldr	r3, [r7, #24]
 8017028:	2b08      	cmp	r3, #8
 801702a:	d007      	beq.n	801703c <HAL_RCC_OscConfig+0x308>
 801702c:	69bb      	ldr	r3, [r7, #24]
 801702e:	2b18      	cmp	r3, #24
 8017030:	d13a      	bne.n	80170a8 <HAL_RCC_OscConfig+0x374>
 8017032:	697b      	ldr	r3, [r7, #20]
 8017034:	f003 0303 	and.w	r3, r3, #3
 8017038:	2b01      	cmp	r3, #1
 801703a:	d135      	bne.n	80170a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801703c:	4b7b      	ldr	r3, [pc, #492]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017044:	2b00      	cmp	r3, #0
 8017046:	d005      	beq.n	8017054 <HAL_RCC_OscConfig+0x320>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	69db      	ldr	r3, [r3, #28]
 801704c:	2b80      	cmp	r3, #128	@ 0x80
 801704e:	d001      	beq.n	8017054 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8017050:	2301      	movs	r3, #1
 8017052:	e2c1      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8017054:	f7fb fc86 	bl	8012964 <HAL_GetREVID>
 8017058:	4603      	mov	r3, r0
 801705a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801705e:	4293      	cmp	r3, r2
 8017060:	d817      	bhi.n	8017092 <HAL_RCC_OscConfig+0x35e>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a1b      	ldr	r3, [r3, #32]
 8017066:	2b20      	cmp	r3, #32
 8017068:	d108      	bne.n	801707c <HAL_RCC_OscConfig+0x348>
 801706a:	4b70      	ldr	r3, [pc, #448]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801706c:	685b      	ldr	r3, [r3, #4]
 801706e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8017072:	4a6e      	ldr	r2, [pc, #440]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017078:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801707a:	e075      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801707c:	4b6b      	ldr	r3, [pc, #428]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6a1b      	ldr	r3, [r3, #32]
 8017088:	069b      	lsls	r3, r3, #26
 801708a:	4968      	ldr	r1, [pc, #416]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801708c:	4313      	orrs	r3, r2
 801708e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8017090:	e06a      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8017092:	4b66      	ldr	r3, [pc, #408]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6a1b      	ldr	r3, [r3, #32]
 801709e:	061b      	lsls	r3, r3, #24
 80170a0:	4962      	ldr	r1, [pc, #392]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80170a2:	4313      	orrs	r3, r2
 80170a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80170a6:	e05f      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	69db      	ldr	r3, [r3, #28]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d042      	beq.n	8017136 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80170b0:	4b5e      	ldr	r3, [pc, #376]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	4a5d      	ldr	r2, [pc, #372]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80170b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170bc:	f7fb fc22 	bl	8012904 <HAL_GetTick>
 80170c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80170c2:	e008      	b.n	80170d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80170c4:	f7fb fc1e 	bl	8012904 <HAL_GetTick>
 80170c8:	4602      	mov	r2, r0
 80170ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170cc:	1ad3      	subs	r3, r2, r3
 80170ce:	2b02      	cmp	r3, #2
 80170d0:	d901      	bls.n	80170d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80170d2:	2303      	movs	r3, #3
 80170d4:	e280      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80170d6:	4b55      	ldr	r3, [pc, #340]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d0f0      	beq.n	80170c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80170e2:	f7fb fc3f 	bl	8012964 <HAL_GetREVID>
 80170e6:	4603      	mov	r3, r0
 80170e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d817      	bhi.n	8017120 <HAL_RCC_OscConfig+0x3ec>
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6a1b      	ldr	r3, [r3, #32]
 80170f4:	2b20      	cmp	r3, #32
 80170f6:	d108      	bne.n	801710a <HAL_RCC_OscConfig+0x3d6>
 80170f8:	4b4c      	ldr	r3, [pc, #304]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8017100:	4a4a      	ldr	r2, [pc, #296]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017102:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017106:	6053      	str	r3, [r2, #4]
 8017108:	e02e      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
 801710a:	4b48      	ldr	r3, [pc, #288]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	6a1b      	ldr	r3, [r3, #32]
 8017116:	069b      	lsls	r3, r3, #26
 8017118:	4944      	ldr	r1, [pc, #272]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801711a:	4313      	orrs	r3, r2
 801711c:	604b      	str	r3, [r1, #4]
 801711e:	e023      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
 8017120:	4b42      	ldr	r3, [pc, #264]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017122:	68db      	ldr	r3, [r3, #12]
 8017124:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6a1b      	ldr	r3, [r3, #32]
 801712c:	061b      	lsls	r3, r3, #24
 801712e:	493f      	ldr	r1, [pc, #252]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017130:	4313      	orrs	r3, r2
 8017132:	60cb      	str	r3, [r1, #12]
 8017134:	e018      	b.n	8017168 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8017136:	4b3d      	ldr	r3, [pc, #244]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	4a3c      	ldr	r2, [pc, #240]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801713c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017142:	f7fb fbdf 	bl	8012904 <HAL_GetTick>
 8017146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8017148:	e008      	b.n	801715c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801714a:	f7fb fbdb 	bl	8012904 <HAL_GetTick>
 801714e:	4602      	mov	r2, r0
 8017150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017152:	1ad3      	subs	r3, r2, r3
 8017154:	2b02      	cmp	r3, #2
 8017156:	d901      	bls.n	801715c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8017158:	2303      	movs	r3, #3
 801715a:	e23d      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801715c:	4b33      	ldr	r3, [pc, #204]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017164:	2b00      	cmp	r3, #0
 8017166:	d1f0      	bne.n	801714a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f003 0308 	and.w	r3, r3, #8
 8017170:	2b00      	cmp	r3, #0
 8017172:	d036      	beq.n	80171e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	695b      	ldr	r3, [r3, #20]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d019      	beq.n	80171b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801717c:	4b2b      	ldr	r3, [pc, #172]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801717e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017180:	4a2a      	ldr	r2, [pc, #168]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 8017182:	f043 0301 	orr.w	r3, r3, #1
 8017186:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017188:	f7fb fbbc 	bl	8012904 <HAL_GetTick>
 801718c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801718e:	e008      	b.n	80171a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017190:	f7fb fbb8 	bl	8012904 <HAL_GetTick>
 8017194:	4602      	mov	r2, r0
 8017196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	2b02      	cmp	r3, #2
 801719c:	d901      	bls.n	80171a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801719e:	2303      	movs	r3, #3
 80171a0:	e21a      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80171a2:	4b22      	ldr	r3, [pc, #136]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171a6:	f003 0302 	and.w	r3, r3, #2
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d0f0      	beq.n	8017190 <HAL_RCC_OscConfig+0x45c>
 80171ae:	e018      	b.n	80171e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80171b0:	4b1e      	ldr	r3, [pc, #120]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171b4:	4a1d      	ldr	r2, [pc, #116]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171b6:	f023 0301 	bic.w	r3, r3, #1
 80171ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171bc:	f7fb fba2 	bl	8012904 <HAL_GetTick>
 80171c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80171c2:	e008      	b.n	80171d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80171c4:	f7fb fb9e 	bl	8012904 <HAL_GetTick>
 80171c8:	4602      	mov	r2, r0
 80171ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171cc:	1ad3      	subs	r3, r2, r3
 80171ce:	2b02      	cmp	r3, #2
 80171d0:	d901      	bls.n	80171d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80171d2:	2303      	movs	r3, #3
 80171d4:	e200      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80171d6:	4b15      	ldr	r3, [pc, #84]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80171da:	f003 0302 	and.w	r3, r3, #2
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d1f0      	bne.n	80171c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	f003 0320 	and.w	r3, r3, #32
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d039      	beq.n	8017262 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	699b      	ldr	r3, [r3, #24]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d01c      	beq.n	8017230 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80171f6:	4b0d      	ldr	r3, [pc, #52]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	4a0c      	ldr	r2, [pc, #48]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 80171fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017200:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8017202:	f7fb fb7f 	bl	8012904 <HAL_GetTick>
 8017206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017208:	e008      	b.n	801721c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801720a:	f7fb fb7b 	bl	8012904 <HAL_GetTick>
 801720e:	4602      	mov	r2, r0
 8017210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017212:	1ad3      	subs	r3, r2, r3
 8017214:	2b02      	cmp	r3, #2
 8017216:	d901      	bls.n	801721c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8017218:	2303      	movs	r3, #3
 801721a:	e1dd      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801721c:	4b03      	ldr	r3, [pc, #12]	@ (801722c <HAL_RCC_OscConfig+0x4f8>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017224:	2b00      	cmp	r3, #0
 8017226:	d0f0      	beq.n	801720a <HAL_RCC_OscConfig+0x4d6>
 8017228:	e01b      	b.n	8017262 <HAL_RCC_OscConfig+0x52e>
 801722a:	bf00      	nop
 801722c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017230:	4b9b      	ldr	r3, [pc, #620]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	4a9a      	ldr	r2, [pc, #616]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801723a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801723c:	f7fb fb62 	bl	8012904 <HAL_GetTick>
 8017240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017242:	e008      	b.n	8017256 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017244:	f7fb fb5e 	bl	8012904 <HAL_GetTick>
 8017248:	4602      	mov	r2, r0
 801724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801724c:	1ad3      	subs	r3, r2, r3
 801724e:	2b02      	cmp	r3, #2
 8017250:	d901      	bls.n	8017256 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8017252:	2303      	movs	r3, #3
 8017254:	e1c0      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017256:	4b92      	ldr	r3, [pc, #584]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1f0      	bne.n	8017244 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	f003 0304 	and.w	r3, r3, #4
 801726a:	2b00      	cmp	r3, #0
 801726c:	f000 8081 	beq.w	8017372 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8017270:	4b8c      	ldr	r3, [pc, #560]	@ (80174a4 <HAL_RCC_OscConfig+0x770>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	4a8b      	ldr	r2, [pc, #556]	@ (80174a4 <HAL_RCC_OscConfig+0x770>)
 8017276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801727a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801727c:	f7fb fb42 	bl	8012904 <HAL_GetTick>
 8017280:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017282:	e008      	b.n	8017296 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017284:	f7fb fb3e 	bl	8012904 <HAL_GetTick>
 8017288:	4602      	mov	r2, r0
 801728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801728c:	1ad3      	subs	r3, r2, r3
 801728e:	2b64      	cmp	r3, #100	@ 0x64
 8017290:	d901      	bls.n	8017296 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8017292:	2303      	movs	r3, #3
 8017294:	e1a0      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017296:	4b83      	ldr	r3, [pc, #524]	@ (80174a4 <HAL_RCC_OscConfig+0x770>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0f0      	beq.n	8017284 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	689b      	ldr	r3, [r3, #8]
 80172a6:	2b01      	cmp	r3, #1
 80172a8:	d106      	bne.n	80172b8 <HAL_RCC_OscConfig+0x584>
 80172aa:	4b7d      	ldr	r3, [pc, #500]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ae:	4a7c      	ldr	r2, [pc, #496]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172b0:	f043 0301 	orr.w	r3, r3, #1
 80172b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80172b6:	e02d      	b.n	8017314 <HAL_RCC_OscConfig+0x5e0>
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	689b      	ldr	r3, [r3, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d10c      	bne.n	80172da <HAL_RCC_OscConfig+0x5a6>
 80172c0:	4b77      	ldr	r3, [pc, #476]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172c4:	4a76      	ldr	r2, [pc, #472]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172c6:	f023 0301 	bic.w	r3, r3, #1
 80172ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80172cc:	4b74      	ldr	r3, [pc, #464]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172d0:	4a73      	ldr	r2, [pc, #460]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172d2:	f023 0304 	bic.w	r3, r3, #4
 80172d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80172d8:	e01c      	b.n	8017314 <HAL_RCC_OscConfig+0x5e0>
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	689b      	ldr	r3, [r3, #8]
 80172de:	2b05      	cmp	r3, #5
 80172e0:	d10c      	bne.n	80172fc <HAL_RCC_OscConfig+0x5c8>
 80172e2:	4b6f      	ldr	r3, [pc, #444]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172e6:	4a6e      	ldr	r2, [pc, #440]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172e8:	f043 0304 	orr.w	r3, r3, #4
 80172ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80172ee:	4b6c      	ldr	r3, [pc, #432]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172f2:	4a6b      	ldr	r2, [pc, #428]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172f4:	f043 0301 	orr.w	r3, r3, #1
 80172f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80172fa:	e00b      	b.n	8017314 <HAL_RCC_OscConfig+0x5e0>
 80172fc:	4b68      	ldr	r3, [pc, #416]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80172fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017300:	4a67      	ldr	r2, [pc, #412]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017302:	f023 0301 	bic.w	r3, r3, #1
 8017306:	6713      	str	r3, [r2, #112]	@ 0x70
 8017308:	4b65      	ldr	r3, [pc, #404]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801730a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801730c:	4a64      	ldr	r2, [pc, #400]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801730e:	f023 0304 	bic.w	r3, r3, #4
 8017312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	689b      	ldr	r3, [r3, #8]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d015      	beq.n	8017348 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801731c:	f7fb faf2 	bl	8012904 <HAL_GetTick>
 8017320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017322:	e00a      	b.n	801733a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017324:	f7fb faee 	bl	8012904 <HAL_GetTick>
 8017328:	4602      	mov	r2, r0
 801732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801732c:	1ad3      	subs	r3, r2, r3
 801732e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017332:	4293      	cmp	r3, r2
 8017334:	d901      	bls.n	801733a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8017336:	2303      	movs	r3, #3
 8017338:	e14e      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801733a:	4b59      	ldr	r3, [pc, #356]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801733c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801733e:	f003 0302 	and.w	r3, r3, #2
 8017342:	2b00      	cmp	r3, #0
 8017344:	d0ee      	beq.n	8017324 <HAL_RCC_OscConfig+0x5f0>
 8017346:	e014      	b.n	8017372 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017348:	f7fb fadc 	bl	8012904 <HAL_GetTick>
 801734c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801734e:	e00a      	b.n	8017366 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017350:	f7fb fad8 	bl	8012904 <HAL_GetTick>
 8017354:	4602      	mov	r2, r0
 8017356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801735e:	4293      	cmp	r3, r2
 8017360:	d901      	bls.n	8017366 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8017362:	2303      	movs	r3, #3
 8017364:	e138      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017366:	4b4e      	ldr	r3, [pc, #312]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801736a:	f003 0302 	and.w	r3, r3, #2
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1ee      	bne.n	8017350 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017376:	2b00      	cmp	r3, #0
 8017378:	f000 812d 	beq.w	80175d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801737c:	4b48      	ldr	r3, [pc, #288]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801737e:	691b      	ldr	r3, [r3, #16]
 8017380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017384:	2b18      	cmp	r3, #24
 8017386:	f000 80bd 	beq.w	8017504 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801738e:	2b02      	cmp	r3, #2
 8017390:	f040 809e 	bne.w	80174d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017394:	4b42      	ldr	r3, [pc, #264]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	4a41      	ldr	r2, [pc, #260]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801739a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801739e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173a0:	f7fb fab0 	bl	8012904 <HAL_GetTick>
 80173a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80173a6:	e008      	b.n	80173ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80173a8:	f7fb faac 	bl	8012904 <HAL_GetTick>
 80173ac:	4602      	mov	r2, r0
 80173ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b0:	1ad3      	subs	r3, r2, r3
 80173b2:	2b02      	cmp	r3, #2
 80173b4:	d901      	bls.n	80173ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80173b6:	2303      	movs	r3, #3
 80173b8:	e10e      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80173ba:	4b39      	ldr	r3, [pc, #228]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d1f0      	bne.n	80173a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80173c6:	4b36      	ldr	r3, [pc, #216]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80173c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80173ca:	4b37      	ldr	r3, [pc, #220]	@ (80174a8 <HAL_RCC_OscConfig+0x774>)
 80173cc:	4013      	ands	r3, r2
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80173d2:	687a      	ldr	r2, [r7, #4]
 80173d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80173d6:	0112      	lsls	r2, r2, #4
 80173d8:	430a      	orrs	r2, r1
 80173da:	4931      	ldr	r1, [pc, #196]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 80173dc:	4313      	orrs	r3, r2
 80173de:	628b      	str	r3, [r1, #40]	@ 0x28
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173e4:	3b01      	subs	r3, #1
 80173e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173ee:	3b01      	subs	r3, #1
 80173f0:	025b      	lsls	r3, r3, #9
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	431a      	orrs	r2, r3
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173fa:	3b01      	subs	r3, #1
 80173fc:	041b      	lsls	r3, r3, #16
 80173fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8017402:	431a      	orrs	r2, r3
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017408:	3b01      	subs	r3, #1
 801740a:	061b      	lsls	r3, r3, #24
 801740c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8017410:	4923      	ldr	r1, [pc, #140]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017412:	4313      	orrs	r3, r2
 8017414:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8017416:	4b22      	ldr	r3, [pc, #136]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801741a:	4a21      	ldr	r2, [pc, #132]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801741c:	f023 0301 	bic.w	r3, r3, #1
 8017420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8017422:	4b1f      	ldr	r3, [pc, #124]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017426:	4b21      	ldr	r3, [pc, #132]	@ (80174ac <HAL_RCC_OscConfig+0x778>)
 8017428:	4013      	ands	r3, r2
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801742e:	00d2      	lsls	r2, r2, #3
 8017430:	491b      	ldr	r1, [pc, #108]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017432:	4313      	orrs	r3, r2
 8017434:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8017436:	4b1a      	ldr	r3, [pc, #104]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801743a:	f023 020c 	bic.w	r2, r3, #12
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017442:	4917      	ldr	r1, [pc, #92]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017444:	4313      	orrs	r3, r2
 8017446:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8017448:	4b15      	ldr	r3, [pc, #84]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801744a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801744c:	f023 0202 	bic.w	r2, r3, #2
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017454:	4912      	ldr	r1, [pc, #72]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017456:	4313      	orrs	r3, r2
 8017458:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801745a:	4b11      	ldr	r3, [pc, #68]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801745e:	4a10      	ldr	r2, [pc, #64]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017466:	4b0e      	ldr	r3, [pc, #56]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801746a:	4a0d      	ldr	r2, [pc, #52]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801746c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8017472:	4b0b      	ldr	r3, [pc, #44]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017476:	4a0a      	ldr	r2, [pc, #40]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801747c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801747e:	4b08      	ldr	r3, [pc, #32]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017482:	4a07      	ldr	r2, [pc, #28]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017484:	f043 0301 	orr.w	r3, r3, #1
 8017488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801748a:	4b05      	ldr	r3, [pc, #20]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	4a04      	ldr	r2, [pc, #16]	@ (80174a0 <HAL_RCC_OscConfig+0x76c>)
 8017490:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017496:	f7fb fa35 	bl	8012904 <HAL_GetTick>
 801749a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801749c:	e011      	b.n	80174c2 <HAL_RCC_OscConfig+0x78e>
 801749e:	bf00      	nop
 80174a0:	58024400 	.word	0x58024400
 80174a4:	58024800 	.word	0x58024800
 80174a8:	fffffc0c 	.word	0xfffffc0c
 80174ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174b0:	f7fb fa28 	bl	8012904 <HAL_GetTick>
 80174b4:	4602      	mov	r2, r0
 80174b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b8:	1ad3      	subs	r3, r2, r3
 80174ba:	2b02      	cmp	r3, #2
 80174bc:	d901      	bls.n	80174c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80174be:	2303      	movs	r3, #3
 80174c0:	e08a      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80174c2:	4b47      	ldr	r3, [pc, #284]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d0f0      	beq.n	80174b0 <HAL_RCC_OscConfig+0x77c>
 80174ce:	e082      	b.n	80175d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80174d0:	4b43      	ldr	r3, [pc, #268]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	4a42      	ldr	r2, [pc, #264]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80174d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80174da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174dc:	f7fb fa12 	bl	8012904 <HAL_GetTick>
 80174e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80174e2:	e008      	b.n	80174f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174e4:	f7fb fa0e 	bl	8012904 <HAL_GetTick>
 80174e8:	4602      	mov	r2, r0
 80174ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	2b02      	cmp	r3, #2
 80174f0:	d901      	bls.n	80174f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80174f2:	2303      	movs	r3, #3
 80174f4:	e070      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80174f6:	4b3a      	ldr	r3, [pc, #232]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d1f0      	bne.n	80174e4 <HAL_RCC_OscConfig+0x7b0>
 8017502:	e068      	b.n	80175d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8017504:	4b36      	ldr	r3, [pc, #216]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 8017506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017508:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801750a:	4b35      	ldr	r3, [pc, #212]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 801750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801750e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017514:	2b01      	cmp	r3, #1
 8017516:	d031      	beq.n	801757c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	f003 0203 	and.w	r2, r3, #3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017522:	429a      	cmp	r2, r3
 8017524:	d12a      	bne.n	801757c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	091b      	lsrs	r3, r3, #4
 801752a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017532:	429a      	cmp	r2, r3
 8017534:	d122      	bne.n	801757c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017540:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8017542:	429a      	cmp	r2, r3
 8017544:	d11a      	bne.n	801757c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	0a5b      	lsrs	r3, r3, #9
 801754a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017552:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8017554:	429a      	cmp	r2, r3
 8017556:	d111      	bne.n	801757c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	0c1b      	lsrs	r3, r3, #16
 801755c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017564:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8017566:	429a      	cmp	r2, r3
 8017568:	d108      	bne.n	801757c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	0e1b      	lsrs	r3, r3, #24
 801756e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017576:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8017578:	429a      	cmp	r2, r3
 801757a:	d001      	beq.n	8017580 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801757c:	2301      	movs	r3, #1
 801757e:	e02b      	b.n	80175d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8017580:	4b17      	ldr	r3, [pc, #92]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 8017582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017584:	08db      	lsrs	r3, r3, #3
 8017586:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801758a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017590:	693a      	ldr	r2, [r7, #16]
 8017592:	429a      	cmp	r2, r3
 8017594:	d01f      	beq.n	80175d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8017596:	4b12      	ldr	r3, [pc, #72]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 8017598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801759a:	4a11      	ldr	r2, [pc, #68]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 801759c:	f023 0301 	bic.w	r3, r3, #1
 80175a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80175a2:	f7fb f9af 	bl	8012904 <HAL_GetTick>
 80175a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80175a8:	bf00      	nop
 80175aa:	f7fb f9ab 	bl	8012904 <HAL_GetTick>
 80175ae:	4602      	mov	r2, r0
 80175b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175b2:	4293      	cmp	r3, r2
 80175b4:	d0f9      	beq.n	80175aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80175b6:	4b0a      	ldr	r3, [pc, #40]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80175b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175ba:	4b0a      	ldr	r3, [pc, #40]	@ (80175e4 <HAL_RCC_OscConfig+0x8b0>)
 80175bc:	4013      	ands	r3, r2
 80175be:	687a      	ldr	r2, [r7, #4]
 80175c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80175c2:	00d2      	lsls	r2, r2, #3
 80175c4:	4906      	ldr	r1, [pc, #24]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80175c6:	4313      	orrs	r3, r2
 80175c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80175ca:	4b05      	ldr	r3, [pc, #20]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80175cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175ce:	4a04      	ldr	r2, [pc, #16]	@ (80175e0 <HAL_RCC_OscConfig+0x8ac>)
 80175d0:	f043 0301 	orr.w	r3, r3, #1
 80175d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80175d6:	2300      	movs	r3, #0
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3730      	adds	r7, #48	@ 0x30
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}
 80175e0:	58024400 	.word	0x58024400
 80175e4:	ffff0007 	.word	0xffff0007

080175e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b086      	sub	sp, #24
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d101      	bne.n	80175fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80175f8:	2301      	movs	r3, #1
 80175fa:	e19c      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80175fc:	4b8a      	ldr	r3, [pc, #552]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	f003 030f 	and.w	r3, r3, #15
 8017604:	683a      	ldr	r2, [r7, #0]
 8017606:	429a      	cmp	r2, r3
 8017608:	d910      	bls.n	801762c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801760a:	4b87      	ldr	r3, [pc, #540]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f023 020f 	bic.w	r2, r3, #15
 8017612:	4985      	ldr	r1, [pc, #532]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	4313      	orrs	r3, r2
 8017618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801761a:	4b83      	ldr	r3, [pc, #524]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	f003 030f 	and.w	r3, r3, #15
 8017622:	683a      	ldr	r2, [r7, #0]
 8017624:	429a      	cmp	r2, r3
 8017626:	d001      	beq.n	801762c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8017628:	2301      	movs	r3, #1
 801762a:	e184      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	f003 0304 	and.w	r3, r3, #4
 8017634:	2b00      	cmp	r3, #0
 8017636:	d010      	beq.n	801765a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	691a      	ldr	r2, [r3, #16]
 801763c:	4b7b      	ldr	r3, [pc, #492]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801763e:	699b      	ldr	r3, [r3, #24]
 8017640:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8017644:	429a      	cmp	r2, r3
 8017646:	d908      	bls.n	801765a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8017648:	4b78      	ldr	r3, [pc, #480]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801764a:	699b      	ldr	r3, [r3, #24]
 801764c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	691b      	ldr	r3, [r3, #16]
 8017654:	4975      	ldr	r1, [pc, #468]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017656:	4313      	orrs	r3, r2
 8017658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f003 0308 	and.w	r3, r3, #8
 8017662:	2b00      	cmp	r3, #0
 8017664:	d010      	beq.n	8017688 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	695a      	ldr	r2, [r3, #20]
 801766a:	4b70      	ldr	r3, [pc, #448]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801766c:	69db      	ldr	r3, [r3, #28]
 801766e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8017672:	429a      	cmp	r2, r3
 8017674:	d908      	bls.n	8017688 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8017676:	4b6d      	ldr	r3, [pc, #436]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017678:	69db      	ldr	r3, [r3, #28]
 801767a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	695b      	ldr	r3, [r3, #20]
 8017682:	496a      	ldr	r1, [pc, #424]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017684:	4313      	orrs	r3, r2
 8017686:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	f003 0310 	and.w	r3, r3, #16
 8017690:	2b00      	cmp	r3, #0
 8017692:	d010      	beq.n	80176b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	699a      	ldr	r2, [r3, #24]
 8017698:	4b64      	ldr	r3, [pc, #400]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801769a:	69db      	ldr	r3, [r3, #28]
 801769c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d908      	bls.n	80176b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80176a4:	4b61      	ldr	r3, [pc, #388]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176a6:	69db      	ldr	r3, [r3, #28]
 80176a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	699b      	ldr	r3, [r3, #24]
 80176b0:	495e      	ldr	r1, [pc, #376]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176b2:	4313      	orrs	r3, r2
 80176b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	f003 0320 	and.w	r3, r3, #32
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d010      	beq.n	80176e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	69da      	ldr	r2, [r3, #28]
 80176c6:	4b59      	ldr	r3, [pc, #356]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176c8:	6a1b      	ldr	r3, [r3, #32]
 80176ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d908      	bls.n	80176e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80176d2:	4b56      	ldr	r3, [pc, #344]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176d4:	6a1b      	ldr	r3, [r3, #32]
 80176d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	69db      	ldr	r3, [r3, #28]
 80176de:	4953      	ldr	r1, [pc, #332]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176e0:	4313      	orrs	r3, r2
 80176e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	f003 0302 	and.w	r3, r3, #2
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d010      	beq.n	8017712 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	68da      	ldr	r2, [r3, #12]
 80176f4:	4b4d      	ldr	r3, [pc, #308]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80176f6:	699b      	ldr	r3, [r3, #24]
 80176f8:	f003 030f 	and.w	r3, r3, #15
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d908      	bls.n	8017712 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017700:	4b4a      	ldr	r3, [pc, #296]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017702:	699b      	ldr	r3, [r3, #24]
 8017704:	f023 020f 	bic.w	r2, r3, #15
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	68db      	ldr	r3, [r3, #12]
 801770c:	4947      	ldr	r1, [pc, #284]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801770e:	4313      	orrs	r3, r2
 8017710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	f003 0301 	and.w	r3, r3, #1
 801771a:	2b00      	cmp	r3, #0
 801771c:	d055      	beq.n	80177ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801771e:	4b43      	ldr	r3, [pc, #268]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017720:	699b      	ldr	r3, [r3, #24]
 8017722:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	4940      	ldr	r1, [pc, #256]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801772c:	4313      	orrs	r3, r2
 801772e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	2b02      	cmp	r3, #2
 8017736:	d107      	bne.n	8017748 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017738:	4b3c      	ldr	r3, [pc, #240]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017740:	2b00      	cmp	r3, #0
 8017742:	d121      	bne.n	8017788 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8017744:	2301      	movs	r3, #1
 8017746:	e0f6      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	685b      	ldr	r3, [r3, #4]
 801774c:	2b03      	cmp	r3, #3
 801774e:	d107      	bne.n	8017760 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8017750:	4b36      	ldr	r3, [pc, #216]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017758:	2b00      	cmp	r3, #0
 801775a:	d115      	bne.n	8017788 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801775c:	2301      	movs	r3, #1
 801775e:	e0ea      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	685b      	ldr	r3, [r3, #4]
 8017764:	2b01      	cmp	r3, #1
 8017766:	d107      	bne.n	8017778 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8017768:	4b30      	ldr	r3, [pc, #192]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017770:	2b00      	cmp	r3, #0
 8017772:	d109      	bne.n	8017788 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8017774:	2301      	movs	r3, #1
 8017776:	e0de      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017778:	4b2c      	ldr	r3, [pc, #176]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	f003 0304 	and.w	r3, r3, #4
 8017780:	2b00      	cmp	r3, #0
 8017782:	d101      	bne.n	8017788 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8017784:	2301      	movs	r3, #1
 8017786:	e0d6      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8017788:	4b28      	ldr	r3, [pc, #160]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 801778a:	691b      	ldr	r3, [r3, #16]
 801778c:	f023 0207 	bic.w	r2, r3, #7
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	4925      	ldr	r1, [pc, #148]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 8017796:	4313      	orrs	r3, r2
 8017798:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801779a:	f7fb f8b3 	bl	8012904 <HAL_GetTick>
 801779e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80177a0:	e00a      	b.n	80177b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80177a2:	f7fb f8af 	bl	8012904 <HAL_GetTick>
 80177a6:	4602      	mov	r2, r0
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	1ad3      	subs	r3, r2, r3
 80177ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80177b0:	4293      	cmp	r3, r2
 80177b2:	d901      	bls.n	80177b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80177b4:	2303      	movs	r3, #3
 80177b6:	e0be      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80177b8:	4b1c      	ldr	r3, [pc, #112]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80177ba:	691b      	ldr	r3, [r3, #16]
 80177bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	00db      	lsls	r3, r3, #3
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d1eb      	bne.n	80177a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	f003 0302 	and.w	r3, r3, #2
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d010      	beq.n	80177f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	68da      	ldr	r2, [r3, #12]
 80177da:	4b14      	ldr	r3, [pc, #80]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80177dc:	699b      	ldr	r3, [r3, #24]
 80177de:	f003 030f 	and.w	r3, r3, #15
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d208      	bcs.n	80177f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80177e6:	4b11      	ldr	r3, [pc, #68]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80177e8:	699b      	ldr	r3, [r3, #24]
 80177ea:	f023 020f 	bic.w	r2, r3, #15
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	490e      	ldr	r1, [pc, #56]	@ (801782c <HAL_RCC_ClockConfig+0x244>)
 80177f4:	4313      	orrs	r3, r2
 80177f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80177f8:	4b0b      	ldr	r3, [pc, #44]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f003 030f 	and.w	r3, r3, #15
 8017800:	683a      	ldr	r2, [r7, #0]
 8017802:	429a      	cmp	r2, r3
 8017804:	d214      	bcs.n	8017830 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017806:	4b08      	ldr	r3, [pc, #32]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f023 020f 	bic.w	r2, r3, #15
 801780e:	4906      	ldr	r1, [pc, #24]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 8017810:	683b      	ldr	r3, [r7, #0]
 8017812:	4313      	orrs	r3, r2
 8017814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017816:	4b04      	ldr	r3, [pc, #16]	@ (8017828 <HAL_RCC_ClockConfig+0x240>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	f003 030f 	and.w	r3, r3, #15
 801781e:	683a      	ldr	r2, [r7, #0]
 8017820:	429a      	cmp	r2, r3
 8017822:	d005      	beq.n	8017830 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8017824:	2301      	movs	r3, #1
 8017826:	e086      	b.n	8017936 <HAL_RCC_ClockConfig+0x34e>
 8017828:	52002000 	.word	0x52002000
 801782c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f003 0304 	and.w	r3, r3, #4
 8017838:	2b00      	cmp	r3, #0
 801783a:	d010      	beq.n	801785e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	691a      	ldr	r2, [r3, #16]
 8017840:	4b3f      	ldr	r3, [pc, #252]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 8017842:	699b      	ldr	r3, [r3, #24]
 8017844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8017848:	429a      	cmp	r2, r3
 801784a:	d208      	bcs.n	801785e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801784c:	4b3c      	ldr	r3, [pc, #240]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 801784e:	699b      	ldr	r3, [r3, #24]
 8017850:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	691b      	ldr	r3, [r3, #16]
 8017858:	4939      	ldr	r1, [pc, #228]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 801785a:	4313      	orrs	r3, r2
 801785c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	f003 0308 	and.w	r3, r3, #8
 8017866:	2b00      	cmp	r3, #0
 8017868:	d010      	beq.n	801788c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	695a      	ldr	r2, [r3, #20]
 801786e:	4b34      	ldr	r3, [pc, #208]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 8017870:	69db      	ldr	r3, [r3, #28]
 8017872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8017876:	429a      	cmp	r2, r3
 8017878:	d208      	bcs.n	801788c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801787a:	4b31      	ldr	r3, [pc, #196]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 801787c:	69db      	ldr	r3, [r3, #28]
 801787e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	695b      	ldr	r3, [r3, #20]
 8017886:	492e      	ldr	r1, [pc, #184]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 8017888:	4313      	orrs	r3, r2
 801788a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f003 0310 	and.w	r3, r3, #16
 8017894:	2b00      	cmp	r3, #0
 8017896:	d010      	beq.n	80178ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	699a      	ldr	r2, [r3, #24]
 801789c:	4b28      	ldr	r3, [pc, #160]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 801789e:	69db      	ldr	r3, [r3, #28]
 80178a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d208      	bcs.n	80178ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80178a8:	4b25      	ldr	r3, [pc, #148]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178aa:	69db      	ldr	r3, [r3, #28]
 80178ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	699b      	ldr	r3, [r3, #24]
 80178b4:	4922      	ldr	r1, [pc, #136]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178b6:	4313      	orrs	r3, r2
 80178b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	f003 0320 	and.w	r3, r3, #32
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d010      	beq.n	80178e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	69da      	ldr	r2, [r3, #28]
 80178ca:	4b1d      	ldr	r3, [pc, #116]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178cc:	6a1b      	ldr	r3, [r3, #32]
 80178ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d208      	bcs.n	80178e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80178d6:	4b1a      	ldr	r3, [pc, #104]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178d8:	6a1b      	ldr	r3, [r3, #32]
 80178da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	69db      	ldr	r3, [r3, #28]
 80178e2:	4917      	ldr	r1, [pc, #92]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178e4:	4313      	orrs	r3, r2
 80178e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80178e8:	f000 f834 	bl	8017954 <HAL_RCC_GetSysClockFreq>
 80178ec:	4602      	mov	r2, r0
 80178ee:	4b14      	ldr	r3, [pc, #80]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	0a1b      	lsrs	r3, r3, #8
 80178f4:	f003 030f 	and.w	r3, r3, #15
 80178f8:	4912      	ldr	r1, [pc, #72]	@ (8017944 <HAL_RCC_ClockConfig+0x35c>)
 80178fa:	5ccb      	ldrb	r3, [r1, r3]
 80178fc:	f003 031f 	and.w	r3, r3, #31
 8017900:	fa22 f303 	lsr.w	r3, r2, r3
 8017904:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8017906:	4b0e      	ldr	r3, [pc, #56]	@ (8017940 <HAL_RCC_ClockConfig+0x358>)
 8017908:	699b      	ldr	r3, [r3, #24]
 801790a:	f003 030f 	and.w	r3, r3, #15
 801790e:	4a0d      	ldr	r2, [pc, #52]	@ (8017944 <HAL_RCC_ClockConfig+0x35c>)
 8017910:	5cd3      	ldrb	r3, [r2, r3]
 8017912:	f003 031f 	and.w	r3, r3, #31
 8017916:	693a      	ldr	r2, [r7, #16]
 8017918:	fa22 f303 	lsr.w	r3, r2, r3
 801791c:	4a0a      	ldr	r2, [pc, #40]	@ (8017948 <HAL_RCC_ClockConfig+0x360>)
 801791e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8017920:	4a0a      	ldr	r2, [pc, #40]	@ (801794c <HAL_RCC_ClockConfig+0x364>)
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8017926:	4b0a      	ldr	r3, [pc, #40]	@ (8017950 <HAL_RCC_ClockConfig+0x368>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4618      	mov	r0, r3
 801792c:	f7fa ffa0 	bl	8012870 <HAL_InitTick>
 8017930:	4603      	mov	r3, r0
 8017932:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8017934:	7bfb      	ldrb	r3, [r7, #15]
}
 8017936:	4618      	mov	r0, r3
 8017938:	3718      	adds	r7, #24
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
 801793e:	bf00      	nop
 8017940:	58024400 	.word	0x58024400
 8017944:	08030dc8 	.word	0x08030dc8
 8017948:	24000040 	.word	0x24000040
 801794c:	2400003c 	.word	0x2400003c
 8017950:	24000044 	.word	0x24000044

08017954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017954:	b480      	push	{r7}
 8017956:	b089      	sub	sp, #36	@ 0x24
 8017958:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801795a:	4bb3      	ldr	r3, [pc, #716]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801795c:	691b      	ldr	r3, [r3, #16]
 801795e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017962:	2b18      	cmp	r3, #24
 8017964:	f200 8155 	bhi.w	8017c12 <HAL_RCC_GetSysClockFreq+0x2be>
 8017968:	a201      	add	r2, pc, #4	@ (adr r2, 8017970 <HAL_RCC_GetSysClockFreq+0x1c>)
 801796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801796e:	bf00      	nop
 8017970:	080179d5 	.word	0x080179d5
 8017974:	08017c13 	.word	0x08017c13
 8017978:	08017c13 	.word	0x08017c13
 801797c:	08017c13 	.word	0x08017c13
 8017980:	08017c13 	.word	0x08017c13
 8017984:	08017c13 	.word	0x08017c13
 8017988:	08017c13 	.word	0x08017c13
 801798c:	08017c13 	.word	0x08017c13
 8017990:	080179fb 	.word	0x080179fb
 8017994:	08017c13 	.word	0x08017c13
 8017998:	08017c13 	.word	0x08017c13
 801799c:	08017c13 	.word	0x08017c13
 80179a0:	08017c13 	.word	0x08017c13
 80179a4:	08017c13 	.word	0x08017c13
 80179a8:	08017c13 	.word	0x08017c13
 80179ac:	08017c13 	.word	0x08017c13
 80179b0:	08017a01 	.word	0x08017a01
 80179b4:	08017c13 	.word	0x08017c13
 80179b8:	08017c13 	.word	0x08017c13
 80179bc:	08017c13 	.word	0x08017c13
 80179c0:	08017c13 	.word	0x08017c13
 80179c4:	08017c13 	.word	0x08017c13
 80179c8:	08017c13 	.word	0x08017c13
 80179cc:	08017c13 	.word	0x08017c13
 80179d0:	08017a07 	.word	0x08017a07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80179d4:	4b94      	ldr	r3, [pc, #592]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f003 0320 	and.w	r3, r3, #32
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d009      	beq.n	80179f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80179e0:	4b91      	ldr	r3, [pc, #580]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	08db      	lsrs	r3, r3, #3
 80179e6:	f003 0303 	and.w	r3, r3, #3
 80179ea:	4a90      	ldr	r2, [pc, #576]	@ (8017c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80179ec:	fa22 f303 	lsr.w	r3, r2, r3
 80179f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80179f2:	e111      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80179f4:	4b8d      	ldr	r3, [pc, #564]	@ (8017c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80179f6:	61bb      	str	r3, [r7, #24]
      break;
 80179f8:	e10e      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80179fa:	4b8d      	ldr	r3, [pc, #564]	@ (8017c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80179fc:	61bb      	str	r3, [r7, #24]
      break;
 80179fe:	e10b      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8017a00:	4b8c      	ldr	r3, [pc, #560]	@ (8017c34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8017a02:	61bb      	str	r3, [r7, #24]
      break;
 8017a04:	e108      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8017a06:	4b88      	ldr	r3, [pc, #544]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a0a:	f003 0303 	and.w	r3, r3, #3
 8017a0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8017a10:	4b85      	ldr	r3, [pc, #532]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a14:	091b      	lsrs	r3, r3, #4
 8017a16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017a1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8017a1c:	4b82      	ldr	r3, [pc, #520]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8017a26:	4b80      	ldr	r3, [pc, #512]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a2a:	08db      	lsrs	r3, r3, #3
 8017a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a30:	68fa      	ldr	r2, [r7, #12]
 8017a32:	fb02 f303 	mul.w	r3, r2, r3
 8017a36:	ee07 3a90 	vmov	s15, r3
 8017a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8017a42:	693b      	ldr	r3, [r7, #16]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f000 80e1 	beq.w	8017c0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	2b02      	cmp	r3, #2
 8017a4e:	f000 8083 	beq.w	8017b58 <HAL_RCC_GetSysClockFreq+0x204>
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	2b02      	cmp	r3, #2
 8017a56:	f200 80a1 	bhi.w	8017b9c <HAL_RCC_GetSysClockFreq+0x248>
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d003      	beq.n	8017a68 <HAL_RCC_GetSysClockFreq+0x114>
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d056      	beq.n	8017b14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8017a66:	e099      	b.n	8017b9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017a68:	4b6f      	ldr	r3, [pc, #444]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f003 0320 	and.w	r3, r3, #32
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d02d      	beq.n	8017ad0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017a74:	4b6c      	ldr	r3, [pc, #432]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	08db      	lsrs	r3, r3, #3
 8017a7a:	f003 0303 	and.w	r3, r3, #3
 8017a7e:	4a6b      	ldr	r2, [pc, #428]	@ (8017c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8017a80:	fa22 f303 	lsr.w	r3, r2, r3
 8017a84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	ee07 3a90 	vmov	s15, r3
 8017a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	ee07 3a90 	vmov	s15, r3
 8017a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017a9e:	4b62      	ldr	r3, [pc, #392]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aa6:	ee07 3a90 	vmov	s15, r3
 8017aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8017ab2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8017c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8017ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017aca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8017ace:	e087      	b.n	8017be0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	ee07 3a90 	vmov	s15, r3
 8017ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ada:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8017c3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8017ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017ae2:	4b51      	ldr	r3, [pc, #324]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aea:	ee07 3a90 	vmov	s15, r3
 8017aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8017af6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8017c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8017afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8017b12:	e065      	b.n	8017be0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	ee07 3a90 	vmov	s15, r3
 8017b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8017c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8017b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017b26:	4b40      	ldr	r3, [pc, #256]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b2e:	ee07 3a90 	vmov	s15, r3
 8017b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8017b3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8017c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8017b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8017b56:	e043      	b.n	8017be0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	ee07 3a90 	vmov	s15, r3
 8017b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8017c44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8017b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b72:	ee07 3a90 	vmov	s15, r3
 8017b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8017b7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8017c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8017b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8017b9a:	e021      	b.n	8017be0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	ee07 3a90 	vmov	s15, r3
 8017ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ba6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8017c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8017baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bae:	4b1e      	ldr	r3, [pc, #120]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017bb6:	ee07 3a90 	vmov	s15, r3
 8017bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8017bc2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8017c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8017bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8017bde:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8017be0:	4b11      	ldr	r3, [pc, #68]	@ (8017c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8017be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017be4:	0a5b      	lsrs	r3, r3, #9
 8017be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017bea:	3301      	adds	r3, #1
 8017bec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	ee07 3a90 	vmov	s15, r3
 8017bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8017bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c04:	ee17 3a90 	vmov	r3, s15
 8017c08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8017c0a:	e005      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	61bb      	str	r3, [r7, #24]
      break;
 8017c10:	e002      	b.n	8017c18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8017c12:	4b07      	ldr	r3, [pc, #28]	@ (8017c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8017c14:	61bb      	str	r3, [r7, #24]
      break;
 8017c16:	bf00      	nop
  }

  return sysclockfreq;
 8017c18:	69bb      	ldr	r3, [r7, #24]
}
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	3724      	adds	r7, #36	@ 0x24
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c24:	4770      	bx	lr
 8017c26:	bf00      	nop
 8017c28:	58024400 	.word	0x58024400
 8017c2c:	03d09000 	.word	0x03d09000
 8017c30:	003d0900 	.word	0x003d0900
 8017c34:	007a1200 	.word	0x007a1200
 8017c38:	46000000 	.word	0x46000000
 8017c3c:	4c742400 	.word	0x4c742400
 8017c40:	4a742400 	.word	0x4a742400
 8017c44:	4af42400 	.word	0x4af42400

08017c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b082      	sub	sp, #8
 8017c4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8017c4e:	f7ff fe81 	bl	8017954 <HAL_RCC_GetSysClockFreq>
 8017c52:	4602      	mov	r2, r0
 8017c54:	4b10      	ldr	r3, [pc, #64]	@ (8017c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8017c56:	699b      	ldr	r3, [r3, #24]
 8017c58:	0a1b      	lsrs	r3, r3, #8
 8017c5a:	f003 030f 	and.w	r3, r3, #15
 8017c5e:	490f      	ldr	r1, [pc, #60]	@ (8017c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8017c60:	5ccb      	ldrb	r3, [r1, r3]
 8017c62:	f003 031f 	and.w	r3, r3, #31
 8017c66:	fa22 f303 	lsr.w	r3, r2, r3
 8017c6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8017c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8017c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8017c6e:	699b      	ldr	r3, [r3, #24]
 8017c70:	f003 030f 	and.w	r3, r3, #15
 8017c74:	4a09      	ldr	r2, [pc, #36]	@ (8017c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8017c76:	5cd3      	ldrb	r3, [r2, r3]
 8017c78:	f003 031f 	and.w	r3, r3, #31
 8017c7c:	687a      	ldr	r2, [r7, #4]
 8017c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8017c82:	4a07      	ldr	r2, [pc, #28]	@ (8017ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8017c84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8017c86:	4a07      	ldr	r2, [pc, #28]	@ (8017ca4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8017c8c:	4b04      	ldr	r3, [pc, #16]	@ (8017ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	58024400 	.word	0x58024400
 8017c9c:	08030dc8 	.word	0x08030dc8
 8017ca0:	24000040 	.word	0x24000040
 8017ca4:	2400003c 	.word	0x2400003c

08017ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8017cac:	f7ff ffcc 	bl	8017c48 <HAL_RCC_GetHCLKFreq>
 8017cb0:	4602      	mov	r2, r0
 8017cb2:	4b06      	ldr	r3, [pc, #24]	@ (8017ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8017cb4:	69db      	ldr	r3, [r3, #28]
 8017cb6:	091b      	lsrs	r3, r3, #4
 8017cb8:	f003 0307 	and.w	r3, r3, #7
 8017cbc:	4904      	ldr	r1, [pc, #16]	@ (8017cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017cbe:	5ccb      	ldrb	r3, [r1, r3]
 8017cc0:	f003 031f 	and.w	r3, r3, #31
 8017cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	58024400 	.word	0x58024400
 8017cd0:	08030dc8 	.word	0x08030dc8

08017cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8017cd8:	f7ff ffb6 	bl	8017c48 <HAL_RCC_GetHCLKFreq>
 8017cdc:	4602      	mov	r2, r0
 8017cde:	4b06      	ldr	r3, [pc, #24]	@ (8017cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017ce0:	69db      	ldr	r3, [r3, #28]
 8017ce2:	0a1b      	lsrs	r3, r3, #8
 8017ce4:	f003 0307 	and.w	r3, r3, #7
 8017ce8:	4904      	ldr	r1, [pc, #16]	@ (8017cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8017cea:	5ccb      	ldrb	r3, [r1, r3]
 8017cec:	f003 031f 	and.w	r3, r3, #31
 8017cf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	58024400 	.word	0x58024400
 8017cfc:	08030dc8 	.word	0x08030dc8

08017d00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017d04:	b0ca      	sub	sp, #296	@ 0x128
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017d12:	2300      	movs	r3, #0
 8017d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8017d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d20:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8017d24:	2500      	movs	r5, #0
 8017d26:	ea54 0305 	orrs.w	r3, r4, r5
 8017d2a:	d049      	beq.n	8017dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8017d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017d36:	d02f      	beq.n	8017d98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8017d38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017d3c:	d828      	bhi.n	8017d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8017d3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017d42:	d01a      	beq.n	8017d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8017d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017d48:	d822      	bhi.n	8017d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d003      	beq.n	8017d56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8017d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017d52:	d007      	beq.n	8017d64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017d54:	e01c      	b.n	8017d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017d56:	4bb8      	ldr	r3, [pc, #736]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d5a:	4ab7      	ldr	r2, [pc, #732]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8017d62:	e01a      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8017d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017d68:	3308      	adds	r3, #8
 8017d6a:	2102      	movs	r1, #2
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f001 fc8f 	bl	8019690 <RCCEx_PLL2_Config>
 8017d72:	4603      	mov	r3, r0
 8017d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8017d78:	e00f      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8017d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017d7e:	3328      	adds	r3, #40	@ 0x28
 8017d80:	2102      	movs	r1, #2
 8017d82:	4618      	mov	r0, r3
 8017d84:	f001 fd36 	bl	80197f4 <RCCEx_PLL3_Config>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8017d8e:	e004      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017d90:	2301      	movs	r3, #1
 8017d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017d96:	e000      	b.n	8017d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8017d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d10a      	bne.n	8017db8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8017da2:	4ba5      	ldr	r3, [pc, #660]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017da6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8017daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017db0:	4aa1      	ldr	r2, [pc, #644]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017db2:	430b      	orrs	r3, r1
 8017db4:	6513      	str	r3, [r2, #80]	@ 0x50
 8017db6:	e003      	b.n	8017dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8017dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dc8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8017dcc:	f04f 0900 	mov.w	r9, #0
 8017dd0:	ea58 0309 	orrs.w	r3, r8, r9
 8017dd4:	d047      	beq.n	8017e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8017dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ddc:	2b04      	cmp	r3, #4
 8017dde:	d82a      	bhi.n	8017e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8017de0:	a201      	add	r2, pc, #4	@ (adr r2, 8017de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8017de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017de6:	bf00      	nop
 8017de8:	08017dfd 	.word	0x08017dfd
 8017dec:	08017e0b 	.word	0x08017e0b
 8017df0:	08017e21 	.word	0x08017e21
 8017df4:	08017e3f 	.word	0x08017e3f
 8017df8:	08017e3f 	.word	0x08017e3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e00:	4a8d      	ldr	r2, [pc, #564]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8017e08:	e01a      	b.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017e0e:	3308      	adds	r3, #8
 8017e10:	2100      	movs	r1, #0
 8017e12:	4618      	mov	r0, r3
 8017e14:	f001 fc3c 	bl	8019690 <RCCEx_PLL2_Config>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8017e1e:	e00f      	b.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8017e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017e24:	3328      	adds	r3, #40	@ 0x28
 8017e26:	2100      	movs	r1, #0
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f001 fce3 	bl	80197f4 <RCCEx_PLL3_Config>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8017e34:	e004      	b.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017e36:	2301      	movs	r3, #1
 8017e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017e3c:	e000      	b.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8017e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d10a      	bne.n	8017e5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017e48:	4b7b      	ldr	r3, [pc, #492]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e4c:	f023 0107 	bic.w	r1, r3, #7
 8017e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017e56:	4a78      	ldr	r2, [pc, #480]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017e58:	430b      	orrs	r3, r1
 8017e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8017e5c:	e003      	b.n	8017e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8017e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e6e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8017e72:	f04f 0b00 	mov.w	fp, #0
 8017e76:	ea5a 030b 	orrs.w	r3, sl, fp
 8017e7a:	d04c      	beq.n	8017f16 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8017e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e86:	d030      	beq.n	8017eea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8017e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e8c:	d829      	bhi.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8017e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8017e90:	d02d      	beq.n	8017eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8017e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8017e94:	d825      	bhi.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8017e96:	2b80      	cmp	r3, #128	@ 0x80
 8017e98:	d018      	beq.n	8017ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8017e9a:	2b80      	cmp	r3, #128	@ 0x80
 8017e9c:	d821      	bhi.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d002      	beq.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8017ea2:	2b40      	cmp	r3, #64	@ 0x40
 8017ea4:	d007      	beq.n	8017eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8017ea6:	e01c      	b.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017ea8:	4b63      	ldr	r3, [pc, #396]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eac:	4a62      	ldr	r2, [pc, #392]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8017eb4:	e01c      	b.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017eba:	3308      	adds	r3, #8
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f001 fbe6 	bl	8019690 <RCCEx_PLL2_Config>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8017eca:	e011      	b.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8017ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017ed0:	3328      	adds	r3, #40	@ 0x28
 8017ed2:	2100      	movs	r1, #0
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f001 fc8d 	bl	80197f4 <RCCEx_PLL3_Config>
 8017eda:	4603      	mov	r3, r0
 8017edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8017ee0:	e006      	b.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017ee8:	e002      	b.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8017eea:	bf00      	nop
 8017eec:	e000      	b.n	8017ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8017eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d10a      	bne.n	8017f0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8017ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017efc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8017f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017f06:	4a4c      	ldr	r2, [pc, #304]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017f08:	430b      	orrs	r3, r1
 8017f0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8017f0c:	e003      	b.n	8017f16 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8017f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f1e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8017f22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8017f26:	2300      	movs	r3, #0
 8017f28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8017f2c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8017f30:	460b      	mov	r3, r1
 8017f32:	4313      	orrs	r3, r2
 8017f34:	d053      	beq.n	8017fde <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8017f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017f3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017f42:	d035      	beq.n	8017fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8017f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017f48:	d82e      	bhi.n	8017fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8017f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8017f4e:	d031      	beq.n	8017fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8017f50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8017f54:	d828      	bhi.n	8017fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8017f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017f5a:	d01a      	beq.n	8017f92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8017f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017f60:	d822      	bhi.n	8017fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d003      	beq.n	8017f6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8017f66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017f6a:	d007      	beq.n	8017f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8017f6c:	e01c      	b.n	8017fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8017f6e:	4b32      	ldr	r3, [pc, #200]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f72:	4a31      	ldr	r2, [pc, #196]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8017f7a:	e01c      	b.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8017f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017f80:	3308      	adds	r3, #8
 8017f82:	2100      	movs	r1, #0
 8017f84:	4618      	mov	r0, r3
 8017f86:	f001 fb83 	bl	8019690 <RCCEx_PLL2_Config>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8017f90:	e011      	b.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8017f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017f96:	3328      	adds	r3, #40	@ 0x28
 8017f98:	2100      	movs	r1, #0
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f001 fc2a 	bl	80197f4 <RCCEx_PLL3_Config>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8017fa6:	e006      	b.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8017fa8:	2301      	movs	r3, #1
 8017faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8017fae:	e002      	b.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8017fb0:	bf00      	nop
 8017fb2:	e000      	b.n	8017fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8017fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d10b      	bne.n	8017fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8017fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fc2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8017fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017fca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017fce:	4a1a      	ldr	r2, [pc, #104]	@ (8018038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8017fd0:	430b      	orrs	r3, r1
 8017fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8017fd4:	e003      	b.n	8017fde <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8017fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8017fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8017fea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8017fee:	2300      	movs	r3, #0
 8017ff0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8017ff4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	4313      	orrs	r3, r2
 8017ffc:	d056      	beq.n	80180ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8017ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801800a:	d038      	beq.n	801807e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801800c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018010:	d831      	bhi.n	8018076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8018012:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8018016:	d034      	beq.n	8018082 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8018018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801801c:	d82b      	bhi.n	8018076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801801e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018022:	d01d      	beq.n	8018060 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8018024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018028:	d825      	bhi.n	8018076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801802a:	2b00      	cmp	r3, #0
 801802c:	d006      	beq.n	801803c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801802e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018032:	d00a      	beq.n	801804a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8018034:	e01f      	b.n	8018076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8018036:	bf00      	nop
 8018038:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801803c:	4ba2      	ldr	r3, [pc, #648]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018040:	4aa1      	ldr	r2, [pc, #644]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8018042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8018048:	e01c      	b.n	8018084 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801804e:	3308      	adds	r3, #8
 8018050:	2100      	movs	r1, #0
 8018052:	4618      	mov	r0, r3
 8018054:	f001 fb1c 	bl	8019690 <RCCEx_PLL2_Config>
 8018058:	4603      	mov	r3, r0
 801805a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801805e:	e011      	b.n	8018084 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8018060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018064:	3328      	adds	r3, #40	@ 0x28
 8018066:	2100      	movs	r1, #0
 8018068:	4618      	mov	r0, r3
 801806a:	f001 fbc3 	bl	80197f4 <RCCEx_PLL3_Config>
 801806e:	4603      	mov	r3, r0
 8018070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8018074:	e006      	b.n	8018084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8018076:	2301      	movs	r3, #1
 8018078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801807c:	e002      	b.n	8018084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801807e:	bf00      	nop
 8018080:	e000      	b.n	8018084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8018082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018088:	2b00      	cmp	r3, #0
 801808a:	d10b      	bne.n	80180a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801808c:	4b8e      	ldr	r3, [pc, #568]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801808e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018090:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8018094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801809c:	4a8a      	ldr	r2, [pc, #552]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801809e:	430b      	orrs	r3, r1
 80180a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80180a2:	e003      	b.n	80180ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80180a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80180a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80180ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80180b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80180b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80180bc:	2300      	movs	r3, #0
 80180be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80180c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80180c6:	460b      	mov	r3, r1
 80180c8:	4313      	orrs	r3, r2
 80180ca:	d03a      	beq.n	8018142 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80180cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80180d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80180d2:	2b30      	cmp	r3, #48	@ 0x30
 80180d4:	d01f      	beq.n	8018116 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80180d6:	2b30      	cmp	r3, #48	@ 0x30
 80180d8:	d819      	bhi.n	801810e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80180da:	2b20      	cmp	r3, #32
 80180dc:	d00c      	beq.n	80180f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80180de:	2b20      	cmp	r3, #32
 80180e0:	d815      	bhi.n	801810e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d019      	beq.n	801811a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80180e6:	2b10      	cmp	r3, #16
 80180e8:	d111      	bne.n	801810e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80180ea:	4b77      	ldr	r3, [pc, #476]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80180ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180ee:	4a76      	ldr	r2, [pc, #472]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80180f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80180f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80180f6:	e011      	b.n	801811c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80180f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80180fc:	3308      	adds	r3, #8
 80180fe:	2102      	movs	r1, #2
 8018100:	4618      	mov	r0, r3
 8018102:	f001 fac5 	bl	8019690 <RCCEx_PLL2_Config>
 8018106:	4603      	mov	r3, r0
 8018108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801810c:	e006      	b.n	801811c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801810e:	2301      	movs	r3, #1
 8018110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018114:	e002      	b.n	801811c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8018116:	bf00      	nop
 8018118:	e000      	b.n	801811c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801811a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801811c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018120:	2b00      	cmp	r3, #0
 8018122:	d10a      	bne.n	801813a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8018124:	4b68      	ldr	r3, [pc, #416]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8018126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018128:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018132:	4a65      	ldr	r2, [pc, #404]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8018134:	430b      	orrs	r3, r1
 8018136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8018138:	e003      	b.n	8018142 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801813a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801813e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8018142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801814a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801814e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8018152:	2300      	movs	r3, #0
 8018154:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8018158:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801815c:	460b      	mov	r3, r1
 801815e:	4313      	orrs	r3, r2
 8018160:	d051      	beq.n	8018206 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8018162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801816c:	d035      	beq.n	80181da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801816e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018172:	d82e      	bhi.n	80181d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8018174:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8018178:	d031      	beq.n	80181de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801817a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801817e:	d828      	bhi.n	80181d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8018180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018184:	d01a      	beq.n	80181bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8018186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801818a:	d822      	bhi.n	80181d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801818c:	2b00      	cmp	r3, #0
 801818e:	d003      	beq.n	8018198 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8018190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018194:	d007      	beq.n	80181a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8018196:	e01c      	b.n	80181d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018198:	4b4b      	ldr	r3, [pc, #300]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801819c:	4a4a      	ldr	r2, [pc, #296]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801819e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80181a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80181a4:	e01c      	b.n	80181e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80181a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80181aa:	3308      	adds	r3, #8
 80181ac:	2100      	movs	r1, #0
 80181ae:	4618      	mov	r0, r3
 80181b0:	f001 fa6e 	bl	8019690 <RCCEx_PLL2_Config>
 80181b4:	4603      	mov	r3, r0
 80181b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80181ba:	e011      	b.n	80181e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80181bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80181c0:	3328      	adds	r3, #40	@ 0x28
 80181c2:	2100      	movs	r1, #0
 80181c4:	4618      	mov	r0, r3
 80181c6:	f001 fb15 	bl	80197f4 <RCCEx_PLL3_Config>
 80181ca:	4603      	mov	r3, r0
 80181cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80181d0:	e006      	b.n	80181e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80181d2:	2301      	movs	r3, #1
 80181d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80181d8:	e002      	b.n	80181e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80181da:	bf00      	nop
 80181dc:	e000      	b.n	80181e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80181de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80181e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d10a      	bne.n	80181fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80181e8:	4b37      	ldr	r3, [pc, #220]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80181ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80181f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80181f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181f6:	4a34      	ldr	r2, [pc, #208]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80181f8:	430b      	orrs	r3, r1
 80181fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80181fc:	e003      	b.n	8018206 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80181fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8018206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8018212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8018216:	2300      	movs	r3, #0
 8018218:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801821c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8018220:	460b      	mov	r3, r1
 8018222:	4313      	orrs	r3, r2
 8018224:	d056      	beq.n	80182d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8018226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801822a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801822c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8018230:	d033      	beq.n	801829a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8018232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8018236:	d82c      	bhi.n	8018292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8018238:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801823c:	d02f      	beq.n	801829e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801823e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8018242:	d826      	bhi.n	8018292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8018244:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8018248:	d02b      	beq.n	80182a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801824a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801824e:	d820      	bhi.n	8018292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8018250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018254:	d012      	beq.n	801827c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8018256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801825a:	d81a      	bhi.n	8018292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801825c:	2b00      	cmp	r3, #0
 801825e:	d022      	beq.n	80182a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8018260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018264:	d115      	bne.n	8018292 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8018266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801826a:	3308      	adds	r3, #8
 801826c:	2101      	movs	r1, #1
 801826e:	4618      	mov	r0, r3
 8018270:	f001 fa0e 	bl	8019690 <RCCEx_PLL2_Config>
 8018274:	4603      	mov	r3, r0
 8018276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801827a:	e015      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018280:	3328      	adds	r3, #40	@ 0x28
 8018282:	2101      	movs	r1, #1
 8018284:	4618      	mov	r0, r3
 8018286:	f001 fab5 	bl	80197f4 <RCCEx_PLL3_Config>
 801828a:	4603      	mov	r3, r0
 801828c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8018290:	e00a      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018292:	2301      	movs	r3, #1
 8018294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018298:	e006      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801829a:	bf00      	nop
 801829c:	e004      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801829e:	bf00      	nop
 80182a0:	e002      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80182a2:	bf00      	nop
 80182a4:	e000      	b.n	80182a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80182a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80182a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d10d      	bne.n	80182cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80182b0:	4b05      	ldr	r3, [pc, #20]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80182b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80182b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80182b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80182bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80182be:	4a02      	ldr	r2, [pc, #8]	@ (80182c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80182c0:	430b      	orrs	r3, r1
 80182c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80182c4:	e006      	b.n	80182d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80182c6:	bf00      	nop
 80182c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80182cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80182d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80182d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80182d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80182e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80182e4:	2300      	movs	r3, #0
 80182e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80182ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4313      	orrs	r3, r2
 80182f2:	d055      	beq.n	80183a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80182f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80182f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80182fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018300:	d033      	beq.n	801836a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8018302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018306:	d82c      	bhi.n	8018362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8018308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801830c:	d02f      	beq.n	801836e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801830e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018312:	d826      	bhi.n	8018362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8018314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8018318:	d02b      	beq.n	8018372 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801831a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801831e:	d820      	bhi.n	8018362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8018320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018324:	d012      	beq.n	801834c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8018326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801832a:	d81a      	bhi.n	8018362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801832c:	2b00      	cmp	r3, #0
 801832e:	d022      	beq.n	8018376 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8018330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018334:	d115      	bne.n	8018362 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8018336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801833a:	3308      	adds	r3, #8
 801833c:	2101      	movs	r1, #1
 801833e:	4618      	mov	r0, r3
 8018340:	f001 f9a6 	bl	8019690 <RCCEx_PLL2_Config>
 8018344:	4603      	mov	r3, r0
 8018346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801834a:	e015      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018350:	3328      	adds	r3, #40	@ 0x28
 8018352:	2101      	movs	r1, #1
 8018354:	4618      	mov	r0, r3
 8018356:	f001 fa4d 	bl	80197f4 <RCCEx_PLL3_Config>
 801835a:	4603      	mov	r3, r0
 801835c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8018360:	e00a      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8018362:	2301      	movs	r3, #1
 8018364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018368:	e006      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801836a:	bf00      	nop
 801836c:	e004      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801836e:	bf00      	nop
 8018370:	e002      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8018372:	bf00      	nop
 8018374:	e000      	b.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8018376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801837c:	2b00      	cmp	r3, #0
 801837e:	d10b      	bne.n	8018398 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8018380:	4ba3      	ldr	r3, [pc, #652]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018384:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8018388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801838c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018390:	4a9f      	ldr	r2, [pc, #636]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018392:	430b      	orrs	r3, r1
 8018394:	6593      	str	r3, [r2, #88]	@ 0x58
 8018396:	e003      	b.n	80183a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801839c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80183a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80183a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80183ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80183b0:	2300      	movs	r3, #0
 80183b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80183b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80183ba:	460b      	mov	r3, r1
 80183bc:	4313      	orrs	r3, r2
 80183be:	d037      	beq.n	8018430 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80183c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80183c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80183ca:	d00e      	beq.n	80183ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80183cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80183d0:	d816      	bhi.n	8018400 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d018      	beq.n	8018408 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80183d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80183da:	d111      	bne.n	8018400 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80183dc:	4b8c      	ldr	r3, [pc, #560]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80183de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183e0:	4a8b      	ldr	r2, [pc, #556]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80183e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80183e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80183e8:	e00f      	b.n	801840a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80183ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80183ee:	3308      	adds	r3, #8
 80183f0:	2101      	movs	r1, #1
 80183f2:	4618      	mov	r0, r3
 80183f4:	f001 f94c 	bl	8019690 <RCCEx_PLL2_Config>
 80183f8:	4603      	mov	r3, r0
 80183fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80183fe:	e004      	b.n	801840a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018400:	2301      	movs	r3, #1
 8018402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018406:	e000      	b.n	801840a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8018408:	bf00      	nop
    }

    if (ret == HAL_OK)
 801840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801840e:	2b00      	cmp	r3, #0
 8018410:	d10a      	bne.n	8018428 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8018412:	4b7f      	ldr	r3, [pc, #508]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018416:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801841e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018420:	4a7b      	ldr	r2, [pc, #492]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018422:	430b      	orrs	r3, r1
 8018424:	6513      	str	r3, [r2, #80]	@ 0x50
 8018426:	e003      	b.n	8018430 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801842c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8018430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018438:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801843c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018440:	2300      	movs	r3, #0
 8018442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8018446:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801844a:	460b      	mov	r3, r1
 801844c:	4313      	orrs	r3, r2
 801844e:	d039      	beq.n	80184c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8018450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018456:	2b03      	cmp	r3, #3
 8018458:	d81c      	bhi.n	8018494 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801845a:	a201      	add	r2, pc, #4	@ (adr r2, 8018460 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018460:	0801849d 	.word	0x0801849d
 8018464:	08018471 	.word	0x08018471
 8018468:	0801847f 	.word	0x0801847f
 801846c:	0801849d 	.word	0x0801849d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018470:	4b67      	ldr	r3, [pc, #412]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018474:	4a66      	ldr	r2, [pc, #408]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801847a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801847c:	e00f      	b.n	801849e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018482:	3308      	adds	r3, #8
 8018484:	2102      	movs	r1, #2
 8018486:	4618      	mov	r0, r3
 8018488:	f001 f902 	bl	8019690 <RCCEx_PLL2_Config>
 801848c:	4603      	mov	r3, r0
 801848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8018492:	e004      	b.n	801849e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8018494:	2301      	movs	r3, #1
 8018496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801849a:	e000      	b.n	801849e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801849c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801849e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d10a      	bne.n	80184bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80184a6:	4b5a      	ldr	r3, [pc, #360]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80184a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80184aa:	f023 0103 	bic.w	r1, r3, #3
 80184ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80184b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80184b4:	4a56      	ldr	r2, [pc, #344]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80184b6:	430b      	orrs	r3, r1
 80184b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80184ba:	e003      	b.n	80184c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80184bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80184c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80184c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80184c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80184d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80184d4:	2300      	movs	r3, #0
 80184d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80184da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80184de:	460b      	mov	r3, r1
 80184e0:	4313      	orrs	r3, r2
 80184e2:	f000 809f 	beq.w	8018624 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80184e6:	4b4b      	ldr	r3, [pc, #300]	@ (8018614 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a4a      	ldr	r2, [pc, #296]	@ (8018614 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80184ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80184f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80184f2:	f7fa fa07 	bl	8012904 <HAL_GetTick>
 80184f6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80184fa:	e00b      	b.n	8018514 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80184fc:	f7fa fa02 	bl	8012904 <HAL_GetTick>
 8018500:	4602      	mov	r2, r0
 8018502:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8018506:	1ad3      	subs	r3, r2, r3
 8018508:	2b64      	cmp	r3, #100	@ 0x64
 801850a:	d903      	bls.n	8018514 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801850c:	2303      	movs	r3, #3
 801850e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018512:	e005      	b.n	8018520 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018514:	4b3f      	ldr	r3, [pc, #252]	@ (8018614 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801851c:	2b00      	cmp	r3, #0
 801851e:	d0ed      	beq.n	80184fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8018520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018524:	2b00      	cmp	r3, #0
 8018526:	d179      	bne.n	801861c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8018528:	4b39      	ldr	r3, [pc, #228]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801852a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018530:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018534:	4053      	eors	r3, r2
 8018536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801853a:	2b00      	cmp	r3, #0
 801853c:	d015      	beq.n	801856a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801853e:	4b34      	ldr	r3, [pc, #208]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018546:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801854a:	4b31      	ldr	r3, [pc, #196]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801854c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801854e:	4a30      	ldr	r2, [pc, #192]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018554:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8018556:	4b2e      	ldr	r3, [pc, #184]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801855a:	4a2d      	ldr	r2, [pc, #180]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801855c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8018560:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8018562:	4a2b      	ldr	r2, [pc, #172]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018568:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801856e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018576:	d118      	bne.n	80185aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018578:	f7fa f9c4 	bl	8012904 <HAL_GetTick>
 801857c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018580:	e00d      	b.n	801859e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018582:	f7fa f9bf 	bl	8012904 <HAL_GetTick>
 8018586:	4602      	mov	r2, r0
 8018588:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801858c:	1ad2      	subs	r2, r2, r3
 801858e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018592:	429a      	cmp	r2, r3
 8018594:	d903      	bls.n	801859e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8018596:	2303      	movs	r3, #3
 8018598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801859c:	e005      	b.n	80185aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801859e:	4b1c      	ldr	r3, [pc, #112]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185a2:	f003 0302 	and.w	r3, r3, #2
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d0eb      	beq.n	8018582 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80185aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d129      	bne.n	8018606 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80185b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80185b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80185ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80185be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80185c2:	d10e      	bne.n	80185e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80185c4:	4b12      	ldr	r3, [pc, #72]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185c6:	691b      	ldr	r3, [r3, #16]
 80185c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80185cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80185d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80185d4:	091a      	lsrs	r2, r3, #4
 80185d6:	4b10      	ldr	r3, [pc, #64]	@ (8018618 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80185d8:	4013      	ands	r3, r2
 80185da:	4a0d      	ldr	r2, [pc, #52]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185dc:	430b      	orrs	r3, r1
 80185de:	6113      	str	r3, [r2, #16]
 80185e0:	e005      	b.n	80185ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80185e2:	4b0b      	ldr	r3, [pc, #44]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185e4:	691b      	ldr	r3, [r3, #16]
 80185e6:	4a0a      	ldr	r2, [pc, #40]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80185ec:	6113      	str	r3, [r2, #16]
 80185ee:	4b08      	ldr	r3, [pc, #32]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80185f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80185f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80185f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80185fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80185fe:	4a04      	ldr	r2, [pc, #16]	@ (8018610 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8018600:	430b      	orrs	r3, r1
 8018602:	6713      	str	r3, [r2, #112]	@ 0x70
 8018604:	e00e      	b.n	8018624 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8018606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801860a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801860e:	e009      	b.n	8018624 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8018610:	58024400 	.word	0x58024400
 8018614:	58024800 	.word	0x58024800
 8018618:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801861c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8018624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801862c:	f002 0301 	and.w	r3, r2, #1
 8018630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018634:	2300      	movs	r3, #0
 8018636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801863a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801863e:	460b      	mov	r3, r1
 8018640:	4313      	orrs	r3, r2
 8018642:	f000 8089 	beq.w	8018758 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8018646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801864a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801864c:	2b28      	cmp	r3, #40	@ 0x28
 801864e:	d86b      	bhi.n	8018728 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8018650:	a201      	add	r2, pc, #4	@ (adr r2, 8018658 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8018652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018656:	bf00      	nop
 8018658:	08018731 	.word	0x08018731
 801865c:	08018729 	.word	0x08018729
 8018660:	08018729 	.word	0x08018729
 8018664:	08018729 	.word	0x08018729
 8018668:	08018729 	.word	0x08018729
 801866c:	08018729 	.word	0x08018729
 8018670:	08018729 	.word	0x08018729
 8018674:	08018729 	.word	0x08018729
 8018678:	080186fd 	.word	0x080186fd
 801867c:	08018729 	.word	0x08018729
 8018680:	08018729 	.word	0x08018729
 8018684:	08018729 	.word	0x08018729
 8018688:	08018729 	.word	0x08018729
 801868c:	08018729 	.word	0x08018729
 8018690:	08018729 	.word	0x08018729
 8018694:	08018729 	.word	0x08018729
 8018698:	08018713 	.word	0x08018713
 801869c:	08018729 	.word	0x08018729
 80186a0:	08018729 	.word	0x08018729
 80186a4:	08018729 	.word	0x08018729
 80186a8:	08018729 	.word	0x08018729
 80186ac:	08018729 	.word	0x08018729
 80186b0:	08018729 	.word	0x08018729
 80186b4:	08018729 	.word	0x08018729
 80186b8:	08018731 	.word	0x08018731
 80186bc:	08018729 	.word	0x08018729
 80186c0:	08018729 	.word	0x08018729
 80186c4:	08018729 	.word	0x08018729
 80186c8:	08018729 	.word	0x08018729
 80186cc:	08018729 	.word	0x08018729
 80186d0:	08018729 	.word	0x08018729
 80186d4:	08018729 	.word	0x08018729
 80186d8:	08018731 	.word	0x08018731
 80186dc:	08018729 	.word	0x08018729
 80186e0:	08018729 	.word	0x08018729
 80186e4:	08018729 	.word	0x08018729
 80186e8:	08018729 	.word	0x08018729
 80186ec:	08018729 	.word	0x08018729
 80186f0:	08018729 	.word	0x08018729
 80186f4:	08018729 	.word	0x08018729
 80186f8:	08018731 	.word	0x08018731
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80186fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018700:	3308      	adds	r3, #8
 8018702:	2101      	movs	r1, #1
 8018704:	4618      	mov	r0, r3
 8018706:	f000 ffc3 	bl	8019690 <RCCEx_PLL2_Config>
 801870a:	4603      	mov	r3, r0
 801870c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8018710:	e00f      	b.n	8018732 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8018712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018716:	3328      	adds	r3, #40	@ 0x28
 8018718:	2101      	movs	r1, #1
 801871a:	4618      	mov	r0, r3
 801871c:	f001 f86a 	bl	80197f4 <RCCEx_PLL3_Config>
 8018720:	4603      	mov	r3, r0
 8018722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8018726:	e004      	b.n	8018732 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018728:	2301      	movs	r3, #1
 801872a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801872e:	e000      	b.n	8018732 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8018730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018736:	2b00      	cmp	r3, #0
 8018738:	d10a      	bne.n	8018750 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801873a:	4bbf      	ldr	r3, [pc, #764]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801873c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801873e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8018742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018748:	4abb      	ldr	r2, [pc, #748]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801874a:	430b      	orrs	r3, r1
 801874c:	6553      	str	r3, [r2, #84]	@ 0x54
 801874e:	e003      	b.n	8018758 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8018758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018760:	f002 0302 	and.w	r3, r2, #2
 8018764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018768:	2300      	movs	r3, #0
 801876a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801876e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8018772:	460b      	mov	r3, r1
 8018774:	4313      	orrs	r3, r2
 8018776:	d041      	beq.n	80187fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8018778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801877c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801877e:	2b05      	cmp	r3, #5
 8018780:	d824      	bhi.n	80187cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8018782:	a201      	add	r2, pc, #4	@ (adr r2, 8018788 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8018784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018788:	080187d5 	.word	0x080187d5
 801878c:	080187a1 	.word	0x080187a1
 8018790:	080187b7 	.word	0x080187b7
 8018794:	080187d5 	.word	0x080187d5
 8018798:	080187d5 	.word	0x080187d5
 801879c:	080187d5 	.word	0x080187d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80187a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80187a4:	3308      	adds	r3, #8
 80187a6:	2101      	movs	r1, #1
 80187a8:	4618      	mov	r0, r3
 80187aa:	f000 ff71 	bl	8019690 <RCCEx_PLL2_Config>
 80187ae:	4603      	mov	r3, r0
 80187b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80187b4:	e00f      	b.n	80187d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80187b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80187ba:	3328      	adds	r3, #40	@ 0x28
 80187bc:	2101      	movs	r1, #1
 80187be:	4618      	mov	r0, r3
 80187c0:	f001 f818 	bl	80197f4 <RCCEx_PLL3_Config>
 80187c4:	4603      	mov	r3, r0
 80187c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80187ca:	e004      	b.n	80187d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80187cc:	2301      	movs	r3, #1
 80187ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80187d2:	e000      	b.n	80187d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80187d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80187d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d10a      	bne.n	80187f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80187de:	4b96      	ldr	r3, [pc, #600]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80187e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187e2:	f023 0107 	bic.w	r1, r3, #7
 80187e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80187ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80187ec:	4a92      	ldr	r2, [pc, #584]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80187ee:	430b      	orrs	r3, r1
 80187f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80187f2:	e003      	b.n	80187fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80187f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80187f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80187fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018804:	f002 0304 	and.w	r3, r2, #4
 8018808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801880c:	2300      	movs	r3, #0
 801880e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018812:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8018816:	460b      	mov	r3, r1
 8018818:	4313      	orrs	r3, r2
 801881a:	d044      	beq.n	80188a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8018824:	2b05      	cmp	r3, #5
 8018826:	d825      	bhi.n	8018874 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8018828:	a201      	add	r2, pc, #4	@ (adr r2, 8018830 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801882e:	bf00      	nop
 8018830:	0801887d 	.word	0x0801887d
 8018834:	08018849 	.word	0x08018849
 8018838:	0801885f 	.word	0x0801885f
 801883c:	0801887d 	.word	0x0801887d
 8018840:	0801887d 	.word	0x0801887d
 8018844:	0801887d 	.word	0x0801887d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8018848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801884c:	3308      	adds	r3, #8
 801884e:	2101      	movs	r1, #1
 8018850:	4618      	mov	r0, r3
 8018852:	f000 ff1d 	bl	8019690 <RCCEx_PLL2_Config>
 8018856:	4603      	mov	r3, r0
 8018858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801885c:	e00f      	b.n	801887e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018862:	3328      	adds	r3, #40	@ 0x28
 8018864:	2101      	movs	r1, #1
 8018866:	4618      	mov	r0, r3
 8018868:	f000 ffc4 	bl	80197f4 <RCCEx_PLL3_Config>
 801886c:	4603      	mov	r3, r0
 801886e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8018872:	e004      	b.n	801887e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018874:	2301      	movs	r3, #1
 8018876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801887a:	e000      	b.n	801887e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801887c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018882:	2b00      	cmp	r3, #0
 8018884:	d10b      	bne.n	801889e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018886:	4b6c      	ldr	r3, [pc, #432]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801888a:	f023 0107 	bic.w	r1, r3, #7
 801888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8018896:	4a68      	ldr	r2, [pc, #416]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018898:	430b      	orrs	r3, r1
 801889a:	6593      	str	r3, [r2, #88]	@ 0x58
 801889c:	e003      	b.n	80188a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801889e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80188a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80188a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80188aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ae:	f002 0320 	and.w	r3, r2, #32
 80188b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80188b6:	2300      	movs	r3, #0
 80188b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80188bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80188c0:	460b      	mov	r3, r1
 80188c2:	4313      	orrs	r3, r2
 80188c4:	d055      	beq.n	8018972 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80188c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80188ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80188d2:	d033      	beq.n	801893c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80188d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80188d8:	d82c      	bhi.n	8018934 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80188da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80188de:	d02f      	beq.n	8018940 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80188e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80188e4:	d826      	bhi.n	8018934 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80188e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80188ea:	d02b      	beq.n	8018944 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80188ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80188f0:	d820      	bhi.n	8018934 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80188f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80188f6:	d012      	beq.n	801891e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80188f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80188fc:	d81a      	bhi.n	8018934 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d022      	beq.n	8018948 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8018902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018906:	d115      	bne.n	8018934 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8018908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801890c:	3308      	adds	r3, #8
 801890e:	2100      	movs	r1, #0
 8018910:	4618      	mov	r0, r3
 8018912:	f000 febd 	bl	8019690 <RCCEx_PLL2_Config>
 8018916:	4603      	mov	r3, r0
 8018918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801891c:	e015      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018922:	3328      	adds	r3, #40	@ 0x28
 8018924:	2102      	movs	r1, #2
 8018926:	4618      	mov	r0, r3
 8018928:	f000 ff64 	bl	80197f4 <RCCEx_PLL3_Config>
 801892c:	4603      	mov	r3, r0
 801892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8018932:	e00a      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018934:	2301      	movs	r3, #1
 8018936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801893a:	e006      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801893c:	bf00      	nop
 801893e:	e004      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8018940:	bf00      	nop
 8018942:	e002      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8018944:	bf00      	nop
 8018946:	e000      	b.n	801894a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8018948:	bf00      	nop
    }

    if (ret == HAL_OK)
 801894a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801894e:	2b00      	cmp	r3, #0
 8018950:	d10b      	bne.n	801896a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018952:	4b39      	ldr	r3, [pc, #228]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018956:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018962:	4a35      	ldr	r2, [pc, #212]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018964:	430b      	orrs	r3, r1
 8018966:	6553      	str	r3, [r2, #84]	@ 0x54
 8018968:	e003      	b.n	8018972 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801896a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801896e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8018972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801897e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8018982:	2300      	movs	r3, #0
 8018984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8018988:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801898c:	460b      	mov	r3, r1
 801898e:	4313      	orrs	r3, r2
 8018990:	d058      	beq.n	8018a44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8018992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801899a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801899e:	d033      	beq.n	8018a08 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80189a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80189a4:	d82c      	bhi.n	8018a00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80189a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80189aa:	d02f      	beq.n	8018a0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80189ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80189b0:	d826      	bhi.n	8018a00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80189b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80189b6:	d02b      	beq.n	8018a10 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80189b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80189bc:	d820      	bhi.n	8018a00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80189be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80189c2:	d012      	beq.n	80189ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80189c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80189c8:	d81a      	bhi.n	8018a00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d022      	beq.n	8018a14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80189ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80189d2:	d115      	bne.n	8018a00 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80189d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80189d8:	3308      	adds	r3, #8
 80189da:	2100      	movs	r1, #0
 80189dc:	4618      	mov	r0, r3
 80189de:	f000 fe57 	bl	8019690 <RCCEx_PLL2_Config>
 80189e2:	4603      	mov	r3, r0
 80189e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80189e8:	e015      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80189ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80189ee:	3328      	adds	r3, #40	@ 0x28
 80189f0:	2102      	movs	r1, #2
 80189f2:	4618      	mov	r0, r3
 80189f4:	f000 fefe 	bl	80197f4 <RCCEx_PLL3_Config>
 80189f8:	4603      	mov	r3, r0
 80189fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80189fe:	e00a      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018a00:	2301      	movs	r3, #1
 8018a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018a06:	e006      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8018a08:	bf00      	nop
 8018a0a:	e004      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8018a0c:	bf00      	nop
 8018a0e:	e002      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8018a10:	bf00      	nop
 8018a12:	e000      	b.n	8018a16 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8018a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d10e      	bne.n	8018a3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018a1e:	4b06      	ldr	r3, [pc, #24]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018a22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8018a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018a2e:	4a02      	ldr	r2, [pc, #8]	@ (8018a38 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8018a30:	430b      	orrs	r3, r1
 8018a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8018a34:	e006      	b.n	8018a44 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8018a36:	bf00      	nop
 8018a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8018a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8018a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8018a54:	2300      	movs	r3, #0
 8018a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8018a5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8018a5e:	460b      	mov	r3, r1
 8018a60:	4313      	orrs	r3, r2
 8018a62:	d055      	beq.n	8018b10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8018a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018a68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018a6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8018a70:	d033      	beq.n	8018ada <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8018a72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8018a76:	d82c      	bhi.n	8018ad2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8018a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018a7c:	d02f      	beq.n	8018ade <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8018a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018a82:	d826      	bhi.n	8018ad2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8018a84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8018a88:	d02b      	beq.n	8018ae2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8018a8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8018a8e:	d820      	bhi.n	8018ad2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8018a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018a94:	d012      	beq.n	8018abc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8018a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018a9a:	d81a      	bhi.n	8018ad2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d022      	beq.n	8018ae6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8018aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018aa4:	d115      	bne.n	8018ad2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8018aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018aaa:	3308      	adds	r3, #8
 8018aac:	2100      	movs	r1, #0
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f000 fdee 	bl	8019690 <RCCEx_PLL2_Config>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8018aba:	e015      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8018abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ac0:	3328      	adds	r3, #40	@ 0x28
 8018ac2:	2102      	movs	r1, #2
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 fe95 	bl	80197f4 <RCCEx_PLL3_Config>
 8018aca:	4603      	mov	r3, r0
 8018acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8018ad0:	e00a      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018ad2:	2301      	movs	r3, #1
 8018ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018ad8:	e006      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8018ada:	bf00      	nop
 8018adc:	e004      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8018ade:	bf00      	nop
 8018ae0:	e002      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8018ae2:	bf00      	nop
 8018ae4:	e000      	b.n	8018ae8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8018ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d10b      	bne.n	8018b08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8018af0:	4ba1      	ldr	r3, [pc, #644]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018af4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8018af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8018b00:	4a9d      	ldr	r2, [pc, #628]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018b02:	430b      	orrs	r3, r1
 8018b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8018b06:	e003      	b.n	8018b10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8018b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b18:	f002 0308 	and.w	r3, r2, #8
 8018b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8018b20:	2300      	movs	r3, #0
 8018b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018b26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8018b2a:	460b      	mov	r3, r1
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	d01e      	beq.n	8018b6e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8018b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018b3c:	d10c      	bne.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8018b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b42:	3328      	adds	r3, #40	@ 0x28
 8018b44:	2102      	movs	r1, #2
 8018b46:	4618      	mov	r0, r3
 8018b48:	f000 fe54 	bl	80197f4 <RCCEx_PLL3_Config>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d002      	beq.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8018b52:	2301      	movs	r3, #1
 8018b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8018b58:	4b87      	ldr	r3, [pc, #540]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018b68:	4a83      	ldr	r2, [pc, #524]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018b6a:	430b      	orrs	r3, r1
 8018b6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8018b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b76:	f002 0310 	and.w	r3, r2, #16
 8018b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8018b7e:	2300      	movs	r3, #0
 8018b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8018b84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8018b88:	460b      	mov	r3, r1
 8018b8a:	4313      	orrs	r3, r2
 8018b8c:	d01e      	beq.n	8018bcc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8018b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018b9a:	d10c      	bne.n	8018bb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8018b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ba0:	3328      	adds	r3, #40	@ 0x28
 8018ba2:	2102      	movs	r1, #2
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	f000 fe25 	bl	80197f4 <RCCEx_PLL3_Config>
 8018baa:	4603      	mov	r3, r0
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d002      	beq.n	8018bb6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8018bb6:	4b70      	ldr	r3, [pc, #448]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018bba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8018bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018bc8:	430b      	orrs	r3, r1
 8018bca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8018bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8018bdc:	2300      	movs	r3, #0
 8018bde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018be2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8018be6:	460b      	mov	r3, r1
 8018be8:	4313      	orrs	r3, r2
 8018bea:	d03e      	beq.n	8018c6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8018bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018bf8:	d022      	beq.n	8018c40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8018bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8018bfe:	d81b      	bhi.n	8018c38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d003      	beq.n	8018c0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8018c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018c08:	d00b      	beq.n	8018c22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8018c0a:	e015      	b.n	8018c38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8018c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018c10:	3308      	adds	r3, #8
 8018c12:	2100      	movs	r1, #0
 8018c14:	4618      	mov	r0, r3
 8018c16:	f000 fd3b 	bl	8019690 <RCCEx_PLL2_Config>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8018c20:	e00f      	b.n	8018c42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8018c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018c26:	3328      	adds	r3, #40	@ 0x28
 8018c28:	2102      	movs	r1, #2
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f000 fde2 	bl	80197f4 <RCCEx_PLL3_Config>
 8018c30:	4603      	mov	r3, r0
 8018c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8018c36:	e004      	b.n	8018c42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018c38:	2301      	movs	r3, #1
 8018c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018c3e:	e000      	b.n	8018c42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8018c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d10b      	bne.n	8018c62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8018c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018c5a:	4a47      	ldr	r2, [pc, #284]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018c5c:	430b      	orrs	r3, r1
 8018c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8018c60:	e003      	b.n	8018c6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8018c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8018c76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018c78:	2300      	movs	r3, #0
 8018c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018c7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8018c80:	460b      	mov	r3, r1
 8018c82:	4313      	orrs	r3, r2
 8018c84:	d03b      	beq.n	8018cfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8018c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018c8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8018c92:	d01f      	beq.n	8018cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8018c94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8018c98:	d818      	bhi.n	8018ccc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8018c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018c9e:	d003      	beq.n	8018ca8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8018ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8018ca4:	d007      	beq.n	8018cb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8018ca6:	e011      	b.n	8018ccc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018ca8:	4b33      	ldr	r3, [pc, #204]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cac:	4a32      	ldr	r2, [pc, #200]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8018cb4:	e00f      	b.n	8018cd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8018cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018cba:	3328      	adds	r3, #40	@ 0x28
 8018cbc:	2101      	movs	r1, #1
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f000 fd98 	bl	80197f4 <RCCEx_PLL3_Config>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8018cca:	e004      	b.n	8018cd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018ccc:	2301      	movs	r3, #1
 8018cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018cd2:	e000      	b.n	8018cd6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8018cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d10b      	bne.n	8018cf6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018cde:	4b26      	ldr	r3, [pc, #152]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ce2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8018ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018cee:	4a22      	ldr	r2, [pc, #136]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018cf0:	430b      	orrs	r3, r1
 8018cf2:	6553      	str	r3, [r2, #84]	@ 0x54
 8018cf4:	e003      	b.n	8018cfe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8018cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d06:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8018d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018d10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8018d14:	460b      	mov	r3, r1
 8018d16:	4313      	orrs	r3, r2
 8018d18:	d034      	beq.n	8018d84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8018d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d003      	beq.n	8018d2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8018d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018d28:	d007      	beq.n	8018d3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8018d2a:	e011      	b.n	8018d50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018d2c:	4b12      	ldr	r3, [pc, #72]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d30:	4a11      	ldr	r2, [pc, #68]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8018d38:	e00e      	b.n	8018d58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8018d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018d3e:	3308      	adds	r3, #8
 8018d40:	2102      	movs	r1, #2
 8018d42:	4618      	mov	r0, r3
 8018d44:	f000 fca4 	bl	8019690 <RCCEx_PLL2_Config>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8018d4e:	e003      	b.n	8018d58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8018d50:	2301      	movs	r3, #1
 8018d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d10d      	bne.n	8018d7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8018d60:	4b05      	ldr	r3, [pc, #20]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d6e:	4a02      	ldr	r2, [pc, #8]	@ (8018d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8018d70:	430b      	orrs	r3, r1
 8018d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8018d74:	e006      	b.n	8018d84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8018d76:	bf00      	nop
 8018d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8018d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8018d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018d92:	2300      	movs	r3, #0
 8018d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018d96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8018d9a:	460b      	mov	r3, r1
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	d00c      	beq.n	8018dba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8018da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018da4:	3328      	adds	r3, #40	@ 0x28
 8018da6:	2102      	movs	r1, #2
 8018da8:	4618      	mov	r0, r3
 8018daa:	f000 fd23 	bl	80197f4 <RCCEx_PLL3_Config>
 8018dae:	4603      	mov	r3, r0
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d002      	beq.n	8018dba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8018db4:	2301      	movs	r3, #1
 8018db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8018dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8018dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8018dc8:	2300      	movs	r3, #0
 8018dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8018dcc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	4313      	orrs	r3, r2
 8018dd4:	d038      	beq.n	8018e48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8018dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018de2:	d018      	beq.n	8018e16 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8018de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018de8:	d811      	bhi.n	8018e0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8018dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018dee:	d014      	beq.n	8018e1a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8018df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018df4:	d80b      	bhi.n	8018e0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d011      	beq.n	8018e1e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8018dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018dfe:	d106      	bne.n	8018e0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8018e00:	4bc3      	ldr	r3, [pc, #780]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e04:	4ac2      	ldr	r2, [pc, #776]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8018e0c:	e008      	b.n	8018e20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018e0e:	2301      	movs	r3, #1
 8018e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8018e14:	e004      	b.n	8018e20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8018e16:	bf00      	nop
 8018e18:	e002      	b.n	8018e20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8018e1a:	bf00      	nop
 8018e1c:	e000      	b.n	8018e20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8018e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d10b      	bne.n	8018e40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018e28:	4bb9      	ldr	r3, [pc, #740]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e2c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8018e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018e38:	4ab5      	ldr	r2, [pc, #724]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e3a:	430b      	orrs	r3, r1
 8018e3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8018e3e:	e003      	b.n	8018e48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8018e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8018e54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018e56:	2300      	movs	r3, #0
 8018e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018e5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8018e5e:	460b      	mov	r3, r1
 8018e60:	4313      	orrs	r3, r2
 8018e62:	d009      	beq.n	8018e78 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8018e64:	4baa      	ldr	r3, [pc, #680]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018e68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e72:	4aa7      	ldr	r2, [pc, #668]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e74:	430b      	orrs	r3, r1
 8018e76:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8018e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e80:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8018e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8018e86:	2300      	movs	r3, #0
 8018e88:	657b      	str	r3, [r7, #84]	@ 0x54
 8018e8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8018e8e:	460b      	mov	r3, r1
 8018e90:	4313      	orrs	r3, r2
 8018e92:	d00a      	beq.n	8018eaa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8018e94:	4b9e      	ldr	r3, [pc, #632]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018e96:	691b      	ldr	r3, [r3, #16]
 8018e98:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8018e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ea0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018ea4:	4a9a      	ldr	r2, [pc, #616]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018ea6:	430b      	orrs	r3, r1
 8018ea8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8018eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8018eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018eb8:	2300      	movs	r3, #0
 8018eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018ebc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8018ec0:	460b      	mov	r3, r1
 8018ec2:	4313      	orrs	r3, r2
 8018ec4:	d009      	beq.n	8018eda <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8018ec6:	4b92      	ldr	r3, [pc, #584]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018eca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8018ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018ed6:	430b      	orrs	r3, r1
 8018ed8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8018eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8018ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ee8:	2300      	movs	r3, #0
 8018eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8018eec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8018ef0:	460b      	mov	r3, r1
 8018ef2:	4313      	orrs	r3, r2
 8018ef4:	d00e      	beq.n	8018f14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8018ef6:	4b86      	ldr	r3, [pc, #536]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018ef8:	691b      	ldr	r3, [r3, #16]
 8018efa:	4a85      	ldr	r2, [pc, #532]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018efc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8018f00:	6113      	str	r3, [r2, #16]
 8018f02:	4b83      	ldr	r3, [pc, #524]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f04:	6919      	ldr	r1, [r3, #16]
 8018f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018f0e:	4a80      	ldr	r2, [pc, #512]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f10:	430b      	orrs	r3, r1
 8018f12:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8018f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f1c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8018f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f22:	2300      	movs	r3, #0
 8018f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	4313      	orrs	r3, r2
 8018f2e:	d009      	beq.n	8018f44 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8018f30:	4b77      	ldr	r3, [pc, #476]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8018f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f3e:	4a74      	ldr	r2, [pc, #464]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f40:	430b      	orrs	r3, r1
 8018f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8018f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f4c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8018f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f52:	2300      	movs	r3, #0
 8018f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8018f56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8018f5a:	460b      	mov	r3, r1
 8018f5c:	4313      	orrs	r3, r2
 8018f5e:	d00a      	beq.n	8018f76 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8018f60:	4b6b      	ldr	r3, [pc, #428]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f64:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8018f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018f70:	4a67      	ldr	r2, [pc, #412]	@ (8019110 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8018f72:	430b      	orrs	r3, r1
 8018f74:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8018f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7e:	2100      	movs	r1, #0
 8018f80:	62b9      	str	r1, [r7, #40]	@ 0x28
 8018f82:	f003 0301 	and.w	r3, r3, #1
 8018f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	4313      	orrs	r3, r2
 8018f90:	d011      	beq.n	8018fb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8018f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f96:	3308      	adds	r3, #8
 8018f98:	2100      	movs	r1, #0
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f000 fb78 	bl	8019690 <RCCEx_PLL2_Config>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8018fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d003      	beq.n	8018fb6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8018fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fbe:	2100      	movs	r1, #0
 8018fc0:	6239      	str	r1, [r7, #32]
 8018fc2:	f003 0302 	and.w	r3, r3, #2
 8018fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fc8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8018fcc:	460b      	mov	r3, r1
 8018fce:	4313      	orrs	r3, r2
 8018fd0:	d011      	beq.n	8018ff6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8018fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018fd6:	3308      	adds	r3, #8
 8018fd8:	2101      	movs	r1, #1
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f000 fb58 	bl	8019690 <RCCEx_PLL2_Config>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8018fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d003      	beq.n	8018ff6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8018ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8018ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ffe:	2100      	movs	r1, #0
 8019000:	61b9      	str	r1, [r7, #24]
 8019002:	f003 0304 	and.w	r3, r3, #4
 8019006:	61fb      	str	r3, [r7, #28]
 8019008:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801900c:	460b      	mov	r3, r1
 801900e:	4313      	orrs	r3, r2
 8019010:	d011      	beq.n	8019036 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8019012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019016:	3308      	adds	r3, #8
 8019018:	2102      	movs	r1, #2
 801901a:	4618      	mov	r0, r3
 801901c:	f000 fb38 	bl	8019690 <RCCEx_PLL2_Config>
 8019020:	4603      	mov	r3, r0
 8019022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8019026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801902a:	2b00      	cmp	r3, #0
 801902c:	d003      	beq.n	8019036 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801902e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8019032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8019036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903e:	2100      	movs	r1, #0
 8019040:	6139      	str	r1, [r7, #16]
 8019042:	f003 0308 	and.w	r3, r3, #8
 8019046:	617b      	str	r3, [r7, #20]
 8019048:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801904c:	460b      	mov	r3, r1
 801904e:	4313      	orrs	r3, r2
 8019050:	d011      	beq.n	8019076 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8019052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019056:	3328      	adds	r3, #40	@ 0x28
 8019058:	2100      	movs	r1, #0
 801905a:	4618      	mov	r0, r3
 801905c:	f000 fbca 	bl	80197f4 <RCCEx_PLL3_Config>
 8019060:	4603      	mov	r3, r0
 8019062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8019066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801906a:	2b00      	cmp	r3, #0
 801906c:	d003      	beq.n	8019076 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801906e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8019072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8019076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801907e:	2100      	movs	r1, #0
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	f003 0310 	and.w	r3, r3, #16
 8019086:	60fb      	str	r3, [r7, #12]
 8019088:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801908c:	460b      	mov	r3, r1
 801908e:	4313      	orrs	r3, r2
 8019090:	d011      	beq.n	80190b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8019092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019096:	3328      	adds	r3, #40	@ 0x28
 8019098:	2101      	movs	r1, #1
 801909a:	4618      	mov	r0, r3
 801909c:	f000 fbaa 	bl	80197f4 <RCCEx_PLL3_Config>
 80190a0:	4603      	mov	r3, r0
 80190a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80190a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d003      	beq.n	80190b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80190ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80190b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80190b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190be:	2100      	movs	r1, #0
 80190c0:	6039      	str	r1, [r7, #0]
 80190c2:	f003 0320 	and.w	r3, r3, #32
 80190c6:	607b      	str	r3, [r7, #4]
 80190c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80190cc:	460b      	mov	r3, r1
 80190ce:	4313      	orrs	r3, r2
 80190d0:	d011      	beq.n	80190f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80190d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190d6:	3328      	adds	r3, #40	@ 0x28
 80190d8:	2102      	movs	r1, #2
 80190da:	4618      	mov	r0, r3
 80190dc:	f000 fb8a 	bl	80197f4 <RCCEx_PLL3_Config>
 80190e0:	4603      	mov	r3, r0
 80190e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80190e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d003      	beq.n	80190f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80190ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80190f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80190f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d101      	bne.n	8019102 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80190fe:	2300      	movs	r3, #0
 8019100:	e000      	b.n	8019104 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8019102:	2301      	movs	r3, #1
}
 8019104:	4618      	mov	r0, r3
 8019106:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801910a:	46bd      	mov	sp, r7
 801910c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019110:	58024400 	.word	0x58024400

08019114 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8019118:	f7fe fd96 	bl	8017c48 <HAL_RCC_GetHCLKFreq>
 801911c:	4602      	mov	r2, r0
 801911e:	4b06      	ldr	r3, [pc, #24]	@ (8019138 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8019120:	6a1b      	ldr	r3, [r3, #32]
 8019122:	091b      	lsrs	r3, r3, #4
 8019124:	f003 0307 	and.w	r3, r3, #7
 8019128:	4904      	ldr	r1, [pc, #16]	@ (801913c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801912a:	5ccb      	ldrb	r3, [r1, r3]
 801912c:	f003 031f 	and.w	r3, r3, #31
 8019130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8019134:	4618      	mov	r0, r3
 8019136:	bd80      	pop	{r7, pc}
 8019138:	58024400 	.word	0x58024400
 801913c:	08030dc8 	.word	0x08030dc8

08019140 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8019140:	b480      	push	{r7}
 8019142:	b089      	sub	sp, #36	@ 0x24
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8019148:	4ba1      	ldr	r3, [pc, #644]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801914c:	f003 0303 	and.w	r3, r3, #3
 8019150:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8019152:	4b9f      	ldr	r3, [pc, #636]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019156:	0b1b      	lsrs	r3, r3, #12
 8019158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801915c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801915e:	4b9c      	ldr	r3, [pc, #624]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019162:	091b      	lsrs	r3, r3, #4
 8019164:	f003 0301 	and.w	r3, r3, #1
 8019168:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801916a:	4b99      	ldr	r3, [pc, #612]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801916c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801916e:	08db      	lsrs	r3, r3, #3
 8019170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019174:	693a      	ldr	r2, [r7, #16]
 8019176:	fb02 f303 	mul.w	r3, r2, r3
 801917a:	ee07 3a90 	vmov	s15, r3
 801917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	2b00      	cmp	r3, #0
 801918a:	f000 8111 	beq.w	80193b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801918e:	69bb      	ldr	r3, [r7, #24]
 8019190:	2b02      	cmp	r3, #2
 8019192:	f000 8083 	beq.w	801929c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8019196:	69bb      	ldr	r3, [r7, #24]
 8019198:	2b02      	cmp	r3, #2
 801919a:	f200 80a1 	bhi.w	80192e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801919e:	69bb      	ldr	r3, [r7, #24]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d003      	beq.n	80191ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80191a4:	69bb      	ldr	r3, [r7, #24]
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	d056      	beq.n	8019258 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80191aa:	e099      	b.n	80192e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80191ac:	4b88      	ldr	r3, [pc, #544]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f003 0320 	and.w	r3, r3, #32
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d02d      	beq.n	8019214 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80191b8:	4b85      	ldr	r3, [pc, #532]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	08db      	lsrs	r3, r3, #3
 80191be:	f003 0303 	and.w	r3, r3, #3
 80191c2:	4a84      	ldr	r2, [pc, #528]	@ (80193d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80191c4:	fa22 f303 	lsr.w	r3, r2, r3
 80191c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	ee07 3a90 	vmov	s15, r3
 80191d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80191d4:	697b      	ldr	r3, [r7, #20]
 80191d6:	ee07 3a90 	vmov	s15, r3
 80191da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80191e2:	4b7b      	ldr	r3, [pc, #492]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80191e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80191ea:	ee07 3a90 	vmov	s15, r3
 80191ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80191f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80191f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80193d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80191fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80191fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801920a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801920e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8019212:	e087      	b.n	8019324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	ee07 3a90 	vmov	s15, r3
 801921a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801921e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80193dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8019222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019226:	4b6a      	ldr	r3, [pc, #424]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801922a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801922e:	ee07 3a90 	vmov	s15, r3
 8019232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019236:	ed97 6a03 	vldr	s12, [r7, #12]
 801923a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80193d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801923e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8019242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801924a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801924e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8019256:	e065      	b.n	8019324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8019258:	697b      	ldr	r3, [r7, #20]
 801925a:	ee07 3a90 	vmov	s15, r3
 801925e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019262:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80193e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8019266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801926a:	4b59      	ldr	r3, [pc, #356]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801926c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801926e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019272:	ee07 3a90 	vmov	s15, r3
 8019276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801927a:	ed97 6a03 	vldr	s12, [r7, #12]
 801927e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80193d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8019282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8019286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801928a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801928e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801929a:	e043      	b.n	8019324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	ee07 3a90 	vmov	s15, r3
 80192a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80192a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80193e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80192aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80192ae:	4b48      	ldr	r3, [pc, #288]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80192b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80192b6:	ee07 3a90 	vmov	s15, r3
 80192ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80192be:	ed97 6a03 	vldr	s12, [r7, #12]
 80192c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80193d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80192c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80192ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80192ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80192d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80192d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80192de:	e021      	b.n	8019324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80192e0:	697b      	ldr	r3, [r7, #20]
 80192e2:	ee07 3a90 	vmov	s15, r3
 80192e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80192ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80193e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80192ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80192f2:	4b37      	ldr	r3, [pc, #220]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80192f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80192fa:	ee07 3a90 	vmov	s15, r3
 80192fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019302:	ed97 6a03 	vldr	s12, [r7, #12]
 8019306:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80193d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801930a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801930e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801931a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801931e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8019322:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8019324:	4b2a      	ldr	r3, [pc, #168]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019328:	0a5b      	lsrs	r3, r3, #9
 801932a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801932e:	ee07 3a90 	vmov	s15, r3
 8019332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801933a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801933e:	edd7 6a07 	vldr	s13, [r7, #28]
 8019342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801934a:	ee17 2a90 	vmov	r2, s15
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8019352:	4b1f      	ldr	r3, [pc, #124]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019356:	0c1b      	lsrs	r3, r3, #16
 8019358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801935c:	ee07 3a90 	vmov	s15, r3
 8019360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019368:	ee37 7a87 	vadd.f32	s14, s15, s14
 801936c:	edd7 6a07 	vldr	s13, [r7, #28]
 8019370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019378:	ee17 2a90 	vmov	r2, s15
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8019380:	4b13      	ldr	r3, [pc, #76]	@ (80193d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8019382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019384:	0e1b      	lsrs	r3, r3, #24
 8019386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801938a:	ee07 3a90 	vmov	s15, r3
 801938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019396:	ee37 7a87 	vadd.f32	s14, s15, s14
 801939a:	edd7 6a07 	vldr	s13, [r7, #28]
 801939e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80193a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80193a6:	ee17 2a90 	vmov	r2, s15
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80193ae:	e008      	b.n	80193c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2200      	movs	r2, #0
 80193b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2200      	movs	r2, #0
 80193ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2200      	movs	r2, #0
 80193c0:	609a      	str	r2, [r3, #8]
}
 80193c2:	bf00      	nop
 80193c4:	3724      	adds	r7, #36	@ 0x24
 80193c6:	46bd      	mov	sp, r7
 80193c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193cc:	4770      	bx	lr
 80193ce:	bf00      	nop
 80193d0:	58024400 	.word	0x58024400
 80193d4:	03d09000 	.word	0x03d09000
 80193d8:	46000000 	.word	0x46000000
 80193dc:	4c742400 	.word	0x4c742400
 80193e0:	4a742400 	.word	0x4a742400
 80193e4:	4af42400 	.word	0x4af42400

080193e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80193e8:	b480      	push	{r7}
 80193ea:	b089      	sub	sp, #36	@ 0x24
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80193f0:	4ba1      	ldr	r3, [pc, #644]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80193f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193f4:	f003 0303 	and.w	r3, r3, #3
 80193f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80193fa:	4b9f      	ldr	r3, [pc, #636]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80193fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193fe:	0d1b      	lsrs	r3, r3, #20
 8019400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019404:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8019406:	4b9c      	ldr	r3, [pc, #624]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801940a:	0a1b      	lsrs	r3, r3, #8
 801940c:	f003 0301 	and.w	r3, r3, #1
 8019410:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8019412:	4b99      	ldr	r3, [pc, #612]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019416:	08db      	lsrs	r3, r3, #3
 8019418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801941c:	693a      	ldr	r2, [r7, #16]
 801941e:	fb02 f303 	mul.w	r3, r2, r3
 8019422:	ee07 3a90 	vmov	s15, r3
 8019426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801942a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	2b00      	cmp	r3, #0
 8019432:	f000 8111 	beq.w	8019658 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	2b02      	cmp	r3, #2
 801943a:	f000 8083 	beq.w	8019544 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	2b02      	cmp	r3, #2
 8019442:	f200 80a1 	bhi.w	8019588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8019446:	69bb      	ldr	r3, [r7, #24]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d003      	beq.n	8019454 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	2b01      	cmp	r3, #1
 8019450:	d056      	beq.n	8019500 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8019452:	e099      	b.n	8019588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019454:	4b88      	ldr	r3, [pc, #544]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	f003 0320 	and.w	r3, r3, #32
 801945c:	2b00      	cmp	r3, #0
 801945e:	d02d      	beq.n	80194bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8019460:	4b85      	ldr	r3, [pc, #532]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	08db      	lsrs	r3, r3, #3
 8019466:	f003 0303 	and.w	r3, r3, #3
 801946a:	4a84      	ldr	r2, [pc, #528]	@ (801967c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801946c:	fa22 f303 	lsr.w	r3, r2, r3
 8019470:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	ee07 3a90 	vmov	s15, r3
 8019478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	ee07 3a90 	vmov	s15, r3
 8019482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801948a:	4b7b      	ldr	r3, [pc, #492]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801948c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019492:	ee07 3a90 	vmov	s15, r3
 8019496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801949a:	ed97 6a03 	vldr	s12, [r7, #12]
 801949e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8019680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80194a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80194a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80194aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80194ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80194ba:	e087      	b.n	80195cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	ee07 3a90 	vmov	s15, r3
 80194c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80194c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8019684 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80194ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80194ce:	4b6a      	ldr	r3, [pc, #424]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80194d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80194d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80194d6:	ee07 3a90 	vmov	s15, r3
 80194da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80194de:	ed97 6a03 	vldr	s12, [r7, #12]
 80194e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8019680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80194e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80194ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80194ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80194f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80194fe:	e065      	b.n	80195cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	ee07 3a90 	vmov	s15, r3
 8019506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801950a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8019688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801950e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019512:	4b59      	ldr	r3, [pc, #356]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801951a:	ee07 3a90 	vmov	s15, r3
 801951e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019522:	ed97 6a03 	vldr	s12, [r7, #12]
 8019526:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8019680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801952a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801952e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801953a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801953e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8019542:	e043      	b.n	80195cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	ee07 3a90 	vmov	s15, r3
 801954a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801954e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801968c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8019552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019556:	4b48      	ldr	r3, [pc, #288]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8019558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801955e:	ee07 3a90 	vmov	s15, r3
 8019562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019566:	ed97 6a03 	vldr	s12, [r7, #12]
 801956a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8019680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801956e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8019572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801957a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801957e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8019586:	e021      	b.n	80195cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	ee07 3a90 	vmov	s15, r3
 801958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019592:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8019688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8019596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801959a:	4b37      	ldr	r3, [pc, #220]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80195a2:	ee07 3a90 	vmov	s15, r3
 80195a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80195aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80195ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8019680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80195b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80195b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80195ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80195be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80195c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80195c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80195ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80195cc:	4b2a      	ldr	r3, [pc, #168]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80195ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80195d0:	0a5b      	lsrs	r3, r3, #9
 80195d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80195d6:	ee07 3a90 	vmov	s15, r3
 80195da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80195de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80195e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80195e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80195ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80195ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80195f2:	ee17 2a90 	vmov	r2, s15
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80195fa:	4b1f      	ldr	r3, [pc, #124]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80195fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80195fe:	0c1b      	lsrs	r3, r3, #16
 8019600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019604:	ee07 3a90 	vmov	s15, r3
 8019608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801960c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8019614:	edd7 6a07 	vldr	s13, [r7, #28]
 8019618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801961c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019620:	ee17 2a90 	vmov	r2, s15
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8019628:	4b13      	ldr	r3, [pc, #76]	@ (8019678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801962c:	0e1b      	lsrs	r3, r3, #24
 801962e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019632:	ee07 3a90 	vmov	s15, r3
 8019636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801963a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801963e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8019642:	edd7 6a07 	vldr	s13, [r7, #28]
 8019646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801964a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801964e:	ee17 2a90 	vmov	r2, s15
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8019656:	e008      	b.n	801966a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2200      	movs	r2, #0
 801965c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	2200      	movs	r2, #0
 8019662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2200      	movs	r2, #0
 8019668:	609a      	str	r2, [r3, #8]
}
 801966a:	bf00      	nop
 801966c:	3724      	adds	r7, #36	@ 0x24
 801966e:	46bd      	mov	sp, r7
 8019670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019674:	4770      	bx	lr
 8019676:	bf00      	nop
 8019678:	58024400 	.word	0x58024400
 801967c:	03d09000 	.word	0x03d09000
 8019680:	46000000 	.word	0x46000000
 8019684:	4c742400 	.word	0x4c742400
 8019688:	4a742400 	.word	0x4a742400
 801968c:	4af42400 	.word	0x4af42400

08019690 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b084      	sub	sp, #16
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801969a:	2300      	movs	r3, #0
 801969c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801969e:	4b53      	ldr	r3, [pc, #332]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196a2:	f003 0303 	and.w	r3, r3, #3
 80196a6:	2b03      	cmp	r3, #3
 80196a8:	d101      	bne.n	80196ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80196aa:	2301      	movs	r3, #1
 80196ac:	e099      	b.n	80197e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80196ae:	4b4f      	ldr	r3, [pc, #316]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	4a4e      	ldr	r2, [pc, #312]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80196b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80196ba:	f7f9 f923 	bl	8012904 <HAL_GetTick>
 80196be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80196c0:	e008      	b.n	80196d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80196c2:	f7f9 f91f 	bl	8012904 <HAL_GetTick>
 80196c6:	4602      	mov	r2, r0
 80196c8:	68bb      	ldr	r3, [r7, #8]
 80196ca:	1ad3      	subs	r3, r2, r3
 80196cc:	2b02      	cmp	r3, #2
 80196ce:	d901      	bls.n	80196d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80196d0:	2303      	movs	r3, #3
 80196d2:	e086      	b.n	80197e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80196d4:	4b45      	ldr	r3, [pc, #276]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d1f0      	bne.n	80196c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80196e0:	4b42      	ldr	r3, [pc, #264]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	031b      	lsls	r3, r3, #12
 80196ee:	493f      	ldr	r1, [pc, #252]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80196f0:	4313      	orrs	r3, r2
 80196f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	685b      	ldr	r3, [r3, #4]
 80196f8:	3b01      	subs	r3, #1
 80196fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	689b      	ldr	r3, [r3, #8]
 8019702:	3b01      	subs	r3, #1
 8019704:	025b      	lsls	r3, r3, #9
 8019706:	b29b      	uxth	r3, r3
 8019708:	431a      	orrs	r2, r3
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	68db      	ldr	r3, [r3, #12]
 801970e:	3b01      	subs	r3, #1
 8019710:	041b      	lsls	r3, r3, #16
 8019712:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8019716:	431a      	orrs	r2, r3
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	691b      	ldr	r3, [r3, #16]
 801971c:	3b01      	subs	r3, #1
 801971e:	061b      	lsls	r3, r3, #24
 8019720:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8019724:	4931      	ldr	r1, [pc, #196]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019726:	4313      	orrs	r3, r2
 8019728:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801972a:	4b30      	ldr	r3, [pc, #192]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801972e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	695b      	ldr	r3, [r3, #20]
 8019736:	492d      	ldr	r1, [pc, #180]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019738:	4313      	orrs	r3, r2
 801973a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801973c:	4b2b      	ldr	r3, [pc, #172]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801973e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019740:	f023 0220 	bic.w	r2, r3, #32
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	699b      	ldr	r3, [r3, #24]
 8019748:	4928      	ldr	r1, [pc, #160]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801974a:	4313      	orrs	r3, r2
 801974c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801974e:	4b27      	ldr	r3, [pc, #156]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019752:	4a26      	ldr	r2, [pc, #152]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019754:	f023 0310 	bic.w	r3, r3, #16
 8019758:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801975a:	4b24      	ldr	r3, [pc, #144]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801975c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801975e:	4b24      	ldr	r3, [pc, #144]	@ (80197f0 <RCCEx_PLL2_Config+0x160>)
 8019760:	4013      	ands	r3, r2
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	69d2      	ldr	r2, [r2, #28]
 8019766:	00d2      	lsls	r2, r2, #3
 8019768:	4920      	ldr	r1, [pc, #128]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801976a:	4313      	orrs	r3, r2
 801976c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801976e:	4b1f      	ldr	r3, [pc, #124]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019772:	4a1e      	ldr	r2, [pc, #120]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019774:	f043 0310 	orr.w	r3, r3, #16
 8019778:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d106      	bne.n	801978e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8019780:	4b1a      	ldr	r3, [pc, #104]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019784:	4a19      	ldr	r2, [pc, #100]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019786:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801978a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801978c:	e00f      	b.n	80197ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	2b01      	cmp	r3, #1
 8019792:	d106      	bne.n	80197a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8019794:	4b15      	ldr	r3, [pc, #84]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 8019796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019798:	4a14      	ldr	r2, [pc, #80]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 801979a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801979e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80197a0:	e005      	b.n	80197ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80197a2:	4b12      	ldr	r3, [pc, #72]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80197a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197a6:	4a11      	ldr	r2, [pc, #68]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80197a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80197ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80197ae:	4b0f      	ldr	r3, [pc, #60]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4a0e      	ldr	r2, [pc, #56]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80197b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80197b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80197ba:	f7f9 f8a3 	bl	8012904 <HAL_GetTick>
 80197be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80197c0:	e008      	b.n	80197d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80197c2:	f7f9 f89f 	bl	8012904 <HAL_GetTick>
 80197c6:	4602      	mov	r2, r0
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	2b02      	cmp	r3, #2
 80197ce:	d901      	bls.n	80197d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80197d0:	2303      	movs	r3, #3
 80197d2:	e006      	b.n	80197e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80197d4:	4b05      	ldr	r3, [pc, #20]	@ (80197ec <RCCEx_PLL2_Config+0x15c>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d0f0      	beq.n	80197c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80197e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	3710      	adds	r7, #16
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}
 80197ea:	bf00      	nop
 80197ec:	58024400 	.word	0x58024400
 80197f0:	ffff0007 	.word	0xffff0007

080197f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80197fe:	2300      	movs	r3, #0
 8019800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8019802:	4b53      	ldr	r3, [pc, #332]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019806:	f003 0303 	and.w	r3, r3, #3
 801980a:	2b03      	cmp	r3, #3
 801980c:	d101      	bne.n	8019812 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801980e:	2301      	movs	r3, #1
 8019810:	e099      	b.n	8019946 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8019812:	4b4f      	ldr	r3, [pc, #316]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	4a4e      	ldr	r2, [pc, #312]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801981c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801981e:	f7f9 f871 	bl	8012904 <HAL_GetTick>
 8019822:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8019824:	e008      	b.n	8019838 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8019826:	f7f9 f86d 	bl	8012904 <HAL_GetTick>
 801982a:	4602      	mov	r2, r0
 801982c:	68bb      	ldr	r3, [r7, #8]
 801982e:	1ad3      	subs	r3, r2, r3
 8019830:	2b02      	cmp	r3, #2
 8019832:	d901      	bls.n	8019838 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8019834:	2303      	movs	r3, #3
 8019836:	e086      	b.n	8019946 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8019838:	4b45      	ldr	r3, [pc, #276]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1f0      	bne.n	8019826 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8019844:	4b42      	ldr	r3, [pc, #264]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019848:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	051b      	lsls	r3, r3, #20
 8019852:	493f      	ldr	r1, [pc, #252]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019854:	4313      	orrs	r3, r2
 8019856:	628b      	str	r3, [r1, #40]	@ 0x28
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	685b      	ldr	r3, [r3, #4]
 801985c:	3b01      	subs	r3, #1
 801985e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	689b      	ldr	r3, [r3, #8]
 8019866:	3b01      	subs	r3, #1
 8019868:	025b      	lsls	r3, r3, #9
 801986a:	b29b      	uxth	r3, r3
 801986c:	431a      	orrs	r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	68db      	ldr	r3, [r3, #12]
 8019872:	3b01      	subs	r3, #1
 8019874:	041b      	lsls	r3, r3, #16
 8019876:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801987a:	431a      	orrs	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	691b      	ldr	r3, [r3, #16]
 8019880:	3b01      	subs	r3, #1
 8019882:	061b      	lsls	r3, r3, #24
 8019884:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8019888:	4931      	ldr	r1, [pc, #196]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 801988a:	4313      	orrs	r3, r2
 801988c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801988e:	4b30      	ldr	r3, [pc, #192]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019892:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	695b      	ldr	r3, [r3, #20]
 801989a:	492d      	ldr	r1, [pc, #180]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 801989c:	4313      	orrs	r3, r2
 801989e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80198a0:	4b2b      	ldr	r3, [pc, #172]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	699b      	ldr	r3, [r3, #24]
 80198ac:	4928      	ldr	r1, [pc, #160]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198ae:	4313      	orrs	r3, r2
 80198b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80198b2:	4b27      	ldr	r3, [pc, #156]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198b6:	4a26      	ldr	r2, [pc, #152]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80198bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80198be:	4b24      	ldr	r3, [pc, #144]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80198c2:	4b24      	ldr	r3, [pc, #144]	@ (8019954 <RCCEx_PLL3_Config+0x160>)
 80198c4:	4013      	ands	r3, r2
 80198c6:	687a      	ldr	r2, [r7, #4]
 80198c8:	69d2      	ldr	r2, [r2, #28]
 80198ca:	00d2      	lsls	r2, r2, #3
 80198cc:	4920      	ldr	r1, [pc, #128]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198ce:	4313      	orrs	r3, r2
 80198d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80198d2:	4b1f      	ldr	r3, [pc, #124]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198d6:	4a1e      	ldr	r2, [pc, #120]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80198dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d106      	bne.n	80198f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80198e4:	4b1a      	ldr	r3, [pc, #104]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198e8:	4a19      	ldr	r2, [pc, #100]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80198ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80198f0:	e00f      	b.n	8019912 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	2b01      	cmp	r3, #1
 80198f6:	d106      	bne.n	8019906 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80198f8:	4b15      	ldr	r3, [pc, #84]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198fc:	4a14      	ldr	r2, [pc, #80]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 80198fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019902:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8019904:	e005      	b.n	8019912 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8019906:	4b12      	ldr	r3, [pc, #72]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801990a:	4a11      	ldr	r2, [pc, #68]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 801990c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019910:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8019912:	4b0f      	ldr	r3, [pc, #60]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4a0e      	ldr	r2, [pc, #56]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 8019918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801991c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801991e:	f7f8 fff1 	bl	8012904 <HAL_GetTick>
 8019922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8019924:	e008      	b.n	8019938 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8019926:	f7f8 ffed 	bl	8012904 <HAL_GetTick>
 801992a:	4602      	mov	r2, r0
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	1ad3      	subs	r3, r2, r3
 8019930:	2b02      	cmp	r3, #2
 8019932:	d901      	bls.n	8019938 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8019934:	2303      	movs	r3, #3
 8019936:	e006      	b.n	8019946 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8019938:	4b05      	ldr	r3, [pc, #20]	@ (8019950 <RCCEx_PLL3_Config+0x15c>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019940:	2b00      	cmp	r3, #0
 8019942:	d0f0      	beq.n	8019926 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8019944:	7bfb      	ldrb	r3, [r7, #15]
}
 8019946:	4618      	mov	r0, r3
 8019948:	3710      	adds	r7, #16
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	58024400 	.word	0x58024400
 8019954:	ffff0007 	.word	0xffff0007

08019958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b082      	sub	sp, #8
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d101      	bne.n	801996a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019966:	2301      	movs	r3, #1
 8019968:	e042      	b.n	80199f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019970:	2b00      	cmp	r3, #0
 8019972:	d106      	bne.n	8019982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2200      	movs	r2, #0
 8019978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801997c:	6878      	ldr	r0, [r7, #4]
 801997e:	f7f8 fbcd 	bl	801211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2224      	movs	r2, #36	@ 0x24
 8019986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f022 0201 	bic.w	r2, r2, #1
 8019998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d002      	beq.n	80199a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80199a2:	6878      	ldr	r0, [r7, #4]
 80199a4:	f001 fa14 	bl	801add0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f000 fca9 	bl	801a300 <UART_SetConfig>
 80199ae:	4603      	mov	r3, r0
 80199b0:	2b01      	cmp	r3, #1
 80199b2:	d101      	bne.n	80199b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80199b4:	2301      	movs	r3, #1
 80199b6:	e01b      	b.n	80199f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	685a      	ldr	r2, [r3, #4]
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80199c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	689a      	ldr	r2, [r3, #8]
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80199d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	681a      	ldr	r2, [r3, #0]
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	f042 0201 	orr.w	r2, r2, #1
 80199e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f001 fa93 	bl	801af14 <UART_CheckIdleState>
 80199ee:	4603      	mov	r3, r0
}
 80199f0:	4618      	mov	r0, r3
 80199f2:	3708      	adds	r7, #8
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b08a      	sub	sp, #40	@ 0x28
 80199fc:	af02      	add	r7, sp, #8
 80199fe:	60f8      	str	r0, [r7, #12]
 8019a00:	60b9      	str	r1, [r7, #8]
 8019a02:	603b      	str	r3, [r7, #0]
 8019a04:	4613      	mov	r3, r2
 8019a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019a0e:	2b20      	cmp	r3, #32
 8019a10:	d17b      	bne.n	8019b0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8019a12:	68bb      	ldr	r3, [r7, #8]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d002      	beq.n	8019a1e <HAL_UART_Transmit+0x26>
 8019a18:	88fb      	ldrh	r3, [r7, #6]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d101      	bne.n	8019a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8019a1e:	2301      	movs	r3, #1
 8019a20:	e074      	b.n	8019b0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	2200      	movs	r2, #0
 8019a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	2221      	movs	r2, #33	@ 0x21
 8019a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019a32:	f7f8 ff67 	bl	8012904 <HAL_GetTick>
 8019a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	88fa      	ldrh	r2, [r7, #6]
 8019a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	88fa      	ldrh	r2, [r7, #6]
 8019a44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	689b      	ldr	r3, [r3, #8]
 8019a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a50:	d108      	bne.n	8019a64 <HAL_UART_Transmit+0x6c>
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	691b      	ldr	r3, [r3, #16]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d104      	bne.n	8019a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	61bb      	str	r3, [r7, #24]
 8019a62:	e003      	b.n	8019a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019a6c:	e030      	b.n	8019ad0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	9300      	str	r3, [sp, #0]
 8019a72:	697b      	ldr	r3, [r7, #20]
 8019a74:	2200      	movs	r2, #0
 8019a76:	2180      	movs	r1, #128	@ 0x80
 8019a78:	68f8      	ldr	r0, [r7, #12]
 8019a7a:	f001 faf5 	bl	801b068 <UART_WaitOnFlagUntilTimeout>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d005      	beq.n	8019a90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2220      	movs	r2, #32
 8019a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8019a8c:	2303      	movs	r3, #3
 8019a8e:	e03d      	b.n	8019b0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d10b      	bne.n	8019aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019a96:	69bb      	ldr	r3, [r7, #24]
 8019a98:	881b      	ldrh	r3, [r3, #0]
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019aa6:	69bb      	ldr	r3, [r7, #24]
 8019aa8:	3302      	adds	r3, #2
 8019aaa:	61bb      	str	r3, [r7, #24]
 8019aac:	e007      	b.n	8019abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019aae:	69fb      	ldr	r3, [r7, #28]
 8019ab0:	781a      	ldrb	r2, [r3, #0]
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019ab8:	69fb      	ldr	r3, [r7, #28]
 8019aba:	3301      	adds	r3, #1
 8019abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ac4:	b29b      	uxth	r3, r3
 8019ac6:	3b01      	subs	r3, #1
 8019ac8:	b29a      	uxth	r2, r3
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d1c8      	bne.n	8019a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019adc:	683b      	ldr	r3, [r7, #0]
 8019ade:	9300      	str	r3, [sp, #0]
 8019ae0:	697b      	ldr	r3, [r7, #20]
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	2140      	movs	r1, #64	@ 0x40
 8019ae6:	68f8      	ldr	r0, [r7, #12]
 8019ae8:	f001 fabe 	bl	801b068 <UART_WaitOnFlagUntilTimeout>
 8019aec:	4603      	mov	r3, r0
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d005      	beq.n	8019afe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	2220      	movs	r2, #32
 8019af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8019afa:	2303      	movs	r3, #3
 8019afc:	e006      	b.n	8019b0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	2220      	movs	r2, #32
 8019b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8019b06:	2300      	movs	r3, #0
 8019b08:	e000      	b.n	8019b0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8019b0a:	2302      	movs	r3, #2
  }
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3720      	adds	r7, #32
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b0ba      	sub	sp, #232	@ 0xe8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	69db      	ldr	r3, [r3, #28]
 8019b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	689b      	ldr	r3, [r3, #8]
 8019b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8019b3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8019b42:	4013      	ands	r3, r2
 8019b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8019b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d11b      	bne.n	8019b88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019b54:	f003 0320 	and.w	r3, r3, #32
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d015      	beq.n	8019b88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019b60:	f003 0320 	and.w	r3, r3, #32
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d105      	bne.n	8019b74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d009      	beq.n	8019b88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	f000 8393 	beq.w	801a2a4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019b82:	6878      	ldr	r0, [r7, #4]
 8019b84:	4798      	blx	r3
      }
      return;
 8019b86:	e38d      	b.n	801a2a4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	f000 8123 	beq.w	8019dd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8019b92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8019b96:	4b8d      	ldr	r3, [pc, #564]	@ (8019dcc <HAL_UART_IRQHandler+0x2b8>)
 8019b98:	4013      	ands	r3, r2
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d106      	bne.n	8019bac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8019b9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8019ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8019dd0 <HAL_UART_IRQHandler+0x2bc>)
 8019ba4:	4013      	ands	r3, r2
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	f000 8116 	beq.w	8019dd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019bb0:	f003 0301 	and.w	r3, r3, #1
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d011      	beq.n	8019bdc <HAL_UART_IRQHandler+0xc8>
 8019bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d00b      	beq.n	8019bdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	2201      	movs	r2, #1
 8019bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019bd2:	f043 0201 	orr.w	r2, r3, #1
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019be0:	f003 0302 	and.w	r3, r3, #2
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d011      	beq.n	8019c0c <HAL_UART_IRQHandler+0xf8>
 8019be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019bec:	f003 0301 	and.w	r3, r3, #1
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d00b      	beq.n	8019c0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	2202      	movs	r2, #2
 8019bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c02:	f043 0204 	orr.w	r2, r3, #4
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019c10:	f003 0304 	and.w	r3, r3, #4
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d011      	beq.n	8019c3c <HAL_UART_IRQHandler+0x128>
 8019c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019c1c:	f003 0301 	and.w	r3, r3, #1
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d00b      	beq.n	8019c3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	2204      	movs	r2, #4
 8019c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c32:	f043 0202 	orr.w	r2, r3, #2
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019c40:	f003 0308 	and.w	r3, r3, #8
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d017      	beq.n	8019c78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019c4c:	f003 0320 	and.w	r3, r3, #32
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d105      	bne.n	8019c60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8019c54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8019c58:	4b5c      	ldr	r3, [pc, #368]	@ (8019dcc <HAL_UART_IRQHandler+0x2b8>)
 8019c5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d00b      	beq.n	8019c78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	2208      	movs	r2, #8
 8019c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c6e:	f043 0208 	orr.w	r2, r3, #8
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d012      	beq.n	8019caa <HAL_UART_IRQHandler+0x196>
 8019c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d00c      	beq.n	8019caa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ca0:	f043 0220 	orr.w	r2, r3, #32
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	f000 82f9 	beq.w	801a2a8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019cba:	f003 0320 	and.w	r3, r3, #32
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d013      	beq.n	8019cea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019cc6:	f003 0320 	and.w	r3, r3, #32
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d105      	bne.n	8019cda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d007      	beq.n	8019cea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d003      	beq.n	8019cea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019ce6:	6878      	ldr	r0, [r7, #4]
 8019ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	689b      	ldr	r3, [r3, #8]
 8019cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019cfe:	2b40      	cmp	r3, #64	@ 0x40
 8019d00:	d005      	beq.n	8019d0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019d06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d054      	beq.n	8019db8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019d0e:	6878      	ldr	r0, [r7, #4]
 8019d10:	f001 fa18 	bl	801b144 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	689b      	ldr	r3, [r3, #8]
 8019d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019d1e:	2b40      	cmp	r3, #64	@ 0x40
 8019d20:	d146      	bne.n	8019db0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	3308      	adds	r3, #8
 8019d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019d30:	e853 3f00 	ldrex	r3, [r3]
 8019d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8019d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	3308      	adds	r3, #8
 8019d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8019d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8019d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8019d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8019d5e:	e841 2300 	strex	r3, r2, [r1]
 8019d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8019d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d1d9      	bne.n	8019d22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d017      	beq.n	8019da8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d7e:	4a15      	ldr	r2, [pc, #84]	@ (8019dd4 <HAL_UART_IRQHandler+0x2c0>)
 8019d80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7f9 fa39 	bl	8013200 <HAL_DMA_Abort_IT>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d019      	beq.n	8019dc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8019da2:	4610      	mov	r0, r2
 8019da4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019da6:	e00f      	b.n	8019dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f000 fa93 	bl	801a2d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019dae:	e00b      	b.n	8019dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019db0:	6878      	ldr	r0, [r7, #4]
 8019db2:	f000 fa8f 	bl	801a2d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019db6:	e007      	b.n	8019dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	f000 fa8b 	bl	801a2d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8019dc6:	e26f      	b.n	801a2a8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019dc8:	bf00      	nop
    return;
 8019dca:	e26d      	b.n	801a2a8 <HAL_UART_IRQHandler+0x794>
 8019dcc:	10000001 	.word	0x10000001
 8019dd0:	04000120 	.word	0x04000120
 8019dd4:	0801b211 	.word	0x0801b211

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ddc:	2b01      	cmp	r3, #1
 8019dde:	f040 8203 	bne.w	801a1e8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019de6:	f003 0310 	and.w	r3, r3, #16
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	f000 81fc 	beq.w	801a1e8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019df4:	f003 0310 	and.w	r3, r3, #16
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	f000 81f5 	beq.w	801a1e8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	2210      	movs	r2, #16
 8019e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	689b      	ldr	r3, [r3, #8]
 8019e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019e10:	2b40      	cmp	r3, #64	@ 0x40
 8019e12:	f040 816d 	bne.w	801a0f0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4aa4      	ldr	r2, [pc, #656]	@ (801a0b0 <HAL_UART_IRQHandler+0x59c>)
 8019e20:	4293      	cmp	r3, r2
 8019e22:	d068      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	4aa1      	ldr	r2, [pc, #644]	@ (801a0b4 <HAL_UART_IRQHandler+0x5a0>)
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	d061      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	4a9f      	ldr	r2, [pc, #636]	@ (801a0b8 <HAL_UART_IRQHandler+0x5a4>)
 8019e3c:	4293      	cmp	r3, r2
 8019e3e:	d05a      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	4a9c      	ldr	r2, [pc, #624]	@ (801a0bc <HAL_UART_IRQHandler+0x5a8>)
 8019e4a:	4293      	cmp	r3, r2
 8019e4c:	d053      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	4a9a      	ldr	r2, [pc, #616]	@ (801a0c0 <HAL_UART_IRQHandler+0x5ac>)
 8019e58:	4293      	cmp	r3, r2
 8019e5a:	d04c      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4a97      	ldr	r2, [pc, #604]	@ (801a0c4 <HAL_UART_IRQHandler+0x5b0>)
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d045      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	4a95      	ldr	r2, [pc, #596]	@ (801a0c8 <HAL_UART_IRQHandler+0x5b4>)
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d03e      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	4a92      	ldr	r2, [pc, #584]	@ (801a0cc <HAL_UART_IRQHandler+0x5b8>)
 8019e82:	4293      	cmp	r3, r2
 8019e84:	d037      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	4a90      	ldr	r2, [pc, #576]	@ (801a0d0 <HAL_UART_IRQHandler+0x5bc>)
 8019e90:	4293      	cmp	r3, r2
 8019e92:	d030      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	4a8d      	ldr	r2, [pc, #564]	@ (801a0d4 <HAL_UART_IRQHandler+0x5c0>)
 8019e9e:	4293      	cmp	r3, r2
 8019ea0:	d029      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4a8b      	ldr	r2, [pc, #556]	@ (801a0d8 <HAL_UART_IRQHandler+0x5c4>)
 8019eac:	4293      	cmp	r3, r2
 8019eae:	d022      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	4a88      	ldr	r2, [pc, #544]	@ (801a0dc <HAL_UART_IRQHandler+0x5c8>)
 8019eba:	4293      	cmp	r3, r2
 8019ebc:	d01b      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	4a86      	ldr	r2, [pc, #536]	@ (801a0e0 <HAL_UART_IRQHandler+0x5cc>)
 8019ec8:	4293      	cmp	r3, r2
 8019eca:	d014      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	4a83      	ldr	r2, [pc, #524]	@ (801a0e4 <HAL_UART_IRQHandler+0x5d0>)
 8019ed6:	4293      	cmp	r3, r2
 8019ed8:	d00d      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	4a81      	ldr	r2, [pc, #516]	@ (801a0e8 <HAL_UART_IRQHandler+0x5d4>)
 8019ee4:	4293      	cmp	r3, r2
 8019ee6:	d006      	beq.n	8019ef6 <HAL_UART_IRQHandler+0x3e2>
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	4a7e      	ldr	r2, [pc, #504]	@ (801a0ec <HAL_UART_IRQHandler+0x5d8>)
 8019ef2:	4293      	cmp	r3, r2
 8019ef4:	d106      	bne.n	8019f04 <HAL_UART_IRQHandler+0x3f0>
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	e005      	b.n	8019f10 <HAL_UART_IRQHandler+0x3fc>
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	685b      	ldr	r3, [r3, #4]
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 80ad 	beq.w	801a078 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019f24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	f080 80a5 	bcs.w	801a078 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8019f34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f3e:	69db      	ldr	r3, [r3, #28]
 8019f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019f44:	f000 8087 	beq.w	801a056 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019f54:	e853 3f00 	ldrex	r3, [r3]
 8019f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8019f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8019f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	461a      	mov	r2, r3
 8019f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8019f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019f76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8019f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019f82:	e841 2300 	strex	r3, r2, [r1]
 8019f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8019f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1da      	bne.n	8019f48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	3308      	adds	r3, #8
 8019f98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019f9c:	e853 3f00 	ldrex	r3, [r3]
 8019fa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8019fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019fa4:	f023 0301 	bic.w	r3, r3, #1
 8019fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	3308      	adds	r3, #8
 8019fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8019fb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8019fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8019fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8019fc2:	e841 2300 	strex	r3, r2, [r1]
 8019fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d1e1      	bne.n	8019f92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	3308      	adds	r3, #8
 8019fd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019fd8:	e853 3f00 	ldrex	r3, [r3]
 8019fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8019fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	3308      	adds	r3, #8
 8019fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8019ff2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8019ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019ff8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8019ffa:	e841 2300 	strex	r3, r2, [r1]
 8019ffe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a002:	2b00      	cmp	r3, #0
 801a004:	d1e3      	bne.n	8019fce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	2220      	movs	r2, #32
 801a00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2200      	movs	r2, #0
 801a012:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a01c:	e853 3f00 	ldrex	r3, [r3]
 801a020:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a024:	f023 0310 	bic.w	r3, r3, #16
 801a028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	461a      	mov	r2, r3
 801a032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a036:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a038:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a03a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a03c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a03e:	e841 2300 	strex	r3, r2, [r1]
 801a042:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a046:	2b00      	cmp	r3, #0
 801a048:	d1e4      	bne.n	801a014 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a050:	4618      	mov	r0, r3
 801a052:	f7f8 fdb7 	bl	8012bc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	2202      	movs	r2, #2
 801a05a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a068:	b29b      	uxth	r3, r3
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	4619      	mov	r1, r3
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f000 f939 	bl	801a2e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801a076:	e119      	b.n	801a2ac <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801a082:	429a      	cmp	r2, r3
 801a084:	f040 8112 	bne.w	801a2ac <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a08e:	69db      	ldr	r3, [r3, #28]
 801a090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a094:	f040 810a 	bne.w	801a2ac <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2202      	movs	r2, #2
 801a09c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a0a4:	4619      	mov	r1, r3
 801a0a6:	6878      	ldr	r0, [r7, #4]
 801a0a8:	f000 f91e 	bl	801a2e8 <HAL_UARTEx_RxEventCallback>
      return;
 801a0ac:	e0fe      	b.n	801a2ac <HAL_UART_IRQHandler+0x798>
 801a0ae:	bf00      	nop
 801a0b0:	40020010 	.word	0x40020010
 801a0b4:	40020028 	.word	0x40020028
 801a0b8:	40020040 	.word	0x40020040
 801a0bc:	40020058 	.word	0x40020058
 801a0c0:	40020070 	.word	0x40020070
 801a0c4:	40020088 	.word	0x40020088
 801a0c8:	400200a0 	.word	0x400200a0
 801a0cc:	400200b8 	.word	0x400200b8
 801a0d0:	40020410 	.word	0x40020410
 801a0d4:	40020428 	.word	0x40020428
 801a0d8:	40020440 	.word	0x40020440
 801a0dc:	40020458 	.word	0x40020458
 801a0e0:	40020470 	.word	0x40020470
 801a0e4:	40020488 	.word	0x40020488
 801a0e8:	400204a0 	.word	0x400204a0
 801a0ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	1ad3      	subs	r3, r2, r3
 801a100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	f000 80cf 	beq.w	801a2b0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801a112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801a116:	2b00      	cmp	r3, #0
 801a118:	f000 80ca 	beq.w	801a2b0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a124:	e853 3f00 	ldrex	r3, [r3]
 801a128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a12c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	461a      	mov	r2, r3
 801a13a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801a13e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a140:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a146:	e841 2300 	strex	r3, r2, [r1]
 801a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d1e4      	bne.n	801a11c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	3308      	adds	r3, #8
 801a158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a15c:	e853 3f00 	ldrex	r3, [r3]
 801a160:	623b      	str	r3, [r7, #32]
   return(result);
 801a162:	6a3a      	ldr	r2, [r7, #32]
 801a164:	4b55      	ldr	r3, [pc, #340]	@ (801a2bc <HAL_UART_IRQHandler+0x7a8>)
 801a166:	4013      	ands	r3, r2
 801a168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	3308      	adds	r3, #8
 801a172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801a176:	633a      	str	r2, [r7, #48]	@ 0x30
 801a178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a17e:	e841 2300 	strex	r3, r2, [r1]
 801a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a186:	2b00      	cmp	r3, #0
 801a188:	d1e3      	bne.n	801a152 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	2220      	movs	r2, #32
 801a18e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	2200      	movs	r2, #0
 801a196:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2200      	movs	r2, #0
 801a19c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1a4:	693b      	ldr	r3, [r7, #16]
 801a1a6:	e853 3f00 	ldrex	r3, [r3]
 801a1aa:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	f023 0310 	bic.w	r3, r3, #16
 801a1b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801a1c0:	61fb      	str	r3, [r7, #28]
 801a1c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1c4:	69b9      	ldr	r1, [r7, #24]
 801a1c6:	69fa      	ldr	r2, [r7, #28]
 801a1c8:	e841 2300 	strex	r3, r2, [r1]
 801a1cc:	617b      	str	r3, [r7, #20]
   return(result);
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1e4      	bne.n	801a19e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	2202      	movs	r2, #2
 801a1d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801a1da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801a1de:	4619      	mov	r1, r3
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f000 f881 	bl	801a2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a1e6:	e063      	b.n	801a2b0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801a1ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d00e      	beq.n	801a212 <HAL_UART_IRQHandler+0x6fe>
 801a1f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801a1f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d008      	beq.n	801a212 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801a208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801a20a:	6878      	ldr	r0, [r7, #4]
 801a20c:	f001 f83d 	bl	801b28a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a210:	e051      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801a216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d014      	beq.n	801a248 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801a21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801a222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a226:	2b00      	cmp	r3, #0
 801a228:	d105      	bne.n	801a236 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801a22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801a22e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a232:	2b00      	cmp	r3, #0
 801a234:	d008      	beq.n	801a248 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d03a      	beq.n	801a2b4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a242:	6878      	ldr	r0, [r7, #4]
 801a244:	4798      	blx	r3
    }
    return;
 801a246:	e035      	b.n	801a2b4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801a24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a250:	2b00      	cmp	r3, #0
 801a252:	d009      	beq.n	801a268 <HAL_UART_IRQHandler+0x754>
 801a254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801a258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d003      	beq.n	801a268 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f000 ffe7 	bl	801b234 <UART_EndTransmit_IT>
    return;
 801a266:	e026      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801a268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801a26c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a270:	2b00      	cmp	r3, #0
 801a272:	d009      	beq.n	801a288 <HAL_UART_IRQHandler+0x774>
 801a274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801a278:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d003      	beq.n	801a288 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f001 f816 	bl	801b2b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a286:	e016      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801a28c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801a290:	2b00      	cmp	r3, #0
 801a292:	d010      	beq.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
 801a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801a298:	2b00      	cmp	r3, #0
 801a29a:	da0c      	bge.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f000 fffe 	bl	801b29e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a2a2:	e008      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 801a2a4:	bf00      	nop
 801a2a6:	e006      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 801a2a8:	bf00      	nop
 801a2aa:	e004      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 801a2ac:	bf00      	nop
 801a2ae:	e002      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 801a2b0:	bf00      	nop
 801a2b2:	e000      	b.n	801a2b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 801a2b4:	bf00      	nop
  }
}
 801a2b6:	37e8      	adds	r7, #232	@ 0xe8
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}
 801a2bc:	effffffe 	.word	0xeffffffe

0801a2c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b083      	sub	sp, #12
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a2c8:	bf00      	nop
 801a2ca:	370c      	adds	r7, #12
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d2:	4770      	bx	lr

0801a2d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b083      	sub	sp, #12
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801a2dc:	bf00      	nop
 801a2de:	370c      	adds	r7, #12
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e6:	4770      	bx	lr

0801a2e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a2e8:	b480      	push	{r7}
 801a2ea:	b083      	sub	sp, #12
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
 801a2f0:	460b      	mov	r3, r1
 801a2f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a2f4:	bf00      	nop
 801a2f6:	370c      	adds	r7, #12
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fe:	4770      	bx	lr

0801a300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a304:	b092      	sub	sp, #72	@ 0x48
 801a306:	af00      	add	r7, sp, #0
 801a308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a30a:	2300      	movs	r3, #0
 801a30c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a310:	697b      	ldr	r3, [r7, #20]
 801a312:	689a      	ldr	r2, [r3, #8]
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	691b      	ldr	r3, [r3, #16]
 801a318:	431a      	orrs	r2, r3
 801a31a:	697b      	ldr	r3, [r7, #20]
 801a31c:	695b      	ldr	r3, [r3, #20]
 801a31e:	431a      	orrs	r2, r3
 801a320:	697b      	ldr	r3, [r7, #20]
 801a322:	69db      	ldr	r3, [r3, #28]
 801a324:	4313      	orrs	r3, r2
 801a326:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a328:	697b      	ldr	r3, [r7, #20]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	681a      	ldr	r2, [r3, #0]
 801a32e:	4bbe      	ldr	r3, [pc, #760]	@ (801a628 <UART_SetConfig+0x328>)
 801a330:	4013      	ands	r3, r2
 801a332:	697a      	ldr	r2, [r7, #20]
 801a334:	6812      	ldr	r2, [r2, #0]
 801a336:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a338:	430b      	orrs	r3, r1
 801a33a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	68da      	ldr	r2, [r3, #12]
 801a34a:	697b      	ldr	r3, [r7, #20]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	430a      	orrs	r2, r1
 801a350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	699b      	ldr	r3, [r3, #24]
 801a356:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a358:	697b      	ldr	r3, [r7, #20]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	4ab3      	ldr	r2, [pc, #716]	@ (801a62c <UART_SetConfig+0x32c>)
 801a35e:	4293      	cmp	r3, r2
 801a360:	d004      	beq.n	801a36c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	6a1b      	ldr	r3, [r3, #32]
 801a366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a368:	4313      	orrs	r3, r2
 801a36a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	689a      	ldr	r2, [r3, #8]
 801a372:	4baf      	ldr	r3, [pc, #700]	@ (801a630 <UART_SetConfig+0x330>)
 801a374:	4013      	ands	r3, r2
 801a376:	697a      	ldr	r2, [r7, #20]
 801a378:	6812      	ldr	r2, [r2, #0]
 801a37a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a37c:	430b      	orrs	r3, r1
 801a37e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a386:	f023 010f 	bic.w	r1, r3, #15
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	430a      	orrs	r2, r1
 801a394:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	4aa6      	ldr	r2, [pc, #664]	@ (801a634 <UART_SetConfig+0x334>)
 801a39c:	4293      	cmp	r3, r2
 801a39e:	d177      	bne.n	801a490 <UART_SetConfig+0x190>
 801a3a0:	4ba5      	ldr	r3, [pc, #660]	@ (801a638 <UART_SetConfig+0x338>)
 801a3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a3a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a3a8:	2b28      	cmp	r3, #40	@ 0x28
 801a3aa:	d86d      	bhi.n	801a488 <UART_SetConfig+0x188>
 801a3ac:	a201      	add	r2, pc, #4	@ (adr r2, 801a3b4 <UART_SetConfig+0xb4>)
 801a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3b2:	bf00      	nop
 801a3b4:	0801a459 	.word	0x0801a459
 801a3b8:	0801a489 	.word	0x0801a489
 801a3bc:	0801a489 	.word	0x0801a489
 801a3c0:	0801a489 	.word	0x0801a489
 801a3c4:	0801a489 	.word	0x0801a489
 801a3c8:	0801a489 	.word	0x0801a489
 801a3cc:	0801a489 	.word	0x0801a489
 801a3d0:	0801a489 	.word	0x0801a489
 801a3d4:	0801a461 	.word	0x0801a461
 801a3d8:	0801a489 	.word	0x0801a489
 801a3dc:	0801a489 	.word	0x0801a489
 801a3e0:	0801a489 	.word	0x0801a489
 801a3e4:	0801a489 	.word	0x0801a489
 801a3e8:	0801a489 	.word	0x0801a489
 801a3ec:	0801a489 	.word	0x0801a489
 801a3f0:	0801a489 	.word	0x0801a489
 801a3f4:	0801a469 	.word	0x0801a469
 801a3f8:	0801a489 	.word	0x0801a489
 801a3fc:	0801a489 	.word	0x0801a489
 801a400:	0801a489 	.word	0x0801a489
 801a404:	0801a489 	.word	0x0801a489
 801a408:	0801a489 	.word	0x0801a489
 801a40c:	0801a489 	.word	0x0801a489
 801a410:	0801a489 	.word	0x0801a489
 801a414:	0801a471 	.word	0x0801a471
 801a418:	0801a489 	.word	0x0801a489
 801a41c:	0801a489 	.word	0x0801a489
 801a420:	0801a489 	.word	0x0801a489
 801a424:	0801a489 	.word	0x0801a489
 801a428:	0801a489 	.word	0x0801a489
 801a42c:	0801a489 	.word	0x0801a489
 801a430:	0801a489 	.word	0x0801a489
 801a434:	0801a479 	.word	0x0801a479
 801a438:	0801a489 	.word	0x0801a489
 801a43c:	0801a489 	.word	0x0801a489
 801a440:	0801a489 	.word	0x0801a489
 801a444:	0801a489 	.word	0x0801a489
 801a448:	0801a489 	.word	0x0801a489
 801a44c:	0801a489 	.word	0x0801a489
 801a450:	0801a489 	.word	0x0801a489
 801a454:	0801a481 	.word	0x0801a481
 801a458:	2301      	movs	r3, #1
 801a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a45e:	e222      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a460:	2304      	movs	r3, #4
 801a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a466:	e21e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a468:	2308      	movs	r3, #8
 801a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a46e:	e21a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a470:	2310      	movs	r3, #16
 801a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a476:	e216      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a478:	2320      	movs	r3, #32
 801a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a47e:	e212      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a480:	2340      	movs	r3, #64	@ 0x40
 801a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a486:	e20e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a488:	2380      	movs	r3, #128	@ 0x80
 801a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a48e:	e20a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a490:	697b      	ldr	r3, [r7, #20]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	4a69      	ldr	r2, [pc, #420]	@ (801a63c <UART_SetConfig+0x33c>)
 801a496:	4293      	cmp	r3, r2
 801a498:	d130      	bne.n	801a4fc <UART_SetConfig+0x1fc>
 801a49a:	4b67      	ldr	r3, [pc, #412]	@ (801a638 <UART_SetConfig+0x338>)
 801a49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a49e:	f003 0307 	and.w	r3, r3, #7
 801a4a2:	2b05      	cmp	r3, #5
 801a4a4:	d826      	bhi.n	801a4f4 <UART_SetConfig+0x1f4>
 801a4a6:	a201      	add	r2, pc, #4	@ (adr r2, 801a4ac <UART_SetConfig+0x1ac>)
 801a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4ac:	0801a4c5 	.word	0x0801a4c5
 801a4b0:	0801a4cd 	.word	0x0801a4cd
 801a4b4:	0801a4d5 	.word	0x0801a4d5
 801a4b8:	0801a4dd 	.word	0x0801a4dd
 801a4bc:	0801a4e5 	.word	0x0801a4e5
 801a4c0:	0801a4ed 	.word	0x0801a4ed
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4ca:	e1ec      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4cc:	2304      	movs	r3, #4
 801a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4d2:	e1e8      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4d4:	2308      	movs	r3, #8
 801a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4da:	e1e4      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4dc:	2310      	movs	r3, #16
 801a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4e2:	e1e0      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4e4:	2320      	movs	r3, #32
 801a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4ea:	e1dc      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4ec:	2340      	movs	r3, #64	@ 0x40
 801a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4f2:	e1d8      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4f4:	2380      	movs	r3, #128	@ 0x80
 801a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a4fa:	e1d4      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a4fc:	697b      	ldr	r3, [r7, #20]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	4a4f      	ldr	r2, [pc, #316]	@ (801a640 <UART_SetConfig+0x340>)
 801a502:	4293      	cmp	r3, r2
 801a504:	d130      	bne.n	801a568 <UART_SetConfig+0x268>
 801a506:	4b4c      	ldr	r3, [pc, #304]	@ (801a638 <UART_SetConfig+0x338>)
 801a508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a50a:	f003 0307 	and.w	r3, r3, #7
 801a50e:	2b05      	cmp	r3, #5
 801a510:	d826      	bhi.n	801a560 <UART_SetConfig+0x260>
 801a512:	a201      	add	r2, pc, #4	@ (adr r2, 801a518 <UART_SetConfig+0x218>)
 801a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a518:	0801a531 	.word	0x0801a531
 801a51c:	0801a539 	.word	0x0801a539
 801a520:	0801a541 	.word	0x0801a541
 801a524:	0801a549 	.word	0x0801a549
 801a528:	0801a551 	.word	0x0801a551
 801a52c:	0801a559 	.word	0x0801a559
 801a530:	2300      	movs	r3, #0
 801a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a536:	e1b6      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a538:	2304      	movs	r3, #4
 801a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a53e:	e1b2      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a540:	2308      	movs	r3, #8
 801a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a546:	e1ae      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a548:	2310      	movs	r3, #16
 801a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a54e:	e1aa      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a550:	2320      	movs	r3, #32
 801a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a556:	e1a6      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a558:	2340      	movs	r3, #64	@ 0x40
 801a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a55e:	e1a2      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a560:	2380      	movs	r3, #128	@ 0x80
 801a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a566:	e19e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a568:	697b      	ldr	r3, [r7, #20]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	4a35      	ldr	r2, [pc, #212]	@ (801a644 <UART_SetConfig+0x344>)
 801a56e:	4293      	cmp	r3, r2
 801a570:	d130      	bne.n	801a5d4 <UART_SetConfig+0x2d4>
 801a572:	4b31      	ldr	r3, [pc, #196]	@ (801a638 <UART_SetConfig+0x338>)
 801a574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a576:	f003 0307 	and.w	r3, r3, #7
 801a57a:	2b05      	cmp	r3, #5
 801a57c:	d826      	bhi.n	801a5cc <UART_SetConfig+0x2cc>
 801a57e:	a201      	add	r2, pc, #4	@ (adr r2, 801a584 <UART_SetConfig+0x284>)
 801a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a584:	0801a59d 	.word	0x0801a59d
 801a588:	0801a5a5 	.word	0x0801a5a5
 801a58c:	0801a5ad 	.word	0x0801a5ad
 801a590:	0801a5b5 	.word	0x0801a5b5
 801a594:	0801a5bd 	.word	0x0801a5bd
 801a598:	0801a5c5 	.word	0x0801a5c5
 801a59c:	2300      	movs	r3, #0
 801a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5a2:	e180      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5a4:	2304      	movs	r3, #4
 801a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5aa:	e17c      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5ac:	2308      	movs	r3, #8
 801a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5b2:	e178      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5b4:	2310      	movs	r3, #16
 801a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5ba:	e174      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5bc:	2320      	movs	r3, #32
 801a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5c2:	e170      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5c4:	2340      	movs	r3, #64	@ 0x40
 801a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5ca:	e16c      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5cc:	2380      	movs	r3, #128	@ 0x80
 801a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a5d2:	e168      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a5d4:	697b      	ldr	r3, [r7, #20]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4a1b      	ldr	r2, [pc, #108]	@ (801a648 <UART_SetConfig+0x348>)
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	d142      	bne.n	801a664 <UART_SetConfig+0x364>
 801a5de:	4b16      	ldr	r3, [pc, #88]	@ (801a638 <UART_SetConfig+0x338>)
 801a5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a5e2:	f003 0307 	and.w	r3, r3, #7
 801a5e6:	2b05      	cmp	r3, #5
 801a5e8:	d838      	bhi.n	801a65c <UART_SetConfig+0x35c>
 801a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 801a5f0 <UART_SetConfig+0x2f0>)
 801a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5f0:	0801a609 	.word	0x0801a609
 801a5f4:	0801a611 	.word	0x0801a611
 801a5f8:	0801a619 	.word	0x0801a619
 801a5fc:	0801a621 	.word	0x0801a621
 801a600:	0801a64d 	.word	0x0801a64d
 801a604:	0801a655 	.word	0x0801a655
 801a608:	2300      	movs	r3, #0
 801a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a60e:	e14a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a610:	2304      	movs	r3, #4
 801a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a616:	e146      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a618:	2308      	movs	r3, #8
 801a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a61e:	e142      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a620:	2310      	movs	r3, #16
 801a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a626:	e13e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a628:	cfff69f3 	.word	0xcfff69f3
 801a62c:	58000c00 	.word	0x58000c00
 801a630:	11fff4ff 	.word	0x11fff4ff
 801a634:	40011000 	.word	0x40011000
 801a638:	58024400 	.word	0x58024400
 801a63c:	40004400 	.word	0x40004400
 801a640:	40004800 	.word	0x40004800
 801a644:	40004c00 	.word	0x40004c00
 801a648:	40005000 	.word	0x40005000
 801a64c:	2320      	movs	r3, #32
 801a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a652:	e128      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a654:	2340      	movs	r3, #64	@ 0x40
 801a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a65a:	e124      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a65c:	2380      	movs	r3, #128	@ 0x80
 801a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a662:	e120      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	4acb      	ldr	r2, [pc, #812]	@ (801a998 <UART_SetConfig+0x698>)
 801a66a:	4293      	cmp	r3, r2
 801a66c:	d176      	bne.n	801a75c <UART_SetConfig+0x45c>
 801a66e:	4bcb      	ldr	r3, [pc, #812]	@ (801a99c <UART_SetConfig+0x69c>)
 801a670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a676:	2b28      	cmp	r3, #40	@ 0x28
 801a678:	d86c      	bhi.n	801a754 <UART_SetConfig+0x454>
 801a67a:	a201      	add	r2, pc, #4	@ (adr r2, 801a680 <UART_SetConfig+0x380>)
 801a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a680:	0801a725 	.word	0x0801a725
 801a684:	0801a755 	.word	0x0801a755
 801a688:	0801a755 	.word	0x0801a755
 801a68c:	0801a755 	.word	0x0801a755
 801a690:	0801a755 	.word	0x0801a755
 801a694:	0801a755 	.word	0x0801a755
 801a698:	0801a755 	.word	0x0801a755
 801a69c:	0801a755 	.word	0x0801a755
 801a6a0:	0801a72d 	.word	0x0801a72d
 801a6a4:	0801a755 	.word	0x0801a755
 801a6a8:	0801a755 	.word	0x0801a755
 801a6ac:	0801a755 	.word	0x0801a755
 801a6b0:	0801a755 	.word	0x0801a755
 801a6b4:	0801a755 	.word	0x0801a755
 801a6b8:	0801a755 	.word	0x0801a755
 801a6bc:	0801a755 	.word	0x0801a755
 801a6c0:	0801a735 	.word	0x0801a735
 801a6c4:	0801a755 	.word	0x0801a755
 801a6c8:	0801a755 	.word	0x0801a755
 801a6cc:	0801a755 	.word	0x0801a755
 801a6d0:	0801a755 	.word	0x0801a755
 801a6d4:	0801a755 	.word	0x0801a755
 801a6d8:	0801a755 	.word	0x0801a755
 801a6dc:	0801a755 	.word	0x0801a755
 801a6e0:	0801a73d 	.word	0x0801a73d
 801a6e4:	0801a755 	.word	0x0801a755
 801a6e8:	0801a755 	.word	0x0801a755
 801a6ec:	0801a755 	.word	0x0801a755
 801a6f0:	0801a755 	.word	0x0801a755
 801a6f4:	0801a755 	.word	0x0801a755
 801a6f8:	0801a755 	.word	0x0801a755
 801a6fc:	0801a755 	.word	0x0801a755
 801a700:	0801a745 	.word	0x0801a745
 801a704:	0801a755 	.word	0x0801a755
 801a708:	0801a755 	.word	0x0801a755
 801a70c:	0801a755 	.word	0x0801a755
 801a710:	0801a755 	.word	0x0801a755
 801a714:	0801a755 	.word	0x0801a755
 801a718:	0801a755 	.word	0x0801a755
 801a71c:	0801a755 	.word	0x0801a755
 801a720:	0801a74d 	.word	0x0801a74d
 801a724:	2301      	movs	r3, #1
 801a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a72a:	e0bc      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a72c:	2304      	movs	r3, #4
 801a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a732:	e0b8      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a734:	2308      	movs	r3, #8
 801a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a73a:	e0b4      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a73c:	2310      	movs	r3, #16
 801a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a742:	e0b0      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a744:	2320      	movs	r3, #32
 801a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a74a:	e0ac      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a74c:	2340      	movs	r3, #64	@ 0x40
 801a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a752:	e0a8      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a754:	2380      	movs	r3, #128	@ 0x80
 801a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a75a:	e0a4      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	4a8f      	ldr	r2, [pc, #572]	@ (801a9a0 <UART_SetConfig+0x6a0>)
 801a762:	4293      	cmp	r3, r2
 801a764:	d130      	bne.n	801a7c8 <UART_SetConfig+0x4c8>
 801a766:	4b8d      	ldr	r3, [pc, #564]	@ (801a99c <UART_SetConfig+0x69c>)
 801a768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a76a:	f003 0307 	and.w	r3, r3, #7
 801a76e:	2b05      	cmp	r3, #5
 801a770:	d826      	bhi.n	801a7c0 <UART_SetConfig+0x4c0>
 801a772:	a201      	add	r2, pc, #4	@ (adr r2, 801a778 <UART_SetConfig+0x478>)
 801a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a778:	0801a791 	.word	0x0801a791
 801a77c:	0801a799 	.word	0x0801a799
 801a780:	0801a7a1 	.word	0x0801a7a1
 801a784:	0801a7a9 	.word	0x0801a7a9
 801a788:	0801a7b1 	.word	0x0801a7b1
 801a78c:	0801a7b9 	.word	0x0801a7b9
 801a790:	2300      	movs	r3, #0
 801a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a796:	e086      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a798:	2304      	movs	r3, #4
 801a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a79e:	e082      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7a0:	2308      	movs	r3, #8
 801a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a7a6:	e07e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7a8:	2310      	movs	r3, #16
 801a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a7ae:	e07a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7b0:	2320      	movs	r3, #32
 801a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a7b6:	e076      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7b8:	2340      	movs	r3, #64	@ 0x40
 801a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a7be:	e072      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7c0:	2380      	movs	r3, #128	@ 0x80
 801a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a7c6:	e06e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	4a75      	ldr	r2, [pc, #468]	@ (801a9a4 <UART_SetConfig+0x6a4>)
 801a7ce:	4293      	cmp	r3, r2
 801a7d0:	d130      	bne.n	801a834 <UART_SetConfig+0x534>
 801a7d2:	4b72      	ldr	r3, [pc, #456]	@ (801a99c <UART_SetConfig+0x69c>)
 801a7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a7d6:	f003 0307 	and.w	r3, r3, #7
 801a7da:	2b05      	cmp	r3, #5
 801a7dc:	d826      	bhi.n	801a82c <UART_SetConfig+0x52c>
 801a7de:	a201      	add	r2, pc, #4	@ (adr r2, 801a7e4 <UART_SetConfig+0x4e4>)
 801a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7e4:	0801a7fd 	.word	0x0801a7fd
 801a7e8:	0801a805 	.word	0x0801a805
 801a7ec:	0801a80d 	.word	0x0801a80d
 801a7f0:	0801a815 	.word	0x0801a815
 801a7f4:	0801a81d 	.word	0x0801a81d
 801a7f8:	0801a825 	.word	0x0801a825
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a802:	e050      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a804:	2304      	movs	r3, #4
 801a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a80a:	e04c      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a80c:	2308      	movs	r3, #8
 801a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a812:	e048      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a814:	2310      	movs	r3, #16
 801a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a81a:	e044      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a81c:	2320      	movs	r3, #32
 801a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a822:	e040      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a824:	2340      	movs	r3, #64	@ 0x40
 801a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a82a:	e03c      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a82c:	2380      	movs	r3, #128	@ 0x80
 801a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a832:	e038      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	4a5b      	ldr	r2, [pc, #364]	@ (801a9a8 <UART_SetConfig+0x6a8>)
 801a83a:	4293      	cmp	r3, r2
 801a83c:	d130      	bne.n	801a8a0 <UART_SetConfig+0x5a0>
 801a83e:	4b57      	ldr	r3, [pc, #348]	@ (801a99c <UART_SetConfig+0x69c>)
 801a840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a842:	f003 0307 	and.w	r3, r3, #7
 801a846:	2b05      	cmp	r3, #5
 801a848:	d826      	bhi.n	801a898 <UART_SetConfig+0x598>
 801a84a:	a201      	add	r2, pc, #4	@ (adr r2, 801a850 <UART_SetConfig+0x550>)
 801a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a850:	0801a869 	.word	0x0801a869
 801a854:	0801a871 	.word	0x0801a871
 801a858:	0801a879 	.word	0x0801a879
 801a85c:	0801a881 	.word	0x0801a881
 801a860:	0801a889 	.word	0x0801a889
 801a864:	0801a891 	.word	0x0801a891
 801a868:	2302      	movs	r3, #2
 801a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a86e:	e01a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a870:	2304      	movs	r3, #4
 801a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a876:	e016      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a878:	2308      	movs	r3, #8
 801a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a87e:	e012      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a880:	2310      	movs	r3, #16
 801a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a886:	e00e      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a888:	2320      	movs	r3, #32
 801a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a88e:	e00a      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a890:	2340      	movs	r3, #64	@ 0x40
 801a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a896:	e006      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a898:	2380      	movs	r3, #128	@ 0x80
 801a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a89e:	e002      	b.n	801a8a6 <UART_SetConfig+0x5a6>
 801a8a0:	2380      	movs	r3, #128	@ 0x80
 801a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a8a6:	697b      	ldr	r3, [r7, #20]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	4a3f      	ldr	r2, [pc, #252]	@ (801a9a8 <UART_SetConfig+0x6a8>)
 801a8ac:	4293      	cmp	r3, r2
 801a8ae:	f040 80f8 	bne.w	801aaa2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a8b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a8b6:	2b20      	cmp	r3, #32
 801a8b8:	dc46      	bgt.n	801a948 <UART_SetConfig+0x648>
 801a8ba:	2b02      	cmp	r3, #2
 801a8bc:	f2c0 8082 	blt.w	801a9c4 <UART_SetConfig+0x6c4>
 801a8c0:	3b02      	subs	r3, #2
 801a8c2:	2b1e      	cmp	r3, #30
 801a8c4:	d87e      	bhi.n	801a9c4 <UART_SetConfig+0x6c4>
 801a8c6:	a201      	add	r2, pc, #4	@ (adr r2, 801a8cc <UART_SetConfig+0x5cc>)
 801a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8cc:	0801a94f 	.word	0x0801a94f
 801a8d0:	0801a9c5 	.word	0x0801a9c5
 801a8d4:	0801a957 	.word	0x0801a957
 801a8d8:	0801a9c5 	.word	0x0801a9c5
 801a8dc:	0801a9c5 	.word	0x0801a9c5
 801a8e0:	0801a9c5 	.word	0x0801a9c5
 801a8e4:	0801a967 	.word	0x0801a967
 801a8e8:	0801a9c5 	.word	0x0801a9c5
 801a8ec:	0801a9c5 	.word	0x0801a9c5
 801a8f0:	0801a9c5 	.word	0x0801a9c5
 801a8f4:	0801a9c5 	.word	0x0801a9c5
 801a8f8:	0801a9c5 	.word	0x0801a9c5
 801a8fc:	0801a9c5 	.word	0x0801a9c5
 801a900:	0801a9c5 	.word	0x0801a9c5
 801a904:	0801a977 	.word	0x0801a977
 801a908:	0801a9c5 	.word	0x0801a9c5
 801a90c:	0801a9c5 	.word	0x0801a9c5
 801a910:	0801a9c5 	.word	0x0801a9c5
 801a914:	0801a9c5 	.word	0x0801a9c5
 801a918:	0801a9c5 	.word	0x0801a9c5
 801a91c:	0801a9c5 	.word	0x0801a9c5
 801a920:	0801a9c5 	.word	0x0801a9c5
 801a924:	0801a9c5 	.word	0x0801a9c5
 801a928:	0801a9c5 	.word	0x0801a9c5
 801a92c:	0801a9c5 	.word	0x0801a9c5
 801a930:	0801a9c5 	.word	0x0801a9c5
 801a934:	0801a9c5 	.word	0x0801a9c5
 801a938:	0801a9c5 	.word	0x0801a9c5
 801a93c:	0801a9c5 	.word	0x0801a9c5
 801a940:	0801a9c5 	.word	0x0801a9c5
 801a944:	0801a9b7 	.word	0x0801a9b7
 801a948:	2b40      	cmp	r3, #64	@ 0x40
 801a94a:	d037      	beq.n	801a9bc <UART_SetConfig+0x6bc>
 801a94c:	e03a      	b.n	801a9c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801a94e:	f7fe fbe1 	bl	8019114 <HAL_RCCEx_GetD3PCLK1Freq>
 801a952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a954:	e03c      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a95a:	4618      	mov	r0, r3
 801a95c:	f7fe fbf0 	bl	8019140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a964:	e034      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a966:	f107 0318 	add.w	r3, r7, #24
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7fe fd3c 	bl	80193e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a970:	69fb      	ldr	r3, [r7, #28]
 801a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a974:	e02c      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a976:	4b09      	ldr	r3, [pc, #36]	@ (801a99c <UART_SetConfig+0x69c>)
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	f003 0320 	and.w	r3, r3, #32
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d016      	beq.n	801a9b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a982:	4b06      	ldr	r3, [pc, #24]	@ (801a99c <UART_SetConfig+0x69c>)
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	08db      	lsrs	r3, r3, #3
 801a988:	f003 0303 	and.w	r3, r3, #3
 801a98c:	4a07      	ldr	r2, [pc, #28]	@ (801a9ac <UART_SetConfig+0x6ac>)
 801a98e:	fa22 f303 	lsr.w	r3, r2, r3
 801a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a994:	e01c      	b.n	801a9d0 <UART_SetConfig+0x6d0>
 801a996:	bf00      	nop
 801a998:	40011400 	.word	0x40011400
 801a99c:	58024400 	.word	0x58024400
 801a9a0:	40007800 	.word	0x40007800
 801a9a4:	40007c00 	.word	0x40007c00
 801a9a8:	58000c00 	.word	0x58000c00
 801a9ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801a9b0:	4b9d      	ldr	r3, [pc, #628]	@ (801ac28 <UART_SetConfig+0x928>)
 801a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a9b4:	e00c      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a9b6:	4b9d      	ldr	r3, [pc, #628]	@ (801ac2c <UART_SetConfig+0x92c>)
 801a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a9ba:	e009      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a9bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a9c2:	e005      	b.n	801a9d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a9ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	f000 81de 	beq.w	801ad94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9dc:	4a94      	ldr	r2, [pc, #592]	@ (801ac30 <UART_SetConfig+0x930>)
 801a9de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801a9ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	685a      	ldr	r2, [r3, #4]
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	005b      	lsls	r3, r3, #1
 801a9f4:	4413      	add	r3, r2
 801a9f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d305      	bcc.n	801aa08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	685b      	ldr	r3, [r3, #4]
 801aa00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801aa02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d903      	bls.n	801aa10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801aa08:	2301      	movs	r3, #1
 801aa0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801aa0e:	e1c1      	b.n	801ad94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801aa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa12:	2200      	movs	r2, #0
 801aa14:	60bb      	str	r3, [r7, #8]
 801aa16:	60fa      	str	r2, [r7, #12]
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa1c:	4a84      	ldr	r2, [pc, #528]	@ (801ac30 <UART_SetConfig+0x930>)
 801aa1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801aa22:	b29b      	uxth	r3, r3
 801aa24:	2200      	movs	r2, #0
 801aa26:	603b      	str	r3, [r7, #0]
 801aa28:	607a      	str	r2, [r7, #4]
 801aa2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aa2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801aa32:	f7e5 fcad 	bl	8000390 <__aeabi_uldivmod>
 801aa36:	4602      	mov	r2, r0
 801aa38:	460b      	mov	r3, r1
 801aa3a:	4610      	mov	r0, r2
 801aa3c:	4619      	mov	r1, r3
 801aa3e:	f04f 0200 	mov.w	r2, #0
 801aa42:	f04f 0300 	mov.w	r3, #0
 801aa46:	020b      	lsls	r3, r1, #8
 801aa48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801aa4c:	0202      	lsls	r2, r0, #8
 801aa4e:	6979      	ldr	r1, [r7, #20]
 801aa50:	6849      	ldr	r1, [r1, #4]
 801aa52:	0849      	lsrs	r1, r1, #1
 801aa54:	2000      	movs	r0, #0
 801aa56:	460c      	mov	r4, r1
 801aa58:	4605      	mov	r5, r0
 801aa5a:	eb12 0804 	adds.w	r8, r2, r4
 801aa5e:	eb43 0905 	adc.w	r9, r3, r5
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	2200      	movs	r2, #0
 801aa68:	469a      	mov	sl, r3
 801aa6a:	4693      	mov	fp, r2
 801aa6c:	4652      	mov	r2, sl
 801aa6e:	465b      	mov	r3, fp
 801aa70:	4640      	mov	r0, r8
 801aa72:	4649      	mov	r1, r9
 801aa74:	f7e5 fc8c 	bl	8000390 <__aeabi_uldivmod>
 801aa78:	4602      	mov	r2, r0
 801aa7a:	460b      	mov	r3, r1
 801aa7c:	4613      	mov	r3, r2
 801aa7e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801aa86:	d308      	bcc.n	801aa9a <UART_SetConfig+0x79a>
 801aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801aa8e:	d204      	bcs.n	801aa9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa96:	60da      	str	r2, [r3, #12]
 801aa98:	e17c      	b.n	801ad94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801aa9a:	2301      	movs	r3, #1
 801aa9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801aaa0:	e178      	b.n	801ad94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	69db      	ldr	r3, [r3, #28]
 801aaa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801aaaa:	f040 80c5 	bne.w	801ac38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801aaae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801aab2:	2b20      	cmp	r3, #32
 801aab4:	dc48      	bgt.n	801ab48 <UART_SetConfig+0x848>
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	db7b      	blt.n	801abb2 <UART_SetConfig+0x8b2>
 801aaba:	2b20      	cmp	r3, #32
 801aabc:	d879      	bhi.n	801abb2 <UART_SetConfig+0x8b2>
 801aabe:	a201      	add	r2, pc, #4	@ (adr r2, 801aac4 <UART_SetConfig+0x7c4>)
 801aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aac4:	0801ab4f 	.word	0x0801ab4f
 801aac8:	0801ab57 	.word	0x0801ab57
 801aacc:	0801abb3 	.word	0x0801abb3
 801aad0:	0801abb3 	.word	0x0801abb3
 801aad4:	0801ab5f 	.word	0x0801ab5f
 801aad8:	0801abb3 	.word	0x0801abb3
 801aadc:	0801abb3 	.word	0x0801abb3
 801aae0:	0801abb3 	.word	0x0801abb3
 801aae4:	0801ab6f 	.word	0x0801ab6f
 801aae8:	0801abb3 	.word	0x0801abb3
 801aaec:	0801abb3 	.word	0x0801abb3
 801aaf0:	0801abb3 	.word	0x0801abb3
 801aaf4:	0801abb3 	.word	0x0801abb3
 801aaf8:	0801abb3 	.word	0x0801abb3
 801aafc:	0801abb3 	.word	0x0801abb3
 801ab00:	0801abb3 	.word	0x0801abb3
 801ab04:	0801ab7f 	.word	0x0801ab7f
 801ab08:	0801abb3 	.word	0x0801abb3
 801ab0c:	0801abb3 	.word	0x0801abb3
 801ab10:	0801abb3 	.word	0x0801abb3
 801ab14:	0801abb3 	.word	0x0801abb3
 801ab18:	0801abb3 	.word	0x0801abb3
 801ab1c:	0801abb3 	.word	0x0801abb3
 801ab20:	0801abb3 	.word	0x0801abb3
 801ab24:	0801abb3 	.word	0x0801abb3
 801ab28:	0801abb3 	.word	0x0801abb3
 801ab2c:	0801abb3 	.word	0x0801abb3
 801ab30:	0801abb3 	.word	0x0801abb3
 801ab34:	0801abb3 	.word	0x0801abb3
 801ab38:	0801abb3 	.word	0x0801abb3
 801ab3c:	0801abb3 	.word	0x0801abb3
 801ab40:	0801abb3 	.word	0x0801abb3
 801ab44:	0801aba5 	.word	0x0801aba5
 801ab48:	2b40      	cmp	r3, #64	@ 0x40
 801ab4a:	d02e      	beq.n	801abaa <UART_SetConfig+0x8aa>
 801ab4c:	e031      	b.n	801abb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ab4e:	f7fd f8ab 	bl	8017ca8 <HAL_RCC_GetPCLK1Freq>
 801ab52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ab54:	e033      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ab56:	f7fd f8bd 	bl	8017cd4 <HAL_RCC_GetPCLK2Freq>
 801ab5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ab5c:	e02f      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ab5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ab62:	4618      	mov	r0, r3
 801ab64:	f7fe faec 	bl	8019140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab6c:	e027      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ab6e:	f107 0318 	add.w	r3, r7, #24
 801ab72:	4618      	mov	r0, r3
 801ab74:	f7fe fc38 	bl	80193e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ab78:	69fb      	ldr	r3, [r7, #28]
 801ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ab7c:	e01f      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ab7e:	4b2d      	ldr	r3, [pc, #180]	@ (801ac34 <UART_SetConfig+0x934>)
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	f003 0320 	and.w	r3, r3, #32
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d009      	beq.n	801ab9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ab8a:	4b2a      	ldr	r3, [pc, #168]	@ (801ac34 <UART_SetConfig+0x934>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	08db      	lsrs	r3, r3, #3
 801ab90:	f003 0303 	and.w	r3, r3, #3
 801ab94:	4a24      	ldr	r2, [pc, #144]	@ (801ac28 <UART_SetConfig+0x928>)
 801ab96:	fa22 f303 	lsr.w	r3, r2, r3
 801ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ab9c:	e00f      	b.n	801abbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801ab9e:	4b22      	ldr	r3, [pc, #136]	@ (801ac28 <UART_SetConfig+0x928>)
 801aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aba2:	e00c      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801aba4:	4b21      	ldr	r3, [pc, #132]	@ (801ac2c <UART_SetConfig+0x92c>)
 801aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801aba8:	e009      	b.n	801abbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801abaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801abb0:	e005      	b.n	801abbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801abb2:	2300      	movs	r3, #0
 801abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801abb6:	2301      	movs	r3, #1
 801abb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801abbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801abbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	f000 80e7 	beq.w	801ad94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abca:	4a19      	ldr	r2, [pc, #100]	@ (801ac30 <UART_SetConfig+0x930>)
 801abcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801abd0:	461a      	mov	r2, r3
 801abd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abd4:	fbb3 f3f2 	udiv	r3, r3, r2
 801abd8:	005a      	lsls	r2, r3, #1
 801abda:	697b      	ldr	r3, [r7, #20]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	085b      	lsrs	r3, r3, #1
 801abe0:	441a      	add	r2, r3
 801abe2:	697b      	ldr	r3, [r7, #20]
 801abe4:	685b      	ldr	r3, [r3, #4]
 801abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 801abea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801abec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abee:	2b0f      	cmp	r3, #15
 801abf0:	d916      	bls.n	801ac20 <UART_SetConfig+0x920>
 801abf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801abf8:	d212      	bcs.n	801ac20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	f023 030f 	bic.w	r3, r3, #15
 801ac02:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac06:	085b      	lsrs	r3, r3, #1
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	f003 0307 	and.w	r3, r3, #7
 801ac0e:	b29a      	uxth	r2, r3
 801ac10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801ac12:	4313      	orrs	r3, r2
 801ac14:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801ac1c:	60da      	str	r2, [r3, #12]
 801ac1e:	e0b9      	b.n	801ad94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801ac20:	2301      	movs	r3, #1
 801ac22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801ac26:	e0b5      	b.n	801ad94 <UART_SetConfig+0xa94>
 801ac28:	03d09000 	.word	0x03d09000
 801ac2c:	003d0900 	.word	0x003d0900
 801ac30:	08030dd8 	.word	0x08030dd8
 801ac34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801ac38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ac3c:	2b20      	cmp	r3, #32
 801ac3e:	dc49      	bgt.n	801acd4 <UART_SetConfig+0x9d4>
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	db7c      	blt.n	801ad3e <UART_SetConfig+0xa3e>
 801ac44:	2b20      	cmp	r3, #32
 801ac46:	d87a      	bhi.n	801ad3e <UART_SetConfig+0xa3e>
 801ac48:	a201      	add	r2, pc, #4	@ (adr r2, 801ac50 <UART_SetConfig+0x950>)
 801ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac4e:	bf00      	nop
 801ac50:	0801acdb 	.word	0x0801acdb
 801ac54:	0801ace3 	.word	0x0801ace3
 801ac58:	0801ad3f 	.word	0x0801ad3f
 801ac5c:	0801ad3f 	.word	0x0801ad3f
 801ac60:	0801aceb 	.word	0x0801aceb
 801ac64:	0801ad3f 	.word	0x0801ad3f
 801ac68:	0801ad3f 	.word	0x0801ad3f
 801ac6c:	0801ad3f 	.word	0x0801ad3f
 801ac70:	0801acfb 	.word	0x0801acfb
 801ac74:	0801ad3f 	.word	0x0801ad3f
 801ac78:	0801ad3f 	.word	0x0801ad3f
 801ac7c:	0801ad3f 	.word	0x0801ad3f
 801ac80:	0801ad3f 	.word	0x0801ad3f
 801ac84:	0801ad3f 	.word	0x0801ad3f
 801ac88:	0801ad3f 	.word	0x0801ad3f
 801ac8c:	0801ad3f 	.word	0x0801ad3f
 801ac90:	0801ad0b 	.word	0x0801ad0b
 801ac94:	0801ad3f 	.word	0x0801ad3f
 801ac98:	0801ad3f 	.word	0x0801ad3f
 801ac9c:	0801ad3f 	.word	0x0801ad3f
 801aca0:	0801ad3f 	.word	0x0801ad3f
 801aca4:	0801ad3f 	.word	0x0801ad3f
 801aca8:	0801ad3f 	.word	0x0801ad3f
 801acac:	0801ad3f 	.word	0x0801ad3f
 801acb0:	0801ad3f 	.word	0x0801ad3f
 801acb4:	0801ad3f 	.word	0x0801ad3f
 801acb8:	0801ad3f 	.word	0x0801ad3f
 801acbc:	0801ad3f 	.word	0x0801ad3f
 801acc0:	0801ad3f 	.word	0x0801ad3f
 801acc4:	0801ad3f 	.word	0x0801ad3f
 801acc8:	0801ad3f 	.word	0x0801ad3f
 801accc:	0801ad3f 	.word	0x0801ad3f
 801acd0:	0801ad31 	.word	0x0801ad31
 801acd4:	2b40      	cmp	r3, #64	@ 0x40
 801acd6:	d02e      	beq.n	801ad36 <UART_SetConfig+0xa36>
 801acd8:	e031      	b.n	801ad3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801acda:	f7fc ffe5 	bl	8017ca8 <HAL_RCC_GetPCLK1Freq>
 801acde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ace0:	e033      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ace2:	f7fc fff7 	bl	8017cd4 <HAL_RCC_GetPCLK2Freq>
 801ace6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ace8:	e02f      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801acea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801acee:	4618      	mov	r0, r3
 801acf0:	f7fe fa26 	bl	8019140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801acf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801acf8:	e027      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801acfa:	f107 0318 	add.w	r3, r7, #24
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7fe fb72 	bl	80193e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ad04:	69fb      	ldr	r3, [r7, #28]
 801ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ad08:	e01f      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ad0a:	4b2d      	ldr	r3, [pc, #180]	@ (801adc0 <UART_SetConfig+0xac0>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	f003 0320 	and.w	r3, r3, #32
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d009      	beq.n	801ad2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ad16:	4b2a      	ldr	r3, [pc, #168]	@ (801adc0 <UART_SetConfig+0xac0>)
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	08db      	lsrs	r3, r3, #3
 801ad1c:	f003 0303 	and.w	r3, r3, #3
 801ad20:	4a28      	ldr	r2, [pc, #160]	@ (801adc4 <UART_SetConfig+0xac4>)
 801ad22:	fa22 f303 	lsr.w	r3, r2, r3
 801ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ad28:	e00f      	b.n	801ad4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801ad2a:	4b26      	ldr	r3, [pc, #152]	@ (801adc4 <UART_SetConfig+0xac4>)
 801ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ad2e:	e00c      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801ad30:	4b25      	ldr	r3, [pc, #148]	@ (801adc8 <UART_SetConfig+0xac8>)
 801ad32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ad34:	e009      	b.n	801ad4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ad36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ad3c:	e005      	b.n	801ad4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801ad3e:	2300      	movs	r3, #0
 801ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801ad42:	2301      	movs	r3, #1
 801ad44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801ad48:	bf00      	nop
    }

    if (pclk != 0U)
 801ad4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d021      	beq.n	801ad94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad54:	4a1d      	ldr	r2, [pc, #116]	@ (801adcc <UART_SetConfig+0xacc>)
 801ad56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad5e:	fbb3 f2f2 	udiv	r2, r3, r2
 801ad62:	697b      	ldr	r3, [r7, #20]
 801ad64:	685b      	ldr	r3, [r3, #4]
 801ad66:	085b      	lsrs	r3, r3, #1
 801ad68:	441a      	add	r2, r3
 801ad6a:	697b      	ldr	r3, [r7, #20]
 801ad6c:	685b      	ldr	r3, [r3, #4]
 801ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad76:	2b0f      	cmp	r3, #15
 801ad78:	d909      	bls.n	801ad8e <UART_SetConfig+0xa8e>
 801ad7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ad80:	d205      	bcs.n	801ad8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad84:	b29a      	uxth	r2, r3
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	60da      	str	r2, [r3, #12]
 801ad8c:	e002      	b.n	801ad94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801ad8e:	2301      	movs	r3, #1
 801ad90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	2201      	movs	r2, #1
 801ad98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	2201      	movs	r2, #1
 801ada0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	2200      	movs	r2, #0
 801ada8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801adaa:	697b      	ldr	r3, [r7, #20]
 801adac:	2200      	movs	r2, #0
 801adae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801adb0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801adb4:	4618      	mov	r0, r3
 801adb6:	3748      	adds	r7, #72	@ 0x48
 801adb8:	46bd      	mov	sp, r7
 801adba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801adbe:	bf00      	nop
 801adc0:	58024400 	.word	0x58024400
 801adc4:	03d09000 	.word	0x03d09000
 801adc8:	003d0900 	.word	0x003d0900
 801adcc:	08030dd8 	.word	0x08030dd8

0801add0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801add0:	b480      	push	{r7}
 801add2:	b083      	sub	sp, #12
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801addc:	f003 0308 	and.w	r3, r3, #8
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d00a      	beq.n	801adfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	430a      	orrs	r2, r1
 801adf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adfe:	f003 0301 	and.w	r3, r3, #1
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d00a      	beq.n	801ae1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	685b      	ldr	r3, [r3, #4]
 801ae0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	430a      	orrs	r2, r1
 801ae1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae20:	f003 0302 	and.w	r3, r3, #2
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d00a      	beq.n	801ae3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	685b      	ldr	r3, [r3, #4]
 801ae2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	430a      	orrs	r2, r1
 801ae3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae42:	f003 0304 	and.w	r3, r3, #4
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d00a      	beq.n	801ae60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	430a      	orrs	r2, r1
 801ae5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae64:	f003 0310 	and.w	r3, r3, #16
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d00a      	beq.n	801ae82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	689b      	ldr	r3, [r3, #8]
 801ae72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	430a      	orrs	r2, r1
 801ae80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae86:	f003 0320 	and.w	r3, r3, #32
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d00a      	beq.n	801aea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	689b      	ldr	r3, [r3, #8]
 801ae94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	430a      	orrs	r2, r1
 801aea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d01a      	beq.n	801aee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	685b      	ldr	r3, [r3, #4]
 801aeb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	430a      	orrs	r2, r1
 801aec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aeca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801aece:	d10a      	bne.n	801aee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	685b      	ldr	r3, [r3, #4]
 801aed6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	430a      	orrs	r2, r1
 801aee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aeea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d00a      	beq.n	801af08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	430a      	orrs	r2, r1
 801af06:	605a      	str	r2, [r3, #4]
  }
}
 801af08:	bf00      	nop
 801af0a:	370c      	adds	r7, #12
 801af0c:	46bd      	mov	sp, r7
 801af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af12:	4770      	bx	lr

0801af14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b098      	sub	sp, #96	@ 0x60
 801af18:	af02      	add	r7, sp, #8
 801af1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	2200      	movs	r2, #0
 801af20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801af24:	f7f7 fcee 	bl	8012904 <HAL_GetTick>
 801af28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f003 0308 	and.w	r3, r3, #8
 801af34:	2b08      	cmp	r3, #8
 801af36:	d12f      	bne.n	801af98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801af38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801af3c:	9300      	str	r3, [sp, #0]
 801af3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af40:	2200      	movs	r2, #0
 801af42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801af46:	6878      	ldr	r0, [r7, #4]
 801af48:	f000 f88e 	bl	801b068 <UART_WaitOnFlagUntilTimeout>
 801af4c:	4603      	mov	r3, r0
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d022      	beq.n	801af98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af5a:	e853 3f00 	ldrex	r3, [r3]
 801af5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801af60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801af66:	653b      	str	r3, [r7, #80]	@ 0x50
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	461a      	mov	r2, r3
 801af6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801af70:	647b      	str	r3, [r7, #68]	@ 0x44
 801af72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801af74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801af76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801af78:	e841 2300 	strex	r3, r2, [r1]
 801af7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af80:	2b00      	cmp	r3, #0
 801af82:	d1e6      	bne.n	801af52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	2220      	movs	r2, #32
 801af88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	2200      	movs	r2, #0
 801af90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801af94:	2303      	movs	r3, #3
 801af96:	e063      	b.n	801b060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f003 0304 	and.w	r3, r3, #4
 801afa2:	2b04      	cmp	r3, #4
 801afa4:	d149      	bne.n	801b03a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801afa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801afaa:	9300      	str	r3, [sp, #0]
 801afac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afae:	2200      	movs	r2, #0
 801afb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801afb4:	6878      	ldr	r0, [r7, #4]
 801afb6:	f000 f857 	bl	801b068 <UART_WaitOnFlagUntilTimeout>
 801afba:	4603      	mov	r3, r0
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d03c      	beq.n	801b03a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afc8:	e853 3f00 	ldrex	r3, [r3]
 801afcc:	623b      	str	r3, [r7, #32]
   return(result);
 801afce:	6a3b      	ldr	r3, [r7, #32]
 801afd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801afd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	461a      	mov	r2, r3
 801afdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afde:	633b      	str	r3, [r7, #48]	@ 0x30
 801afe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801afe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801afe6:	e841 2300 	strex	r3, r2, [r1]
 801afea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801afec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d1e6      	bne.n	801afc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	3308      	adds	r3, #8
 801aff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801affa:	693b      	ldr	r3, [r7, #16]
 801affc:	e853 3f00 	ldrex	r3, [r3]
 801b000:	60fb      	str	r3, [r7, #12]
   return(result);
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	f023 0301 	bic.w	r3, r3, #1
 801b008:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	3308      	adds	r3, #8
 801b010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b012:	61fa      	str	r2, [r7, #28]
 801b014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b016:	69b9      	ldr	r1, [r7, #24]
 801b018:	69fa      	ldr	r2, [r7, #28]
 801b01a:	e841 2300 	strex	r3, r2, [r1]
 801b01e:	617b      	str	r3, [r7, #20]
   return(result);
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d1e5      	bne.n	801aff2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	2220      	movs	r2, #32
 801b02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	2200      	movs	r2, #0
 801b032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b036:	2303      	movs	r3, #3
 801b038:	e012      	b.n	801b060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	2220      	movs	r2, #32
 801b03e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	2220      	movs	r2, #32
 801b046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	2200      	movs	r2, #0
 801b04e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2200      	movs	r2, #0
 801b054:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2200      	movs	r2, #0
 801b05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3758      	adds	r7, #88	@ 0x58
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}

0801b068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b084      	sub	sp, #16
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	60f8      	str	r0, [r7, #12]
 801b070:	60b9      	str	r1, [r7, #8]
 801b072:	603b      	str	r3, [r7, #0]
 801b074:	4613      	mov	r3, r2
 801b076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b078:	e04f      	b.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b080:	d04b      	beq.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b082:	f7f7 fc3f 	bl	8012904 <HAL_GetTick>
 801b086:	4602      	mov	r2, r0
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	1ad3      	subs	r3, r2, r3
 801b08c:	69ba      	ldr	r2, [r7, #24]
 801b08e:	429a      	cmp	r2, r3
 801b090:	d302      	bcc.n	801b098 <UART_WaitOnFlagUntilTimeout+0x30>
 801b092:	69bb      	ldr	r3, [r7, #24]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d101      	bne.n	801b09c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801b098:	2303      	movs	r3, #3
 801b09a:	e04e      	b.n	801b13a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	f003 0304 	and.w	r3, r3, #4
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d037      	beq.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	2b80      	cmp	r3, #128	@ 0x80
 801b0ae:	d034      	beq.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	2b40      	cmp	r3, #64	@ 0x40
 801b0b4:	d031      	beq.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	69db      	ldr	r3, [r3, #28]
 801b0bc:	f003 0308 	and.w	r3, r3, #8
 801b0c0:	2b08      	cmp	r3, #8
 801b0c2:	d110      	bne.n	801b0e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	2208      	movs	r2, #8
 801b0ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b0cc:	68f8      	ldr	r0, [r7, #12]
 801b0ce:	f000 f839 	bl	801b144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	2208      	movs	r2, #8
 801b0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	2200      	movs	r2, #0
 801b0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801b0e2:	2301      	movs	r3, #1
 801b0e4:	e029      	b.n	801b13a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	69db      	ldr	r3, [r3, #28]
 801b0ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b0f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b0f4:	d111      	bne.n	801b11a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b100:	68f8      	ldr	r0, [r7, #12]
 801b102:	f000 f81f 	bl	801b144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	2220      	movs	r2, #32
 801b10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	2200      	movs	r2, #0
 801b112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801b116:	2303      	movs	r3, #3
 801b118:	e00f      	b.n	801b13a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	69da      	ldr	r2, [r3, #28]
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	4013      	ands	r3, r2
 801b124:	68ba      	ldr	r2, [r7, #8]
 801b126:	429a      	cmp	r2, r3
 801b128:	bf0c      	ite	eq
 801b12a:	2301      	moveq	r3, #1
 801b12c:	2300      	movne	r3, #0
 801b12e:	b2db      	uxtb	r3, r3
 801b130:	461a      	mov	r2, r3
 801b132:	79fb      	ldrb	r3, [r7, #7]
 801b134:	429a      	cmp	r2, r3
 801b136:	d0a0      	beq.n	801b07a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b138:	2300      	movs	r3, #0
}
 801b13a:	4618      	mov	r0, r3
 801b13c:	3710      	adds	r7, #16
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}
	...

0801b144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b144:	b480      	push	{r7}
 801b146:	b095      	sub	sp, #84	@ 0x54
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b154:	e853 3f00 	ldrex	r3, [r3]
 801b158:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b15c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	461a      	mov	r2, r3
 801b168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b16a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b16c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b16e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b172:	e841 2300 	strex	r3, r2, [r1]
 801b176:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d1e6      	bne.n	801b14c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	3308      	adds	r3, #8
 801b184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b186:	6a3b      	ldr	r3, [r7, #32]
 801b188:	e853 3f00 	ldrex	r3, [r3]
 801b18c:	61fb      	str	r3, [r7, #28]
   return(result);
 801b18e:	69fa      	ldr	r2, [r7, #28]
 801b190:	4b1e      	ldr	r3, [pc, #120]	@ (801b20c <UART_EndRxTransfer+0xc8>)
 801b192:	4013      	ands	r3, r2
 801b194:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	3308      	adds	r3, #8
 801b19c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b19e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b1a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b1a6:	e841 2300 	strex	r3, r2, [r1]
 801b1aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d1e5      	bne.n	801b17e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1b6:	2b01      	cmp	r3, #1
 801b1b8:	d118      	bne.n	801b1ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	e853 3f00 	ldrex	r3, [r3]
 801b1c6:	60bb      	str	r3, [r7, #8]
   return(result);
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	f023 0310 	bic.w	r3, r3, #16
 801b1ce:	647b      	str	r3, [r7, #68]	@ 0x44
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	461a      	mov	r2, r3
 801b1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1d8:	61bb      	str	r3, [r7, #24]
 801b1da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1dc:	6979      	ldr	r1, [r7, #20]
 801b1de:	69ba      	ldr	r2, [r7, #24]
 801b1e0:	e841 2300 	strex	r3, r2, [r1]
 801b1e4:	613b      	str	r3, [r7, #16]
   return(result);
 801b1e6:	693b      	ldr	r3, [r7, #16]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d1e6      	bne.n	801b1ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2220      	movs	r2, #32
 801b1f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801b200:	bf00      	nop
 801b202:	3754      	adds	r7, #84	@ 0x54
 801b204:	46bd      	mov	sp, r7
 801b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b20a:	4770      	bx	lr
 801b20c:	effffffe 	.word	0xeffffffe

0801b210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b084      	sub	sp, #16
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b21c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	2200      	movs	r2, #0
 801b222:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b226:	68f8      	ldr	r0, [r7, #12]
 801b228:	f7ff f854 	bl	801a2d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b22c:	bf00      	nop
 801b22e:	3710      	adds	r7, #16
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}

0801b234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b088      	sub	sp, #32
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	e853 3f00 	ldrex	r3, [r3]
 801b248:	60bb      	str	r3, [r7, #8]
   return(result);
 801b24a:	68bb      	ldr	r3, [r7, #8]
 801b24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b250:	61fb      	str	r3, [r7, #28]
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	461a      	mov	r2, r3
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	61bb      	str	r3, [r7, #24]
 801b25c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b25e:	6979      	ldr	r1, [r7, #20]
 801b260:	69ba      	ldr	r2, [r7, #24]
 801b262:	e841 2300 	strex	r3, r2, [r1]
 801b266:	613b      	str	r3, [r7, #16]
   return(result);
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d1e6      	bne.n	801b23c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2220      	movs	r2, #32
 801b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b27c:	6878      	ldr	r0, [r7, #4]
 801b27e:	f7ff f81f 	bl	801a2c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b282:	bf00      	nop
 801b284:	3720      	adds	r7, #32
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b28a:	b480      	push	{r7}
 801b28c:	b083      	sub	sp, #12
 801b28e:	af00      	add	r7, sp, #0
 801b290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b292:	bf00      	nop
 801b294:	370c      	adds	r7, #12
 801b296:	46bd      	mov	sp, r7
 801b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29c:	4770      	bx	lr

0801b29e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801b29e:	b480      	push	{r7}
 801b2a0:	b083      	sub	sp, #12
 801b2a2:	af00      	add	r7, sp, #0
 801b2a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801b2a6:	bf00      	nop
 801b2a8:	370c      	adds	r7, #12
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b0:	4770      	bx	lr

0801b2b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801b2b2:	b480      	push	{r7}
 801b2b4:	b083      	sub	sp, #12
 801b2b6:	af00      	add	r7, sp, #0
 801b2b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801b2ba:	bf00      	nop
 801b2bc:	370c      	adds	r7, #12
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c4:	4770      	bx	lr

0801b2c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801b2c6:	b480      	push	{r7}
 801b2c8:	b085      	sub	sp, #20
 801b2ca:	af00      	add	r7, sp, #0
 801b2cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b2d4:	2b01      	cmp	r3, #1
 801b2d6:	d101      	bne.n	801b2dc <HAL_UARTEx_DisableFifoMode+0x16>
 801b2d8:	2302      	movs	r3, #2
 801b2da:	e027      	b.n	801b32c <HAL_UARTEx_DisableFifoMode+0x66>
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	2201      	movs	r2, #1
 801b2e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2224      	movs	r2, #36	@ 0x24
 801b2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	681a      	ldr	r2, [r3, #0]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	f022 0201 	bic.w	r2, r2, #1
 801b302:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801b30a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2200      	movs	r2, #0
 801b310:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	68fa      	ldr	r2, [r7, #12]
 801b318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	2220      	movs	r2, #32
 801b31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	2200      	movs	r2, #0
 801b326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b32a:	2300      	movs	r3, #0
}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3714      	adds	r7, #20
 801b330:	46bd      	mov	sp, r7
 801b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b336:	4770      	bx	lr

0801b338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b084      	sub	sp, #16
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
 801b340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b348:	2b01      	cmp	r3, #1
 801b34a:	d101      	bne.n	801b350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801b34c:	2302      	movs	r3, #2
 801b34e:	e02d      	b.n	801b3ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2201      	movs	r2, #1
 801b354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	2224      	movs	r2, #36	@ 0x24
 801b35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f022 0201 	bic.w	r2, r2, #1
 801b376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	689b      	ldr	r3, [r3, #8]
 801b37e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	683a      	ldr	r2, [r7, #0]
 801b388:	430a      	orrs	r2, r1
 801b38a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f000 f84f 	bl	801b430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	68fa      	ldr	r2, [r7, #12]
 801b398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2220      	movs	r2, #32
 801b39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b3aa:	2300      	movs	r3, #0
}
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	3710      	adds	r7, #16
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}

0801b3b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b084      	sub	sp, #16
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
 801b3bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b3c4:	2b01      	cmp	r3, #1
 801b3c6:	d101      	bne.n	801b3cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801b3c8:	2302      	movs	r3, #2
 801b3ca:	e02d      	b.n	801b428 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2201      	movs	r2, #1
 801b3d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	2224      	movs	r2, #36	@ 0x24
 801b3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	f022 0201 	bic.w	r2, r2, #1
 801b3f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	689b      	ldr	r3, [r3, #8]
 801b3fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	683a      	ldr	r2, [r7, #0]
 801b404:	430a      	orrs	r2, r1
 801b406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	f000 f811 	bl	801b430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	68fa      	ldr	r2, [r7, #12]
 801b414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	2220      	movs	r2, #32
 801b41a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2200      	movs	r2, #0
 801b422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b426:	2300      	movs	r3, #0
}
 801b428:	4618      	mov	r0, r3
 801b42a:	3710      	adds	r7, #16
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}

0801b430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801b430:	b480      	push	{r7}
 801b432:	b085      	sub	sp, #20
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d108      	bne.n	801b452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	2201      	movs	r2, #1
 801b444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	2201      	movs	r2, #1
 801b44c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801b450:	e031      	b.n	801b4b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801b452:	2310      	movs	r3, #16
 801b454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801b456:	2310      	movs	r3, #16
 801b458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	689b      	ldr	r3, [r3, #8]
 801b460:	0e5b      	lsrs	r3, r3, #25
 801b462:	b2db      	uxtb	r3, r3
 801b464:	f003 0307 	and.w	r3, r3, #7
 801b468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	689b      	ldr	r3, [r3, #8]
 801b470:	0f5b      	lsrs	r3, r3, #29
 801b472:	b2db      	uxtb	r3, r3
 801b474:	f003 0307 	and.w	r3, r3, #7
 801b478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b47a:	7bbb      	ldrb	r3, [r7, #14]
 801b47c:	7b3a      	ldrb	r2, [r7, #12]
 801b47e:	4911      	ldr	r1, [pc, #68]	@ (801b4c4 <UARTEx_SetNbDataToProcess+0x94>)
 801b480:	5c8a      	ldrb	r2, [r1, r2]
 801b482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801b486:	7b3a      	ldrb	r2, [r7, #12]
 801b488:	490f      	ldr	r1, [pc, #60]	@ (801b4c8 <UARTEx_SetNbDataToProcess+0x98>)
 801b48a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b48c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b490:	b29a      	uxth	r2, r3
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b498:	7bfb      	ldrb	r3, [r7, #15]
 801b49a:	7b7a      	ldrb	r2, [r7, #13]
 801b49c:	4909      	ldr	r1, [pc, #36]	@ (801b4c4 <UARTEx_SetNbDataToProcess+0x94>)
 801b49e:	5c8a      	ldrb	r2, [r1, r2]
 801b4a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801b4a4:	7b7a      	ldrb	r2, [r7, #13]
 801b4a6:	4908      	ldr	r1, [pc, #32]	@ (801b4c8 <UARTEx_SetNbDataToProcess+0x98>)
 801b4a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b4aa:	fb93 f3f2 	sdiv	r3, r3, r2
 801b4ae:	b29a      	uxth	r2, r3
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801b4b6:	bf00      	nop
 801b4b8:	3714      	adds	r7, #20
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c0:	4770      	bx	lr
 801b4c2:	bf00      	nop
 801b4c4:	08030df0 	.word	0x08030df0
 801b4c8:	08030df8 	.word	0x08030df8

0801b4cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b084      	sub	sp, #16
 801b4d0:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 801b4d2:	f000 ff4c 	bl	801c36e <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 801b4d6:	4b12      	ldr	r3, [pc, #72]	@ (801b520 <MX_LWIP_Init+0x54>)
 801b4d8:	2200      	movs	r2, #0
 801b4da:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 801b4dc:	4b11      	ldr	r3, [pc, #68]	@ (801b524 <MX_LWIP_Init+0x58>)
 801b4de:	2200      	movs	r2, #0
 801b4e0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 801b4e2:	4b11      	ldr	r3, [pc, #68]	@ (801b528 <MX_LWIP_Init+0x5c>)
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801b4e8:	4b10      	ldr	r3, [pc, #64]	@ (801b52c <MX_LWIP_Init+0x60>)
 801b4ea:	9302      	str	r3, [sp, #8]
 801b4ec:	4b10      	ldr	r3, [pc, #64]	@ (801b530 <MX_LWIP_Init+0x64>)
 801b4ee:	9301      	str	r3, [sp, #4]
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	4b0c      	ldr	r3, [pc, #48]	@ (801b528 <MX_LWIP_Init+0x5c>)
 801b4f6:	4a0b      	ldr	r2, [pc, #44]	@ (801b524 <MX_LWIP_Init+0x58>)
 801b4f8:	4909      	ldr	r1, [pc, #36]	@ (801b520 <MX_LWIP_Init+0x54>)
 801b4fa:	480e      	ldr	r0, [pc, #56]	@ (801b534 <MX_LWIP_Init+0x68>)
 801b4fc:	f001 fc20 	bl	801cd40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801b500:	480c      	ldr	r0, [pc, #48]	@ (801b534 <MX_LWIP_Init+0x68>)
 801b502:	f001 fdd7 	bl	801d0b4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 801b506:	480b      	ldr	r0, [pc, #44]	@ (801b534 <MX_LWIP_Init+0x68>)
 801b508:	f001 fde4 	bl	801d0d4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801b50c:	490a      	ldr	r1, [pc, #40]	@ (801b538 <MX_LWIP_Init+0x6c>)
 801b50e:	4809      	ldr	r0, [pc, #36]	@ (801b534 <MX_LWIP_Init+0x68>)
 801b510:	f001 fee6 	bl	801d2e0 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801b514:	4807      	ldr	r0, [pc, #28]	@ (801b534 <MX_LWIP_Init+0x68>)
 801b516:	f009 f951 	bl	80247bc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801b51a:	bf00      	nop
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	24007f9c 	.word	0x24007f9c
 801b524:	24007fa0 	.word	0x24007fa0
 801b528:	24007fa4 	.word	0x24007fa4
 801b52c:	080283cd 	.word	0x080283cd
 801b530:	0801b795 	.word	0x0801b795
 801b534:	24007f64 	.word	0x24007f64
 801b538:	0801b53d 	.word	0x0801b53d

0801b53c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801b53c:	b480      	push	{r7}
 801b53e:	b083      	sub	sp, #12
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801b544:	bf00      	nop
 801b546:	370c      	adds	r7, #12
 801b548:	46bd      	mov	sp, r7
 801b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b54e:	4770      	bx	lr

0801b550 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b084      	sub	sp, #16
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801b558:	2300      	movs	r3, #0
 801b55a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801b55c:	4b44      	ldr	r3, [pc, #272]	@ (801b670 <low_level_init+0x120>)
 801b55e:	4a45      	ldr	r2, [pc, #276]	@ (801b674 <low_level_init+0x124>)
 801b560:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801b562:	2300      	movs	r3, #0
 801b564:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801b566:	2380      	movs	r3, #128	@ 0x80
 801b568:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801b56a:	23e1      	movs	r3, #225	@ 0xe1
 801b56c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801b56e:	2300      	movs	r3, #0
 801b570:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801b572:	2300      	movs	r3, #0
 801b574:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801b576:	2300      	movs	r3, #0
 801b578:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801b57a:	4a3d      	ldr	r2, [pc, #244]	@ (801b670 <low_level_init+0x120>)
 801b57c:	f107 0308 	add.w	r3, r7, #8
 801b580:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801b582:	4b3b      	ldr	r3, [pc, #236]	@ (801b670 <low_level_init+0x120>)
 801b584:	2201      	movs	r2, #1
 801b586:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801b588:	4b39      	ldr	r3, [pc, #228]	@ (801b670 <low_level_init+0x120>)
 801b58a:	4a3b      	ldr	r2, [pc, #236]	@ (801b678 <low_level_init+0x128>)
 801b58c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801b58e:	4b38      	ldr	r3, [pc, #224]	@ (801b670 <low_level_init+0x120>)
 801b590:	4a3a      	ldr	r2, [pc, #232]	@ (801b67c <low_level_init+0x12c>)
 801b592:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801b594:	4b36      	ldr	r3, [pc, #216]	@ (801b670 <low_level_init+0x120>)
 801b596:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801b59a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801b59c:	4834      	ldr	r0, [pc, #208]	@ (801b670 <low_level_init+0x120>)
 801b59e:	f7f8 f883 	bl	80136a8 <HAL_ETH_Init>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801b5a6:	2238      	movs	r2, #56	@ 0x38
 801b5a8:	2100      	movs	r1, #0
 801b5aa:	4835      	ldr	r0, [pc, #212]	@ (801b680 <low_level_init+0x130>)
 801b5ac:	f00e f88a 	bl	80296c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801b5b0:	4b33      	ldr	r3, [pc, #204]	@ (801b680 <low_level_init+0x130>)
 801b5b2:	2221      	movs	r2, #33	@ 0x21
 801b5b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801b5b6:	4b32      	ldr	r3, [pc, #200]	@ (801b680 <low_level_init+0x130>)
 801b5b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801b5bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801b5be:	4b30      	ldr	r3, [pc, #192]	@ (801b680 <low_level_init+0x130>)
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801b5c4:	482f      	ldr	r0, [pc, #188]	@ (801b684 <low_level_init+0x134>)
 801b5c6:	f001 fa83 	bl	801cad0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2206      	movs	r2, #6
 801b5ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801b5d2:	4b27      	ldr	r3, [pc, #156]	@ (801b670 <low_level_init+0x120>)
 801b5d4:	685b      	ldr	r3, [r3, #4]
 801b5d6:	781a      	ldrb	r2, [r3, #0]
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801b5de:	4b24      	ldr	r3, [pc, #144]	@ (801b670 <low_level_init+0x120>)
 801b5e0:	685b      	ldr	r3, [r3, #4]
 801b5e2:	785a      	ldrb	r2, [r3, #1]
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801b5ea:	4b21      	ldr	r3, [pc, #132]	@ (801b670 <low_level_init+0x120>)
 801b5ec:	685b      	ldr	r3, [r3, #4]
 801b5ee:	789a      	ldrb	r2, [r3, #2]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801b5f6:	4b1e      	ldr	r3, [pc, #120]	@ (801b670 <low_level_init+0x120>)
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	78da      	ldrb	r2, [r3, #3]
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801b602:	4b1b      	ldr	r3, [pc, #108]	@ (801b670 <low_level_init+0x120>)
 801b604:	685b      	ldr	r3, [r3, #4]
 801b606:	791a      	ldrb	r2, [r3, #4]
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801b60e:	4b18      	ldr	r3, [pc, #96]	@ (801b670 <low_level_init+0x120>)
 801b610:	685b      	ldr	r3, [r3, #4]
 801b612:	795a      	ldrb	r2, [r3, #5]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 801b620:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b628:	f043 030a 	orr.w	r3, r3, #10
 801b62c:	b2da      	uxtb	r2, r3
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 801b634:	4914      	ldr	r1, [pc, #80]	@ (801b688 <low_level_init+0x138>)
 801b636:	4815      	ldr	r0, [pc, #84]	@ (801b68c <low_level_init+0x13c>)
 801b638:	f7f6 ffd7 	bl	80125ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 801b63c:	4813      	ldr	r0, [pc, #76]	@ (801b68c <low_level_init+0x13c>)
 801b63e:	f7f7 f806 	bl	801264e <LAN8742_Init>
 801b642:	4603      	mov	r3, r0
 801b644:	2b00      	cmp	r3, #0
 801b646:	d006      	beq.n	801b656 <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f001 fe19 	bl	801d280 <netif_set_link_down>
    netif_set_down(netif);
 801b64e:	6878      	ldr	r0, [r7, #4]
 801b650:	f001 fdac 	bl	801d1ac <netif_set_down>
 801b654:	e008      	b.n	801b668 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 801b656:	7bfb      	ldrb	r3, [r7, #15]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d103      	bne.n	801b664 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801b65c:	6878      	ldr	r0, [r7, #4]
 801b65e:	f000 f9f3 	bl	801ba48 <ethernet_link_check_state>
 801b662:	e001      	b.n	801b668 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 801b664:	f7e5 fc08 	bl	8000e78 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801b668:	3710      	adds	r7, #16
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	24007fb0 	.word	0x24007fb0
 801b674:	40028000 	.word	0x40028000
 801b678:	24004c1c 	.word	0x24004c1c
 801b67c:	24004bbc 	.word	0x24004bbc
 801b680:	24008060 	.word	0x24008060
 801b684:	08030e00 	.word	0x08030e00
 801b688:	2400004c 	.word	0x2400004c
 801b68c:	24008098 	.word	0x24008098

0801b690 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b092      	sub	sp, #72	@ 0x48
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801b69a:	2300      	movs	r3, #0
 801b69c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 801b69e:	2300      	movs	r3, #0
 801b6a0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801b6a8:	f107 030c 	add.w	r3, r7, #12
 801b6ac:	2230      	movs	r2, #48	@ 0x30
 801b6ae:	2100      	movs	r1, #0
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f00e f807 	bl	80296c4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801b6b6:	f107 030c 	add.w	r3, r7, #12
 801b6ba:	2230      	movs	r2, #48	@ 0x30
 801b6bc:	2100      	movs	r1, #0
 801b6be:	4618      	mov	r0, r3
 801b6c0:	f00e f800 	bl	80296c4 <memset>

  for(q = p; q != NULL; q = q->next)
 801b6c4:	683b      	ldr	r3, [r7, #0]
 801b6c6:	643b      	str	r3, [r7, #64]	@ 0x40
 801b6c8:	e045      	b.n	801b756 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801b6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b6cc:	2b03      	cmp	r3, #3
 801b6ce:	d902      	bls.n	801b6d6 <low_level_output+0x46>
      return ERR_IF;
 801b6d0:	f06f 030b 	mvn.w	r3, #11
 801b6d4:	e055      	b.n	801b782 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801b6d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b6d8:	6859      	ldr	r1, [r3, #4]
 801b6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6dc:	4613      	mov	r3, r2
 801b6de:	005b      	lsls	r3, r3, #1
 801b6e0:	4413      	add	r3, r2
 801b6e2:	009b      	lsls	r3, r3, #2
 801b6e4:	3348      	adds	r3, #72	@ 0x48
 801b6e6:	443b      	add	r3, r7
 801b6e8:	3b3c      	subs	r3, #60	@ 0x3c
 801b6ea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801b6ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b6ee:	895b      	ldrh	r3, [r3, #10]
 801b6f0:	4619      	mov	r1, r3
 801b6f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6f4:	4613      	mov	r3, r2
 801b6f6:	005b      	lsls	r3, r3, #1
 801b6f8:	4413      	add	r3, r2
 801b6fa:	009b      	lsls	r3, r3, #2
 801b6fc:	3348      	adds	r3, #72	@ 0x48
 801b6fe:	443b      	add	r3, r7
 801b700:	3b38      	subs	r3, #56	@ 0x38
 801b702:	6019      	str	r1, [r3, #0]

    if(i>0)
 801b704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b706:	2b00      	cmp	r3, #0
 801b708:	d011      	beq.n	801b72e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801b70a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b70c:	1e5a      	subs	r2, r3, #1
 801b70e:	f107 000c 	add.w	r0, r7, #12
 801b712:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b714:	460b      	mov	r3, r1
 801b716:	005b      	lsls	r3, r3, #1
 801b718:	440b      	add	r3, r1
 801b71a:	009b      	lsls	r3, r3, #2
 801b71c:	18c1      	adds	r1, r0, r3
 801b71e:	4613      	mov	r3, r2
 801b720:	005b      	lsls	r3, r3, #1
 801b722:	4413      	add	r3, r2
 801b724:	009b      	lsls	r3, r3, #2
 801b726:	3348      	adds	r3, #72	@ 0x48
 801b728:	443b      	add	r3, r7
 801b72a:	3b34      	subs	r3, #52	@ 0x34
 801b72c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801b72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	2b00      	cmp	r3, #0
 801b734:	d109      	bne.n	801b74a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801b736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b738:	4613      	mov	r3, r2
 801b73a:	005b      	lsls	r3, r3, #1
 801b73c:	4413      	add	r3, r2
 801b73e:	009b      	lsls	r3, r3, #2
 801b740:	3348      	adds	r3, #72	@ 0x48
 801b742:	443b      	add	r3, r7
 801b744:	3b34      	subs	r3, #52	@ 0x34
 801b746:	2200      	movs	r2, #0
 801b748:	601a      	str	r2, [r3, #0]
    }

    i++;
 801b74a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b74c:	3301      	adds	r3, #1
 801b74e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 801b750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	643b      	str	r3, [r7, #64]	@ 0x40
 801b756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d1b6      	bne.n	801b6ca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801b75c:	683b      	ldr	r3, [r7, #0]
 801b75e:	891b      	ldrh	r3, [r3, #8]
 801b760:	461a      	mov	r2, r3
 801b762:	4b0a      	ldr	r3, [pc, #40]	@ (801b78c <low_level_output+0xfc>)
 801b764:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801b766:	4a09      	ldr	r2, [pc, #36]	@ (801b78c <low_level_output+0xfc>)
 801b768:	f107 030c 	add.w	r3, r7, #12
 801b76c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801b76e:	4a07      	ldr	r2, [pc, #28]	@ (801b78c <low_level_output+0xfc>)
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801b774:	2214      	movs	r2, #20
 801b776:	4905      	ldr	r1, [pc, #20]	@ (801b78c <low_level_output+0xfc>)
 801b778:	4805      	ldr	r0, [pc, #20]	@ (801b790 <low_level_output+0x100>)
 801b77a:	f7f8 f97f 	bl	8013a7c <HAL_ETH_Transmit>

  return errval;
 801b77e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801b782:	4618      	mov	r0, r3
 801b784:	3748      	adds	r7, #72	@ 0x48
 801b786:	46bd      	mov	sp, r7
 801b788:	bd80      	pop	{r7, pc}
 801b78a:	bf00      	nop
 801b78c:	24008060 	.word	0x24008060
 801b790:	24007fb0 	.word	0x24007fb0

0801b794 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b082      	sub	sp, #8
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d106      	bne.n	801b7b0 <ethernetif_init+0x1c>
 801b7a2:	4b0e      	ldr	r3, [pc, #56]	@ (801b7dc <ethernetif_init+0x48>)
 801b7a4:	f240 128b 	movw	r2, #395	@ 0x18b
 801b7a8:	490d      	ldr	r1, [pc, #52]	@ (801b7e0 <ethernetif_init+0x4c>)
 801b7aa:	480e      	ldr	r0, [pc, #56]	@ (801b7e4 <ethernetif_init+0x50>)
 801b7ac:	f00d fddc 	bl	8029368 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	2273      	movs	r2, #115	@ 0x73
 801b7b4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	2274      	movs	r2, #116	@ 0x74
 801b7bc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	4a09      	ldr	r2, [pc, #36]	@ (801b7e8 <ethernetif_init+0x54>)
 801b7c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	4a08      	ldr	r2, [pc, #32]	@ (801b7ec <ethernetif_init+0x58>)
 801b7ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801b7cc:	6878      	ldr	r0, [r7, #4]
 801b7ce:	f7ff febf 	bl	801b550 <low_level_init>

  return ERR_OK;
 801b7d2:	2300      	movs	r3, #0
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	3708      	adds	r7, #8
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}
 801b7dc:	0802da98 	.word	0x0802da98
 801b7e0:	0802dab4 	.word	0x0802dab4
 801b7e4:	0802dac4 	.word	0x0802dac4
 801b7e8:	080266dd 	.word	0x080266dd
 801b7ec:	0801b691 	.word	0x0801b691

0801b7f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b084      	sub	sp, #16
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801b7fc:	68f9      	ldr	r1, [r7, #12]
 801b7fe:	4807      	ldr	r0, [pc, #28]	@ (801b81c <pbuf_free_custom+0x2c>)
 801b800:	f001 fa48 	bl	801cc94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801b804:	4b06      	ldr	r3, [pc, #24]	@ (801b820 <pbuf_free_custom+0x30>)
 801b806:	781b      	ldrb	r3, [r3, #0]
 801b808:	2b01      	cmp	r3, #1
 801b80a:	d102      	bne.n	801b812 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801b80c:	4b04      	ldr	r3, [pc, #16]	@ (801b820 <pbuf_free_custom+0x30>)
 801b80e:	2200      	movs	r2, #0
 801b810:	701a      	strb	r2, [r3, #0]
  }
}
 801b812:	bf00      	nop
 801b814:	3710      	adds	r7, #16
 801b816:	46bd      	mov	sp, r7
 801b818:	bd80      	pop	{r7, pc}
 801b81a:	bf00      	nop
 801b81c:	08030e00 	.word	0x08030e00
 801b820:	24007fac 	.word	0x24007fac

0801b824 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 801b824:	b580      	push	{r7, lr}
 801b826:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801b828:	f7f7 f86c 	bl	8012904 <HAL_GetTick>
 801b82c:	4603      	mov	r3, r0
}
 801b82e:	4618      	mov	r0, r3
 801b830:	bd80      	pop	{r7, pc}
	...

0801b834 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b08e      	sub	sp, #56	@ 0x38
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b83c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b840:	2200      	movs	r2, #0
 801b842:	601a      	str	r2, [r3, #0]
 801b844:	605a      	str	r2, [r3, #4]
 801b846:	609a      	str	r2, [r3, #8]
 801b848:	60da      	str	r2, [r3, #12]
 801b84a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	4a51      	ldr	r2, [pc, #324]	@ (801b998 <HAL_ETH_MspInit+0x164>)
 801b852:	4293      	cmp	r3, r2
 801b854:	f040 809b 	bne.w	801b98e <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801b858:	4b50      	ldr	r3, [pc, #320]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b85a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b85e:	4a4f      	ldr	r2, [pc, #316]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801b864:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801b868:	4b4c      	ldr	r3, [pc, #304]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b86a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b86e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b872:	623b      	str	r3, [r7, #32]
 801b874:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801b876:	4b49      	ldr	r3, [pc, #292]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b87c:	4a47      	ldr	r2, [pc, #284]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b87e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b882:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801b886:	4b45      	ldr	r3, [pc, #276]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b888:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b88c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b890:	61fb      	str	r3, [r7, #28]
 801b892:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 801b894:	4b41      	ldr	r3, [pc, #260]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b89a:	4a40      	ldr	r2, [pc, #256]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b89c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b8a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801b8a4:	4b3d      	ldr	r3, [pc, #244]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801b8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b8ae:	61bb      	str	r3, [r7, #24]
 801b8b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801b8b2:	4b3a      	ldr	r3, [pc, #232]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b8b8:	4a38      	ldr	r2, [pc, #224]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8ba:	f043 0304 	orr.w	r3, r3, #4
 801b8be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b8c2:	4b36      	ldr	r3, [pc, #216]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b8c8:	f003 0304 	and.w	r3, r3, #4
 801b8cc:	617b      	str	r3, [r7, #20]
 801b8ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b8d0:	4b32      	ldr	r3, [pc, #200]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b8d6:	4a31      	ldr	r2, [pc, #196]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8d8:	f043 0301 	orr.w	r3, r3, #1
 801b8dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b8e0:	4b2e      	ldr	r3, [pc, #184]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b8e6:	f003 0301 	and.w	r3, r3, #1
 801b8ea:	613b      	str	r3, [r7, #16]
 801b8ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b8ee:	4b2b      	ldr	r3, [pc, #172]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b8f4:	4a29      	ldr	r2, [pc, #164]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b8f6:	f043 0302 	orr.w	r3, r3, #2
 801b8fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b8fe:	4b27      	ldr	r3, [pc, #156]	@ (801b99c <HAL_ETH_MspInit+0x168>)
 801b900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b904:	f003 0302 	and.w	r3, r3, #2
 801b908:	60fb      	str	r3, [r7, #12]
 801b90a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801b90c:	2332      	movs	r3, #50	@ 0x32
 801b90e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b910:	2302      	movs	r3, #2
 801b912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b914:	2300      	movs	r3, #0
 801b916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b918:	2300      	movs	r3, #0
 801b91a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b91c:	230b      	movs	r3, #11
 801b91e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b924:	4619      	mov	r1, r3
 801b926:	481e      	ldr	r0, [pc, #120]	@ (801b9a0 <HAL_ETH_MspInit+0x16c>)
 801b928:	f7f9 fb50 	bl	8014fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801b92c:	2386      	movs	r3, #134	@ 0x86
 801b92e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b930:	2302      	movs	r3, #2
 801b932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b934:	2300      	movs	r3, #0
 801b936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b938:	2300      	movs	r3, #0
 801b93a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b93c:	230b      	movs	r3, #11
 801b93e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b944:	4619      	mov	r1, r3
 801b946:	4817      	ldr	r0, [pc, #92]	@ (801b9a4 <HAL_ETH_MspInit+0x170>)
 801b948:	f7f9 fb40 	bl	8014fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801b94c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 801b950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b952:	2302      	movs	r3, #2
 801b954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b956:	2300      	movs	r3, #0
 801b958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b95a:	2300      	movs	r3, #0
 801b95c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b95e:	230b      	movs	r3, #11
 801b960:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b966:	4619      	mov	r1, r3
 801b968:	480f      	ldr	r0, [pc, #60]	@ (801b9a8 <HAL_ETH_MspInit+0x174>)
 801b96a:	f7f9 fb2f 	bl	8014fcc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 801b96e:	2200      	movs	r2, #0
 801b970:	2100      	movs	r1, #0
 801b972:	203d      	movs	r0, #61	@ 0x3d
 801b974:	f7f7 f8f1 	bl	8012b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801b978:	203d      	movs	r0, #61	@ 0x3d
 801b97a:	f7f7 f908 	bl	8012b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 801b97e:	2200      	movs	r2, #0
 801b980:	2100      	movs	r1, #0
 801b982:	203e      	movs	r0, #62	@ 0x3e
 801b984:	f7f7 f8e9 	bl	8012b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 801b988:	203e      	movs	r0, #62	@ 0x3e
 801b98a:	f7f7 f900 	bl	8012b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801b98e:	bf00      	nop
 801b990:	3738      	adds	r7, #56	@ 0x38
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}
 801b996:	bf00      	nop
 801b998:	40028000 	.word	0x40028000
 801b99c:	58024400 	.word	0x58024400
 801b9a0:	58020800 	.word	0x58020800
 801b9a4:	58020000 	.word	0x58020000
 801b9a8:	58020400 	.word	0x58020400

0801b9ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801b9b0:	4802      	ldr	r0, [pc, #8]	@ (801b9bc <ETH_PHY_IO_Init+0x10>)
 801b9b2:	f7f8 fd39 	bl	8014428 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801b9b6:	2300      	movs	r3, #0
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	24007fb0 	.word	0x24007fb0

0801b9c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801b9c0:	b480      	push	{r7}
 801b9c2:	af00      	add	r7, sp, #0
  return 0;
 801b9c4:	2300      	movs	r3, #0
}
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ce:	4770      	bx	lr

0801b9d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	68ba      	ldr	r2, [r7, #8]
 801b9e0:	68f9      	ldr	r1, [r7, #12]
 801b9e2:	4807      	ldr	r0, [pc, #28]	@ (801ba00 <ETH_PHY_IO_ReadReg+0x30>)
 801b9e4:	f7f8 fa8a 	bl	8013efc <HAL_ETH_ReadPHYRegister>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d002      	beq.n	801b9f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801b9ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f2:	e000      	b.n	801b9f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801b9f4:	2300      	movs	r3, #0
}
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	3710      	adds	r7, #16
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}
 801b9fe:	bf00      	nop
 801ba00:	24007fb0 	.word	0x24007fb0

0801ba04 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	60f8      	str	r0, [r7, #12]
 801ba0c:	60b9      	str	r1, [r7, #8]
 801ba0e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	68ba      	ldr	r2, [r7, #8]
 801ba14:	68f9      	ldr	r1, [r7, #12]
 801ba16:	4807      	ldr	r0, [pc, #28]	@ (801ba34 <ETH_PHY_IO_WriteReg+0x30>)
 801ba18:	f7f8 fac4 	bl	8013fa4 <HAL_ETH_WritePHYRegister>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d002      	beq.n	801ba28 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801ba22:	f04f 33ff 	mov.w	r3, #4294967295
 801ba26:	e000      	b.n	801ba2a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801ba28:	2300      	movs	r3, #0
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	3710      	adds	r7, #16
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}
 801ba32:	bf00      	nop
 801ba34:	24007fb0 	.word	0x24007fb0

0801ba38 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801ba3c:	f7f6 ff62 	bl	8012904 <HAL_GetTick>
 801ba40:	4603      	mov	r3, r0
}
 801ba42:	4618      	mov	r0, r3
 801ba44:	bd80      	pop	{r7, pc}
	...

0801ba48 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b0a0      	sub	sp, #128	@ 0x80
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801ba50:	f107 030c 	add.w	r3, r7, #12
 801ba54:	2264      	movs	r2, #100	@ 0x64
 801ba56:	2100      	movs	r1, #0
 801ba58:	4618      	mov	r0, r3
 801ba5a:	f00d fe33 	bl	80296c4 <memset>
  int32_t PHYLinkState = 0;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801ba62:	2300      	movs	r3, #0
 801ba64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ba66:	2300      	movs	r3, #0
 801ba68:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 801ba6e:	483a      	ldr	r0, [pc, #232]	@ (801bb58 <ethernet_link_check_state+0x110>)
 801ba70:	f7f6 fe3a 	bl	80126e8 <LAN8742_GetLinkState>
 801ba74:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801ba7c:	089b      	lsrs	r3, r3, #2
 801ba7e:	f003 0301 	and.w	r3, r3, #1
 801ba82:	b2db      	uxtb	r3, r3
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d00c      	beq.n	801baa2 <ethernet_link_check_state+0x5a>
 801ba88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ba8a:	2b01      	cmp	r3, #1
 801ba8c:	dc09      	bgt.n	801baa2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 801ba8e:	4833      	ldr	r0, [pc, #204]	@ (801bb5c <ethernet_link_check_state+0x114>)
 801ba90:	f7f7 ff7c 	bl	801398c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	f001 fb89 	bl	801d1ac <netif_set_down>
    netif_set_link_down(netif);
 801ba9a:	6878      	ldr	r0, [r7, #4]
 801ba9c:	f001 fbf0 	bl	801d280 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801baa0:	e055      	b.n	801bb4e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801baa8:	f003 0304 	and.w	r3, r3, #4
 801baac:	2b00      	cmp	r3, #0
 801baae:	d14e      	bne.n	801bb4e <ethernet_link_check_state+0x106>
 801bab0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bab2:	2b01      	cmp	r3, #1
 801bab4:	dd4b      	ble.n	801bb4e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801bab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bab8:	3b02      	subs	r3, #2
 801baba:	2b03      	cmp	r3, #3
 801babc:	d82a      	bhi.n	801bb14 <ethernet_link_check_state+0xcc>
 801babe:	a201      	add	r2, pc, #4	@ (adr r2, 801bac4 <ethernet_link_check_state+0x7c>)
 801bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bac4:	0801bad5 	.word	0x0801bad5
 801bac8:	0801bae7 	.word	0x0801bae7
 801bacc:	0801baf7 	.word	0x0801baf7
 801bad0:	0801bb07 	.word	0x0801bb07
      duplex = ETH_FULLDUPLEX_MODE;
 801bad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801bad8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801bada:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801bade:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 801bae0:	2301      	movs	r3, #1
 801bae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801bae4:	e017      	b.n	801bb16 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801bae6:	2300      	movs	r3, #0
 801bae8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801baea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801baee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 801baf0:	2301      	movs	r3, #1
 801baf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801baf4:	e00f      	b.n	801bb16 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801baf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801bafa:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801bafc:	2300      	movs	r3, #0
 801bafe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 801bb00:	2301      	movs	r3, #1
 801bb02:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801bb04:	e007      	b.n	801bb16 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801bb06:	2300      	movs	r3, #0
 801bb08:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 801bb0e:	2301      	movs	r3, #1
 801bb10:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801bb12:	e000      	b.n	801bb16 <ethernet_link_check_state+0xce>
      break;
 801bb14:	bf00      	nop
    if(linkchanged)
 801bb16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d018      	beq.n	801bb4e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801bb1c:	f107 030c 	add.w	r3, r7, #12
 801bb20:	4619      	mov	r1, r3
 801bb22:	480e      	ldr	r0, [pc, #56]	@ (801bb5c <ethernet_link_check_state+0x114>)
 801bb24:	f7f8 fa92 	bl	801404c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801bb28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801bb2a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 801bb2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801bb2e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801bb30:	f107 030c 	add.w	r3, r7, #12
 801bb34:	4619      	mov	r1, r3
 801bb36:	4809      	ldr	r0, [pc, #36]	@ (801bb5c <ethernet_link_check_state+0x114>)
 801bb38:	f7f8 fc5c 	bl	80143f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 801bb3c:	4807      	ldr	r0, [pc, #28]	@ (801bb5c <ethernet_link_check_state+0x114>)
 801bb3e:	f7f7 feb1 	bl	80138a4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	f001 fac6 	bl	801d0d4 <netif_set_up>
      netif_set_link_up(netif);
 801bb48:	6878      	ldr	r0, [r7, #4]
 801bb4a:	f001 fb61 	bl	801d210 <netif_set_link_up>
}
 801bb4e:	bf00      	nop
 801bb50:	3780      	adds	r7, #128	@ 0x80
 801bb52:	46bd      	mov	sp, r7
 801bb54:	bd80      	pop	{r7, pc}
 801bb56:	bf00      	nop
 801bb58:	24008098 	.word	0x24008098
 801bb5c:	24007fb0 	.word	0x24007fb0

0801bb60 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801bb60:	b580      	push	{r7, lr}
 801bb62:	b086      	sub	sp, #24
 801bb64:	af02      	add	r7, sp, #8
 801bb66:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801bb68:	4812      	ldr	r0, [pc, #72]	@ (801bbb4 <HAL_ETH_RxAllocateCallback+0x54>)
 801bb6a:	f001 f825 	bl	801cbb8 <memp_malloc_pool>
 801bb6e:	60f8      	str	r0, [r7, #12]
  if (p)
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d014      	beq.n	801bba0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	f103 0220 	add.w	r2, r3, #32
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	4a0d      	ldr	r2, [pc, #52]	@ (801bbb8 <HAL_ETH_RxAllocateCallback+0x58>)
 801bb84:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801bb8e:	9201      	str	r2, [sp, #4]
 801bb90:	9300      	str	r3, [sp, #0]
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	2241      	movs	r2, #65	@ 0x41
 801bb96:	2100      	movs	r1, #0
 801bb98:	2000      	movs	r0, #0
 801bb9a:	f001 fd47 	bl	801d62c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801bb9e:	e005      	b.n	801bbac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 801bba0:	4b06      	ldr	r3, [pc, #24]	@ (801bbbc <HAL_ETH_RxAllocateCallback+0x5c>)
 801bba2:	2201      	movs	r2, #1
 801bba4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	601a      	str	r2, [r3, #0]
}
 801bbac:	bf00      	nop
 801bbae:	3710      	adds	r7, #16
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	bd80      	pop	{r7, pc}
 801bbb4:	08030e00 	.word	0x08030e00
 801bbb8:	0801b7f1 	.word	0x0801b7f1
 801bbbc:	24007fac 	.word	0x24007fac

0801bbc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801bbca:	88fb      	ldrh	r3, [r7, #6]
 801bbcc:	021b      	lsls	r3, r3, #8
 801bbce:	b21a      	sxth	r2, r3
 801bbd0:	88fb      	ldrh	r3, [r7, #6]
 801bbd2:	0a1b      	lsrs	r3, r3, #8
 801bbd4:	b29b      	uxth	r3, r3
 801bbd6:	b21b      	sxth	r3, r3
 801bbd8:	4313      	orrs	r3, r2
 801bbda:	b21b      	sxth	r3, r3
 801bbdc:	b29b      	uxth	r3, r3
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	370c      	adds	r7, #12
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe8:	4770      	bx	lr

0801bbea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801bbea:	b480      	push	{r7}
 801bbec:	b083      	sub	sp, #12
 801bbee:	af00      	add	r7, sp, #0
 801bbf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	061a      	lsls	r2, r3, #24
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	021b      	lsls	r3, r3, #8
 801bbfa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801bbfe:	431a      	orrs	r2, r3
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	0a1b      	lsrs	r3, r3, #8
 801bc04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bc08:	431a      	orrs	r2, r3
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	0e1b      	lsrs	r3, r3, #24
 801bc0e:	4313      	orrs	r3, r2
}
 801bc10:	4618      	mov	r0, r3
 801bc12:	370c      	adds	r7, #12
 801bc14:	46bd      	mov	sp, r7
 801bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1a:	4770      	bx	lr

0801bc1c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 801bc1c:	b480      	push	{r7}
 801bc1e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 801bc20:	bf00      	nop
 801bc22:	46bd      	mov	sp, r7
 801bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc28:	4770      	bx	lr
	...

0801bc2c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 801bc2c:	b480      	push	{r7}
 801bc2e:	b083      	sub	sp, #12
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	4603      	mov	r3, r0
 801bc34:	6039      	str	r1, [r7, #0]
 801bc36:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 801bc38:	79fb      	ldrb	r3, [r7, #7]
 801bc3a:	2b01      	cmp	r3, #1
 801bc3c:	d80f      	bhi.n	801bc5e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d006      	beq.n	801bc52 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 801bc44:	79fb      	ldrb	r3, [r7, #7]
 801bc46:	4909      	ldr	r1, [pc, #36]	@ (801bc6c <dns_setserver+0x40>)
 801bc48:	683a      	ldr	r2, [r7, #0]
 801bc4a:	6812      	ldr	r2, [r2, #0]
 801bc4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 801bc50:	e005      	b.n	801bc5e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 801bc52:	79fb      	ldrb	r3, [r7, #7]
 801bc54:	4905      	ldr	r1, [pc, #20]	@ (801bc6c <dns_setserver+0x40>)
 801bc56:	4a06      	ldr	r2, [pc, #24]	@ (801bc70 <dns_setserver+0x44>)
 801bc58:	6812      	ldr	r2, [r2, #0]
 801bc5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801bc5e:	bf00      	nop
 801bc60:	370c      	adds	r7, #12
 801bc62:	46bd      	mov	sp, r7
 801bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc68:	4770      	bx	lr
 801bc6a:	bf00      	nop
 801bc6c:	24008538 	.word	0x24008538
 801bc70:	08030ef4 	.word	0x08030ef4

0801bc74 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 801bc78:	f000 faa8 	bl	801c1cc <dns_check_entries>
}
 801bc7c:	bf00      	nop
 801bc7e:	bd80      	pop	{r7, pc}

0801bc80 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b090      	sub	sp, #64	@ 0x40
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	4603      	mov	r3, r0
 801bc88:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 801bc8a:	79fa      	ldrb	r2, [r7, #7]
 801bc8c:	4613      	mov	r3, r2
 801bc8e:	011b      	lsls	r3, r3, #4
 801bc90:	4413      	add	r3, r2
 801bc92:	011b      	lsls	r3, r3, #4
 801bc94:	4a6c      	ldr	r2, [pc, #432]	@ (801be48 <dns_send+0x1c8>)
 801bc96:	4413      	add	r3, r2
 801bc98:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801bc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc9c:	7adb      	ldrb	r3, [r3, #11]
 801bc9e:	2b01      	cmp	r3, #1
 801bca0:	d906      	bls.n	801bcb0 <dns_send+0x30>
 801bca2:	4b6a      	ldr	r3, [pc, #424]	@ (801be4c <dns_send+0x1cc>)
 801bca4:	f240 22fa 	movw	r2, #762	@ 0x2fa
 801bca8:	4969      	ldr	r1, [pc, #420]	@ (801be50 <dns_send+0x1d0>)
 801bcaa:	486a      	ldr	r0, [pc, #424]	@ (801be54 <dns_send+0x1d4>)
 801bcac:	f00d fb5c 	bl	8029368 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcb2:	7adb      	ldrb	r3, [r3, #11]
 801bcb4:	461a      	mov	r2, r3
 801bcb6:	4b68      	ldr	r3, [pc, #416]	@ (801be58 <dns_send+0x1d8>)
 801bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d109      	bne.n	801bcd4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801bcc0:	79fb      	ldrb	r3, [r7, #7]
 801bcc2:	2100      	movs	r1, #0
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	f000 f8cb 	bl	801be60 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 801bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bccc:	2200      	movs	r2, #0
 801bcce:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e0b4      	b.n	801be3e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcd6:	3310      	adds	r3, #16
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7e4 fb51 	bl	8000380 <strlen>
 801bcde:	4603      	mov	r3, r0
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	3312      	adds	r3, #18
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bcea:	4619      	mov	r1, r3
 801bcec:	2036      	movs	r0, #54	@ 0x36
 801bcee:	f001 fb73 	bl	801d3d8 <pbuf_alloc>
 801bcf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 801bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	f000 8095 	beq.w	801be26 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801bcfc:	f107 0310 	add.w	r3, r7, #16
 801bd00:	220c      	movs	r2, #12
 801bd02:	2100      	movs	r1, #0
 801bd04:	4618      	mov	r0, r3
 801bd06:	f00d fcdd 	bl	80296c4 <memset>
    hdr.id = lwip_htons(entry->txid);
 801bd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd0c:	891b      	ldrh	r3, [r3, #8]
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f7ff ff56 	bl	801bbc0 <lwip_htons>
 801bd14:	4603      	mov	r3, r0
 801bd16:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 801bd18:	2301      	movs	r3, #1
 801bd1a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 801bd1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bd20:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801bd22:	f107 0310 	add.w	r3, r7, #16
 801bd26:	220c      	movs	r2, #12
 801bd28:	4619      	mov	r1, r3
 801bd2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bd2c:	f002 f8e0 	bl	801def0 <pbuf_take>
    hostname = entry->name;
 801bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd32:	3310      	adds	r3, #16
 801bd34:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 801bd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd38:	3b01      	subs	r3, #1
 801bd3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 801bd3c:	230c      	movs	r3, #12
 801bd3e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 801bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd42:	3301      	adds	r3, #1
 801bd44:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 801bd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd48:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801bd50:	e007      	b.n	801bd62 <dns_send+0xe2>
        ++n;
 801bd52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bd56:	3301      	adds	r3, #1
 801bd58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd5e:	3301      	adds	r3, #1
 801bd60:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd64:	781b      	ldrb	r3, [r3, #0]
 801bd66:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd68:	d003      	beq.n	801bd72 <dns_send+0xf2>
 801bd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd6c:	781b      	ldrb	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d1ef      	bne.n	801bd52 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 801bd72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd76:	1ad3      	subs	r3, r2, r3
 801bd78:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 801bd7a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801bd7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bd80:	4413      	add	r3, r2
 801bd82:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bd86:	4293      	cmp	r3, r2
 801bd88:	dc53      	bgt.n	801be32 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 801bd8a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801bd8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd90:	4619      	mov	r1, r3
 801bd92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bd94:	f002 f9da 	bl	801e14c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801bd98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bda0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bda2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bda4:	f002 f936 	bl	801e014 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 801bda8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bdac:	b29a      	uxth	r2, r3
 801bdae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bdb0:	4413      	add	r3, r2
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	3301      	adds	r3, #1
 801bdb6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 801bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d1bf      	bne.n	801bd40 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 801bdc0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	4619      	mov	r1, r3
 801bdc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bdc8:	f002 f9c0 	bl	801e14c <pbuf_put_at>
    query_idx++;
 801bdcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bdce:	3301      	adds	r3, #1
 801bdd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801bdd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bdd6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801bdd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bddc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801bdde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bde0:	f107 010c 	add.w	r1, r7, #12
 801bde4:	2204      	movs	r2, #4
 801bde6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bde8:	f002 f914 	bl	801e014 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 801bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdee:	7bdb      	ldrb	r3, [r3, #15]
 801bdf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 801bdf4:	2335      	movs	r3, #53	@ 0x35
 801bdf6:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 801bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdfa:	7adb      	ldrb	r3, [r3, #11]
 801bdfc:	009b      	lsls	r3, r3, #2
 801bdfe:	4a16      	ldr	r2, [pc, #88]	@ (801be58 <dns_send+0x1d8>)
 801be00:	4413      	add	r3, r2
 801be02:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801be04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801be08:	4a14      	ldr	r2, [pc, #80]	@ (801be5c <dns_send+0x1dc>)
 801be0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801be0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801be10:	69fa      	ldr	r2, [r7, #28]
 801be12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801be14:	f007 fdde 	bl	80239d4 <udp_sendto>
 801be18:	4603      	mov	r3, r0
 801be1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 801be1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801be20:	f001 fdbe 	bl	801d9a0 <pbuf_free>
 801be24:	e002      	b.n	801be2c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 801be26:	23ff      	movs	r3, #255	@ 0xff
 801be28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 801be2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801be30:	e005      	b.n	801be3e <dns_send+0x1be>
        goto overflow_return;
 801be32:	bf00      	nop
overflow_return:
  pbuf_free(p);
 801be34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801be36:	f001 fdb3 	bl	801d9a0 <pbuf_free>
  return ERR_VAL;
 801be3a:	f06f 0305 	mvn.w	r3, #5
}
 801be3e:	4618      	mov	r0, r3
 801be40:	3740      	adds	r7, #64	@ 0x40
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
 801be46:	bf00      	nop
 801be48:	240080c8 	.word	0x240080c8
 801be4c:	0802daec 	.word	0x0802daec
 801be50:	0802db1c 	.word	0x0802db1c
 801be54:	0802db34 	.word	0x0802db34
 801be58:	24008538 	.word	0x24008538
 801be5c:	240080b8 	.word	0x240080b8

0801be60 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801be60:	b590      	push	{r4, r7, lr}
 801be62:	b085      	sub	sp, #20
 801be64:	af00      	add	r7, sp, #0
 801be66:	4603      	mov	r3, r0
 801be68:	6039      	str	r1, [r7, #0]
 801be6a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801be6c:	2300      	movs	r3, #0
 801be6e:	73fb      	strb	r3, [r7, #15]
 801be70:	e03d      	b.n	801beee <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801be72:	7bfa      	ldrb	r2, [r7, #15]
 801be74:	4957      	ldr	r1, [pc, #348]	@ (801bfd4 <dns_call_found+0x174>)
 801be76:	4613      	mov	r3, r2
 801be78:	005b      	lsls	r3, r3, #1
 801be7a:	4413      	add	r3, r2
 801be7c:	009b      	lsls	r3, r3, #2
 801be7e:	440b      	add	r3, r1
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d030      	beq.n	801bee8 <dns_call_found+0x88>
 801be86:	7bfa      	ldrb	r2, [r7, #15]
 801be88:	4952      	ldr	r1, [pc, #328]	@ (801bfd4 <dns_call_found+0x174>)
 801be8a:	4613      	mov	r3, r2
 801be8c:	005b      	lsls	r3, r3, #1
 801be8e:	4413      	add	r3, r2
 801be90:	009b      	lsls	r3, r3, #2
 801be92:	440b      	add	r3, r1
 801be94:	3308      	adds	r3, #8
 801be96:	781b      	ldrb	r3, [r3, #0]
 801be98:	79fa      	ldrb	r2, [r7, #7]
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d124      	bne.n	801bee8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801be9e:	7bfa      	ldrb	r2, [r7, #15]
 801bea0:	494c      	ldr	r1, [pc, #304]	@ (801bfd4 <dns_call_found+0x174>)
 801bea2:	4613      	mov	r3, r2
 801bea4:	005b      	lsls	r3, r3, #1
 801bea6:	4413      	add	r3, r2
 801bea8:	009b      	lsls	r3, r3, #2
 801beaa:	440b      	add	r3, r1
 801beac:	681c      	ldr	r4, [r3, #0]
 801beae:	79fa      	ldrb	r2, [r7, #7]
 801beb0:	4613      	mov	r3, r2
 801beb2:	011b      	lsls	r3, r3, #4
 801beb4:	4413      	add	r3, r2
 801beb6:	011b      	lsls	r3, r3, #4
 801beb8:	3310      	adds	r3, #16
 801beba:	4a47      	ldr	r2, [pc, #284]	@ (801bfd8 <dns_call_found+0x178>)
 801bebc:	1898      	adds	r0, r3, r2
 801bebe:	7bfa      	ldrb	r2, [r7, #15]
 801bec0:	4944      	ldr	r1, [pc, #272]	@ (801bfd4 <dns_call_found+0x174>)
 801bec2:	4613      	mov	r3, r2
 801bec4:	005b      	lsls	r3, r3, #1
 801bec6:	4413      	add	r3, r2
 801bec8:	009b      	lsls	r3, r3, #2
 801beca:	440b      	add	r3, r1
 801becc:	3304      	adds	r3, #4
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	461a      	mov	r2, r3
 801bed2:	6839      	ldr	r1, [r7, #0]
 801bed4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 801bed6:	7bfa      	ldrb	r2, [r7, #15]
 801bed8:	493e      	ldr	r1, [pc, #248]	@ (801bfd4 <dns_call_found+0x174>)
 801beda:	4613      	mov	r3, r2
 801bedc:	005b      	lsls	r3, r3, #1
 801bede:	4413      	add	r3, r2
 801bee0:	009b      	lsls	r3, r3, #2
 801bee2:	440b      	add	r3, r1
 801bee4:	2200      	movs	r2, #0
 801bee6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801bee8:	7bfb      	ldrb	r3, [r7, #15]
 801beea:	3301      	adds	r3, #1
 801beec:	73fb      	strb	r3, [r7, #15]
 801beee:	7bfb      	ldrb	r3, [r7, #15]
 801bef0:	2b03      	cmp	r3, #3
 801bef2:	d9be      	bls.n	801be72 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801bef4:	2300      	movs	r3, #0
 801bef6:	73fb      	strb	r3, [r7, #15]
 801bef8:	e031      	b.n	801bf5e <dns_call_found+0xfe>
    if (i == idx) {
 801befa:	7bfa      	ldrb	r2, [r7, #15]
 801befc:	79fb      	ldrb	r3, [r7, #7]
 801befe:	429a      	cmp	r2, r3
 801bf00:	d029      	beq.n	801bf56 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801bf02:	7bfa      	ldrb	r2, [r7, #15]
 801bf04:	4934      	ldr	r1, [pc, #208]	@ (801bfd8 <dns_call_found+0x178>)
 801bf06:	4613      	mov	r3, r2
 801bf08:	011b      	lsls	r3, r3, #4
 801bf0a:	4413      	add	r3, r2
 801bf0c:	011b      	lsls	r3, r3, #4
 801bf0e:	440b      	add	r3, r1
 801bf10:	330a      	adds	r3, #10
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	2b02      	cmp	r3, #2
 801bf16:	d11f      	bne.n	801bf58 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801bf18:	7bfa      	ldrb	r2, [r7, #15]
 801bf1a:	492f      	ldr	r1, [pc, #188]	@ (801bfd8 <dns_call_found+0x178>)
 801bf1c:	4613      	mov	r3, r2
 801bf1e:	011b      	lsls	r3, r3, #4
 801bf20:	4413      	add	r3, r2
 801bf22:	011b      	lsls	r3, r3, #4
 801bf24:	440b      	add	r3, r1
 801bf26:	330f      	adds	r3, #15
 801bf28:	7819      	ldrb	r1, [r3, #0]
 801bf2a:	79fa      	ldrb	r2, [r7, #7]
 801bf2c:	482a      	ldr	r0, [pc, #168]	@ (801bfd8 <dns_call_found+0x178>)
 801bf2e:	4613      	mov	r3, r2
 801bf30:	011b      	lsls	r3, r3, #4
 801bf32:	4413      	add	r3, r2
 801bf34:	011b      	lsls	r3, r3, #4
 801bf36:	4403      	add	r3, r0
 801bf38:	330f      	adds	r3, #15
 801bf3a:	781b      	ldrb	r3, [r3, #0]
 801bf3c:	4299      	cmp	r1, r3
 801bf3e:	d10b      	bne.n	801bf58 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801bf40:	79fa      	ldrb	r2, [r7, #7]
 801bf42:	4925      	ldr	r1, [pc, #148]	@ (801bfd8 <dns_call_found+0x178>)
 801bf44:	4613      	mov	r3, r2
 801bf46:	011b      	lsls	r3, r3, #4
 801bf48:	4413      	add	r3, r2
 801bf4a:	011b      	lsls	r3, r3, #4
 801bf4c:	440b      	add	r3, r1
 801bf4e:	330f      	adds	r3, #15
 801bf50:	2204      	movs	r2, #4
 801bf52:	701a      	strb	r2, [r3, #0]
        break;
 801bf54:	e006      	b.n	801bf64 <dns_call_found+0x104>
      continue; /* only check other requests */
 801bf56:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801bf58:	7bfb      	ldrb	r3, [r7, #15]
 801bf5a:	3301      	adds	r3, #1
 801bf5c:	73fb      	strb	r3, [r7, #15]
 801bf5e:	7bfb      	ldrb	r3, [r7, #15]
 801bf60:	2b03      	cmp	r3, #3
 801bf62:	d9ca      	bls.n	801befa <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801bf64:	79fa      	ldrb	r2, [r7, #7]
 801bf66:	491c      	ldr	r1, [pc, #112]	@ (801bfd8 <dns_call_found+0x178>)
 801bf68:	4613      	mov	r3, r2
 801bf6a:	011b      	lsls	r3, r3, #4
 801bf6c:	4413      	add	r3, r2
 801bf6e:	011b      	lsls	r3, r3, #4
 801bf70:	440b      	add	r3, r1
 801bf72:	330f      	adds	r3, #15
 801bf74:	781b      	ldrb	r3, [r3, #0]
 801bf76:	2b03      	cmp	r3, #3
 801bf78:	d827      	bhi.n	801bfca <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801bf7a:	79fa      	ldrb	r2, [r7, #7]
 801bf7c:	4916      	ldr	r1, [pc, #88]	@ (801bfd8 <dns_call_found+0x178>)
 801bf7e:	4613      	mov	r3, r2
 801bf80:	011b      	lsls	r3, r3, #4
 801bf82:	4413      	add	r3, r2
 801bf84:	011b      	lsls	r3, r3, #4
 801bf86:	440b      	add	r3, r1
 801bf88:	330f      	adds	r3, #15
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	461a      	mov	r2, r3
 801bf8e:	4b13      	ldr	r3, [pc, #76]	@ (801bfdc <dns_call_found+0x17c>)
 801bf90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf94:	4618      	mov	r0, r3
 801bf96:	f007 ffe9 	bl	8023f6c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801bf9a:	79fa      	ldrb	r2, [r7, #7]
 801bf9c:	490e      	ldr	r1, [pc, #56]	@ (801bfd8 <dns_call_found+0x178>)
 801bf9e:	4613      	mov	r3, r2
 801bfa0:	011b      	lsls	r3, r3, #4
 801bfa2:	4413      	add	r3, r2
 801bfa4:	011b      	lsls	r3, r3, #4
 801bfa6:	440b      	add	r3, r1
 801bfa8:	330f      	adds	r3, #15
 801bfaa:	781b      	ldrb	r3, [r3, #0]
 801bfac:	4619      	mov	r1, r3
 801bfae:	4b0b      	ldr	r3, [pc, #44]	@ (801bfdc <dns_call_found+0x17c>)
 801bfb0:	2200      	movs	r2, #0
 801bfb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801bfb6:	79fa      	ldrb	r2, [r7, #7]
 801bfb8:	4907      	ldr	r1, [pc, #28]	@ (801bfd8 <dns_call_found+0x178>)
 801bfba:	4613      	mov	r3, r2
 801bfbc:	011b      	lsls	r3, r3, #4
 801bfbe:	4413      	add	r3, r2
 801bfc0:	011b      	lsls	r3, r3, #4
 801bfc2:	440b      	add	r3, r1
 801bfc4:	330f      	adds	r3, #15
 801bfc6:	2204      	movs	r2, #4
 801bfc8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 801bfca:	bf00      	nop
 801bfcc:	3714      	adds	r7, #20
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bd90      	pop	{r4, r7, pc}
 801bfd2:	bf00      	nop
 801bfd4:	24008508 	.word	0x24008508
 801bfd8:	240080c8 	.word	0x240080c8
 801bfdc:	240080b8 	.word	0x240080b8

0801bfe0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b082      	sub	sp, #8
 801bfe4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 801bfe6:	f00c fbf1 	bl	80287cc <rand>
 801bfea:	4603      	mov	r3, r0
 801bfec:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801bfee:	2300      	movs	r3, #0
 801bff0:	71fb      	strb	r3, [r7, #7]
 801bff2:	e01a      	b.n	801c02a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801bff4:	79fa      	ldrb	r2, [r7, #7]
 801bff6:	4911      	ldr	r1, [pc, #68]	@ (801c03c <dns_create_txid+0x5c>)
 801bff8:	4613      	mov	r3, r2
 801bffa:	011b      	lsls	r3, r3, #4
 801bffc:	4413      	add	r3, r2
 801bffe:	011b      	lsls	r3, r3, #4
 801c000:	440b      	add	r3, r1
 801c002:	330a      	adds	r3, #10
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	2b02      	cmp	r3, #2
 801c008:	d10c      	bne.n	801c024 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 801c00a:	79fa      	ldrb	r2, [r7, #7]
 801c00c:	490b      	ldr	r1, [pc, #44]	@ (801c03c <dns_create_txid+0x5c>)
 801c00e:	4613      	mov	r3, r2
 801c010:	011b      	lsls	r3, r3, #4
 801c012:	4413      	add	r3, r2
 801c014:	011b      	lsls	r3, r3, #4
 801c016:	440b      	add	r3, r1
 801c018:	3308      	adds	r3, #8
 801c01a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801c01c:	88ba      	ldrh	r2, [r7, #4]
 801c01e:	429a      	cmp	r2, r3
 801c020:	d100      	bne.n	801c024 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 801c022:	e7e0      	b.n	801bfe6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801c024:	79fb      	ldrb	r3, [r7, #7]
 801c026:	3301      	adds	r3, #1
 801c028:	71fb      	strb	r3, [r7, #7]
 801c02a:	79fb      	ldrb	r3, [r7, #7]
 801c02c:	2b03      	cmp	r3, #3
 801c02e:	d9e1      	bls.n	801bff4 <dns_create_txid+0x14>
    }
  }

  return txid;
 801c030:	88bb      	ldrh	r3, [r7, #4]
}
 801c032:	4618      	mov	r0, r3
 801c034:	3708      	adds	r7, #8
 801c036:	46bd      	mov	sp, r7
 801c038:	bd80      	pop	{r7, pc}
 801c03a:	bf00      	nop
 801c03c:	240080c8 	.word	0x240080c8

0801c040 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 801c040:	b480      	push	{r7}
 801c042:	b085      	sub	sp, #20
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 801c048:	2300      	movs	r3, #0
 801c04a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d00d      	beq.n	801c06e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	7adb      	ldrb	r3, [r3, #11]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d109      	bne.n	801c06e <dns_backupserver_available+0x2e>
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	7adb      	ldrb	r3, [r3, #11]
 801c05e:	3301      	adds	r3, #1
 801c060:	4a06      	ldr	r2, [pc, #24]	@ (801c07c <dns_backupserver_available+0x3c>)
 801c062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d001      	beq.n	801c06e <dns_backupserver_available+0x2e>
      ret = 1;
 801c06a:	2301      	movs	r3, #1
 801c06c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c070:	4618      	mov	r0, r3
 801c072:	3714      	adds	r7, #20
 801c074:	46bd      	mov	sp, r7
 801c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07a:	4770      	bx	lr
 801c07c:	24008538 	.word	0x24008538

0801c080 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
 801c086:	4603      	mov	r3, r0
 801c088:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 801c08a:	79fa      	ldrb	r2, [r7, #7]
 801c08c:	4613      	mov	r3, r2
 801c08e:	011b      	lsls	r3, r3, #4
 801c090:	4413      	add	r3, r2
 801c092:	011b      	lsls	r3, r3, #4
 801c094:	4a48      	ldr	r2, [pc, #288]	@ (801c1b8 <dns_check_entry+0x138>)
 801c096:	4413      	add	r3, r2
 801c098:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801c09a:	79fb      	ldrb	r3, [r7, #7]
 801c09c:	2b03      	cmp	r3, #3
 801c09e:	d906      	bls.n	801c0ae <dns_check_entry+0x2e>
 801c0a0:	4b46      	ldr	r3, [pc, #280]	@ (801c1bc <dns_check_entry+0x13c>)
 801c0a2:	f240 421c 	movw	r2, #1052	@ 0x41c
 801c0a6:	4946      	ldr	r1, [pc, #280]	@ (801c1c0 <dns_check_entry+0x140>)
 801c0a8:	4846      	ldr	r0, [pc, #280]	@ (801c1c4 <dns_check_entry+0x144>)
 801c0aa:	f00d f95d 	bl	8029368 <iprintf>

  switch (entry->state) {
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	7a9b      	ldrb	r3, [r3, #10]
 801c0b2:	2b03      	cmp	r3, #3
 801c0b4:	d86f      	bhi.n	801c196 <dns_check_entry+0x116>
 801c0b6:	a201      	add	r2, pc, #4	@ (adr r2, 801c0bc <dns_check_entry+0x3c>)
 801c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0bc:	0801c1a7 	.word	0x0801c1a7
 801c0c0:	0801c0cd 	.word	0x0801c0cd
 801c0c4:	0801c0ff 	.word	0x0801c0ff
 801c0c8:	0801c175 	.word	0x0801c175
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 801c0cc:	f7ff ff88 	bl	801bfe0 <dns_create_txid>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	461a      	mov	r2, r3
 801c0d4:	68fb      	ldr	r3, [r7, #12]
 801c0d6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	2202      	movs	r2, #2
 801c0dc:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	2201      	movs	r2, #1
 801c0e8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 801c0f0:	79fb      	ldrb	r3, [r7, #7]
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7ff fdc4 	bl	801bc80 <dns_send>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 801c0fc:	e058      	b.n	801c1b0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	7b1b      	ldrb	r3, [r3, #12]
 801c102:	3b01      	subs	r3, #1
 801c104:	b2da      	uxtb	r2, r3
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	731a      	strb	r2, [r3, #12]
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	7b1b      	ldrb	r3, [r3, #12]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d14b      	bne.n	801c1aa <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	7b5b      	ldrb	r3, [r3, #13]
 801c116:	3301      	adds	r3, #1
 801c118:	b2da      	uxtb	r2, r3
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	735a      	strb	r2, [r3, #13]
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	7b5b      	ldrb	r3, [r3, #13]
 801c122:	2b04      	cmp	r3, #4
 801c124:	d11b      	bne.n	801c15e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 801c126:	68f8      	ldr	r0, [r7, #12]
 801c128:	f7ff ff8a 	bl	801c040 <dns_backupserver_available>
 801c12c:	4603      	mov	r3, r0
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d00c      	beq.n	801c14c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	7adb      	ldrb	r3, [r3, #11]
 801c136:	3301      	adds	r3, #1
 801c138:	b2da      	uxtb	r2, r3
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	2201      	movs	r2, #1
 801c142:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2200      	movs	r2, #0
 801c148:	735a      	strb	r2, [r3, #13]
 801c14a:	e00c      	b.n	801c166 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 801c14c:	79fb      	ldrb	r3, [r7, #7]
 801c14e:	2100      	movs	r1, #0
 801c150:	4618      	mov	r0, r3
 801c152:	f7ff fe85 	bl	801be60 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	2200      	movs	r2, #0
 801c15a:	729a      	strb	r2, [r3, #10]
            break;
 801c15c:	e028      	b.n	801c1b0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	7b5a      	ldrb	r2, [r3, #13]
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 801c166:	79fb      	ldrb	r3, [r7, #7]
 801c168:	4618      	mov	r0, r3
 801c16a:	f7ff fd89 	bl	801bc80 <dns_send>
 801c16e:	4603      	mov	r3, r0
 801c170:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 801c172:	e01a      	b.n	801c1aa <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d008      	beq.n	801c18e <dns_check_entry+0x10e>
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	1e5a      	subs	r2, r3, #1
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	601a      	str	r2, [r3, #0]
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d10f      	bne.n	801c1ae <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	2200      	movs	r2, #0
 801c192:	729a      	strb	r2, [r3, #10]
      }
      break;
 801c194:	e00b      	b.n	801c1ae <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801c196:	4b09      	ldr	r3, [pc, #36]	@ (801c1bc <dns_check_entry+0x13c>)
 801c198:	f240 425b 	movw	r2, #1115	@ 0x45b
 801c19c:	490a      	ldr	r1, [pc, #40]	@ (801c1c8 <dns_check_entry+0x148>)
 801c19e:	4809      	ldr	r0, [pc, #36]	@ (801c1c4 <dns_check_entry+0x144>)
 801c1a0:	f00d f8e2 	bl	8029368 <iprintf>
      break;
 801c1a4:	e004      	b.n	801c1b0 <dns_check_entry+0x130>
      break;
 801c1a6:	bf00      	nop
 801c1a8:	e002      	b.n	801c1b0 <dns_check_entry+0x130>
      break;
 801c1aa:	bf00      	nop
 801c1ac:	e000      	b.n	801c1b0 <dns_check_entry+0x130>
      break;
 801c1ae:	bf00      	nop
  }
}
 801c1b0:	bf00      	nop
 801c1b2:	3710      	adds	r7, #16
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	bd80      	pop	{r7, pc}
 801c1b8:	240080c8 	.word	0x240080c8
 801c1bc:	0802daec 	.word	0x0802daec
 801c1c0:	0802db5c 	.word	0x0802db5c
 801c1c4:	0802db34 	.word	0x0802db34
 801c1c8:	0802db78 	.word	0x0802db78

0801c1cc <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	71fb      	strb	r3, [r7, #7]
 801c1d6:	e006      	b.n	801c1e6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 801c1d8:	79fb      	ldrb	r3, [r7, #7]
 801c1da:	4618      	mov	r0, r3
 801c1dc:	f7ff ff50 	bl	801c080 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801c1e0:	79fb      	ldrb	r3, [r7, #7]
 801c1e2:	3301      	adds	r3, #1
 801c1e4:	71fb      	strb	r3, [r7, #7]
 801c1e6:	79fb      	ldrb	r3, [r7, #7]
 801c1e8:	2b03      	cmp	r3, #3
 801c1ea:	d9f5      	bls.n	801c1d8 <dns_check_entries+0xc>
  }
}
 801c1ec:	bf00      	nop
 801c1ee:	bf00      	nop
 801c1f0:	3708      	adds	r7, #8
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}

0801c1f6 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801c1f6:	b480      	push	{r7}
 801c1f8:	b089      	sub	sp, #36	@ 0x24
 801c1fa:	af00      	add	r7, sp, #0
 801c1fc:	6078      	str	r0, [r7, #4]
 801c1fe:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801c204:	2300      	movs	r3, #0
 801c206:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801c208:	2300      	movs	r3, #0
 801c20a:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801c20c:	69fb      	ldr	r3, [r7, #28]
 801c20e:	f003 0301 	and.w	r3, r3, #1
 801c212:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801c214:	693b      	ldr	r3, [r7, #16]
 801c216:	2b00      	cmp	r3, #0
 801c218:	d00d      	beq.n	801c236 <lwip_standard_chksum+0x40>
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	dd0a      	ble.n	801c236 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801c220:	69fa      	ldr	r2, [r7, #28]
 801c222:	1c53      	adds	r3, r2, #1
 801c224:	61fb      	str	r3, [r7, #28]
 801c226:	f107 030e 	add.w	r3, r7, #14
 801c22a:	3301      	adds	r3, #1
 801c22c:	7812      	ldrb	r2, [r2, #0]
 801c22e:	701a      	strb	r2, [r3, #0]
    len--;
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	3b01      	subs	r3, #1
 801c234:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801c23a:	e00a      	b.n	801c252 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801c23c:	69bb      	ldr	r3, [r7, #24]
 801c23e:	1c9a      	adds	r2, r3, #2
 801c240:	61ba      	str	r2, [r7, #24]
 801c242:	881b      	ldrh	r3, [r3, #0]
 801c244:	461a      	mov	r2, r3
 801c246:	697b      	ldr	r3, [r7, #20]
 801c248:	4413      	add	r3, r2
 801c24a:	617b      	str	r3, [r7, #20]
    len -= 2;
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	3b02      	subs	r3, #2
 801c250:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	2b01      	cmp	r3, #1
 801c256:	dcf1      	bgt.n	801c23c <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801c258:	683b      	ldr	r3, [r7, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	dd04      	ble.n	801c268 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801c25e:	f107 030e 	add.w	r3, r7, #14
 801c262:	69ba      	ldr	r2, [r7, #24]
 801c264:	7812      	ldrb	r2, [r2, #0]
 801c266:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801c268:	89fb      	ldrh	r3, [r7, #14]
 801c26a:	461a      	mov	r2, r3
 801c26c:	697b      	ldr	r3, [r7, #20]
 801c26e:	4413      	add	r3, r2
 801c270:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801c272:	697b      	ldr	r3, [r7, #20]
 801c274:	0c1a      	lsrs	r2, r3, #16
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	b29b      	uxth	r3, r3
 801c27a:	4413      	add	r3, r2
 801c27c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 801c27e:	697b      	ldr	r3, [r7, #20]
 801c280:	0c1a      	lsrs	r2, r3, #16
 801c282:	697b      	ldr	r3, [r7, #20]
 801c284:	b29b      	uxth	r3, r3
 801c286:	4413      	add	r3, r2
 801c288:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801c28a:	693b      	ldr	r3, [r7, #16]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d007      	beq.n	801c2a0 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801c290:	697b      	ldr	r3, [r7, #20]
 801c292:	021b      	lsls	r3, r3, #8
 801c294:	b29a      	uxth	r2, r3
 801c296:	697b      	ldr	r3, [r7, #20]
 801c298:	0a1b      	lsrs	r3, r3, #8
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	4313      	orrs	r3, r2
 801c29e:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801c2a0:	697b      	ldr	r3, [r7, #20]
 801c2a2:	b29b      	uxth	r3, r3
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3724      	adds	r7, #36	@ 0x24
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ae:	4770      	bx	lr

0801c2b0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b082      	sub	sp, #8
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
 801c2b8:	460b      	mov	r3, r1
 801c2ba:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801c2bc:	887b      	ldrh	r3, [r7, #2]
 801c2be:	4619      	mov	r1, r3
 801c2c0:	6878      	ldr	r0, [r7, #4]
 801c2c2:	f7ff ff98 	bl	801c1f6 <lwip_standard_chksum>
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	43db      	mvns	r3, r3
 801c2ca:	b29b      	uxth	r3, r3
}
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	3708      	adds	r7, #8
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	bd80      	pop	{r7, pc}

0801c2d4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b086      	sub	sp, #24
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801c2dc:	2300      	movs	r3, #0
 801c2de:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	613b      	str	r3, [r7, #16]
 801c2e8:	e02b      	b.n	801c342 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801c2ea:	693b      	ldr	r3, [r7, #16]
 801c2ec:	685a      	ldr	r2, [r3, #4]
 801c2ee:	693b      	ldr	r3, [r7, #16]
 801c2f0:	895b      	ldrh	r3, [r3, #10]
 801c2f2:	4619      	mov	r1, r3
 801c2f4:	4610      	mov	r0, r2
 801c2f6:	f7ff ff7e 	bl	801c1f6 <lwip_standard_chksum>
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	461a      	mov	r2, r3
 801c2fe:	697b      	ldr	r3, [r7, #20]
 801c300:	4413      	add	r3, r2
 801c302:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801c304:	697b      	ldr	r3, [r7, #20]
 801c306:	0c1a      	lsrs	r2, r3, #16
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	b29b      	uxth	r3, r3
 801c30c:	4413      	add	r3, r2
 801c30e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	895b      	ldrh	r3, [r3, #10]
 801c314:	f003 0301 	and.w	r3, r3, #1
 801c318:	b29b      	uxth	r3, r3
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d00e      	beq.n	801c33c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	2b00      	cmp	r3, #0
 801c322:	bf0c      	ite	eq
 801c324:	2301      	moveq	r3, #1
 801c326:	2300      	movne	r3, #0
 801c328:	b2db      	uxtb	r3, r3
 801c32a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 801c32c:	697b      	ldr	r3, [r7, #20]
 801c32e:	021b      	lsls	r3, r3, #8
 801c330:	b29a      	uxth	r2, r3
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	0a1b      	lsrs	r3, r3, #8
 801c336:	b2db      	uxtb	r3, r3
 801c338:	4313      	orrs	r3, r2
 801c33a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801c33c:	693b      	ldr	r3, [r7, #16]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	613b      	str	r3, [r7, #16]
 801c342:	693b      	ldr	r3, [r7, #16]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d1d0      	bne.n	801c2ea <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d007      	beq.n	801c35e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 801c34e:	697b      	ldr	r3, [r7, #20]
 801c350:	021b      	lsls	r3, r3, #8
 801c352:	b29a      	uxth	r2, r3
 801c354:	697b      	ldr	r3, [r7, #20]
 801c356:	0a1b      	lsrs	r3, r3, #8
 801c358:	b2db      	uxtb	r3, r3
 801c35a:	4313      	orrs	r3, r2
 801c35c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 801c35e:	697b      	ldr	r3, [r7, #20]
 801c360:	b29b      	uxth	r3, r3
 801c362:	43db      	mvns	r3, r3
 801c364:	b29b      	uxth	r3, r3
}
 801c366:	4618      	mov	r0, r3
 801c368:	3718      	adds	r7, #24
 801c36a:	46bd      	mov	sp, r7
 801c36c:	bd80      	pop	{r7, pc}

0801c36e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801c36e:	b580      	push	{r7, lr}
 801c370:	b082      	sub	sp, #8
 801c372:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801c374:	2300      	movs	r3, #0
 801c376:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801c378:	f000 f8d6 	bl	801c528 <mem_init>
  memp_init();
 801c37c:	f000 fbd8 	bl	801cb30 <memp_init>
  pbuf_init();
  netif_init();
 801c380:	f000 fcd6 	bl	801cd30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801c384:	f007 f964 	bl	8023650 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801c388:	f001 ff02 	bl	801e190 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801c38c:	f7ff fc46 	bl	801bc1c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801c390:	f007 f916 	bl	80235c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801c394:	bf00      	nop
 801c396:	3708      	adds	r7, #8
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}

0801c39c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801c39c:	b480      	push	{r7}
 801c39e:	b083      	sub	sp, #12
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801c3a6:	4b05      	ldr	r3, [pc, #20]	@ (801c3bc <ptr_to_mem+0x20>)
 801c3a8:	681a      	ldr	r2, [r3, #0]
 801c3aa:	88fb      	ldrh	r3, [r7, #6]
 801c3ac:	4413      	add	r3, r2
}
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	370c      	adds	r7, #12
 801c3b2:	46bd      	mov	sp, r7
 801c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b8:	4770      	bx	lr
 801c3ba:	bf00      	nop
 801c3bc:	24008558 	.word	0x24008558

0801c3c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801c3c0:	b480      	push	{r7}
 801c3c2:	b083      	sub	sp, #12
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801c3c8:	4b05      	ldr	r3, [pc, #20]	@ (801c3e0 <mem_to_ptr+0x20>)
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	b29b      	uxth	r3, r3
}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	370c      	adds	r7, #12
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3dc:	4770      	bx	lr
 801c3de:	bf00      	nop
 801c3e0:	24008558 	.word	0x24008558

0801c3e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801c3e4:	b590      	push	{r4, r7, lr}
 801c3e6:	b085      	sub	sp, #20
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801c3ec:	4b45      	ldr	r3, [pc, #276]	@ (801c504 <plug_holes+0x120>)
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	687a      	ldr	r2, [r7, #4]
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d206      	bcs.n	801c404 <plug_holes+0x20>
 801c3f6:	4b44      	ldr	r3, [pc, #272]	@ (801c508 <plug_holes+0x124>)
 801c3f8:	f240 12df 	movw	r2, #479	@ 0x1df
 801c3fc:	4943      	ldr	r1, [pc, #268]	@ (801c50c <plug_holes+0x128>)
 801c3fe:	4844      	ldr	r0, [pc, #272]	@ (801c510 <plug_holes+0x12c>)
 801c400:	f00c ffb2 	bl	8029368 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801c404:	4b43      	ldr	r3, [pc, #268]	@ (801c514 <plug_holes+0x130>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	687a      	ldr	r2, [r7, #4]
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d306      	bcc.n	801c41c <plug_holes+0x38>
 801c40e:	4b3e      	ldr	r3, [pc, #248]	@ (801c508 <plug_holes+0x124>)
 801c410:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c414:	4940      	ldr	r1, [pc, #256]	@ (801c518 <plug_holes+0x134>)
 801c416:	483e      	ldr	r0, [pc, #248]	@ (801c510 <plug_holes+0x12c>)
 801c418:	f00c ffa6 	bl	8029368 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	791b      	ldrb	r3, [r3, #4]
 801c420:	2b00      	cmp	r3, #0
 801c422:	d006      	beq.n	801c432 <plug_holes+0x4e>
 801c424:	4b38      	ldr	r3, [pc, #224]	@ (801c508 <plug_holes+0x124>)
 801c426:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801c42a:	493c      	ldr	r1, [pc, #240]	@ (801c51c <plug_holes+0x138>)
 801c42c:	4838      	ldr	r0, [pc, #224]	@ (801c510 <plug_holes+0x12c>)
 801c42e:	f00c ff9b 	bl	8029368 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	881b      	ldrh	r3, [r3, #0]
 801c436:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c43a:	d906      	bls.n	801c44a <plug_holes+0x66>
 801c43c:	4b32      	ldr	r3, [pc, #200]	@ (801c508 <plug_holes+0x124>)
 801c43e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801c442:	4937      	ldr	r1, [pc, #220]	@ (801c520 <plug_holes+0x13c>)
 801c444:	4832      	ldr	r0, [pc, #200]	@ (801c510 <plug_holes+0x12c>)
 801c446:	f00c ff8f 	bl	8029368 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	881b      	ldrh	r3, [r3, #0]
 801c44e:	4618      	mov	r0, r3
 801c450:	f7ff ffa4 	bl	801c39c <ptr_to_mem>
 801c454:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801c456:	687a      	ldr	r2, [r7, #4]
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d024      	beq.n	801c4a8 <plug_holes+0xc4>
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	791b      	ldrb	r3, [r3, #4]
 801c462:	2b00      	cmp	r3, #0
 801c464:	d120      	bne.n	801c4a8 <plug_holes+0xc4>
 801c466:	4b2b      	ldr	r3, [pc, #172]	@ (801c514 <plug_holes+0x130>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	68fa      	ldr	r2, [r7, #12]
 801c46c:	429a      	cmp	r2, r3
 801c46e:	d01b      	beq.n	801c4a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801c470:	4b2c      	ldr	r3, [pc, #176]	@ (801c524 <plug_holes+0x140>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	68fa      	ldr	r2, [r7, #12]
 801c476:	429a      	cmp	r2, r3
 801c478:	d102      	bne.n	801c480 <plug_holes+0x9c>
      lfree = mem;
 801c47a:	4a2a      	ldr	r2, [pc, #168]	@ (801c524 <plug_holes+0x140>)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	881a      	ldrh	r2, [r3, #0]
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	881b      	ldrh	r3, [r3, #0]
 801c48c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c490:	d00a      	beq.n	801c4a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	881b      	ldrh	r3, [r3, #0]
 801c496:	4618      	mov	r0, r3
 801c498:	f7ff ff80 	bl	801c39c <ptr_to_mem>
 801c49c:	4604      	mov	r4, r0
 801c49e:	6878      	ldr	r0, [r7, #4]
 801c4a0:	f7ff ff8e 	bl	801c3c0 <mem_to_ptr>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	885b      	ldrh	r3, [r3, #2]
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	f7ff ff75 	bl	801c39c <ptr_to_mem>
 801c4b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801c4b4:	68ba      	ldr	r2, [r7, #8]
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	429a      	cmp	r2, r3
 801c4ba:	d01f      	beq.n	801c4fc <plug_holes+0x118>
 801c4bc:	68bb      	ldr	r3, [r7, #8]
 801c4be:	791b      	ldrb	r3, [r3, #4]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d11b      	bne.n	801c4fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801c4c4:	4b17      	ldr	r3, [pc, #92]	@ (801c524 <plug_holes+0x140>)
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	687a      	ldr	r2, [r7, #4]
 801c4ca:	429a      	cmp	r2, r3
 801c4cc:	d102      	bne.n	801c4d4 <plug_holes+0xf0>
      lfree = pmem;
 801c4ce:	4a15      	ldr	r2, [pc, #84]	@ (801c524 <plug_holes+0x140>)
 801c4d0:	68bb      	ldr	r3, [r7, #8]
 801c4d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	881a      	ldrh	r2, [r3, #0]
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	881b      	ldrh	r3, [r3, #0]
 801c4e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c4e4:	d00a      	beq.n	801c4fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	881b      	ldrh	r3, [r3, #0]
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	f7ff ff56 	bl	801c39c <ptr_to_mem>
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	68b8      	ldr	r0, [r7, #8]
 801c4f4:	f7ff ff64 	bl	801c3c0 <mem_to_ptr>
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801c4fc:	bf00      	nop
 801c4fe:	3714      	adds	r7, #20
 801c500:	46bd      	mov	sp, r7
 801c502:	bd90      	pop	{r4, r7, pc}
 801c504:	24008558 	.word	0x24008558
 801c508:	0802db98 	.word	0x0802db98
 801c50c:	0802dbc8 	.word	0x0802dbc8
 801c510:	0802dbe0 	.word	0x0802dbe0
 801c514:	2400855c 	.word	0x2400855c
 801c518:	0802dc08 	.word	0x0802dc08
 801c51c:	0802dc24 	.word	0x0802dc24
 801c520:	0802dc40 	.word	0x0802dc40
 801c524:	24008560 	.word	0x24008560

0801c528 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b082      	sub	sp, #8
 801c52c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801c52e:	4b16      	ldr	r3, [pc, #88]	@ (801c588 <mem_init+0x60>)
 801c530:	4a16      	ldr	r2, [pc, #88]	@ (801c58c <mem_init+0x64>)
 801c532:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801c534:	4b14      	ldr	r3, [pc, #80]	@ (801c588 <mem_init+0x60>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801c540:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	2200      	movs	r2, #0
 801c546:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	2200      	movs	r2, #0
 801c54c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801c54e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 801c552:	f7ff ff23 	bl	801c39c <ptr_to_mem>
 801c556:	4603      	mov	r3, r0
 801c558:	4a0d      	ldr	r2, [pc, #52]	@ (801c590 <mem_init+0x68>)
 801c55a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801c55c:	4b0c      	ldr	r3, [pc, #48]	@ (801c590 <mem_init+0x68>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	2201      	movs	r2, #1
 801c562:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801c564:	4b0a      	ldr	r3, [pc, #40]	@ (801c590 <mem_init+0x68>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801c56c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801c56e:	4b08      	ldr	r3, [pc, #32]	@ (801c590 <mem_init+0x68>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801c576:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801c578:	4b03      	ldr	r3, [pc, #12]	@ (801c588 <mem_init+0x60>)
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	4a05      	ldr	r2, [pc, #20]	@ (801c594 <mem_init+0x6c>)
 801c57e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801c580:	bf00      	nop
 801c582:	3708      	adds	r7, #8
 801c584:	46bd      	mov	sp, r7
 801c586:	bd80      	pop	{r7, pc}
 801c588:	24008558 	.word	0x24008558
 801c58c:	30004000 	.word	0x30004000
 801c590:	2400855c 	.word	0x2400855c
 801c594:	24008560 	.word	0x24008560

0801c598 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b086      	sub	sp, #24
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801c5a0:	6878      	ldr	r0, [r7, #4]
 801c5a2:	f7ff ff0d 	bl	801c3c0 <mem_to_ptr>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	881b      	ldrh	r3, [r3, #0]
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	f7ff fef4 	bl	801c39c <ptr_to_mem>
 801c5b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	885b      	ldrh	r3, [r3, #2]
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7ff feee 	bl	801c39c <ptr_to_mem>
 801c5c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	881b      	ldrh	r3, [r3, #0]
 801c5c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c5ca:	d818      	bhi.n	801c5fe <mem_link_valid+0x66>
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	885b      	ldrh	r3, [r3, #2]
 801c5d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c5d4:	d813      	bhi.n	801c5fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801c5da:	8afa      	ldrh	r2, [r7, #22]
 801c5dc:	429a      	cmp	r2, r3
 801c5de:	d004      	beq.n	801c5ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	881b      	ldrh	r3, [r3, #0]
 801c5e4:	8afa      	ldrh	r2, [r7, #22]
 801c5e6:	429a      	cmp	r2, r3
 801c5e8:	d109      	bne.n	801c5fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801c5ea:	4b08      	ldr	r3, [pc, #32]	@ (801c60c <mem_link_valid+0x74>)
 801c5ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801c5ee:	693a      	ldr	r2, [r7, #16]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d006      	beq.n	801c602 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801c5f4:	693b      	ldr	r3, [r7, #16]
 801c5f6:	885b      	ldrh	r3, [r3, #2]
 801c5f8:	8afa      	ldrh	r2, [r7, #22]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	d001      	beq.n	801c602 <mem_link_valid+0x6a>
    return 0;
 801c5fe:	2300      	movs	r3, #0
 801c600:	e000      	b.n	801c604 <mem_link_valid+0x6c>
  }
  return 1;
 801c602:	2301      	movs	r3, #1
}
 801c604:	4618      	mov	r0, r3
 801c606:	3718      	adds	r7, #24
 801c608:	46bd      	mov	sp, r7
 801c60a:	bd80      	pop	{r7, pc}
 801c60c:	2400855c 	.word	0x2400855c

0801c610 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b084      	sub	sp, #16
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d04c      	beq.n	801c6b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	f003 0303 	and.w	r3, r3, #3
 801c624:	2b00      	cmp	r3, #0
 801c626:	d007      	beq.n	801c638 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801c628:	4b25      	ldr	r3, [pc, #148]	@ (801c6c0 <mem_free+0xb0>)
 801c62a:	f240 2273 	movw	r2, #627	@ 0x273
 801c62e:	4925      	ldr	r1, [pc, #148]	@ (801c6c4 <mem_free+0xb4>)
 801c630:	4825      	ldr	r0, [pc, #148]	@ (801c6c8 <mem_free+0xb8>)
 801c632:	f00c fe99 	bl	8029368 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801c636:	e040      	b.n	801c6ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	3b08      	subs	r3, #8
 801c63c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801c63e:	4b23      	ldr	r3, [pc, #140]	@ (801c6cc <mem_free+0xbc>)
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	68fa      	ldr	r2, [r7, #12]
 801c644:	429a      	cmp	r2, r3
 801c646:	d306      	bcc.n	801c656 <mem_free+0x46>
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	f103 020c 	add.w	r2, r3, #12
 801c64e:	4b20      	ldr	r3, [pc, #128]	@ (801c6d0 <mem_free+0xc0>)
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	429a      	cmp	r2, r3
 801c654:	d907      	bls.n	801c666 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801c656:	4b1a      	ldr	r3, [pc, #104]	@ (801c6c0 <mem_free+0xb0>)
 801c658:	f240 227f 	movw	r2, #639	@ 0x27f
 801c65c:	491d      	ldr	r1, [pc, #116]	@ (801c6d4 <mem_free+0xc4>)
 801c65e:	481a      	ldr	r0, [pc, #104]	@ (801c6c8 <mem_free+0xb8>)
 801c660:	f00c fe82 	bl	8029368 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801c664:	e029      	b.n	801c6ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	791b      	ldrb	r3, [r3, #4]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d107      	bne.n	801c67e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801c66e:	4b14      	ldr	r3, [pc, #80]	@ (801c6c0 <mem_free+0xb0>)
 801c670:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801c674:	4918      	ldr	r1, [pc, #96]	@ (801c6d8 <mem_free+0xc8>)
 801c676:	4814      	ldr	r0, [pc, #80]	@ (801c6c8 <mem_free+0xb8>)
 801c678:	f00c fe76 	bl	8029368 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801c67c:	e01d      	b.n	801c6ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801c67e:	68f8      	ldr	r0, [r7, #12]
 801c680:	f7ff ff8a 	bl	801c598 <mem_link_valid>
 801c684:	4603      	mov	r3, r0
 801c686:	2b00      	cmp	r3, #0
 801c688:	d107      	bne.n	801c69a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801c68a:	4b0d      	ldr	r3, [pc, #52]	@ (801c6c0 <mem_free+0xb0>)
 801c68c:	f240 2295 	movw	r2, #661	@ 0x295
 801c690:	4912      	ldr	r1, [pc, #72]	@ (801c6dc <mem_free+0xcc>)
 801c692:	480d      	ldr	r0, [pc, #52]	@ (801c6c8 <mem_free+0xb8>)
 801c694:	f00c fe68 	bl	8029368 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801c698:	e00f      	b.n	801c6ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	2200      	movs	r2, #0
 801c69e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801c6a0:	4b0f      	ldr	r3, [pc, #60]	@ (801c6e0 <mem_free+0xd0>)
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	68fa      	ldr	r2, [r7, #12]
 801c6a6:	429a      	cmp	r2, r3
 801c6a8:	d202      	bcs.n	801c6b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801c6aa:	4a0d      	ldr	r2, [pc, #52]	@ (801c6e0 <mem_free+0xd0>)
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801c6b0:	68f8      	ldr	r0, [r7, #12]
 801c6b2:	f7ff fe97 	bl	801c3e4 <plug_holes>
 801c6b6:	e000      	b.n	801c6ba <mem_free+0xaa>
    return;
 801c6b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801c6ba:	3710      	adds	r7, #16
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	bd80      	pop	{r7, pc}
 801c6c0:	0802db98 	.word	0x0802db98
 801c6c4:	0802dc6c 	.word	0x0802dc6c
 801c6c8:	0802dbe0 	.word	0x0802dbe0
 801c6cc:	24008558 	.word	0x24008558
 801c6d0:	2400855c 	.word	0x2400855c
 801c6d4:	0802dc90 	.word	0x0802dc90
 801c6d8:	0802dcac 	.word	0x0802dcac
 801c6dc:	0802dcd4 	.word	0x0802dcd4
 801c6e0:	24008560 	.word	0x24008560

0801c6e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b088      	sub	sp, #32
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	460b      	mov	r3, r1
 801c6ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801c6f0:	887b      	ldrh	r3, [r7, #2]
 801c6f2:	3303      	adds	r3, #3
 801c6f4:	b29b      	uxth	r3, r3
 801c6f6:	f023 0303 	bic.w	r3, r3, #3
 801c6fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801c6fc:	8bfb      	ldrh	r3, [r7, #30]
 801c6fe:	2b0b      	cmp	r3, #11
 801c700:	d801      	bhi.n	801c706 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801c702:	230c      	movs	r3, #12
 801c704:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801c706:	8bfb      	ldrh	r3, [r7, #30]
 801c708:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c70c:	d803      	bhi.n	801c716 <mem_trim+0x32>
 801c70e:	8bfa      	ldrh	r2, [r7, #30]
 801c710:	887b      	ldrh	r3, [r7, #2]
 801c712:	429a      	cmp	r2, r3
 801c714:	d201      	bcs.n	801c71a <mem_trim+0x36>
    return NULL;
 801c716:	2300      	movs	r3, #0
 801c718:	e0cc      	b.n	801c8b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801c71a:	4b68      	ldr	r3, [pc, #416]	@ (801c8bc <mem_trim+0x1d8>)
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	687a      	ldr	r2, [r7, #4]
 801c720:	429a      	cmp	r2, r3
 801c722:	d304      	bcc.n	801c72e <mem_trim+0x4a>
 801c724:	4b66      	ldr	r3, [pc, #408]	@ (801c8c0 <mem_trim+0x1dc>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	687a      	ldr	r2, [r7, #4]
 801c72a:	429a      	cmp	r2, r3
 801c72c:	d306      	bcc.n	801c73c <mem_trim+0x58>
 801c72e:	4b65      	ldr	r3, [pc, #404]	@ (801c8c4 <mem_trim+0x1e0>)
 801c730:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801c734:	4964      	ldr	r1, [pc, #400]	@ (801c8c8 <mem_trim+0x1e4>)
 801c736:	4865      	ldr	r0, [pc, #404]	@ (801c8cc <mem_trim+0x1e8>)
 801c738:	f00c fe16 	bl	8029368 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801c73c:	4b5f      	ldr	r3, [pc, #380]	@ (801c8bc <mem_trim+0x1d8>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	687a      	ldr	r2, [r7, #4]
 801c742:	429a      	cmp	r2, r3
 801c744:	d304      	bcc.n	801c750 <mem_trim+0x6c>
 801c746:	4b5e      	ldr	r3, [pc, #376]	@ (801c8c0 <mem_trim+0x1dc>)
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	687a      	ldr	r2, [r7, #4]
 801c74c:	429a      	cmp	r2, r3
 801c74e:	d301      	bcc.n	801c754 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	e0af      	b.n	801c8b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	3b08      	subs	r3, #8
 801c758:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801c75a:	69b8      	ldr	r0, [r7, #24]
 801c75c:	f7ff fe30 	bl	801c3c0 <mem_to_ptr>
 801c760:	4603      	mov	r3, r0
 801c762:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801c764:	69bb      	ldr	r3, [r7, #24]
 801c766:	881a      	ldrh	r2, [r3, #0]
 801c768:	8afb      	ldrh	r3, [r7, #22]
 801c76a:	1ad3      	subs	r3, r2, r3
 801c76c:	b29b      	uxth	r3, r3
 801c76e:	3b08      	subs	r3, #8
 801c770:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801c772:	8bfa      	ldrh	r2, [r7, #30]
 801c774:	8abb      	ldrh	r3, [r7, #20]
 801c776:	429a      	cmp	r2, r3
 801c778:	d906      	bls.n	801c788 <mem_trim+0xa4>
 801c77a:	4b52      	ldr	r3, [pc, #328]	@ (801c8c4 <mem_trim+0x1e0>)
 801c77c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801c780:	4953      	ldr	r1, [pc, #332]	@ (801c8d0 <mem_trim+0x1ec>)
 801c782:	4852      	ldr	r0, [pc, #328]	@ (801c8cc <mem_trim+0x1e8>)
 801c784:	f00c fdf0 	bl	8029368 <iprintf>
  if (newsize > size) {
 801c788:	8bfa      	ldrh	r2, [r7, #30]
 801c78a:	8abb      	ldrh	r3, [r7, #20]
 801c78c:	429a      	cmp	r2, r3
 801c78e:	d901      	bls.n	801c794 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801c790:	2300      	movs	r3, #0
 801c792:	e08f      	b.n	801c8b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801c794:	8bfa      	ldrh	r2, [r7, #30]
 801c796:	8abb      	ldrh	r3, [r7, #20]
 801c798:	429a      	cmp	r2, r3
 801c79a:	d101      	bne.n	801c7a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	e089      	b.n	801c8b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801c7a0:	69bb      	ldr	r3, [r7, #24]
 801c7a2:	881b      	ldrh	r3, [r3, #0]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7ff fdf9 	bl	801c39c <ptr_to_mem>
 801c7aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	791b      	ldrb	r3, [r3, #4]
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d13f      	bne.n	801c834 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801c7b4:	69bb      	ldr	r3, [r7, #24]
 801c7b6:	881b      	ldrh	r3, [r3, #0]
 801c7b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c7bc:	d106      	bne.n	801c7cc <mem_trim+0xe8>
 801c7be:	4b41      	ldr	r3, [pc, #260]	@ (801c8c4 <mem_trim+0x1e0>)
 801c7c0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801c7c4:	4943      	ldr	r1, [pc, #268]	@ (801c8d4 <mem_trim+0x1f0>)
 801c7c6:	4841      	ldr	r0, [pc, #260]	@ (801c8cc <mem_trim+0x1e8>)
 801c7c8:	f00c fdce 	bl	8029368 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801c7cc:	693b      	ldr	r3, [r7, #16]
 801c7ce:	881b      	ldrh	r3, [r3, #0]
 801c7d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801c7d2:	8afa      	ldrh	r2, [r7, #22]
 801c7d4:	8bfb      	ldrh	r3, [r7, #30]
 801c7d6:	4413      	add	r3, r2
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	3308      	adds	r3, #8
 801c7dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801c7de:	4b3e      	ldr	r3, [pc, #248]	@ (801c8d8 <mem_trim+0x1f4>)
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	693a      	ldr	r2, [r7, #16]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d106      	bne.n	801c7f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801c7e8:	89fb      	ldrh	r3, [r7, #14]
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	f7ff fdd6 	bl	801c39c <ptr_to_mem>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	4a39      	ldr	r2, [pc, #228]	@ (801c8d8 <mem_trim+0x1f4>)
 801c7f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801c7f6:	89fb      	ldrh	r3, [r7, #14]
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	f7ff fdcf 	bl	801c39c <ptr_to_mem>
 801c7fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801c800:	693b      	ldr	r3, [r7, #16]
 801c802:	2200      	movs	r2, #0
 801c804:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801c806:	693b      	ldr	r3, [r7, #16]
 801c808:	89ba      	ldrh	r2, [r7, #12]
 801c80a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801c80c:	693b      	ldr	r3, [r7, #16]
 801c80e:	8afa      	ldrh	r2, [r7, #22]
 801c810:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801c812:	69bb      	ldr	r3, [r7, #24]
 801c814:	89fa      	ldrh	r2, [r7, #14]
 801c816:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801c818:	693b      	ldr	r3, [r7, #16]
 801c81a:	881b      	ldrh	r3, [r3, #0]
 801c81c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c820:	d047      	beq.n	801c8b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801c822:	693b      	ldr	r3, [r7, #16]
 801c824:	881b      	ldrh	r3, [r3, #0]
 801c826:	4618      	mov	r0, r3
 801c828:	f7ff fdb8 	bl	801c39c <ptr_to_mem>
 801c82c:	4602      	mov	r2, r0
 801c82e:	89fb      	ldrh	r3, [r7, #14]
 801c830:	8053      	strh	r3, [r2, #2]
 801c832:	e03e      	b.n	801c8b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801c834:	8bfb      	ldrh	r3, [r7, #30]
 801c836:	f103 0214 	add.w	r2, r3, #20
 801c83a:	8abb      	ldrh	r3, [r7, #20]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d838      	bhi.n	801c8b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801c840:	8afa      	ldrh	r2, [r7, #22]
 801c842:	8bfb      	ldrh	r3, [r7, #30]
 801c844:	4413      	add	r3, r2
 801c846:	b29b      	uxth	r3, r3
 801c848:	3308      	adds	r3, #8
 801c84a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801c84c:	69bb      	ldr	r3, [r7, #24]
 801c84e:	881b      	ldrh	r3, [r3, #0]
 801c850:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c854:	d106      	bne.n	801c864 <mem_trim+0x180>
 801c856:	4b1b      	ldr	r3, [pc, #108]	@ (801c8c4 <mem_trim+0x1e0>)
 801c858:	f240 3216 	movw	r2, #790	@ 0x316
 801c85c:	491d      	ldr	r1, [pc, #116]	@ (801c8d4 <mem_trim+0x1f0>)
 801c85e:	481b      	ldr	r0, [pc, #108]	@ (801c8cc <mem_trim+0x1e8>)
 801c860:	f00c fd82 	bl	8029368 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801c864:	89fb      	ldrh	r3, [r7, #14]
 801c866:	4618      	mov	r0, r3
 801c868:	f7ff fd98 	bl	801c39c <ptr_to_mem>
 801c86c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801c86e:	4b1a      	ldr	r3, [pc, #104]	@ (801c8d8 <mem_trim+0x1f4>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	693a      	ldr	r2, [r7, #16]
 801c874:	429a      	cmp	r2, r3
 801c876:	d202      	bcs.n	801c87e <mem_trim+0x19a>
      lfree = mem2;
 801c878:	4a17      	ldr	r2, [pc, #92]	@ (801c8d8 <mem_trim+0x1f4>)
 801c87a:	693b      	ldr	r3, [r7, #16]
 801c87c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801c87e:	693b      	ldr	r3, [r7, #16]
 801c880:	2200      	movs	r2, #0
 801c882:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801c884:	69bb      	ldr	r3, [r7, #24]
 801c886:	881a      	ldrh	r2, [r3, #0]
 801c888:	693b      	ldr	r3, [r7, #16]
 801c88a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801c88c:	693b      	ldr	r3, [r7, #16]
 801c88e:	8afa      	ldrh	r2, [r7, #22]
 801c890:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801c892:	69bb      	ldr	r3, [r7, #24]
 801c894:	89fa      	ldrh	r2, [r7, #14]
 801c896:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801c898:	693b      	ldr	r3, [r7, #16]
 801c89a:	881b      	ldrh	r3, [r3, #0]
 801c89c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c8a0:	d007      	beq.n	801c8b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801c8a2:	693b      	ldr	r3, [r7, #16]
 801c8a4:	881b      	ldrh	r3, [r3, #0]
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7ff fd78 	bl	801c39c <ptr_to_mem>
 801c8ac:	4602      	mov	r2, r0
 801c8ae:	89fb      	ldrh	r3, [r7, #14]
 801c8b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801c8b2:	687b      	ldr	r3, [r7, #4]
}
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	3720      	adds	r7, #32
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd80      	pop	{r7, pc}
 801c8bc:	24008558 	.word	0x24008558
 801c8c0:	2400855c 	.word	0x2400855c
 801c8c4:	0802db98 	.word	0x0802db98
 801c8c8:	0802dd08 	.word	0x0802dd08
 801c8cc:	0802dbe0 	.word	0x0802dbe0
 801c8d0:	0802dd20 	.word	0x0802dd20
 801c8d4:	0802dd40 	.word	0x0802dd40
 801c8d8:	24008560 	.word	0x24008560

0801c8dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801c8dc:	b580      	push	{r7, lr}
 801c8de:	b088      	sub	sp, #32
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801c8e6:	88fb      	ldrh	r3, [r7, #6]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d101      	bne.n	801c8f0 <mem_malloc+0x14>
    return NULL;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	e0d9      	b.n	801caa4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801c8f0:	88fb      	ldrh	r3, [r7, #6]
 801c8f2:	3303      	adds	r3, #3
 801c8f4:	b29b      	uxth	r3, r3
 801c8f6:	f023 0303 	bic.w	r3, r3, #3
 801c8fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801c8fc:	8bbb      	ldrh	r3, [r7, #28]
 801c8fe:	2b0b      	cmp	r3, #11
 801c900:	d801      	bhi.n	801c906 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801c902:	230c      	movs	r3, #12
 801c904:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801c906:	8bbb      	ldrh	r3, [r7, #28]
 801c908:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c90c:	d803      	bhi.n	801c916 <mem_malloc+0x3a>
 801c90e:	8bba      	ldrh	r2, [r7, #28]
 801c910:	88fb      	ldrh	r3, [r7, #6]
 801c912:	429a      	cmp	r2, r3
 801c914:	d201      	bcs.n	801c91a <mem_malloc+0x3e>
    return NULL;
 801c916:	2300      	movs	r3, #0
 801c918:	e0c4      	b.n	801caa4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801c91a:	4b64      	ldr	r3, [pc, #400]	@ (801caac <mem_malloc+0x1d0>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	4618      	mov	r0, r3
 801c920:	f7ff fd4e 	bl	801c3c0 <mem_to_ptr>
 801c924:	4603      	mov	r3, r0
 801c926:	83fb      	strh	r3, [r7, #30]
 801c928:	e0b4      	b.n	801ca94 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801c92a:	8bfb      	ldrh	r3, [r7, #30]
 801c92c:	4618      	mov	r0, r3
 801c92e:	f7ff fd35 	bl	801c39c <ptr_to_mem>
 801c932:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	791b      	ldrb	r3, [r3, #4]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	f040 80a4 	bne.w	801ca86 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801c93e:	697b      	ldr	r3, [r7, #20]
 801c940:	881b      	ldrh	r3, [r3, #0]
 801c942:	461a      	mov	r2, r3
 801c944:	8bfb      	ldrh	r3, [r7, #30]
 801c946:	1ad3      	subs	r3, r2, r3
 801c948:	f1a3 0208 	sub.w	r2, r3, #8
 801c94c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801c94e:	429a      	cmp	r2, r3
 801c950:	f0c0 8099 	bcc.w	801ca86 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	881b      	ldrh	r3, [r3, #0]
 801c958:	461a      	mov	r2, r3
 801c95a:	8bfb      	ldrh	r3, [r7, #30]
 801c95c:	1ad3      	subs	r3, r2, r3
 801c95e:	f1a3 0208 	sub.w	r2, r3, #8
 801c962:	8bbb      	ldrh	r3, [r7, #28]
 801c964:	3314      	adds	r3, #20
 801c966:	429a      	cmp	r2, r3
 801c968:	d333      	bcc.n	801c9d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801c96a:	8bfa      	ldrh	r2, [r7, #30]
 801c96c:	8bbb      	ldrh	r3, [r7, #28]
 801c96e:	4413      	add	r3, r2
 801c970:	b29b      	uxth	r3, r3
 801c972:	3308      	adds	r3, #8
 801c974:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801c976:	8a7b      	ldrh	r3, [r7, #18]
 801c978:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c97c:	d106      	bne.n	801c98c <mem_malloc+0xb0>
 801c97e:	4b4c      	ldr	r3, [pc, #304]	@ (801cab0 <mem_malloc+0x1d4>)
 801c980:	f240 3287 	movw	r2, #903	@ 0x387
 801c984:	494b      	ldr	r1, [pc, #300]	@ (801cab4 <mem_malloc+0x1d8>)
 801c986:	484c      	ldr	r0, [pc, #304]	@ (801cab8 <mem_malloc+0x1dc>)
 801c988:	f00c fcee 	bl	8029368 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801c98c:	8a7b      	ldrh	r3, [r7, #18]
 801c98e:	4618      	mov	r0, r3
 801c990:	f7ff fd04 	bl	801c39c <ptr_to_mem>
 801c994:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	2200      	movs	r2, #0
 801c99a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	881a      	ldrh	r2, [r3, #0]
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	8bfa      	ldrh	r2, [r7, #30]
 801c9a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801c9aa:	697b      	ldr	r3, [r7, #20]
 801c9ac:	8a7a      	ldrh	r2, [r7, #18]
 801c9ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801c9b0:	697b      	ldr	r3, [r7, #20]
 801c9b2:	2201      	movs	r2, #1
 801c9b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	881b      	ldrh	r3, [r3, #0]
 801c9ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801c9be:	d00b      	beq.n	801c9d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	881b      	ldrh	r3, [r3, #0]
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f7ff fce9 	bl	801c39c <ptr_to_mem>
 801c9ca:	4602      	mov	r2, r0
 801c9cc:	8a7b      	ldrh	r3, [r7, #18]
 801c9ce:	8053      	strh	r3, [r2, #2]
 801c9d0:	e002      	b.n	801c9d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	2201      	movs	r2, #1
 801c9d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801c9d8:	4b34      	ldr	r3, [pc, #208]	@ (801caac <mem_malloc+0x1d0>)
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	697a      	ldr	r2, [r7, #20]
 801c9de:	429a      	cmp	r2, r3
 801c9e0:	d127      	bne.n	801ca32 <mem_malloc+0x156>
          struct mem *cur = lfree;
 801c9e2:	4b32      	ldr	r3, [pc, #200]	@ (801caac <mem_malloc+0x1d0>)
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801c9e8:	e005      	b.n	801c9f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801c9ea:	69bb      	ldr	r3, [r7, #24]
 801c9ec:	881b      	ldrh	r3, [r3, #0]
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7ff fcd4 	bl	801c39c <ptr_to_mem>
 801c9f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801c9f6:	69bb      	ldr	r3, [r7, #24]
 801c9f8:	791b      	ldrb	r3, [r3, #4]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d004      	beq.n	801ca08 <mem_malloc+0x12c>
 801c9fe:	4b2f      	ldr	r3, [pc, #188]	@ (801cabc <mem_malloc+0x1e0>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	69ba      	ldr	r2, [r7, #24]
 801ca04:	429a      	cmp	r2, r3
 801ca06:	d1f0      	bne.n	801c9ea <mem_malloc+0x10e>
          }
          lfree = cur;
 801ca08:	4a28      	ldr	r2, [pc, #160]	@ (801caac <mem_malloc+0x1d0>)
 801ca0a:	69bb      	ldr	r3, [r7, #24]
 801ca0c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801ca0e:	4b27      	ldr	r3, [pc, #156]	@ (801caac <mem_malloc+0x1d0>)
 801ca10:	681a      	ldr	r2, [r3, #0]
 801ca12:	4b2a      	ldr	r3, [pc, #168]	@ (801cabc <mem_malloc+0x1e0>)
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	429a      	cmp	r2, r3
 801ca18:	d00b      	beq.n	801ca32 <mem_malloc+0x156>
 801ca1a:	4b24      	ldr	r3, [pc, #144]	@ (801caac <mem_malloc+0x1d0>)
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	791b      	ldrb	r3, [r3, #4]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d006      	beq.n	801ca32 <mem_malloc+0x156>
 801ca24:	4b22      	ldr	r3, [pc, #136]	@ (801cab0 <mem_malloc+0x1d4>)
 801ca26:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801ca2a:	4925      	ldr	r1, [pc, #148]	@ (801cac0 <mem_malloc+0x1e4>)
 801ca2c:	4822      	ldr	r0, [pc, #136]	@ (801cab8 <mem_malloc+0x1dc>)
 801ca2e:	f00c fc9b 	bl	8029368 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801ca32:	8bba      	ldrh	r2, [r7, #28]
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	4413      	add	r3, r2
 801ca38:	3308      	adds	r3, #8
 801ca3a:	4a20      	ldr	r2, [pc, #128]	@ (801cabc <mem_malloc+0x1e0>)
 801ca3c:	6812      	ldr	r2, [r2, #0]
 801ca3e:	4293      	cmp	r3, r2
 801ca40:	d906      	bls.n	801ca50 <mem_malloc+0x174>
 801ca42:	4b1b      	ldr	r3, [pc, #108]	@ (801cab0 <mem_malloc+0x1d4>)
 801ca44:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801ca48:	491e      	ldr	r1, [pc, #120]	@ (801cac4 <mem_malloc+0x1e8>)
 801ca4a:	481b      	ldr	r0, [pc, #108]	@ (801cab8 <mem_malloc+0x1dc>)
 801ca4c:	f00c fc8c 	bl	8029368 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801ca50:	697b      	ldr	r3, [r7, #20]
 801ca52:	f003 0303 	and.w	r3, r3, #3
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d006      	beq.n	801ca68 <mem_malloc+0x18c>
 801ca5a:	4b15      	ldr	r3, [pc, #84]	@ (801cab0 <mem_malloc+0x1d4>)
 801ca5c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801ca60:	4919      	ldr	r1, [pc, #100]	@ (801cac8 <mem_malloc+0x1ec>)
 801ca62:	4815      	ldr	r0, [pc, #84]	@ (801cab8 <mem_malloc+0x1dc>)
 801ca64:	f00c fc80 	bl	8029368 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	f003 0303 	and.w	r3, r3, #3
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d006      	beq.n	801ca80 <mem_malloc+0x1a4>
 801ca72:	4b0f      	ldr	r3, [pc, #60]	@ (801cab0 <mem_malloc+0x1d4>)
 801ca74:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801ca78:	4914      	ldr	r1, [pc, #80]	@ (801cacc <mem_malloc+0x1f0>)
 801ca7a:	480f      	ldr	r0, [pc, #60]	@ (801cab8 <mem_malloc+0x1dc>)
 801ca7c:	f00c fc74 	bl	8029368 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	3308      	adds	r3, #8
 801ca84:	e00e      	b.n	801caa4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801ca86:	8bfb      	ldrh	r3, [r7, #30]
 801ca88:	4618      	mov	r0, r3
 801ca8a:	f7ff fc87 	bl	801c39c <ptr_to_mem>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	881b      	ldrh	r3, [r3, #0]
 801ca92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801ca94:	8bfa      	ldrh	r2, [r7, #30]
 801ca96:	8bbb      	ldrh	r3, [r7, #28]
 801ca98:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 801ca9c:	429a      	cmp	r2, r3
 801ca9e:	f4ff af44 	bcc.w	801c92a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801caa2:	2300      	movs	r3, #0
}
 801caa4:	4618      	mov	r0, r3
 801caa6:	3720      	adds	r7, #32
 801caa8:	46bd      	mov	sp, r7
 801caaa:	bd80      	pop	{r7, pc}
 801caac:	24008560 	.word	0x24008560
 801cab0:	0802db98 	.word	0x0802db98
 801cab4:	0802dd40 	.word	0x0802dd40
 801cab8:	0802dbe0 	.word	0x0802dbe0
 801cabc:	2400855c 	.word	0x2400855c
 801cac0:	0802dd54 	.word	0x0802dd54
 801cac4:	0802dd70 	.word	0x0802dd70
 801cac8:	0802dda0 	.word	0x0802dda0
 801cacc:	0802ddd0 	.word	0x0802ddd0

0801cad0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801cad0:	b480      	push	{r7}
 801cad2:	b085      	sub	sp, #20
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	689b      	ldr	r3, [r3, #8]
 801cadc:	2200      	movs	r2, #0
 801cade:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	685b      	ldr	r3, [r3, #4]
 801cae4:	3303      	adds	r3, #3
 801cae6:	f023 0303 	bic.w	r3, r3, #3
 801caea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801caec:	2300      	movs	r3, #0
 801caee:	60fb      	str	r3, [r7, #12]
 801caf0:	e011      	b.n	801cb16 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	689b      	ldr	r3, [r3, #8]
 801caf6:	681a      	ldr	r2, [r3, #0]
 801caf8:	68bb      	ldr	r3, [r7, #8]
 801cafa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	689b      	ldr	r3, [r3, #8]
 801cb00:	68ba      	ldr	r2, [r7, #8]
 801cb02:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	881b      	ldrh	r3, [r3, #0]
 801cb08:	461a      	mov	r2, r3
 801cb0a:	68bb      	ldr	r3, [r7, #8]
 801cb0c:	4413      	add	r3, r2
 801cb0e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	3301      	adds	r3, #1
 801cb14:	60fb      	str	r3, [r7, #12]
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	885b      	ldrh	r3, [r3, #2]
 801cb1a:	461a      	mov	r2, r3
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	4293      	cmp	r3, r2
 801cb20:	dbe7      	blt.n	801caf2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801cb22:	bf00      	nop
 801cb24:	bf00      	nop
 801cb26:	3714      	adds	r7, #20
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2e:	4770      	bx	lr

0801cb30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801cb30:	b580      	push	{r7, lr}
 801cb32:	b082      	sub	sp, #8
 801cb34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801cb36:	2300      	movs	r3, #0
 801cb38:	80fb      	strh	r3, [r7, #6]
 801cb3a:	e009      	b.n	801cb50 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801cb3c:	88fb      	ldrh	r3, [r7, #6]
 801cb3e:	4a08      	ldr	r2, [pc, #32]	@ (801cb60 <memp_init+0x30>)
 801cb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7ff ffc3 	bl	801cad0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801cb4a:	88fb      	ldrh	r3, [r7, #6]
 801cb4c:	3301      	adds	r3, #1
 801cb4e:	80fb      	strh	r3, [r7, #6]
 801cb50:	88fb      	ldrh	r3, [r7, #6]
 801cb52:	2b08      	cmp	r3, #8
 801cb54:	d9f2      	bls.n	801cb3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801cb56:	bf00      	nop
 801cb58:	bf00      	nop
 801cb5a:	3708      	adds	r7, #8
 801cb5c:	46bd      	mov	sp, r7
 801cb5e:	bd80      	pop	{r7, pc}
 801cb60:	08030e78 	.word	0x08030e78

0801cb64 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b084      	sub	sp, #16
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	689b      	ldr	r3, [r3, #8]
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d012      	beq.n	801cba0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	689b      	ldr	r3, [r3, #8]
 801cb7e:	68fa      	ldr	r2, [r7, #12]
 801cb80:	6812      	ldr	r2, [r2, #0]
 801cb82:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	f003 0303 	and.w	r3, r3, #3
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d006      	beq.n	801cb9c <do_memp_malloc_pool+0x38>
 801cb8e:	4b07      	ldr	r3, [pc, #28]	@ (801cbac <do_memp_malloc_pool+0x48>)
 801cb90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801cb94:	4906      	ldr	r1, [pc, #24]	@ (801cbb0 <do_memp_malloc_pool+0x4c>)
 801cb96:	4807      	ldr	r0, [pc, #28]	@ (801cbb4 <do_memp_malloc_pool+0x50>)
 801cb98:	f00c fbe6 	bl	8029368 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	e000      	b.n	801cba2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801cba0:	2300      	movs	r3, #0
}
 801cba2:	4618      	mov	r0, r3
 801cba4:	3710      	adds	r7, #16
 801cba6:	46bd      	mov	sp, r7
 801cba8:	bd80      	pop	{r7, pc}
 801cbaa:	bf00      	nop
 801cbac:	0802ddf4 	.word	0x0802ddf4
 801cbb0:	0802de24 	.word	0x0802de24
 801cbb4:	0802de48 	.word	0x0802de48

0801cbb8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b082      	sub	sp, #8
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d106      	bne.n	801cbd4 <memp_malloc_pool+0x1c>
 801cbc6:	4b0a      	ldr	r3, [pc, #40]	@ (801cbf0 <memp_malloc_pool+0x38>)
 801cbc8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801cbcc:	4909      	ldr	r1, [pc, #36]	@ (801cbf4 <memp_malloc_pool+0x3c>)
 801cbce:	480a      	ldr	r0, [pc, #40]	@ (801cbf8 <memp_malloc_pool+0x40>)
 801cbd0:	f00c fbca 	bl	8029368 <iprintf>
  if (desc == NULL) {
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d101      	bne.n	801cbde <memp_malloc_pool+0x26>
    return NULL;
 801cbda:	2300      	movs	r3, #0
 801cbdc:	e003      	b.n	801cbe6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801cbde:	6878      	ldr	r0, [r7, #4]
 801cbe0:	f7ff ffc0 	bl	801cb64 <do_memp_malloc_pool>
 801cbe4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3708      	adds	r7, #8
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	0802ddf4 	.word	0x0802ddf4
 801cbf4:	0802de70 	.word	0x0802de70
 801cbf8:	0802de48 	.word	0x0802de48

0801cbfc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b084      	sub	sp, #16
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	4603      	mov	r3, r0
 801cc04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801cc06:	79fb      	ldrb	r3, [r7, #7]
 801cc08:	2b08      	cmp	r3, #8
 801cc0a:	d908      	bls.n	801cc1e <memp_malloc+0x22>
 801cc0c:	4b0a      	ldr	r3, [pc, #40]	@ (801cc38 <memp_malloc+0x3c>)
 801cc0e:	f240 1257 	movw	r2, #343	@ 0x157
 801cc12:	490a      	ldr	r1, [pc, #40]	@ (801cc3c <memp_malloc+0x40>)
 801cc14:	480a      	ldr	r0, [pc, #40]	@ (801cc40 <memp_malloc+0x44>)
 801cc16:	f00c fba7 	bl	8029368 <iprintf>
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	e008      	b.n	801cc30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801cc1e:	79fb      	ldrb	r3, [r7, #7]
 801cc20:	4a08      	ldr	r2, [pc, #32]	@ (801cc44 <memp_malloc+0x48>)
 801cc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc26:	4618      	mov	r0, r3
 801cc28:	f7ff ff9c 	bl	801cb64 <do_memp_malloc_pool>
 801cc2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801cc2e:	68fb      	ldr	r3, [r7, #12]
}
 801cc30:	4618      	mov	r0, r3
 801cc32:	3710      	adds	r7, #16
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	0802ddf4 	.word	0x0802ddf4
 801cc3c:	0802de84 	.word	0x0802de84
 801cc40:	0802de48 	.word	0x0802de48
 801cc44:	08030e78 	.word	0x08030e78

0801cc48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b084      	sub	sp, #16
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
 801cc50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801cc52:	683b      	ldr	r3, [r7, #0]
 801cc54:	f003 0303 	and.w	r3, r3, #3
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d006      	beq.n	801cc6a <do_memp_free_pool+0x22>
 801cc5c:	4b0a      	ldr	r3, [pc, #40]	@ (801cc88 <do_memp_free_pool+0x40>)
 801cc5e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801cc62:	490a      	ldr	r1, [pc, #40]	@ (801cc8c <do_memp_free_pool+0x44>)
 801cc64:	480a      	ldr	r0, [pc, #40]	@ (801cc90 <do_memp_free_pool+0x48>)
 801cc66:	f00c fb7f 	bl	8029368 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	689b      	ldr	r3, [r3, #8]
 801cc72:	681a      	ldr	r2, [r3, #0]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	689b      	ldr	r3, [r3, #8]
 801cc7c:	68fa      	ldr	r2, [r7, #12]
 801cc7e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801cc80:	bf00      	nop
 801cc82:	3710      	adds	r7, #16
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	0802ddf4 	.word	0x0802ddf4
 801cc8c:	0802dea4 	.word	0x0802dea4
 801cc90:	0802de48 	.word	0x0802de48

0801cc94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b082      	sub	sp, #8
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
 801cc9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d106      	bne.n	801ccb2 <memp_free_pool+0x1e>
 801cca4:	4b0a      	ldr	r3, [pc, #40]	@ (801ccd0 <memp_free_pool+0x3c>)
 801cca6:	f240 1295 	movw	r2, #405	@ 0x195
 801ccaa:	490a      	ldr	r1, [pc, #40]	@ (801ccd4 <memp_free_pool+0x40>)
 801ccac:	480a      	ldr	r0, [pc, #40]	@ (801ccd8 <memp_free_pool+0x44>)
 801ccae:	f00c fb5b 	bl	8029368 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d007      	beq.n	801ccc8 <memp_free_pool+0x34>
 801ccb8:	683b      	ldr	r3, [r7, #0]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d004      	beq.n	801ccc8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801ccbe:	6839      	ldr	r1, [r7, #0]
 801ccc0:	6878      	ldr	r0, [r7, #4]
 801ccc2:	f7ff ffc1 	bl	801cc48 <do_memp_free_pool>
 801ccc6:	e000      	b.n	801ccca <memp_free_pool+0x36>
    return;
 801ccc8:	bf00      	nop
}
 801ccca:	3708      	adds	r7, #8
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bd80      	pop	{r7, pc}
 801ccd0:	0802ddf4 	.word	0x0802ddf4
 801ccd4:	0802de70 	.word	0x0802de70
 801ccd8:	0802de48 	.word	0x0802de48

0801ccdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b082      	sub	sp, #8
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	4603      	mov	r3, r0
 801cce4:	6039      	str	r1, [r7, #0]
 801cce6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801cce8:	79fb      	ldrb	r3, [r7, #7]
 801ccea:	2b08      	cmp	r3, #8
 801ccec:	d907      	bls.n	801ccfe <memp_free+0x22>
 801ccee:	4b0c      	ldr	r3, [pc, #48]	@ (801cd20 <memp_free+0x44>)
 801ccf0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801ccf4:	490b      	ldr	r1, [pc, #44]	@ (801cd24 <memp_free+0x48>)
 801ccf6:	480c      	ldr	r0, [pc, #48]	@ (801cd28 <memp_free+0x4c>)
 801ccf8:	f00c fb36 	bl	8029368 <iprintf>
 801ccfc:	e00c      	b.n	801cd18 <memp_free+0x3c>

  if (mem == NULL) {
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d008      	beq.n	801cd16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801cd04:	79fb      	ldrb	r3, [r7, #7]
 801cd06:	4a09      	ldr	r2, [pc, #36]	@ (801cd2c <memp_free+0x50>)
 801cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd0c:	6839      	ldr	r1, [r7, #0]
 801cd0e:	4618      	mov	r0, r3
 801cd10:	f7ff ff9a 	bl	801cc48 <do_memp_free_pool>
 801cd14:	e000      	b.n	801cd18 <memp_free+0x3c>
    return;
 801cd16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801cd18:	3708      	adds	r7, #8
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	bd80      	pop	{r7, pc}
 801cd1e:	bf00      	nop
 801cd20:	0802ddf4 	.word	0x0802ddf4
 801cd24:	0802dec4 	.word	0x0802dec4
 801cd28:	0802de48 	.word	0x0802de48
 801cd2c:	08030e78 	.word	0x08030e78

0801cd30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801cd30:	b480      	push	{r7}
 801cd32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801cd34:	bf00      	nop
 801cd36:	46bd      	mov	sp, r7
 801cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd3c:	4770      	bx	lr
	...

0801cd40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b086      	sub	sp, #24
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	60f8      	str	r0, [r7, #12]
 801cd48:	60b9      	str	r1, [r7, #8]
 801cd4a:	607a      	str	r2, [r7, #4]
 801cd4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d108      	bne.n	801cd66 <netif_add+0x26>
 801cd54:	4b5b      	ldr	r3, [pc, #364]	@ (801cec4 <netif_add+0x184>)
 801cd56:	f240 1227 	movw	r2, #295	@ 0x127
 801cd5a:	495b      	ldr	r1, [pc, #364]	@ (801cec8 <netif_add+0x188>)
 801cd5c:	485b      	ldr	r0, [pc, #364]	@ (801cecc <netif_add+0x18c>)
 801cd5e:	f00c fb03 	bl	8029368 <iprintf>
 801cd62:	2300      	movs	r3, #0
 801cd64:	e0a9      	b.n	801ceba <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d108      	bne.n	801cd7e <netif_add+0x3e>
 801cd6c:	4b55      	ldr	r3, [pc, #340]	@ (801cec4 <netif_add+0x184>)
 801cd6e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801cd72:	4957      	ldr	r1, [pc, #348]	@ (801ced0 <netif_add+0x190>)
 801cd74:	4855      	ldr	r0, [pc, #340]	@ (801cecc <netif_add+0x18c>)
 801cd76:	f00c faf7 	bl	8029368 <iprintf>
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	e09d      	b.n	801ceba <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d101      	bne.n	801cd88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801cd84:	4b53      	ldr	r3, [pc, #332]	@ (801ced4 <netif_add+0x194>)
 801cd86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d101      	bne.n	801cd92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801cd8e:	4b51      	ldr	r3, [pc, #324]	@ (801ced4 <netif_add+0x194>)
 801cd90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801cd92:	683b      	ldr	r3, [r7, #0]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d101      	bne.n	801cd9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801cd98:	4b4e      	ldr	r3, [pc, #312]	@ (801ced4 <netif_add+0x194>)
 801cd9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	2200      	movs	r2, #0
 801cda0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	2200      	movs	r2, #0
 801cda6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	4a49      	ldr	r2, [pc, #292]	@ (801ced8 <netif_add+0x198>)
 801cdb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	3324      	adds	r3, #36	@ 0x24
 801cdc6:	2204      	movs	r2, #4
 801cdc8:	2100      	movs	r1, #0
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f00c fc7a 	bl	80296c4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	6a3a      	ldr	r2, [r7, #32]
 801cdda:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801cddc:	4b3f      	ldr	r3, [pc, #252]	@ (801cedc <netif_add+0x19c>)
 801cdde:	781a      	ldrb	r2, [r3, #0]
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cdea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801cdec:	683b      	ldr	r3, [r7, #0]
 801cdee:	687a      	ldr	r2, [r7, #4]
 801cdf0:	68b9      	ldr	r1, [r7, #8]
 801cdf2:	68f8      	ldr	r0, [r7, #12]
 801cdf4:	f000 f914 	bl	801d020 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801cdf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdfa:	68f8      	ldr	r0, [r7, #12]
 801cdfc:	4798      	blx	r3
 801cdfe:	4603      	mov	r3, r0
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d001      	beq.n	801ce08 <netif_add+0xc8>
    return NULL;
 801ce04:	2300      	movs	r3, #0
 801ce06:	e058      	b.n	801ceba <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ce0e:	2bff      	cmp	r3, #255	@ 0xff
 801ce10:	d103      	bne.n	801ce1a <netif_add+0xda>
        netif->num = 0;
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	2200      	movs	r2, #0
 801ce16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801ce1e:	4b30      	ldr	r3, [pc, #192]	@ (801cee0 <netif_add+0x1a0>)
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	617b      	str	r3, [r7, #20]
 801ce24:	e02b      	b.n	801ce7e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801ce26:	697a      	ldr	r2, [r7, #20]
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	429a      	cmp	r2, r3
 801ce2c:	d106      	bne.n	801ce3c <netif_add+0xfc>
 801ce2e:	4b25      	ldr	r3, [pc, #148]	@ (801cec4 <netif_add+0x184>)
 801ce30:	f240 128b 	movw	r2, #395	@ 0x18b
 801ce34:	492b      	ldr	r1, [pc, #172]	@ (801cee4 <netif_add+0x1a4>)
 801ce36:	4825      	ldr	r0, [pc, #148]	@ (801cecc <netif_add+0x18c>)
 801ce38:	f00c fa96 	bl	8029368 <iprintf>
        num_netifs++;
 801ce3c:	693b      	ldr	r3, [r7, #16]
 801ce3e:	3301      	adds	r3, #1
 801ce40:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801ce42:	693b      	ldr	r3, [r7, #16]
 801ce44:	2bff      	cmp	r3, #255	@ 0xff
 801ce46:	dd06      	ble.n	801ce56 <netif_add+0x116>
 801ce48:	4b1e      	ldr	r3, [pc, #120]	@ (801cec4 <netif_add+0x184>)
 801ce4a:	f240 128d 	movw	r2, #397	@ 0x18d
 801ce4e:	4926      	ldr	r1, [pc, #152]	@ (801cee8 <netif_add+0x1a8>)
 801ce50:	481e      	ldr	r0, [pc, #120]	@ (801cecc <netif_add+0x18c>)
 801ce52:	f00c fa89 	bl	8029368 <iprintf>
        if (netif2->num == netif->num) {
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ce62:	429a      	cmp	r2, r3
 801ce64:	d108      	bne.n	801ce78 <netif_add+0x138>
          netif->num++;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ce6c:	3301      	adds	r3, #1
 801ce6e:	b2da      	uxtb	r2, r3
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 801ce76:	e005      	b.n	801ce84 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801ce78:	697b      	ldr	r3, [r7, #20]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	617b      	str	r3, [r7, #20]
 801ce7e:	697b      	ldr	r3, [r7, #20]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d1d0      	bne.n	801ce26 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801ce84:	697b      	ldr	r3, [r7, #20]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d1be      	bne.n	801ce08 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ce90:	2bfe      	cmp	r3, #254	@ 0xfe
 801ce92:	d103      	bne.n	801ce9c <netif_add+0x15c>
    netif_num = 0;
 801ce94:	4b11      	ldr	r3, [pc, #68]	@ (801cedc <netif_add+0x19c>)
 801ce96:	2200      	movs	r2, #0
 801ce98:	701a      	strb	r2, [r3, #0]
 801ce9a:	e006      	b.n	801ceaa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801cea2:	3301      	adds	r3, #1
 801cea4:	b2da      	uxtb	r2, r3
 801cea6:	4b0d      	ldr	r3, [pc, #52]	@ (801cedc <netif_add+0x19c>)
 801cea8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (801cee0 <netif_add+0x1a0>)
 801ceac:	681a      	ldr	r2, [r3, #0]
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801ceb2:	4a0b      	ldr	r2, [pc, #44]	@ (801cee0 <netif_add+0x1a0>)
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
}
 801ceba:	4618      	mov	r0, r3
 801cebc:	3718      	adds	r7, #24
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd80      	pop	{r7, pc}
 801cec2:	bf00      	nop
 801cec4:	0802dee0 	.word	0x0802dee0
 801cec8:	0802df74 	.word	0x0802df74
 801cecc:	0802df30 	.word	0x0802df30
 801ced0:	0802df90 	.word	0x0802df90
 801ced4:	08030ef4 	.word	0x08030ef4
 801ced8:	0801d303 	.word	0x0801d303
 801cedc:	2400b488 	.word	0x2400b488
 801cee0:	2400b480 	.word	0x2400b480
 801cee4:	0802dfb4 	.word	0x0802dfb4
 801cee8:	0802dfc8 	.word	0x0802dfc8

0801ceec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b082      	sub	sp, #8
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 801cef4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801cef6:	6839      	ldr	r1, [r7, #0]
 801cef8:	6878      	ldr	r0, [r7, #4]
 801cefa:	f002 fc93 	bl	801f824 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801cefe:	6839      	ldr	r1, [r7, #0]
 801cf00:	6878      	ldr	r0, [r7, #4]
 801cf02:	f007 f88d 	bl	8024020 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801cf06:	bf00      	nop
 801cf08:	3708      	adds	r7, #8
 801cf0a:	46bd      	mov	sp, r7
 801cf0c:	bd80      	pop	{r7, pc}
	...

0801cf10 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b086      	sub	sp, #24
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	60f8      	str	r0, [r7, #12]
 801cf18:	60b9      	str	r1, [r7, #8]
 801cf1a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801cf1c:	68bb      	ldr	r3, [r7, #8]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d106      	bne.n	801cf30 <netif_do_set_ipaddr+0x20>
 801cf22:	4b1d      	ldr	r3, [pc, #116]	@ (801cf98 <netif_do_set_ipaddr+0x88>)
 801cf24:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801cf28:	491c      	ldr	r1, [pc, #112]	@ (801cf9c <netif_do_set_ipaddr+0x8c>)
 801cf2a:	481d      	ldr	r0, [pc, #116]	@ (801cfa0 <netif_do_set_ipaddr+0x90>)
 801cf2c:	f00c fa1c 	bl	8029368 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d106      	bne.n	801cf44 <netif_do_set_ipaddr+0x34>
 801cf36:	4b18      	ldr	r3, [pc, #96]	@ (801cf98 <netif_do_set_ipaddr+0x88>)
 801cf38:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801cf3c:	4917      	ldr	r1, [pc, #92]	@ (801cf9c <netif_do_set_ipaddr+0x8c>)
 801cf3e:	4818      	ldr	r0, [pc, #96]	@ (801cfa0 <netif_do_set_ipaddr+0x90>)
 801cf40:	f00c fa12 	bl	8029368 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	681a      	ldr	r2, [r3, #0]
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	3304      	adds	r3, #4
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	429a      	cmp	r2, r3
 801cf50:	d01c      	beq.n	801cf8c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801cf52:	68bb      	ldr	r3, [r7, #8]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	3304      	adds	r3, #4
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801cf62:	f107 0314 	add.w	r3, r7, #20
 801cf66:	4619      	mov	r1, r3
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7ff ffbf 	bl	801ceec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d002      	beq.n	801cf7a <netif_do_set_ipaddr+0x6a>
 801cf74:	68bb      	ldr	r3, [r7, #8]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	e000      	b.n	801cf7c <netif_do_set_ipaddr+0x6c>
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	68fa      	ldr	r2, [r7, #12]
 801cf7e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801cf80:	2101      	movs	r1, #1
 801cf82:	68f8      	ldr	r0, [r7, #12]
 801cf84:	f000 f8d2 	bl	801d12c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801cf88:	2301      	movs	r3, #1
 801cf8a:	e000      	b.n	801cf8e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801cf8c:	2300      	movs	r3, #0
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3718      	adds	r7, #24
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
 801cf96:	bf00      	nop
 801cf98:	0802dee0 	.word	0x0802dee0
 801cf9c:	0802dff8 	.word	0x0802dff8
 801cfa0:	0802df30 	.word	0x0802df30

0801cfa4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801cfa4:	b480      	push	{r7}
 801cfa6:	b085      	sub	sp, #20
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	60f8      	str	r0, [r7, #12]
 801cfac:	60b9      	str	r1, [r7, #8]
 801cfae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	681a      	ldr	r2, [r3, #0]
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	3308      	adds	r3, #8
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	d00a      	beq.n	801cfd4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d002      	beq.n	801cfca <netif_do_set_netmask+0x26>
 801cfc4:	68bb      	ldr	r3, [r7, #8]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	e000      	b.n	801cfcc <netif_do_set_netmask+0x28>
 801cfca:	2300      	movs	r3, #0
 801cfcc:	68fa      	ldr	r2, [r7, #12]
 801cfce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801cfd0:	2301      	movs	r3, #1
 801cfd2:	e000      	b.n	801cfd6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801cfd4:	2300      	movs	r3, #0
}
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	3714      	adds	r7, #20
 801cfda:	46bd      	mov	sp, r7
 801cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe0:	4770      	bx	lr

0801cfe2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801cfe2:	b480      	push	{r7}
 801cfe4:	b085      	sub	sp, #20
 801cfe6:	af00      	add	r7, sp, #0
 801cfe8:	60f8      	str	r0, [r7, #12]
 801cfea:	60b9      	str	r1, [r7, #8]
 801cfec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801cfee:	68bb      	ldr	r3, [r7, #8]
 801cff0:	681a      	ldr	r2, [r3, #0]
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	330c      	adds	r3, #12
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d00a      	beq.n	801d012 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801cffc:	68bb      	ldr	r3, [r7, #8]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d002      	beq.n	801d008 <netif_do_set_gw+0x26>
 801d002:	68bb      	ldr	r3, [r7, #8]
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	e000      	b.n	801d00a <netif_do_set_gw+0x28>
 801d008:	2300      	movs	r3, #0
 801d00a:	68fa      	ldr	r2, [r7, #12]
 801d00c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801d00e:	2301      	movs	r3, #1
 801d010:	e000      	b.n	801d014 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801d012:	2300      	movs	r3, #0
}
 801d014:	4618      	mov	r0, r3
 801d016:	3714      	adds	r7, #20
 801d018:	46bd      	mov	sp, r7
 801d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d01e:	4770      	bx	lr

0801d020 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801d020:	b580      	push	{r7, lr}
 801d022:	b088      	sub	sp, #32
 801d024:	af00      	add	r7, sp, #0
 801d026:	60f8      	str	r0, [r7, #12]
 801d028:	60b9      	str	r1, [r7, #8]
 801d02a:	607a      	str	r2, [r7, #4]
 801d02c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801d02e:	2300      	movs	r3, #0
 801d030:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801d032:	2300      	movs	r3, #0
 801d034:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d036:	68bb      	ldr	r3, [r7, #8]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d101      	bne.n	801d040 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801d03c:	4b1c      	ldr	r3, [pc, #112]	@ (801d0b0 <netif_set_addr+0x90>)
 801d03e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d101      	bne.n	801d04a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801d046:	4b1a      	ldr	r3, [pc, #104]	@ (801d0b0 <netif_set_addr+0x90>)
 801d048:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d101      	bne.n	801d054 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801d050:	4b17      	ldr	r3, [pc, #92]	@ (801d0b0 <netif_set_addr+0x90>)
 801d052:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801d054:	68bb      	ldr	r3, [r7, #8]
 801d056:	2b00      	cmp	r3, #0
 801d058:	d003      	beq.n	801d062 <netif_set_addr+0x42>
 801d05a:	68bb      	ldr	r3, [r7, #8]
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d101      	bne.n	801d066 <netif_set_addr+0x46>
 801d062:	2301      	movs	r3, #1
 801d064:	e000      	b.n	801d068 <netif_set_addr+0x48>
 801d066:	2300      	movs	r3, #0
 801d068:	617b      	str	r3, [r7, #20]
  if (remove) {
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d006      	beq.n	801d07e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801d070:	f107 0310 	add.w	r3, r7, #16
 801d074:	461a      	mov	r2, r3
 801d076:	68b9      	ldr	r1, [r7, #8]
 801d078:	68f8      	ldr	r0, [r7, #12]
 801d07a:	f7ff ff49 	bl	801cf10 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801d07e:	69fa      	ldr	r2, [r7, #28]
 801d080:	6879      	ldr	r1, [r7, #4]
 801d082:	68f8      	ldr	r0, [r7, #12]
 801d084:	f7ff ff8e 	bl	801cfa4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801d088:	69ba      	ldr	r2, [r7, #24]
 801d08a:	6839      	ldr	r1, [r7, #0]
 801d08c:	68f8      	ldr	r0, [r7, #12]
 801d08e:	f7ff ffa8 	bl	801cfe2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801d092:	697b      	ldr	r3, [r7, #20]
 801d094:	2b00      	cmp	r3, #0
 801d096:	d106      	bne.n	801d0a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801d098:	f107 0310 	add.w	r3, r7, #16
 801d09c:	461a      	mov	r2, r3
 801d09e:	68b9      	ldr	r1, [r7, #8]
 801d0a0:	68f8      	ldr	r0, [r7, #12]
 801d0a2:	f7ff ff35 	bl	801cf10 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801d0a6:	bf00      	nop
 801d0a8:	3720      	adds	r7, #32
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	bd80      	pop	{r7, pc}
 801d0ae:	bf00      	nop
 801d0b0:	08030ef4 	.word	0x08030ef4

0801d0b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801d0b4:	b480      	push	{r7}
 801d0b6:	b083      	sub	sp, #12
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801d0bc:	4a04      	ldr	r2, [pc, #16]	@ (801d0d0 <netif_set_default+0x1c>)
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801d0c2:	bf00      	nop
 801d0c4:	370c      	adds	r7, #12
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0cc:	4770      	bx	lr
 801d0ce:	bf00      	nop
 801d0d0:	2400b484 	.word	0x2400b484

0801d0d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b082      	sub	sp, #8
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d107      	bne.n	801d0f2 <netif_set_up+0x1e>
 801d0e2:	4b0f      	ldr	r3, [pc, #60]	@ (801d120 <netif_set_up+0x4c>)
 801d0e4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801d0e8:	490e      	ldr	r1, [pc, #56]	@ (801d124 <netif_set_up+0x50>)
 801d0ea:	480f      	ldr	r0, [pc, #60]	@ (801d128 <netif_set_up+0x54>)
 801d0ec:	f00c f93c 	bl	8029368 <iprintf>
 801d0f0:	e013      	b.n	801d11a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d0f8:	f003 0301 	and.w	r3, r3, #1
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d10c      	bne.n	801d11a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d106:	f043 0301 	orr.w	r3, r3, #1
 801d10a:	b2da      	uxtb	r2, r3
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801d112:	2103      	movs	r1, #3
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f000 f809 	bl	801d12c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801d11a:	3708      	adds	r7, #8
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}
 801d120:	0802dee0 	.word	0x0802dee0
 801d124:	0802e068 	.word	0x0802e068
 801d128:	0802df30 	.word	0x0802df30

0801d12c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801d12c:	b580      	push	{r7, lr}
 801d12e:	b082      	sub	sp, #8
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
 801d134:	460b      	mov	r3, r1
 801d136:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d106      	bne.n	801d14c <netif_issue_reports+0x20>
 801d13e:	4b18      	ldr	r3, [pc, #96]	@ (801d1a0 <netif_issue_reports+0x74>)
 801d140:	f240 326d 	movw	r2, #877	@ 0x36d
 801d144:	4917      	ldr	r1, [pc, #92]	@ (801d1a4 <netif_issue_reports+0x78>)
 801d146:	4818      	ldr	r0, [pc, #96]	@ (801d1a8 <netif_issue_reports+0x7c>)
 801d148:	f00c f90e 	bl	8029368 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d152:	f003 0304 	and.w	r3, r3, #4
 801d156:	2b00      	cmp	r3, #0
 801d158:	d01e      	beq.n	801d198 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d160:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801d164:	2b00      	cmp	r3, #0
 801d166:	d017      	beq.n	801d198 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801d168:	78fb      	ldrb	r3, [r7, #3]
 801d16a:	f003 0301 	and.w	r3, r3, #1
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d013      	beq.n	801d19a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	3304      	adds	r3, #4
 801d176:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d00e      	beq.n	801d19a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d182:	f003 0308 	and.w	r3, r3, #8
 801d186:	2b00      	cmp	r3, #0
 801d188:	d007      	beq.n	801d19a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	3304      	adds	r3, #4
 801d18e:	4619      	mov	r1, r3
 801d190:	6878      	ldr	r0, [r7, #4]
 801d192:	f009 fd91 	bl	8026cb8 <etharp_request>
 801d196:	e000      	b.n	801d19a <netif_issue_reports+0x6e>
    return;
 801d198:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801d19a:	3708      	adds	r7, #8
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd80      	pop	{r7, pc}
 801d1a0:	0802dee0 	.word	0x0802dee0
 801d1a4:	0802e084 	.word	0x0802e084
 801d1a8:	0802df30 	.word	0x0802df30

0801d1ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b082      	sub	sp, #8
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d107      	bne.n	801d1ca <netif_set_down+0x1e>
 801d1ba:	4b12      	ldr	r3, [pc, #72]	@ (801d204 <netif_set_down+0x58>)
 801d1bc:	f240 329b 	movw	r2, #923	@ 0x39b
 801d1c0:	4911      	ldr	r1, [pc, #68]	@ (801d208 <netif_set_down+0x5c>)
 801d1c2:	4812      	ldr	r0, [pc, #72]	@ (801d20c <netif_set_down+0x60>)
 801d1c4:	f00c f8d0 	bl	8029368 <iprintf>
 801d1c8:	e019      	b.n	801d1fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d1d0:	f003 0301 	and.w	r3, r3, #1
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d012      	beq.n	801d1fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d1de:	f023 0301 	bic.w	r3, r3, #1
 801d1e2:	b2da      	uxtb	r2, r3
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d1f0:	f003 0308 	and.w	r3, r3, #8
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d002      	beq.n	801d1fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f009 f917 	bl	802642c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801d1fe:	3708      	adds	r7, #8
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}
 801d204:	0802dee0 	.word	0x0802dee0
 801d208:	0802e0a8 	.word	0x0802e0a8
 801d20c:	0802df30 	.word	0x0802df30

0801d210 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b082      	sub	sp, #8
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d107      	bne.n	801d22e <netif_set_link_up+0x1e>
 801d21e:	4b15      	ldr	r3, [pc, #84]	@ (801d274 <netif_set_link_up+0x64>)
 801d220:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801d224:	4914      	ldr	r1, [pc, #80]	@ (801d278 <netif_set_link_up+0x68>)
 801d226:	4815      	ldr	r0, [pc, #84]	@ (801d27c <netif_set_link_up+0x6c>)
 801d228:	f00c f89e 	bl	8029368 <iprintf>
 801d22c:	e01e      	b.n	801d26c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d234:	f003 0304 	and.w	r3, r3, #4
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d117      	bne.n	801d26c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d242:	f043 0304 	orr.w	r3, r3, #4
 801d246:	b2da      	uxtb	r2, r3
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f007 fb32 	bl	80248b8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801d254:	2103      	movs	r1, #3
 801d256:	6878      	ldr	r0, [r7, #4]
 801d258:	f7ff ff68 	bl	801d12c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	69db      	ldr	r3, [r3, #28]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d003      	beq.n	801d26c <netif_set_link_up+0x5c>
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	69db      	ldr	r3, [r3, #28]
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801d26c:	3708      	adds	r7, #8
 801d26e:	46bd      	mov	sp, r7
 801d270:	bd80      	pop	{r7, pc}
 801d272:	bf00      	nop
 801d274:	0802dee0 	.word	0x0802dee0
 801d278:	0802e0c8 	.word	0x0802e0c8
 801d27c:	0802df30 	.word	0x0802df30

0801d280 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801d280:	b580      	push	{r7, lr}
 801d282:	b082      	sub	sp, #8
 801d284:	af00      	add	r7, sp, #0
 801d286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d107      	bne.n	801d29e <netif_set_link_down+0x1e>
 801d28e:	4b11      	ldr	r3, [pc, #68]	@ (801d2d4 <netif_set_link_down+0x54>)
 801d290:	f240 4206 	movw	r2, #1030	@ 0x406
 801d294:	4910      	ldr	r1, [pc, #64]	@ (801d2d8 <netif_set_link_down+0x58>)
 801d296:	4811      	ldr	r0, [pc, #68]	@ (801d2dc <netif_set_link_down+0x5c>)
 801d298:	f00c f866 	bl	8029368 <iprintf>
 801d29c:	e017      	b.n	801d2ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d2a4:	f003 0304 	and.w	r3, r3, #4
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d010      	beq.n	801d2ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d2b2:	f023 0304 	bic.w	r3, r3, #4
 801d2b6:	b2da      	uxtb	r2, r3
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	69db      	ldr	r3, [r3, #28]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d003      	beq.n	801d2ce <netif_set_link_down+0x4e>
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	69db      	ldr	r3, [r3, #28]
 801d2ca:	6878      	ldr	r0, [r7, #4]
 801d2cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801d2ce:	3708      	adds	r7, #8
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	0802dee0 	.word	0x0802dee0
 801d2d8:	0802e0ec 	.word	0x0802e0ec
 801d2dc:	0802df30 	.word	0x0802df30

0801d2e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801d2e0:	b480      	push	{r7}
 801d2e2:	b083      	sub	sp, #12
 801d2e4:	af00      	add	r7, sp, #0
 801d2e6:	6078      	str	r0, [r7, #4]
 801d2e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d002      	beq.n	801d2f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	683a      	ldr	r2, [r7, #0]
 801d2f4:	61da      	str	r2, [r3, #28]
  }
}
 801d2f6:	bf00      	nop
 801d2f8:	370c      	adds	r7, #12
 801d2fa:	46bd      	mov	sp, r7
 801d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d300:	4770      	bx	lr

0801d302 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801d302:	b480      	push	{r7}
 801d304:	b085      	sub	sp, #20
 801d306:	af00      	add	r7, sp, #0
 801d308:	60f8      	str	r0, [r7, #12]
 801d30a:	60b9      	str	r1, [r7, #8]
 801d30c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801d30e:	f06f 030b 	mvn.w	r3, #11
}
 801d312:	4618      	mov	r0, r3
 801d314:	3714      	adds	r7, #20
 801d316:	46bd      	mov	sp, r7
 801d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d31c:	4770      	bx	lr
	...

0801d320 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801d320:	b480      	push	{r7}
 801d322:	b085      	sub	sp, #20
 801d324:	af00      	add	r7, sp, #0
 801d326:	4603      	mov	r3, r0
 801d328:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801d32a:	79fb      	ldrb	r3, [r7, #7]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d013      	beq.n	801d358 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801d330:	4b0d      	ldr	r3, [pc, #52]	@ (801d368 <netif_get_by_index+0x48>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	60fb      	str	r3, [r7, #12]
 801d336:	e00c      	b.n	801d352 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d33e:	3301      	adds	r3, #1
 801d340:	b2db      	uxtb	r3, r3
 801d342:	79fa      	ldrb	r2, [r7, #7]
 801d344:	429a      	cmp	r2, r3
 801d346:	d101      	bne.n	801d34c <netif_get_by_index+0x2c>
        return netif; /* found! */
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	e006      	b.n	801d35a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	60fb      	str	r3, [r7, #12]
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	2b00      	cmp	r3, #0
 801d356:	d1ef      	bne.n	801d338 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801d358:	2300      	movs	r3, #0
}
 801d35a:	4618      	mov	r0, r3
 801d35c:	3714      	adds	r7, #20
 801d35e:	46bd      	mov	sp, r7
 801d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d364:	4770      	bx	lr
 801d366:	bf00      	nop
 801d368:	2400b480 	.word	0x2400b480

0801d36c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801d36c:	b480      	push	{r7}
 801d36e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 801d370:	4b03      	ldr	r3, [pc, #12]	@ (801d380 <pbuf_pool_is_empty+0x14>)
 801d372:	2201      	movs	r2, #1
 801d374:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801d376:	bf00      	nop
 801d378:	46bd      	mov	sp, r7
 801d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37e:	4770      	bx	lr
 801d380:	2400b489 	.word	0x2400b489

0801d384 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801d384:	b480      	push	{r7}
 801d386:	b085      	sub	sp, #20
 801d388:	af00      	add	r7, sp, #0
 801d38a:	60f8      	str	r0, [r7, #12]
 801d38c:	60b9      	str	r1, [r7, #8]
 801d38e:	4611      	mov	r1, r2
 801d390:	461a      	mov	r2, r3
 801d392:	460b      	mov	r3, r1
 801d394:	80fb      	strh	r3, [r7, #6]
 801d396:	4613      	mov	r3, r2
 801d398:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	2200      	movs	r2, #0
 801d39e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	68ba      	ldr	r2, [r7, #8]
 801d3a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	88fa      	ldrh	r2, [r7, #6]
 801d3aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	88ba      	ldrh	r2, [r7, #4]
 801d3b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801d3b2:	8b3b      	ldrh	r3, [r7, #24]
 801d3b4:	b2da      	uxtb	r2, r3
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	7f3a      	ldrb	r2, [r7, #28]
 801d3be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	2200      	movs	r2, #0
 801d3ca:	73da      	strb	r2, [r3, #15]
}
 801d3cc:	bf00      	nop
 801d3ce:	3714      	adds	r7, #20
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d6:	4770      	bx	lr

0801d3d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801d3d8:	b580      	push	{r7, lr}
 801d3da:	b08c      	sub	sp, #48	@ 0x30
 801d3dc:	af02      	add	r7, sp, #8
 801d3de:	4603      	mov	r3, r0
 801d3e0:	71fb      	strb	r3, [r7, #7]
 801d3e2:	460b      	mov	r3, r1
 801d3e4:	80bb      	strh	r3, [r7, #4]
 801d3e6:	4613      	mov	r3, r2
 801d3e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801d3ea:	79fb      	ldrb	r3, [r7, #7]
 801d3ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801d3ee:	887b      	ldrh	r3, [r7, #2]
 801d3f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801d3f4:	d07f      	beq.n	801d4f6 <pbuf_alloc+0x11e>
 801d3f6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801d3fa:	f300 80c8 	bgt.w	801d58e <pbuf_alloc+0x1b6>
 801d3fe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801d402:	d010      	beq.n	801d426 <pbuf_alloc+0x4e>
 801d404:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801d408:	f300 80c1 	bgt.w	801d58e <pbuf_alloc+0x1b6>
 801d40c:	2b01      	cmp	r3, #1
 801d40e:	d002      	beq.n	801d416 <pbuf_alloc+0x3e>
 801d410:	2b41      	cmp	r3, #65	@ 0x41
 801d412:	f040 80bc 	bne.w	801d58e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801d416:	887a      	ldrh	r2, [r7, #2]
 801d418:	88bb      	ldrh	r3, [r7, #4]
 801d41a:	4619      	mov	r1, r3
 801d41c:	2000      	movs	r0, #0
 801d41e:	f000 f8d1 	bl	801d5c4 <pbuf_alloc_reference>
 801d422:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801d424:	e0bd      	b.n	801d5a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801d426:	2300      	movs	r3, #0
 801d428:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801d42a:	2300      	movs	r3, #0
 801d42c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801d42e:	88bb      	ldrh	r3, [r7, #4]
 801d430:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801d432:	2008      	movs	r0, #8
 801d434:	f7ff fbe2 	bl	801cbfc <memp_malloc>
 801d438:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801d43a:	693b      	ldr	r3, [r7, #16]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d109      	bne.n	801d454 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801d440:	f7ff ff94 	bl	801d36c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d446:	2b00      	cmp	r3, #0
 801d448:	d002      	beq.n	801d450 <pbuf_alloc+0x78>
            pbuf_free(p);
 801d44a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d44c:	f000 faa8 	bl	801d9a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801d450:	2300      	movs	r3, #0
 801d452:	e0a7      	b.n	801d5a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801d454:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d456:	3303      	adds	r3, #3
 801d458:	b29b      	uxth	r3, r3
 801d45a:	f023 0303 	bic.w	r3, r3, #3
 801d45e:	b29b      	uxth	r3, r3
 801d460:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801d464:	b29b      	uxth	r3, r3
 801d466:	8b7a      	ldrh	r2, [r7, #26]
 801d468:	4293      	cmp	r3, r2
 801d46a:	bf28      	it	cs
 801d46c:	4613      	movcs	r3, r2
 801d46e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801d470:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d472:	3310      	adds	r3, #16
 801d474:	693a      	ldr	r2, [r7, #16]
 801d476:	4413      	add	r3, r2
 801d478:	3303      	adds	r3, #3
 801d47a:	f023 0303 	bic.w	r3, r3, #3
 801d47e:	4618      	mov	r0, r3
 801d480:	89f9      	ldrh	r1, [r7, #14]
 801d482:	8b7a      	ldrh	r2, [r7, #26]
 801d484:	2300      	movs	r3, #0
 801d486:	9301      	str	r3, [sp, #4]
 801d488:	887b      	ldrh	r3, [r7, #2]
 801d48a:	9300      	str	r3, [sp, #0]
 801d48c:	460b      	mov	r3, r1
 801d48e:	4601      	mov	r1, r0
 801d490:	6938      	ldr	r0, [r7, #16]
 801d492:	f7ff ff77 	bl	801d384 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801d496:	693b      	ldr	r3, [r7, #16]
 801d498:	685b      	ldr	r3, [r3, #4]
 801d49a:	f003 0303 	and.w	r3, r3, #3
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	d006      	beq.n	801d4b0 <pbuf_alloc+0xd8>
 801d4a2:	4b42      	ldr	r3, [pc, #264]	@ (801d5ac <pbuf_alloc+0x1d4>)
 801d4a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d4a8:	4941      	ldr	r1, [pc, #260]	@ (801d5b0 <pbuf_alloc+0x1d8>)
 801d4aa:	4842      	ldr	r0, [pc, #264]	@ (801d5b4 <pbuf_alloc+0x1dc>)
 801d4ac:	f00b ff5c 	bl	8029368 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801d4b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d4b2:	3303      	adds	r3, #3
 801d4b4:	f023 0303 	bic.w	r3, r3, #3
 801d4b8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801d4bc:	d106      	bne.n	801d4cc <pbuf_alloc+0xf4>
 801d4be:	4b3b      	ldr	r3, [pc, #236]	@ (801d5ac <pbuf_alloc+0x1d4>)
 801d4c0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801d4c4:	493c      	ldr	r1, [pc, #240]	@ (801d5b8 <pbuf_alloc+0x1e0>)
 801d4c6:	483b      	ldr	r0, [pc, #236]	@ (801d5b4 <pbuf_alloc+0x1dc>)
 801d4c8:	f00b ff4e 	bl	8029368 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d102      	bne.n	801d4d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	627b      	str	r3, [r7, #36]	@ 0x24
 801d4d6:	e002      	b.n	801d4de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801d4d8:	69fb      	ldr	r3, [r7, #28]
 801d4da:	693a      	ldr	r2, [r7, #16]
 801d4dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801d4de:	693b      	ldr	r3, [r7, #16]
 801d4e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801d4e2:	8b7a      	ldrh	r2, [r7, #26]
 801d4e4:	89fb      	ldrh	r3, [r7, #14]
 801d4e6:	1ad3      	subs	r3, r2, r3
 801d4e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801d4ee:	8b7b      	ldrh	r3, [r7, #26]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d19e      	bne.n	801d432 <pbuf_alloc+0x5a>
      break;
 801d4f4:	e055      	b.n	801d5a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801d4f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d4f8:	3303      	adds	r3, #3
 801d4fa:	b29b      	uxth	r3, r3
 801d4fc:	f023 0303 	bic.w	r3, r3, #3
 801d500:	b29a      	uxth	r2, r3
 801d502:	88bb      	ldrh	r3, [r7, #4]
 801d504:	3303      	adds	r3, #3
 801d506:	b29b      	uxth	r3, r3
 801d508:	f023 0303 	bic.w	r3, r3, #3
 801d50c:	b29b      	uxth	r3, r3
 801d50e:	4413      	add	r3, r2
 801d510:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801d512:	8b3b      	ldrh	r3, [r7, #24]
 801d514:	3310      	adds	r3, #16
 801d516:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801d518:	8b3a      	ldrh	r2, [r7, #24]
 801d51a:	88bb      	ldrh	r3, [r7, #4]
 801d51c:	3303      	adds	r3, #3
 801d51e:	f023 0303 	bic.w	r3, r3, #3
 801d522:	429a      	cmp	r2, r3
 801d524:	d306      	bcc.n	801d534 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801d526:	8afa      	ldrh	r2, [r7, #22]
 801d528:	88bb      	ldrh	r3, [r7, #4]
 801d52a:	3303      	adds	r3, #3
 801d52c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801d530:	429a      	cmp	r2, r3
 801d532:	d201      	bcs.n	801d538 <pbuf_alloc+0x160>
        return NULL;
 801d534:	2300      	movs	r3, #0
 801d536:	e035      	b.n	801d5a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801d538:	8afb      	ldrh	r3, [r7, #22]
 801d53a:	4618      	mov	r0, r3
 801d53c:	f7ff f9ce 	bl	801c8dc <mem_malloc>
 801d540:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d544:	2b00      	cmp	r3, #0
 801d546:	d101      	bne.n	801d54c <pbuf_alloc+0x174>
        return NULL;
 801d548:	2300      	movs	r3, #0
 801d54a:	e02b      	b.n	801d5a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801d54c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d54e:	3310      	adds	r3, #16
 801d550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d552:	4413      	add	r3, r2
 801d554:	3303      	adds	r3, #3
 801d556:	f023 0303 	bic.w	r3, r3, #3
 801d55a:	4618      	mov	r0, r3
 801d55c:	88b9      	ldrh	r1, [r7, #4]
 801d55e:	88ba      	ldrh	r2, [r7, #4]
 801d560:	2300      	movs	r3, #0
 801d562:	9301      	str	r3, [sp, #4]
 801d564:	887b      	ldrh	r3, [r7, #2]
 801d566:	9300      	str	r3, [sp, #0]
 801d568:	460b      	mov	r3, r1
 801d56a:	4601      	mov	r1, r0
 801d56c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d56e:	f7ff ff09 	bl	801d384 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d574:	685b      	ldr	r3, [r3, #4]
 801d576:	f003 0303 	and.w	r3, r3, #3
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d010      	beq.n	801d5a0 <pbuf_alloc+0x1c8>
 801d57e:	4b0b      	ldr	r3, [pc, #44]	@ (801d5ac <pbuf_alloc+0x1d4>)
 801d580:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801d584:	490d      	ldr	r1, [pc, #52]	@ (801d5bc <pbuf_alloc+0x1e4>)
 801d586:	480b      	ldr	r0, [pc, #44]	@ (801d5b4 <pbuf_alloc+0x1dc>)
 801d588:	f00b feee 	bl	8029368 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801d58c:	e008      	b.n	801d5a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801d58e:	4b07      	ldr	r3, [pc, #28]	@ (801d5ac <pbuf_alloc+0x1d4>)
 801d590:	f240 1227 	movw	r2, #295	@ 0x127
 801d594:	490a      	ldr	r1, [pc, #40]	@ (801d5c0 <pbuf_alloc+0x1e8>)
 801d596:	4807      	ldr	r0, [pc, #28]	@ (801d5b4 <pbuf_alloc+0x1dc>)
 801d598:	f00b fee6 	bl	8029368 <iprintf>
      return NULL;
 801d59c:	2300      	movs	r3, #0
 801d59e:	e001      	b.n	801d5a4 <pbuf_alloc+0x1cc>
      break;
 801d5a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	3728      	adds	r7, #40	@ 0x28
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	bd80      	pop	{r7, pc}
 801d5ac:	0802e110 	.word	0x0802e110
 801d5b0:	0802e140 	.word	0x0802e140
 801d5b4:	0802e170 	.word	0x0802e170
 801d5b8:	0802e198 	.word	0x0802e198
 801d5bc:	0802e1cc 	.word	0x0802e1cc
 801d5c0:	0802e1f8 	.word	0x0802e1f8

0801d5c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b086      	sub	sp, #24
 801d5c8:	af02      	add	r7, sp, #8
 801d5ca:	6078      	str	r0, [r7, #4]
 801d5cc:	460b      	mov	r3, r1
 801d5ce:	807b      	strh	r3, [r7, #2]
 801d5d0:	4613      	mov	r3, r2
 801d5d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801d5d4:	883b      	ldrh	r3, [r7, #0]
 801d5d6:	2b41      	cmp	r3, #65	@ 0x41
 801d5d8:	d009      	beq.n	801d5ee <pbuf_alloc_reference+0x2a>
 801d5da:	883b      	ldrh	r3, [r7, #0]
 801d5dc:	2b01      	cmp	r3, #1
 801d5de:	d006      	beq.n	801d5ee <pbuf_alloc_reference+0x2a>
 801d5e0:	4b0f      	ldr	r3, [pc, #60]	@ (801d620 <pbuf_alloc_reference+0x5c>)
 801d5e2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801d5e6:	490f      	ldr	r1, [pc, #60]	@ (801d624 <pbuf_alloc_reference+0x60>)
 801d5e8:	480f      	ldr	r0, [pc, #60]	@ (801d628 <pbuf_alloc_reference+0x64>)
 801d5ea:	f00b febd 	bl	8029368 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801d5ee:	2007      	movs	r0, #7
 801d5f0:	f7ff fb04 	bl	801cbfc <memp_malloc>
 801d5f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d101      	bne.n	801d600 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	e00b      	b.n	801d618 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801d600:	8879      	ldrh	r1, [r7, #2]
 801d602:	887a      	ldrh	r2, [r7, #2]
 801d604:	2300      	movs	r3, #0
 801d606:	9301      	str	r3, [sp, #4]
 801d608:	883b      	ldrh	r3, [r7, #0]
 801d60a:	9300      	str	r3, [sp, #0]
 801d60c:	460b      	mov	r3, r1
 801d60e:	6879      	ldr	r1, [r7, #4]
 801d610:	68f8      	ldr	r0, [r7, #12]
 801d612:	f7ff feb7 	bl	801d384 <pbuf_init_alloced_pbuf>
  return p;
 801d616:	68fb      	ldr	r3, [r7, #12]
}
 801d618:	4618      	mov	r0, r3
 801d61a:	3710      	adds	r7, #16
 801d61c:	46bd      	mov	sp, r7
 801d61e:	bd80      	pop	{r7, pc}
 801d620:	0802e110 	.word	0x0802e110
 801d624:	0802e214 	.word	0x0802e214
 801d628:	0802e170 	.word	0x0802e170

0801d62c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b088      	sub	sp, #32
 801d630:	af02      	add	r7, sp, #8
 801d632:	607b      	str	r3, [r7, #4]
 801d634:	4603      	mov	r3, r0
 801d636:	73fb      	strb	r3, [r7, #15]
 801d638:	460b      	mov	r3, r1
 801d63a:	81bb      	strh	r3, [r7, #12]
 801d63c:	4613      	mov	r3, r2
 801d63e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801d640:	7bfb      	ldrb	r3, [r7, #15]
 801d642:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801d644:	8a7b      	ldrh	r3, [r7, #18]
 801d646:	3303      	adds	r3, #3
 801d648:	f023 0203 	bic.w	r2, r3, #3
 801d64c:	89bb      	ldrh	r3, [r7, #12]
 801d64e:	441a      	add	r2, r3
 801d650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d652:	429a      	cmp	r2, r3
 801d654:	d901      	bls.n	801d65a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801d656:	2300      	movs	r3, #0
 801d658:	e018      	b.n	801d68c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801d65a:	6a3b      	ldr	r3, [r7, #32]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d007      	beq.n	801d670 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801d660:	8a7b      	ldrh	r3, [r7, #18]
 801d662:	3303      	adds	r3, #3
 801d664:	f023 0303 	bic.w	r3, r3, #3
 801d668:	6a3a      	ldr	r2, [r7, #32]
 801d66a:	4413      	add	r3, r2
 801d66c:	617b      	str	r3, [r7, #20]
 801d66e:	e001      	b.n	801d674 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801d670:	2300      	movs	r3, #0
 801d672:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801d674:	6878      	ldr	r0, [r7, #4]
 801d676:	89b9      	ldrh	r1, [r7, #12]
 801d678:	89ba      	ldrh	r2, [r7, #12]
 801d67a:	2302      	movs	r3, #2
 801d67c:	9301      	str	r3, [sp, #4]
 801d67e:	897b      	ldrh	r3, [r7, #10]
 801d680:	9300      	str	r3, [sp, #0]
 801d682:	460b      	mov	r3, r1
 801d684:	6979      	ldr	r1, [r7, #20]
 801d686:	f7ff fe7d 	bl	801d384 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801d68a:	687b      	ldr	r3, [r7, #4]
}
 801d68c:	4618      	mov	r0, r3
 801d68e:	3718      	adds	r7, #24
 801d690:	46bd      	mov	sp, r7
 801d692:	bd80      	pop	{r7, pc}

0801d694 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801d694:	b580      	push	{r7, lr}
 801d696:	b084      	sub	sp, #16
 801d698:	af00      	add	r7, sp, #0
 801d69a:	6078      	str	r0, [r7, #4]
 801d69c:	460b      	mov	r3, r1
 801d69e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d106      	bne.n	801d6b4 <pbuf_realloc+0x20>
 801d6a6:	4b3a      	ldr	r3, [pc, #232]	@ (801d790 <pbuf_realloc+0xfc>)
 801d6a8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801d6ac:	4939      	ldr	r1, [pc, #228]	@ (801d794 <pbuf_realloc+0x100>)
 801d6ae:	483a      	ldr	r0, [pc, #232]	@ (801d798 <pbuf_realloc+0x104>)
 801d6b0:	f00b fe5a 	bl	8029368 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	891b      	ldrh	r3, [r3, #8]
 801d6b8:	887a      	ldrh	r2, [r7, #2]
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	d263      	bcs.n	801d786 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	891a      	ldrh	r2, [r3, #8]
 801d6c2:	887b      	ldrh	r3, [r7, #2]
 801d6c4:	1ad3      	subs	r3, r2, r3
 801d6c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801d6c8:	887b      	ldrh	r3, [r7, #2]
 801d6ca:	817b      	strh	r3, [r7, #10]
  q = p;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801d6d0:	e018      	b.n	801d704 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	895b      	ldrh	r3, [r3, #10]
 801d6d6:	897a      	ldrh	r2, [r7, #10]
 801d6d8:	1ad3      	subs	r3, r2, r3
 801d6da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	891a      	ldrh	r2, [r3, #8]
 801d6e0:	893b      	ldrh	r3, [r7, #8]
 801d6e2:	1ad3      	subs	r3, r2, r3
 801d6e4:	b29a      	uxth	r2, r3
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d106      	bne.n	801d704 <pbuf_realloc+0x70>
 801d6f6:	4b26      	ldr	r3, [pc, #152]	@ (801d790 <pbuf_realloc+0xfc>)
 801d6f8:	f240 12af 	movw	r2, #431	@ 0x1af
 801d6fc:	4927      	ldr	r1, [pc, #156]	@ (801d79c <pbuf_realloc+0x108>)
 801d6fe:	4826      	ldr	r0, [pc, #152]	@ (801d798 <pbuf_realloc+0x104>)
 801d700:	f00b fe32 	bl	8029368 <iprintf>
  while (rem_len > q->len) {
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	895b      	ldrh	r3, [r3, #10]
 801d708:	897a      	ldrh	r2, [r7, #10]
 801d70a:	429a      	cmp	r2, r3
 801d70c:	d8e1      	bhi.n	801d6d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	7b1b      	ldrb	r3, [r3, #12]
 801d712:	f003 030f 	and.w	r3, r3, #15
 801d716:	2b00      	cmp	r3, #0
 801d718:	d121      	bne.n	801d75e <pbuf_realloc+0xca>
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	895b      	ldrh	r3, [r3, #10]
 801d71e:	897a      	ldrh	r2, [r7, #10]
 801d720:	429a      	cmp	r2, r3
 801d722:	d01c      	beq.n	801d75e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	7b5b      	ldrb	r3, [r3, #13]
 801d728:	f003 0302 	and.w	r3, r3, #2
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d116      	bne.n	801d75e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	685a      	ldr	r2, [r3, #4]
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	1ad3      	subs	r3, r2, r3
 801d738:	b29a      	uxth	r2, r3
 801d73a:	897b      	ldrh	r3, [r7, #10]
 801d73c:	4413      	add	r3, r2
 801d73e:	b29b      	uxth	r3, r3
 801d740:	4619      	mov	r1, r3
 801d742:	68f8      	ldr	r0, [r7, #12]
 801d744:	f7fe ffce 	bl	801c6e4 <mem_trim>
 801d748:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d106      	bne.n	801d75e <pbuf_realloc+0xca>
 801d750:	4b0f      	ldr	r3, [pc, #60]	@ (801d790 <pbuf_realloc+0xfc>)
 801d752:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801d756:	4912      	ldr	r1, [pc, #72]	@ (801d7a0 <pbuf_realloc+0x10c>)
 801d758:	480f      	ldr	r0, [pc, #60]	@ (801d798 <pbuf_realloc+0x104>)
 801d75a:	f00b fe05 	bl	8029368 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	897a      	ldrh	r2, [r7, #10]
 801d762:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	895a      	ldrh	r2, [r3, #10]
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d004      	beq.n	801d77e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	4618      	mov	r0, r3
 801d77a:	f000 f911 	bl	801d9a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	2200      	movs	r2, #0
 801d782:	601a      	str	r2, [r3, #0]
 801d784:	e000      	b.n	801d788 <pbuf_realloc+0xf4>
    return;
 801d786:	bf00      	nop

}
 801d788:	3710      	adds	r7, #16
 801d78a:	46bd      	mov	sp, r7
 801d78c:	bd80      	pop	{r7, pc}
 801d78e:	bf00      	nop
 801d790:	0802e110 	.word	0x0802e110
 801d794:	0802e228 	.word	0x0802e228
 801d798:	0802e170 	.word	0x0802e170
 801d79c:	0802e240 	.word	0x0802e240
 801d7a0:	0802e258 	.word	0x0802e258

0801d7a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801d7a4:	b580      	push	{r7, lr}
 801d7a6:	b086      	sub	sp, #24
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	60f8      	str	r0, [r7, #12]
 801d7ac:	60b9      	str	r1, [r7, #8]
 801d7ae:	4613      	mov	r3, r2
 801d7b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d106      	bne.n	801d7c6 <pbuf_add_header_impl+0x22>
 801d7b8:	4b2b      	ldr	r3, [pc, #172]	@ (801d868 <pbuf_add_header_impl+0xc4>)
 801d7ba:	f240 12df 	movw	r2, #479	@ 0x1df
 801d7be:	492b      	ldr	r1, [pc, #172]	@ (801d86c <pbuf_add_header_impl+0xc8>)
 801d7c0:	482b      	ldr	r0, [pc, #172]	@ (801d870 <pbuf_add_header_impl+0xcc>)
 801d7c2:	f00b fdd1 	bl	8029368 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d003      	beq.n	801d7d4 <pbuf_add_header_impl+0x30>
 801d7cc:	68bb      	ldr	r3, [r7, #8]
 801d7ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d7d2:	d301      	bcc.n	801d7d8 <pbuf_add_header_impl+0x34>
    return 1;
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	e043      	b.n	801d860 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801d7d8:	68bb      	ldr	r3, [r7, #8]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d101      	bne.n	801d7e2 <pbuf_add_header_impl+0x3e>
    return 0;
 801d7de:	2300      	movs	r3, #0
 801d7e0:	e03e      	b.n	801d860 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801d7e2:	68bb      	ldr	r3, [r7, #8]
 801d7e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	891a      	ldrh	r2, [r3, #8]
 801d7ea:	8a7b      	ldrh	r3, [r7, #18]
 801d7ec:	4413      	add	r3, r2
 801d7ee:	b29b      	uxth	r3, r3
 801d7f0:	8a7a      	ldrh	r2, [r7, #18]
 801d7f2:	429a      	cmp	r2, r3
 801d7f4:	d901      	bls.n	801d7fa <pbuf_add_header_impl+0x56>
    return 1;
 801d7f6:	2301      	movs	r3, #1
 801d7f8:	e032      	b.n	801d860 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	7b1b      	ldrb	r3, [r3, #12]
 801d7fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801d800:	8a3b      	ldrh	r3, [r7, #16]
 801d802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d806:	2b00      	cmp	r3, #0
 801d808:	d00c      	beq.n	801d824 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	685a      	ldr	r2, [r3, #4]
 801d80e:	68bb      	ldr	r3, [r7, #8]
 801d810:	425b      	negs	r3, r3
 801d812:	4413      	add	r3, r2
 801d814:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	3310      	adds	r3, #16
 801d81a:	697a      	ldr	r2, [r7, #20]
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d20d      	bcs.n	801d83c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801d820:	2301      	movs	r3, #1
 801d822:	e01d      	b.n	801d860 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801d824:	79fb      	ldrb	r3, [r7, #7]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d006      	beq.n	801d838 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	685a      	ldr	r2, [r3, #4]
 801d82e:	68bb      	ldr	r3, [r7, #8]
 801d830:	425b      	negs	r3, r3
 801d832:	4413      	add	r3, r2
 801d834:	617b      	str	r3, [r7, #20]
 801d836:	e001      	b.n	801d83c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801d838:	2301      	movs	r3, #1
 801d83a:	e011      	b.n	801d860 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	697a      	ldr	r2, [r7, #20]
 801d840:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	895a      	ldrh	r2, [r3, #10]
 801d846:	8a7b      	ldrh	r3, [r7, #18]
 801d848:	4413      	add	r3, r2
 801d84a:	b29a      	uxth	r2, r3
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	891a      	ldrh	r2, [r3, #8]
 801d854:	8a7b      	ldrh	r3, [r7, #18]
 801d856:	4413      	add	r3, r2
 801d858:	b29a      	uxth	r2, r3
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	811a      	strh	r2, [r3, #8]


  return 0;
 801d85e:	2300      	movs	r3, #0
}
 801d860:	4618      	mov	r0, r3
 801d862:	3718      	adds	r7, #24
 801d864:	46bd      	mov	sp, r7
 801d866:	bd80      	pop	{r7, pc}
 801d868:	0802e110 	.word	0x0802e110
 801d86c:	0802e274 	.word	0x0802e274
 801d870:	0802e170 	.word	0x0802e170

0801d874 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	b082      	sub	sp, #8
 801d878:	af00      	add	r7, sp, #0
 801d87a:	6078      	str	r0, [r7, #4]
 801d87c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801d87e:	2200      	movs	r2, #0
 801d880:	6839      	ldr	r1, [r7, #0]
 801d882:	6878      	ldr	r0, [r7, #4]
 801d884:	f7ff ff8e 	bl	801d7a4 <pbuf_add_header_impl>
 801d888:	4603      	mov	r3, r0
}
 801d88a:	4618      	mov	r0, r3
 801d88c:	3708      	adds	r7, #8
 801d88e:	46bd      	mov	sp, r7
 801d890:	bd80      	pop	{r7, pc}
	...

0801d894 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b084      	sub	sp, #16
 801d898:	af00      	add	r7, sp, #0
 801d89a:	6078      	str	r0, [r7, #4]
 801d89c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d106      	bne.n	801d8b2 <pbuf_remove_header+0x1e>
 801d8a4:	4b20      	ldr	r3, [pc, #128]	@ (801d928 <pbuf_remove_header+0x94>)
 801d8a6:	f240 224b 	movw	r2, #587	@ 0x24b
 801d8aa:	4920      	ldr	r1, [pc, #128]	@ (801d92c <pbuf_remove_header+0x98>)
 801d8ac:	4820      	ldr	r0, [pc, #128]	@ (801d930 <pbuf_remove_header+0x9c>)
 801d8ae:	f00b fd5b 	bl	8029368 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d003      	beq.n	801d8c0 <pbuf_remove_header+0x2c>
 801d8b8:	683b      	ldr	r3, [r7, #0]
 801d8ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d8be:	d301      	bcc.n	801d8c4 <pbuf_remove_header+0x30>
    return 1;
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	e02c      	b.n	801d91e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801d8c4:	683b      	ldr	r3, [r7, #0]
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d101      	bne.n	801d8ce <pbuf_remove_header+0x3a>
    return 0;
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	e027      	b.n	801d91e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801d8ce:	683b      	ldr	r3, [r7, #0]
 801d8d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	895b      	ldrh	r3, [r3, #10]
 801d8d6:	89fa      	ldrh	r2, [r7, #14]
 801d8d8:	429a      	cmp	r2, r3
 801d8da:	d908      	bls.n	801d8ee <pbuf_remove_header+0x5a>
 801d8dc:	4b12      	ldr	r3, [pc, #72]	@ (801d928 <pbuf_remove_header+0x94>)
 801d8de:	f240 2255 	movw	r2, #597	@ 0x255
 801d8e2:	4914      	ldr	r1, [pc, #80]	@ (801d934 <pbuf_remove_header+0xa0>)
 801d8e4:	4812      	ldr	r0, [pc, #72]	@ (801d930 <pbuf_remove_header+0x9c>)
 801d8e6:	f00b fd3f 	bl	8029368 <iprintf>
 801d8ea:	2301      	movs	r3, #1
 801d8ec:	e017      	b.n	801d91e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	685b      	ldr	r3, [r3, #4]
 801d8f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	685a      	ldr	r2, [r3, #4]
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	441a      	add	r2, r3
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	895a      	ldrh	r2, [r3, #10]
 801d904:	89fb      	ldrh	r3, [r7, #14]
 801d906:	1ad3      	subs	r3, r2, r3
 801d908:	b29a      	uxth	r2, r3
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	891a      	ldrh	r2, [r3, #8]
 801d912:	89fb      	ldrh	r3, [r7, #14]
 801d914:	1ad3      	subs	r3, r2, r3
 801d916:	b29a      	uxth	r2, r3
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801d91c:	2300      	movs	r3, #0
}
 801d91e:	4618      	mov	r0, r3
 801d920:	3710      	adds	r7, #16
 801d922:	46bd      	mov	sp, r7
 801d924:	bd80      	pop	{r7, pc}
 801d926:	bf00      	nop
 801d928:	0802e110 	.word	0x0802e110
 801d92c:	0802e274 	.word	0x0802e274
 801d930:	0802e170 	.word	0x0802e170
 801d934:	0802e280 	.word	0x0802e280

0801d938 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b082      	sub	sp, #8
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
 801d940:	460b      	mov	r3, r1
 801d942:	807b      	strh	r3, [r7, #2]
 801d944:	4613      	mov	r3, r2
 801d946:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801d948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	da08      	bge.n	801d962 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801d950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d954:	425b      	negs	r3, r3
 801d956:	4619      	mov	r1, r3
 801d958:	6878      	ldr	r0, [r7, #4]
 801d95a:	f7ff ff9b 	bl	801d894 <pbuf_remove_header>
 801d95e:	4603      	mov	r3, r0
 801d960:	e007      	b.n	801d972 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801d962:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d966:	787a      	ldrb	r2, [r7, #1]
 801d968:	4619      	mov	r1, r3
 801d96a:	6878      	ldr	r0, [r7, #4]
 801d96c:	f7ff ff1a 	bl	801d7a4 <pbuf_add_header_impl>
 801d970:	4603      	mov	r3, r0
  }
}
 801d972:	4618      	mov	r0, r3
 801d974:	3708      	adds	r7, #8
 801d976:	46bd      	mov	sp, r7
 801d978:	bd80      	pop	{r7, pc}

0801d97a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801d97a:	b580      	push	{r7, lr}
 801d97c:	b082      	sub	sp, #8
 801d97e:	af00      	add	r7, sp, #0
 801d980:	6078      	str	r0, [r7, #4]
 801d982:	460b      	mov	r3, r1
 801d984:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801d986:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d98a:	2201      	movs	r2, #1
 801d98c:	4619      	mov	r1, r3
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	f7ff ffd2 	bl	801d938 <pbuf_header_impl>
 801d994:	4603      	mov	r3, r0
}
 801d996:	4618      	mov	r0, r3
 801d998:	3708      	adds	r7, #8
 801d99a:	46bd      	mov	sp, r7
 801d99c:	bd80      	pop	{r7, pc}
	...

0801d9a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	b086      	sub	sp, #24
 801d9a4:	af00      	add	r7, sp, #0
 801d9a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d10b      	bne.n	801d9c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d106      	bne.n	801d9c2 <pbuf_free+0x22>
 801d9b4:	4b38      	ldr	r3, [pc, #224]	@ (801da98 <pbuf_free+0xf8>)
 801d9b6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801d9ba:	4938      	ldr	r1, [pc, #224]	@ (801da9c <pbuf_free+0xfc>)
 801d9bc:	4838      	ldr	r0, [pc, #224]	@ (801daa0 <pbuf_free+0x100>)
 801d9be:	f00b fcd3 	bl	8029368 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	e063      	b.n	801da8e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801d9ca:	e05c      	b.n	801da86 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	7b9b      	ldrb	r3, [r3, #14]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d106      	bne.n	801d9e2 <pbuf_free+0x42>
 801d9d4:	4b30      	ldr	r3, [pc, #192]	@ (801da98 <pbuf_free+0xf8>)
 801d9d6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801d9da:	4932      	ldr	r1, [pc, #200]	@ (801daa4 <pbuf_free+0x104>)
 801d9dc:	4830      	ldr	r0, [pc, #192]	@ (801daa0 <pbuf_free+0x100>)
 801d9de:	f00b fcc3 	bl	8029368 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	7b9b      	ldrb	r3, [r3, #14]
 801d9e6:	3b01      	subs	r3, #1
 801d9e8:	b2da      	uxtb	r2, r3
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	739a      	strb	r2, [r3, #14]
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	7b9b      	ldrb	r3, [r3, #14]
 801d9f2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801d9f4:	7dbb      	ldrb	r3, [r7, #22]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d143      	bne.n	801da82 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	7b1b      	ldrb	r3, [r3, #12]
 801da04:	f003 030f 	and.w	r3, r3, #15
 801da08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	7b5b      	ldrb	r3, [r3, #13]
 801da0e:	f003 0302 	and.w	r3, r3, #2
 801da12:	2b00      	cmp	r3, #0
 801da14:	d011      	beq.n	801da3a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	691b      	ldr	r3, [r3, #16]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d106      	bne.n	801da30 <pbuf_free+0x90>
 801da22:	4b1d      	ldr	r3, [pc, #116]	@ (801da98 <pbuf_free+0xf8>)
 801da24:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801da28:	491f      	ldr	r1, [pc, #124]	@ (801daa8 <pbuf_free+0x108>)
 801da2a:	481d      	ldr	r0, [pc, #116]	@ (801daa0 <pbuf_free+0x100>)
 801da2c:	f00b fc9c 	bl	8029368 <iprintf>
        pc->custom_free_function(p);
 801da30:	68bb      	ldr	r3, [r7, #8]
 801da32:	691b      	ldr	r3, [r3, #16]
 801da34:	6878      	ldr	r0, [r7, #4]
 801da36:	4798      	blx	r3
 801da38:	e01d      	b.n	801da76 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801da3a:	7bfb      	ldrb	r3, [r7, #15]
 801da3c:	2b02      	cmp	r3, #2
 801da3e:	d104      	bne.n	801da4a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801da40:	6879      	ldr	r1, [r7, #4]
 801da42:	2008      	movs	r0, #8
 801da44:	f7ff f94a 	bl	801ccdc <memp_free>
 801da48:	e015      	b.n	801da76 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801da4a:	7bfb      	ldrb	r3, [r7, #15]
 801da4c:	2b01      	cmp	r3, #1
 801da4e:	d104      	bne.n	801da5a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801da50:	6879      	ldr	r1, [r7, #4]
 801da52:	2007      	movs	r0, #7
 801da54:	f7ff f942 	bl	801ccdc <memp_free>
 801da58:	e00d      	b.n	801da76 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801da5a:	7bfb      	ldrb	r3, [r7, #15]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d103      	bne.n	801da68 <pbuf_free+0xc8>
          mem_free(p);
 801da60:	6878      	ldr	r0, [r7, #4]
 801da62:	f7fe fdd5 	bl	801c610 <mem_free>
 801da66:	e006      	b.n	801da76 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801da68:	4b0b      	ldr	r3, [pc, #44]	@ (801da98 <pbuf_free+0xf8>)
 801da6a:	f240 320f 	movw	r2, #783	@ 0x30f
 801da6e:	490f      	ldr	r1, [pc, #60]	@ (801daac <pbuf_free+0x10c>)
 801da70:	480b      	ldr	r0, [pc, #44]	@ (801daa0 <pbuf_free+0x100>)
 801da72:	f00b fc79 	bl	8029368 <iprintf>
        }
      }
      count++;
 801da76:	7dfb      	ldrb	r3, [r7, #23]
 801da78:	3301      	adds	r3, #1
 801da7a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801da7c:	693b      	ldr	r3, [r7, #16]
 801da7e:	607b      	str	r3, [r7, #4]
 801da80:	e001      	b.n	801da86 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801da82:	2300      	movs	r3, #0
 801da84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d19f      	bne.n	801d9cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801da8c:	7dfb      	ldrb	r3, [r7, #23]
}
 801da8e:	4618      	mov	r0, r3
 801da90:	3718      	adds	r7, #24
 801da92:	46bd      	mov	sp, r7
 801da94:	bd80      	pop	{r7, pc}
 801da96:	bf00      	nop
 801da98:	0802e110 	.word	0x0802e110
 801da9c:	0802e274 	.word	0x0802e274
 801daa0:	0802e170 	.word	0x0802e170
 801daa4:	0802e2a0 	.word	0x0802e2a0
 801daa8:	0802e2b8 	.word	0x0802e2b8
 801daac:	0802e2dc 	.word	0x0802e2dc

0801dab0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801dab0:	b480      	push	{r7}
 801dab2:	b085      	sub	sp, #20
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801dab8:	2300      	movs	r3, #0
 801daba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801dabc:	e005      	b.n	801daca <pbuf_clen+0x1a>
    ++len;
 801dabe:	89fb      	ldrh	r3, [r7, #14]
 801dac0:	3301      	adds	r3, #1
 801dac2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d1f6      	bne.n	801dabe <pbuf_clen+0xe>
  }
  return len;
 801dad0:	89fb      	ldrh	r3, [r7, #14]
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	3714      	adds	r7, #20
 801dad6:	46bd      	mov	sp, r7
 801dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dadc:	4770      	bx	lr
	...

0801dae0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b082      	sub	sp, #8
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2b00      	cmp	r3, #0
 801daec:	d010      	beq.n	801db10 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	7b9b      	ldrb	r3, [r3, #14]
 801daf2:	3301      	adds	r3, #1
 801daf4:	b2da      	uxtb	r2, r3
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	7b9b      	ldrb	r3, [r3, #14]
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d106      	bne.n	801db10 <pbuf_ref+0x30>
 801db02:	4b05      	ldr	r3, [pc, #20]	@ (801db18 <pbuf_ref+0x38>)
 801db04:	f240 3242 	movw	r2, #834	@ 0x342
 801db08:	4904      	ldr	r1, [pc, #16]	@ (801db1c <pbuf_ref+0x3c>)
 801db0a:	4805      	ldr	r0, [pc, #20]	@ (801db20 <pbuf_ref+0x40>)
 801db0c:	f00b fc2c 	bl	8029368 <iprintf>
  }
}
 801db10:	bf00      	nop
 801db12:	3708      	adds	r7, #8
 801db14:	46bd      	mov	sp, r7
 801db16:	bd80      	pop	{r7, pc}
 801db18:	0802e110 	.word	0x0802e110
 801db1c:	0802e2f0 	.word	0x0802e2f0
 801db20:	0802e170 	.word	0x0802e170

0801db24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801db24:	b580      	push	{r7, lr}
 801db26:	b084      	sub	sp, #16
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
 801db2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d002      	beq.n	801db3a <pbuf_cat+0x16>
 801db34:	683b      	ldr	r3, [r7, #0]
 801db36:	2b00      	cmp	r3, #0
 801db38:	d107      	bne.n	801db4a <pbuf_cat+0x26>
 801db3a:	4b20      	ldr	r3, [pc, #128]	@ (801dbbc <pbuf_cat+0x98>)
 801db3c:	f240 3259 	movw	r2, #857	@ 0x359
 801db40:	491f      	ldr	r1, [pc, #124]	@ (801dbc0 <pbuf_cat+0x9c>)
 801db42:	4820      	ldr	r0, [pc, #128]	@ (801dbc4 <pbuf_cat+0xa0>)
 801db44:	f00b fc10 	bl	8029368 <iprintf>
 801db48:	e034      	b.n	801dbb4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	60fb      	str	r3, [r7, #12]
 801db4e:	e00a      	b.n	801db66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	891a      	ldrh	r2, [r3, #8]
 801db54:	683b      	ldr	r3, [r7, #0]
 801db56:	891b      	ldrh	r3, [r3, #8]
 801db58:	4413      	add	r3, r2
 801db5a:	b29a      	uxth	r2, r3
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	60fb      	str	r3, [r7, #12]
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d1f0      	bne.n	801db50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	891a      	ldrh	r2, [r3, #8]
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	895b      	ldrh	r3, [r3, #10]
 801db76:	429a      	cmp	r2, r3
 801db78:	d006      	beq.n	801db88 <pbuf_cat+0x64>
 801db7a:	4b10      	ldr	r3, [pc, #64]	@ (801dbbc <pbuf_cat+0x98>)
 801db7c:	f240 3262 	movw	r2, #866	@ 0x362
 801db80:	4911      	ldr	r1, [pc, #68]	@ (801dbc8 <pbuf_cat+0xa4>)
 801db82:	4810      	ldr	r0, [pc, #64]	@ (801dbc4 <pbuf_cat+0xa0>)
 801db84:	f00b fbf0 	bl	8029368 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d006      	beq.n	801db9e <pbuf_cat+0x7a>
 801db90:	4b0a      	ldr	r3, [pc, #40]	@ (801dbbc <pbuf_cat+0x98>)
 801db92:	f240 3263 	movw	r2, #867	@ 0x363
 801db96:	490d      	ldr	r1, [pc, #52]	@ (801dbcc <pbuf_cat+0xa8>)
 801db98:	480a      	ldr	r0, [pc, #40]	@ (801dbc4 <pbuf_cat+0xa0>)
 801db9a:	f00b fbe5 	bl	8029368 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	891a      	ldrh	r2, [r3, #8]
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	891b      	ldrh	r3, [r3, #8]
 801dba6:	4413      	add	r3, r2
 801dba8:	b29a      	uxth	r2, r3
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	683a      	ldr	r2, [r7, #0]
 801dbb2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801dbb4:	3710      	adds	r7, #16
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	bd80      	pop	{r7, pc}
 801dbba:	bf00      	nop
 801dbbc:	0802e110 	.word	0x0802e110
 801dbc0:	0802e304 	.word	0x0802e304
 801dbc4:	0802e170 	.word	0x0802e170
 801dbc8:	0802e33c 	.word	0x0802e33c
 801dbcc:	0802e36c 	.word	0x0802e36c

0801dbd0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	b082      	sub	sp, #8
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	6078      	str	r0, [r7, #4]
 801dbd8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801dbda:	6839      	ldr	r1, [r7, #0]
 801dbdc:	6878      	ldr	r0, [r7, #4]
 801dbde:	f7ff ffa1 	bl	801db24 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801dbe2:	6838      	ldr	r0, [r7, #0]
 801dbe4:	f7ff ff7c 	bl	801dae0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801dbe8:	bf00      	nop
 801dbea:	3708      	adds	r7, #8
 801dbec:	46bd      	mov	sp, r7
 801dbee:	bd80      	pop	{r7, pc}

0801dbf0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b086      	sub	sp, #24
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	6078      	str	r0, [r7, #4]
 801dbf8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	617b      	str	r3, [r7, #20]
 801dbfe:	2300      	movs	r3, #0
 801dc00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d008      	beq.n	801dc1a <pbuf_copy+0x2a>
 801dc08:	683b      	ldr	r3, [r7, #0]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d005      	beq.n	801dc1a <pbuf_copy+0x2a>
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	891a      	ldrh	r2, [r3, #8]
 801dc12:	683b      	ldr	r3, [r7, #0]
 801dc14:	891b      	ldrh	r3, [r3, #8]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	d209      	bcs.n	801dc2e <pbuf_copy+0x3e>
 801dc1a:	4b57      	ldr	r3, [pc, #348]	@ (801dd78 <pbuf_copy+0x188>)
 801dc1c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801dc20:	4956      	ldr	r1, [pc, #344]	@ (801dd7c <pbuf_copy+0x18c>)
 801dc22:	4857      	ldr	r0, [pc, #348]	@ (801dd80 <pbuf_copy+0x190>)
 801dc24:	f00b fba0 	bl	8029368 <iprintf>
 801dc28:	f06f 030f 	mvn.w	r3, #15
 801dc2c:	e09f      	b.n	801dd6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	895b      	ldrh	r3, [r3, #10]
 801dc32:	461a      	mov	r2, r3
 801dc34:	697b      	ldr	r3, [r7, #20]
 801dc36:	1ad2      	subs	r2, r2, r3
 801dc38:	683b      	ldr	r3, [r7, #0]
 801dc3a:	895b      	ldrh	r3, [r3, #10]
 801dc3c:	4619      	mov	r1, r3
 801dc3e:	693b      	ldr	r3, [r7, #16]
 801dc40:	1acb      	subs	r3, r1, r3
 801dc42:	429a      	cmp	r2, r3
 801dc44:	d306      	bcc.n	801dc54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	895b      	ldrh	r3, [r3, #10]
 801dc4a:	461a      	mov	r2, r3
 801dc4c:	693b      	ldr	r3, [r7, #16]
 801dc4e:	1ad3      	subs	r3, r2, r3
 801dc50:	60fb      	str	r3, [r7, #12]
 801dc52:	e005      	b.n	801dc60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	895b      	ldrh	r3, [r3, #10]
 801dc58:	461a      	mov	r2, r3
 801dc5a:	697b      	ldr	r3, [r7, #20]
 801dc5c:	1ad3      	subs	r3, r2, r3
 801dc5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	685a      	ldr	r2, [r3, #4]
 801dc64:	697b      	ldr	r3, [r7, #20]
 801dc66:	18d0      	adds	r0, r2, r3
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	685a      	ldr	r2, [r3, #4]
 801dc6c:	693b      	ldr	r3, [r7, #16]
 801dc6e:	4413      	add	r3, r2
 801dc70:	68fa      	ldr	r2, [r7, #12]
 801dc72:	4619      	mov	r1, r3
 801dc74:	f00b fdeb 	bl	802984e <memcpy>
    offset_to += len;
 801dc78:	697a      	ldr	r2, [r7, #20]
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	4413      	add	r3, r2
 801dc7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801dc80:	693a      	ldr	r2, [r7, #16]
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	4413      	add	r3, r2
 801dc86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	895b      	ldrh	r3, [r3, #10]
 801dc8c:	461a      	mov	r2, r3
 801dc8e:	697b      	ldr	r3, [r7, #20]
 801dc90:	4293      	cmp	r3, r2
 801dc92:	d906      	bls.n	801dca2 <pbuf_copy+0xb2>
 801dc94:	4b38      	ldr	r3, [pc, #224]	@ (801dd78 <pbuf_copy+0x188>)
 801dc96:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801dc9a:	493a      	ldr	r1, [pc, #232]	@ (801dd84 <pbuf_copy+0x194>)
 801dc9c:	4838      	ldr	r0, [pc, #224]	@ (801dd80 <pbuf_copy+0x190>)
 801dc9e:	f00b fb63 	bl	8029368 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801dca2:	683b      	ldr	r3, [r7, #0]
 801dca4:	895b      	ldrh	r3, [r3, #10]
 801dca6:	461a      	mov	r2, r3
 801dca8:	693b      	ldr	r3, [r7, #16]
 801dcaa:	4293      	cmp	r3, r2
 801dcac:	d906      	bls.n	801dcbc <pbuf_copy+0xcc>
 801dcae:	4b32      	ldr	r3, [pc, #200]	@ (801dd78 <pbuf_copy+0x188>)
 801dcb0:	f240 32da 	movw	r2, #986	@ 0x3da
 801dcb4:	4934      	ldr	r1, [pc, #208]	@ (801dd88 <pbuf_copy+0x198>)
 801dcb6:	4832      	ldr	r0, [pc, #200]	@ (801dd80 <pbuf_copy+0x190>)
 801dcb8:	f00b fb56 	bl	8029368 <iprintf>
    if (offset_from >= p_from->len) {
 801dcbc:	683b      	ldr	r3, [r7, #0]
 801dcbe:	895b      	ldrh	r3, [r3, #10]
 801dcc0:	461a      	mov	r2, r3
 801dcc2:	693b      	ldr	r3, [r7, #16]
 801dcc4:	4293      	cmp	r3, r2
 801dcc6:	d304      	bcc.n	801dcd2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801dcc8:	2300      	movs	r3, #0
 801dcca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801dccc:	683b      	ldr	r3, [r7, #0]
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	895b      	ldrh	r3, [r3, #10]
 801dcd6:	461a      	mov	r2, r3
 801dcd8:	697b      	ldr	r3, [r7, #20]
 801dcda:	4293      	cmp	r3, r2
 801dcdc:	d114      	bne.n	801dd08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801dcde:	2300      	movs	r3, #0
 801dce0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d10c      	bne.n	801dd08 <pbuf_copy+0x118>
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d009      	beq.n	801dd08 <pbuf_copy+0x118>
 801dcf4:	4b20      	ldr	r3, [pc, #128]	@ (801dd78 <pbuf_copy+0x188>)
 801dcf6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801dcfa:	4924      	ldr	r1, [pc, #144]	@ (801dd8c <pbuf_copy+0x19c>)
 801dcfc:	4820      	ldr	r0, [pc, #128]	@ (801dd80 <pbuf_copy+0x190>)
 801dcfe:	f00b fb33 	bl	8029368 <iprintf>
 801dd02:	f06f 030f 	mvn.w	r3, #15
 801dd06:	e032      	b.n	801dd6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801dd08:	683b      	ldr	r3, [r7, #0]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d013      	beq.n	801dd36 <pbuf_copy+0x146>
 801dd0e:	683b      	ldr	r3, [r7, #0]
 801dd10:	895a      	ldrh	r2, [r3, #10]
 801dd12:	683b      	ldr	r3, [r7, #0]
 801dd14:	891b      	ldrh	r3, [r3, #8]
 801dd16:	429a      	cmp	r2, r3
 801dd18:	d10d      	bne.n	801dd36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801dd1a:	683b      	ldr	r3, [r7, #0]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d009      	beq.n	801dd36 <pbuf_copy+0x146>
 801dd22:	4b15      	ldr	r3, [pc, #84]	@ (801dd78 <pbuf_copy+0x188>)
 801dd24:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801dd28:	4919      	ldr	r1, [pc, #100]	@ (801dd90 <pbuf_copy+0x1a0>)
 801dd2a:	4815      	ldr	r0, [pc, #84]	@ (801dd80 <pbuf_copy+0x190>)
 801dd2c:	f00b fb1c 	bl	8029368 <iprintf>
 801dd30:	f06f 0305 	mvn.w	r3, #5
 801dd34:	e01b      	b.n	801dd6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d013      	beq.n	801dd64 <pbuf_copy+0x174>
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	895a      	ldrh	r2, [r3, #10]
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	891b      	ldrh	r3, [r3, #8]
 801dd44:	429a      	cmp	r2, r3
 801dd46:	d10d      	bne.n	801dd64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d009      	beq.n	801dd64 <pbuf_copy+0x174>
 801dd50:	4b09      	ldr	r3, [pc, #36]	@ (801dd78 <pbuf_copy+0x188>)
 801dd52:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801dd56:	490e      	ldr	r1, [pc, #56]	@ (801dd90 <pbuf_copy+0x1a0>)
 801dd58:	4809      	ldr	r0, [pc, #36]	@ (801dd80 <pbuf_copy+0x190>)
 801dd5a:	f00b fb05 	bl	8029368 <iprintf>
 801dd5e:	f06f 0305 	mvn.w	r3, #5
 801dd62:	e004      	b.n	801dd6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801dd64:	683b      	ldr	r3, [r7, #0]
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	f47f af61 	bne.w	801dc2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801dd6c:	2300      	movs	r3, #0
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3718      	adds	r7, #24
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	0802e110 	.word	0x0802e110
 801dd7c:	0802e3b8 	.word	0x0802e3b8
 801dd80:	0802e170 	.word	0x0802e170
 801dd84:	0802e3e8 	.word	0x0802e3e8
 801dd88:	0802e400 	.word	0x0802e400
 801dd8c:	0802e41c 	.word	0x0802e41c
 801dd90:	0802e42c 	.word	0x0802e42c

0801dd94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b088      	sub	sp, #32
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	60f8      	str	r0, [r7, #12]
 801dd9c:	60b9      	str	r1, [r7, #8]
 801dd9e:	4611      	mov	r1, r2
 801dda0:	461a      	mov	r2, r3
 801dda2:	460b      	mov	r3, r1
 801dda4:	80fb      	strh	r3, [r7, #6]
 801dda6:	4613      	mov	r3, r2
 801dda8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801ddaa:	2300      	movs	r3, #0
 801ddac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801ddae:	2300      	movs	r3, #0
 801ddb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	d108      	bne.n	801ddca <pbuf_copy_partial+0x36>
 801ddb8:	4b2b      	ldr	r3, [pc, #172]	@ (801de68 <pbuf_copy_partial+0xd4>)
 801ddba:	f240 420a 	movw	r2, #1034	@ 0x40a
 801ddbe:	492b      	ldr	r1, [pc, #172]	@ (801de6c <pbuf_copy_partial+0xd8>)
 801ddc0:	482b      	ldr	r0, [pc, #172]	@ (801de70 <pbuf_copy_partial+0xdc>)
 801ddc2:	f00b fad1 	bl	8029368 <iprintf>
 801ddc6:	2300      	movs	r3, #0
 801ddc8:	e04a      	b.n	801de60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801ddca:	68bb      	ldr	r3, [r7, #8]
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d108      	bne.n	801dde2 <pbuf_copy_partial+0x4e>
 801ddd0:	4b25      	ldr	r3, [pc, #148]	@ (801de68 <pbuf_copy_partial+0xd4>)
 801ddd2:	f240 420b 	movw	r2, #1035	@ 0x40b
 801ddd6:	4927      	ldr	r1, [pc, #156]	@ (801de74 <pbuf_copy_partial+0xe0>)
 801ddd8:	4825      	ldr	r0, [pc, #148]	@ (801de70 <pbuf_copy_partial+0xdc>)
 801ddda:	f00b fac5 	bl	8029368 <iprintf>
 801ddde:	2300      	movs	r3, #0
 801dde0:	e03e      	b.n	801de60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	61fb      	str	r3, [r7, #28]
 801dde6:	e034      	b.n	801de52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801dde8:	88bb      	ldrh	r3, [r7, #4]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d00a      	beq.n	801de04 <pbuf_copy_partial+0x70>
 801ddee:	69fb      	ldr	r3, [r7, #28]
 801ddf0:	895b      	ldrh	r3, [r3, #10]
 801ddf2:	88ba      	ldrh	r2, [r7, #4]
 801ddf4:	429a      	cmp	r2, r3
 801ddf6:	d305      	bcc.n	801de04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801ddf8:	69fb      	ldr	r3, [r7, #28]
 801ddfa:	895b      	ldrh	r3, [r3, #10]
 801ddfc:	88ba      	ldrh	r2, [r7, #4]
 801ddfe:	1ad3      	subs	r3, r2, r3
 801de00:	80bb      	strh	r3, [r7, #4]
 801de02:	e023      	b.n	801de4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801de04:	69fb      	ldr	r3, [r7, #28]
 801de06:	895a      	ldrh	r2, [r3, #10]
 801de08:	88bb      	ldrh	r3, [r7, #4]
 801de0a:	1ad3      	subs	r3, r2, r3
 801de0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801de0e:	8b3a      	ldrh	r2, [r7, #24]
 801de10:	88fb      	ldrh	r3, [r7, #6]
 801de12:	429a      	cmp	r2, r3
 801de14:	d901      	bls.n	801de1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801de16:	88fb      	ldrh	r3, [r7, #6]
 801de18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801de1a:	8b7b      	ldrh	r3, [r7, #26]
 801de1c:	68ba      	ldr	r2, [r7, #8]
 801de1e:	18d0      	adds	r0, r2, r3
 801de20:	69fb      	ldr	r3, [r7, #28]
 801de22:	685a      	ldr	r2, [r3, #4]
 801de24:	88bb      	ldrh	r3, [r7, #4]
 801de26:	4413      	add	r3, r2
 801de28:	8b3a      	ldrh	r2, [r7, #24]
 801de2a:	4619      	mov	r1, r3
 801de2c:	f00b fd0f 	bl	802984e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801de30:	8afa      	ldrh	r2, [r7, #22]
 801de32:	8b3b      	ldrh	r3, [r7, #24]
 801de34:	4413      	add	r3, r2
 801de36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801de38:	8b7a      	ldrh	r2, [r7, #26]
 801de3a:	8b3b      	ldrh	r3, [r7, #24]
 801de3c:	4413      	add	r3, r2
 801de3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801de40:	88fa      	ldrh	r2, [r7, #6]
 801de42:	8b3b      	ldrh	r3, [r7, #24]
 801de44:	1ad3      	subs	r3, r2, r3
 801de46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801de48:	2300      	movs	r3, #0
 801de4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801de4c:	69fb      	ldr	r3, [r7, #28]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	61fb      	str	r3, [r7, #28]
 801de52:	88fb      	ldrh	r3, [r7, #6]
 801de54:	2b00      	cmp	r3, #0
 801de56:	d002      	beq.n	801de5e <pbuf_copy_partial+0xca>
 801de58:	69fb      	ldr	r3, [r7, #28]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d1c4      	bne.n	801dde8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801de5e:	8afb      	ldrh	r3, [r7, #22]
}
 801de60:	4618      	mov	r0, r3
 801de62:	3720      	adds	r7, #32
 801de64:	46bd      	mov	sp, r7
 801de66:	bd80      	pop	{r7, pc}
 801de68:	0802e110 	.word	0x0802e110
 801de6c:	0802e458 	.word	0x0802e458
 801de70:	0802e170 	.word	0x0802e170
 801de74:	0802e478 	.word	0x0802e478

0801de78 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801de78:	b480      	push	{r7}
 801de7a:	b087      	sub	sp, #28
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	60f8      	str	r0, [r7, #12]
 801de80:	460b      	mov	r3, r1
 801de82:	607a      	str	r2, [r7, #4]
 801de84:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801de86:	897b      	ldrh	r3, [r7, #10]
 801de88:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801de8e:	e007      	b.n	801dea0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801de90:	693b      	ldr	r3, [r7, #16]
 801de92:	895b      	ldrh	r3, [r3, #10]
 801de94:	8afa      	ldrh	r2, [r7, #22]
 801de96:	1ad3      	subs	r3, r2, r3
 801de98:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801de9a:	693b      	ldr	r3, [r7, #16]
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801dea0:	693b      	ldr	r3, [r7, #16]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d004      	beq.n	801deb0 <pbuf_skip_const+0x38>
 801dea6:	693b      	ldr	r3, [r7, #16]
 801dea8:	895b      	ldrh	r3, [r3, #10]
 801deaa:	8afa      	ldrh	r2, [r7, #22]
 801deac:	429a      	cmp	r2, r3
 801deae:	d2ef      	bcs.n	801de90 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d002      	beq.n	801debc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	8afa      	ldrh	r2, [r7, #22]
 801deba:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801debc:	693b      	ldr	r3, [r7, #16]
}
 801debe:	4618      	mov	r0, r3
 801dec0:	371c      	adds	r7, #28
 801dec2:	46bd      	mov	sp, r7
 801dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec8:	4770      	bx	lr

0801deca <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801deca:	b580      	push	{r7, lr}
 801decc:	b086      	sub	sp, #24
 801dece:	af00      	add	r7, sp, #0
 801ded0:	60f8      	str	r0, [r7, #12]
 801ded2:	460b      	mov	r3, r1
 801ded4:	607a      	str	r2, [r7, #4]
 801ded6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 801ded8:	897b      	ldrh	r3, [r7, #10]
 801deda:	687a      	ldr	r2, [r7, #4]
 801dedc:	4619      	mov	r1, r3
 801dede:	68f8      	ldr	r0, [r7, #12]
 801dee0:	f7ff ffca 	bl	801de78 <pbuf_skip_const>
 801dee4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 801dee6:	697b      	ldr	r3, [r7, #20]
}
 801dee8:	4618      	mov	r0, r3
 801deea:	3718      	adds	r7, #24
 801deec:	46bd      	mov	sp, r7
 801deee:	bd80      	pop	{r7, pc}

0801def0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b088      	sub	sp, #32
 801def4:	af00      	add	r7, sp, #0
 801def6:	60f8      	str	r0, [r7, #12]
 801def8:	60b9      	str	r1, [r7, #8]
 801defa:	4613      	mov	r3, r2
 801defc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801defe:	88fb      	ldrh	r3, [r7, #6]
 801df00:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801df02:	2300      	movs	r3, #0
 801df04:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d109      	bne.n	801df20 <pbuf_take+0x30>
 801df0c:	4b3a      	ldr	r3, [pc, #232]	@ (801dff8 <pbuf_take+0x108>)
 801df0e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 801df12:	493a      	ldr	r1, [pc, #232]	@ (801dffc <pbuf_take+0x10c>)
 801df14:	483a      	ldr	r0, [pc, #232]	@ (801e000 <pbuf_take+0x110>)
 801df16:	f00b fa27 	bl	8029368 <iprintf>
 801df1a:	f06f 030f 	mvn.w	r3, #15
 801df1e:	e067      	b.n	801dff0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801df20:	68bb      	ldr	r3, [r7, #8]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d109      	bne.n	801df3a <pbuf_take+0x4a>
 801df26:	4b34      	ldr	r3, [pc, #208]	@ (801dff8 <pbuf_take+0x108>)
 801df28:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801df2c:	4935      	ldr	r1, [pc, #212]	@ (801e004 <pbuf_take+0x114>)
 801df2e:	4834      	ldr	r0, [pc, #208]	@ (801e000 <pbuf_take+0x110>)
 801df30:	f00b fa1a 	bl	8029368 <iprintf>
 801df34:	f06f 030f 	mvn.w	r3, #15
 801df38:	e05a      	b.n	801dff0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	891b      	ldrh	r3, [r3, #8]
 801df3e:	88fa      	ldrh	r2, [r7, #6]
 801df40:	429a      	cmp	r2, r3
 801df42:	d909      	bls.n	801df58 <pbuf_take+0x68>
 801df44:	4b2c      	ldr	r3, [pc, #176]	@ (801dff8 <pbuf_take+0x108>)
 801df46:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801df4a:	492f      	ldr	r1, [pc, #188]	@ (801e008 <pbuf_take+0x118>)
 801df4c:	482c      	ldr	r0, [pc, #176]	@ (801e000 <pbuf_take+0x110>)
 801df4e:	f00b fa0b 	bl	8029368 <iprintf>
 801df52:	f04f 33ff 	mov.w	r3, #4294967295
 801df56:	e04b      	b.n	801dff0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d007      	beq.n	801df6e <pbuf_take+0x7e>
 801df5e:	68bb      	ldr	r3, [r7, #8]
 801df60:	2b00      	cmp	r3, #0
 801df62:	d004      	beq.n	801df6e <pbuf_take+0x7e>
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	891b      	ldrh	r3, [r3, #8]
 801df68:	88fa      	ldrh	r2, [r7, #6]
 801df6a:	429a      	cmp	r2, r3
 801df6c:	d902      	bls.n	801df74 <pbuf_take+0x84>
    return ERR_ARG;
 801df6e:	f06f 030f 	mvn.w	r3, #15
 801df72:	e03d      	b.n	801dff0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	61fb      	str	r3, [r7, #28]
 801df78:	e028      	b.n	801dfcc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801df7a:	69fb      	ldr	r3, [r7, #28]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d106      	bne.n	801df8e <pbuf_take+0x9e>
 801df80:	4b1d      	ldr	r3, [pc, #116]	@ (801dff8 <pbuf_take+0x108>)
 801df82:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 801df86:	4921      	ldr	r1, [pc, #132]	@ (801e00c <pbuf_take+0x11c>)
 801df88:	481d      	ldr	r0, [pc, #116]	@ (801e000 <pbuf_take+0x110>)
 801df8a:	f00b f9ed 	bl	8029368 <iprintf>
    buf_copy_len = total_copy_len;
 801df8e:	697b      	ldr	r3, [r7, #20]
 801df90:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801df92:	69fb      	ldr	r3, [r7, #28]
 801df94:	895b      	ldrh	r3, [r3, #10]
 801df96:	461a      	mov	r2, r3
 801df98:	69bb      	ldr	r3, [r7, #24]
 801df9a:	4293      	cmp	r3, r2
 801df9c:	d902      	bls.n	801dfa4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801df9e:	69fb      	ldr	r3, [r7, #28]
 801dfa0:	895b      	ldrh	r3, [r3, #10]
 801dfa2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801dfa4:	69fb      	ldr	r3, [r7, #28]
 801dfa6:	6858      	ldr	r0, [r3, #4]
 801dfa8:	68ba      	ldr	r2, [r7, #8]
 801dfaa:	693b      	ldr	r3, [r7, #16]
 801dfac:	4413      	add	r3, r2
 801dfae:	69ba      	ldr	r2, [r7, #24]
 801dfb0:	4619      	mov	r1, r3
 801dfb2:	f00b fc4c 	bl	802984e <memcpy>
    total_copy_len -= buf_copy_len;
 801dfb6:	697a      	ldr	r2, [r7, #20]
 801dfb8:	69bb      	ldr	r3, [r7, #24]
 801dfba:	1ad3      	subs	r3, r2, r3
 801dfbc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801dfbe:	693a      	ldr	r2, [r7, #16]
 801dfc0:	69bb      	ldr	r3, [r7, #24]
 801dfc2:	4413      	add	r3, r2
 801dfc4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801dfc6:	69fb      	ldr	r3, [r7, #28]
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	61fb      	str	r3, [r7, #28]
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d1d3      	bne.n	801df7a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801dfd2:	697b      	ldr	r3, [r7, #20]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d103      	bne.n	801dfe0 <pbuf_take+0xf0>
 801dfd8:	88fb      	ldrh	r3, [r7, #6]
 801dfda:	693a      	ldr	r2, [r7, #16]
 801dfdc:	429a      	cmp	r2, r3
 801dfde:	d006      	beq.n	801dfee <pbuf_take+0xfe>
 801dfe0:	4b05      	ldr	r3, [pc, #20]	@ (801dff8 <pbuf_take+0x108>)
 801dfe2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 801dfe6:	490a      	ldr	r1, [pc, #40]	@ (801e010 <pbuf_take+0x120>)
 801dfe8:	4805      	ldr	r0, [pc, #20]	@ (801e000 <pbuf_take+0x110>)
 801dfea:	f00b f9bd 	bl	8029368 <iprintf>
  return ERR_OK;
 801dfee:	2300      	movs	r3, #0
}
 801dff0:	4618      	mov	r0, r3
 801dff2:	3720      	adds	r7, #32
 801dff4:	46bd      	mov	sp, r7
 801dff6:	bd80      	pop	{r7, pc}
 801dff8:	0802e110 	.word	0x0802e110
 801dffc:	0802e4e8 	.word	0x0802e4e8
 801e000:	0802e170 	.word	0x0802e170
 801e004:	0802e500 	.word	0x0802e500
 801e008:	0802e51c 	.word	0x0802e51c
 801e00c:	0802e53c 	.word	0x0802e53c
 801e010:	0802e554 	.word	0x0802e554

0801e014 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801e014:	b580      	push	{r7, lr}
 801e016:	b088      	sub	sp, #32
 801e018:	af00      	add	r7, sp, #0
 801e01a:	60f8      	str	r0, [r7, #12]
 801e01c:	60b9      	str	r1, [r7, #8]
 801e01e:	4611      	mov	r1, r2
 801e020:	461a      	mov	r2, r3
 801e022:	460b      	mov	r3, r1
 801e024:	80fb      	strh	r3, [r7, #6]
 801e026:	4613      	mov	r3, r2
 801e028:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801e02a:	f107 0210 	add.w	r2, r7, #16
 801e02e:	88bb      	ldrh	r3, [r7, #4]
 801e030:	4619      	mov	r1, r3
 801e032:	68f8      	ldr	r0, [r7, #12]
 801e034:	f7ff ff49 	bl	801deca <pbuf_skip>
 801e038:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801e03a:	69fb      	ldr	r3, [r7, #28]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d047      	beq.n	801e0d0 <pbuf_take_at+0xbc>
 801e040:	69fb      	ldr	r3, [r7, #28]
 801e042:	891b      	ldrh	r3, [r3, #8]
 801e044:	461a      	mov	r2, r3
 801e046:	8a3b      	ldrh	r3, [r7, #16]
 801e048:	4619      	mov	r1, r3
 801e04a:	88fb      	ldrh	r3, [r7, #6]
 801e04c:	440b      	add	r3, r1
 801e04e:	429a      	cmp	r2, r3
 801e050:	db3e      	blt.n	801e0d0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801e052:	88fb      	ldrh	r3, [r7, #6]
 801e054:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801e056:	68bb      	ldr	r3, [r7, #8]
 801e058:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801e05a:	69fb      	ldr	r3, [r7, #28]
 801e05c:	895a      	ldrh	r2, [r3, #10]
 801e05e:	8a3b      	ldrh	r3, [r7, #16]
 801e060:	429a      	cmp	r2, r3
 801e062:	d806      	bhi.n	801e072 <pbuf_take_at+0x5e>
 801e064:	4b1d      	ldr	r3, [pc, #116]	@ (801e0dc <pbuf_take_at+0xc8>)
 801e066:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801e06a:	491d      	ldr	r1, [pc, #116]	@ (801e0e0 <pbuf_take_at+0xcc>)
 801e06c:	481d      	ldr	r0, [pc, #116]	@ (801e0e4 <pbuf_take_at+0xd0>)
 801e06e:	f00b f97b 	bl	8029368 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801e072:	69fb      	ldr	r3, [r7, #28]
 801e074:	895b      	ldrh	r3, [r3, #10]
 801e076:	461a      	mov	r2, r3
 801e078:	8a3b      	ldrh	r3, [r7, #16]
 801e07a:	1ad2      	subs	r2, r2, r3
 801e07c:	88fb      	ldrh	r3, [r7, #6]
 801e07e:	429a      	cmp	r2, r3
 801e080:	da05      	bge.n	801e08e <pbuf_take_at+0x7a>
 801e082:	69fb      	ldr	r3, [r7, #28]
 801e084:	895a      	ldrh	r2, [r3, #10]
 801e086:	8a3b      	ldrh	r3, [r7, #16]
 801e088:	1ad3      	subs	r3, r2, r3
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	e000      	b.n	801e090 <pbuf_take_at+0x7c>
 801e08e:	88fb      	ldrh	r3, [r7, #6]
 801e090:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801e092:	69fb      	ldr	r3, [r7, #28]
 801e094:	685b      	ldr	r3, [r3, #4]
 801e096:	8a3a      	ldrh	r2, [r7, #16]
 801e098:	4413      	add	r3, r2
 801e09a:	8a7a      	ldrh	r2, [r7, #18]
 801e09c:	68b9      	ldr	r1, [r7, #8]
 801e09e:	4618      	mov	r0, r3
 801e0a0:	f00b fbd5 	bl	802984e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801e0a4:	8b7a      	ldrh	r2, [r7, #26]
 801e0a6:	8a7b      	ldrh	r3, [r7, #18]
 801e0a8:	1ad3      	subs	r3, r2, r3
 801e0aa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801e0ac:	8a7b      	ldrh	r3, [r7, #18]
 801e0ae:	697a      	ldr	r2, [r7, #20]
 801e0b0:	4413      	add	r3, r2
 801e0b2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801e0b4:	8b7b      	ldrh	r3, [r7, #26]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d008      	beq.n	801e0cc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801e0ba:	69fb      	ldr	r3, [r7, #28]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	8b7a      	ldrh	r2, [r7, #26]
 801e0c0:	6979      	ldr	r1, [r7, #20]
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	f7ff ff14 	bl	801def0 <pbuf_take>
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	e003      	b.n	801e0d4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	e001      	b.n	801e0d4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 801e0d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	3720      	adds	r7, #32
 801e0d8:	46bd      	mov	sp, r7
 801e0da:	bd80      	pop	{r7, pc}
 801e0dc:	0802e110 	.word	0x0802e110
 801e0e0:	0802e56c 	.word	0x0802e56c
 801e0e4:	0802e170 	.word	0x0802e170

0801e0e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b084      	sub	sp, #16
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	603a      	str	r2, [r7, #0]
 801e0f2:	71fb      	strb	r3, [r7, #7]
 801e0f4:	460b      	mov	r3, r1
 801e0f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	8919      	ldrh	r1, [r3, #8]
 801e0fc:	88ba      	ldrh	r2, [r7, #4]
 801e0fe:	79fb      	ldrb	r3, [r7, #7]
 801e100:	4618      	mov	r0, r3
 801e102:	f7ff f969 	bl	801d3d8 <pbuf_alloc>
 801e106:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d101      	bne.n	801e112 <pbuf_clone+0x2a>
    return NULL;
 801e10e:	2300      	movs	r3, #0
 801e110:	e011      	b.n	801e136 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801e112:	6839      	ldr	r1, [r7, #0]
 801e114:	68f8      	ldr	r0, [r7, #12]
 801e116:	f7ff fd6b 	bl	801dbf0 <pbuf_copy>
 801e11a:	4603      	mov	r3, r0
 801e11c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801e11e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d006      	beq.n	801e134 <pbuf_clone+0x4c>
 801e126:	4b06      	ldr	r3, [pc, #24]	@ (801e140 <pbuf_clone+0x58>)
 801e128:	f240 5224 	movw	r2, #1316	@ 0x524
 801e12c:	4905      	ldr	r1, [pc, #20]	@ (801e144 <pbuf_clone+0x5c>)
 801e12e:	4806      	ldr	r0, [pc, #24]	@ (801e148 <pbuf_clone+0x60>)
 801e130:	f00b f91a 	bl	8029368 <iprintf>
  return q;
 801e134:	68fb      	ldr	r3, [r7, #12]
}
 801e136:	4618      	mov	r0, r3
 801e138:	3710      	adds	r7, #16
 801e13a:	46bd      	mov	sp, r7
 801e13c:	bd80      	pop	{r7, pc}
 801e13e:	bf00      	nop
 801e140:	0802e110 	.word	0x0802e110
 801e144:	0802e584 	.word	0x0802e584
 801e148:	0802e170 	.word	0x0802e170

0801e14c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b084      	sub	sp, #16
 801e150:	af00      	add	r7, sp, #0
 801e152:	6078      	str	r0, [r7, #4]
 801e154:	460b      	mov	r3, r1
 801e156:	807b      	strh	r3, [r7, #2]
 801e158:	4613      	mov	r3, r2
 801e15a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 801e15c:	f107 020a 	add.w	r2, r7, #10
 801e160:	887b      	ldrh	r3, [r7, #2]
 801e162:	4619      	mov	r1, r3
 801e164:	6878      	ldr	r0, [r7, #4]
 801e166:	f7ff feb0 	bl	801deca <pbuf_skip>
 801e16a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d00a      	beq.n	801e188 <pbuf_put_at+0x3c>
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	895a      	ldrh	r2, [r3, #10]
 801e176:	897b      	ldrh	r3, [r7, #10]
 801e178:	429a      	cmp	r2, r3
 801e17a:	d905      	bls.n	801e188 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	685b      	ldr	r3, [r3, #4]
 801e180:	897a      	ldrh	r2, [r7, #10]
 801e182:	4413      	add	r3, r2
 801e184:	787a      	ldrb	r2, [r7, #1]
 801e186:	701a      	strb	r2, [r3, #0]
  }
}
 801e188:	bf00      	nop
 801e18a:	3710      	adds	r7, #16
 801e18c:	46bd      	mov	sp, r7
 801e18e:	bd80      	pop	{r7, pc}

0801e190 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801e190:	b580      	push	{r7, lr}
 801e192:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801e194:	f00a fb1a 	bl	80287cc <rand>
 801e198:	4603      	mov	r3, r0
 801e19a:	b29b      	uxth	r3, r3
 801e19c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801e1a6:	b29a      	uxth	r2, r3
 801e1a8:	4b01      	ldr	r3, [pc, #4]	@ (801e1b0 <tcp_init+0x20>)
 801e1aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801e1ac:	bf00      	nop
 801e1ae:	bd80      	pop	{r7, pc}
 801e1b0:	24000060 	.word	0x24000060

0801e1b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801e1b4:	b580      	push	{r7, lr}
 801e1b6:	b082      	sub	sp, #8
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	7d1b      	ldrb	r3, [r3, #20]
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	d105      	bne.n	801e1d0 <tcp_free+0x1c>
 801e1c4:	4b06      	ldr	r3, [pc, #24]	@ (801e1e0 <tcp_free+0x2c>)
 801e1c6:	22d4      	movs	r2, #212	@ 0xd4
 801e1c8:	4906      	ldr	r1, [pc, #24]	@ (801e1e4 <tcp_free+0x30>)
 801e1ca:	4807      	ldr	r0, [pc, #28]	@ (801e1e8 <tcp_free+0x34>)
 801e1cc:	f00b f8cc 	bl	8029368 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801e1d0:	6879      	ldr	r1, [r7, #4]
 801e1d2:	2001      	movs	r0, #1
 801e1d4:	f7fe fd82 	bl	801ccdc <memp_free>
}
 801e1d8:	bf00      	nop
 801e1da:	3708      	adds	r7, #8
 801e1dc:	46bd      	mov	sp, r7
 801e1de:	bd80      	pop	{r7, pc}
 801e1e0:	0802e610 	.word	0x0802e610
 801e1e4:	0802e640 	.word	0x0802e640
 801e1e8:	0802e654 	.word	0x0802e654

0801e1ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801e1ec:	b580      	push	{r7, lr}
 801e1ee:	b082      	sub	sp, #8
 801e1f0:	af00      	add	r7, sp, #0
 801e1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	7d1b      	ldrb	r3, [r3, #20]
 801e1f8:	2b01      	cmp	r3, #1
 801e1fa:	d105      	bne.n	801e208 <tcp_free_listen+0x1c>
 801e1fc:	4b06      	ldr	r3, [pc, #24]	@ (801e218 <tcp_free_listen+0x2c>)
 801e1fe:	22df      	movs	r2, #223	@ 0xdf
 801e200:	4906      	ldr	r1, [pc, #24]	@ (801e21c <tcp_free_listen+0x30>)
 801e202:	4807      	ldr	r0, [pc, #28]	@ (801e220 <tcp_free_listen+0x34>)
 801e204:	f00b f8b0 	bl	8029368 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801e208:	6879      	ldr	r1, [r7, #4]
 801e20a:	2002      	movs	r0, #2
 801e20c:	f7fe fd66 	bl	801ccdc <memp_free>
}
 801e210:	bf00      	nop
 801e212:	3708      	adds	r7, #8
 801e214:	46bd      	mov	sp, r7
 801e216:	bd80      	pop	{r7, pc}
 801e218:	0802e610 	.word	0x0802e610
 801e21c:	0802e67c 	.word	0x0802e67c
 801e220:	0802e654 	.word	0x0802e654

0801e224 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801e224:	b580      	push	{r7, lr}
 801e226:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801e228:	f000 fea4 	bl	801ef74 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801e22c:	4b07      	ldr	r3, [pc, #28]	@ (801e24c <tcp_tmr+0x28>)
 801e22e:	781b      	ldrb	r3, [r3, #0]
 801e230:	3301      	adds	r3, #1
 801e232:	b2da      	uxtb	r2, r3
 801e234:	4b05      	ldr	r3, [pc, #20]	@ (801e24c <tcp_tmr+0x28>)
 801e236:	701a      	strb	r2, [r3, #0]
 801e238:	4b04      	ldr	r3, [pc, #16]	@ (801e24c <tcp_tmr+0x28>)
 801e23a:	781b      	ldrb	r3, [r3, #0]
 801e23c:	f003 0301 	and.w	r3, r3, #1
 801e240:	2b00      	cmp	r3, #0
 801e242:	d001      	beq.n	801e248 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801e244:	f000 fb54 	bl	801e8f0 <tcp_slowtmr>
  }
}
 801e248:	bf00      	nop
 801e24a:	bd80      	pop	{r7, pc}
 801e24c:	2400b4a1 	.word	0x2400b4a1

0801e250 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b084      	sub	sp, #16
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
 801e258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d105      	bne.n	801e26c <tcp_remove_listener+0x1c>
 801e260:	4b0d      	ldr	r3, [pc, #52]	@ (801e298 <tcp_remove_listener+0x48>)
 801e262:	22ff      	movs	r2, #255	@ 0xff
 801e264:	490d      	ldr	r1, [pc, #52]	@ (801e29c <tcp_remove_listener+0x4c>)
 801e266:	480e      	ldr	r0, [pc, #56]	@ (801e2a0 <tcp_remove_listener+0x50>)
 801e268:	f00b f87e 	bl	8029368 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	60fb      	str	r3, [r7, #12]
 801e270:	e00a      	b.n	801e288 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e276:	683a      	ldr	r2, [r7, #0]
 801e278:	429a      	cmp	r2, r3
 801e27a:	d102      	bne.n	801e282 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	2200      	movs	r2, #0
 801e280:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	68db      	ldr	r3, [r3, #12]
 801e286:	60fb      	str	r3, [r7, #12]
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d1f1      	bne.n	801e272 <tcp_remove_listener+0x22>
    }
  }
}
 801e28e:	bf00      	nop
 801e290:	bf00      	nop
 801e292:	3710      	adds	r7, #16
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}
 801e298:	0802e610 	.word	0x0802e610
 801e29c:	0802e698 	.word	0x0802e698
 801e2a0:	0802e654 	.word	0x0802e654

0801e2a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b084      	sub	sp, #16
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d106      	bne.n	801e2c0 <tcp_listen_closed+0x1c>
 801e2b2:	4b14      	ldr	r3, [pc, #80]	@ (801e304 <tcp_listen_closed+0x60>)
 801e2b4:	f240 1211 	movw	r2, #273	@ 0x111
 801e2b8:	4913      	ldr	r1, [pc, #76]	@ (801e308 <tcp_listen_closed+0x64>)
 801e2ba:	4814      	ldr	r0, [pc, #80]	@ (801e30c <tcp_listen_closed+0x68>)
 801e2bc:	f00b f854 	bl	8029368 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	7d1b      	ldrb	r3, [r3, #20]
 801e2c4:	2b01      	cmp	r3, #1
 801e2c6:	d006      	beq.n	801e2d6 <tcp_listen_closed+0x32>
 801e2c8:	4b0e      	ldr	r3, [pc, #56]	@ (801e304 <tcp_listen_closed+0x60>)
 801e2ca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801e2ce:	4910      	ldr	r1, [pc, #64]	@ (801e310 <tcp_listen_closed+0x6c>)
 801e2d0:	480e      	ldr	r0, [pc, #56]	@ (801e30c <tcp_listen_closed+0x68>)
 801e2d2:	f00b f849 	bl	8029368 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801e2d6:	2301      	movs	r3, #1
 801e2d8:	60fb      	str	r3, [r7, #12]
 801e2da:	e00b      	b.n	801e2f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801e2dc:	4a0d      	ldr	r2, [pc, #52]	@ (801e314 <tcp_listen_closed+0x70>)
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	6879      	ldr	r1, [r7, #4]
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	f7ff ffb1 	bl	801e250 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	3301      	adds	r3, #1
 801e2f2:	60fb      	str	r3, [r7, #12]
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	2b03      	cmp	r3, #3
 801e2f8:	d9f0      	bls.n	801e2dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801e2fa:	bf00      	nop
 801e2fc:	bf00      	nop
 801e2fe:	3710      	adds	r7, #16
 801e300:	46bd      	mov	sp, r7
 801e302:	bd80      	pop	{r7, pc}
 801e304:	0802e610 	.word	0x0802e610
 801e308:	0802e6c0 	.word	0x0802e6c0
 801e30c:	0802e654 	.word	0x0802e654
 801e310:	0802e6cc 	.word	0x0802e6cc
 801e314:	08030eb4 	.word	0x08030eb4

0801e318 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801e318:	b5b0      	push	{r4, r5, r7, lr}
 801e31a:	b088      	sub	sp, #32
 801e31c:	af04      	add	r7, sp, #16
 801e31e:	6078      	str	r0, [r7, #4]
 801e320:	460b      	mov	r3, r1
 801e322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d106      	bne.n	801e338 <tcp_close_shutdown+0x20>
 801e32a:	4b63      	ldr	r3, [pc, #396]	@ (801e4b8 <tcp_close_shutdown+0x1a0>)
 801e32c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801e330:	4962      	ldr	r1, [pc, #392]	@ (801e4bc <tcp_close_shutdown+0x1a4>)
 801e332:	4863      	ldr	r0, [pc, #396]	@ (801e4c0 <tcp_close_shutdown+0x1a8>)
 801e334:	f00b f818 	bl	8029368 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801e338:	78fb      	ldrb	r3, [r7, #3]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d066      	beq.n	801e40c <tcp_close_shutdown+0xf4>
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	7d1b      	ldrb	r3, [r3, #20]
 801e342:	2b04      	cmp	r3, #4
 801e344:	d003      	beq.n	801e34e <tcp_close_shutdown+0x36>
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	7d1b      	ldrb	r3, [r3, #20]
 801e34a:	2b07      	cmp	r3, #7
 801e34c:	d15e      	bne.n	801e40c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e352:	2b00      	cmp	r3, #0
 801e354:	d104      	bne.n	801e360 <tcp_close_shutdown+0x48>
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e35a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801e35e:	d055      	beq.n	801e40c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	8b5b      	ldrh	r3, [r3, #26]
 801e364:	f003 0310 	and.w	r3, r3, #16
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d106      	bne.n	801e37a <tcp_close_shutdown+0x62>
 801e36c:	4b52      	ldr	r3, [pc, #328]	@ (801e4b8 <tcp_close_shutdown+0x1a0>)
 801e36e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801e372:	4954      	ldr	r1, [pc, #336]	@ (801e4c4 <tcp_close_shutdown+0x1ac>)
 801e374:	4852      	ldr	r0, [pc, #328]	@ (801e4c0 <tcp_close_shutdown+0x1a8>)
 801e376:	f00a fff7 	bl	8029368 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801e382:	687d      	ldr	r5, [r7, #4]
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	3304      	adds	r3, #4
 801e388:	687a      	ldr	r2, [r7, #4]
 801e38a:	8ad2      	ldrh	r2, [r2, #22]
 801e38c:	6879      	ldr	r1, [r7, #4]
 801e38e:	8b09      	ldrh	r1, [r1, #24]
 801e390:	9102      	str	r1, [sp, #8]
 801e392:	9201      	str	r2, [sp, #4]
 801e394:	9300      	str	r3, [sp, #0]
 801e396:	462b      	mov	r3, r5
 801e398:	4622      	mov	r2, r4
 801e39a:	4601      	mov	r1, r0
 801e39c:	6878      	ldr	r0, [r7, #4]
 801e39e:	f004 fe8d 	bl	80230bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801e3a2:	6878      	ldr	r0, [r7, #4]
 801e3a4:	f001 f8c8 	bl	801f538 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801e3a8:	4b47      	ldr	r3, [pc, #284]	@ (801e4c8 <tcp_close_shutdown+0x1b0>)
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	687a      	ldr	r2, [r7, #4]
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d105      	bne.n	801e3be <tcp_close_shutdown+0xa6>
 801e3b2:	4b45      	ldr	r3, [pc, #276]	@ (801e4c8 <tcp_close_shutdown+0x1b0>)
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	68db      	ldr	r3, [r3, #12]
 801e3b8:	4a43      	ldr	r2, [pc, #268]	@ (801e4c8 <tcp_close_shutdown+0x1b0>)
 801e3ba:	6013      	str	r3, [r2, #0]
 801e3bc:	e013      	b.n	801e3e6 <tcp_close_shutdown+0xce>
 801e3be:	4b42      	ldr	r3, [pc, #264]	@ (801e4c8 <tcp_close_shutdown+0x1b0>)
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	60fb      	str	r3, [r7, #12]
 801e3c4:	e00c      	b.n	801e3e0 <tcp_close_shutdown+0xc8>
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	68db      	ldr	r3, [r3, #12]
 801e3ca:	687a      	ldr	r2, [r7, #4]
 801e3cc:	429a      	cmp	r2, r3
 801e3ce:	d104      	bne.n	801e3da <tcp_close_shutdown+0xc2>
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	68da      	ldr	r2, [r3, #12]
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	60da      	str	r2, [r3, #12]
 801e3d8:	e005      	b.n	801e3e6 <tcp_close_shutdown+0xce>
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	68db      	ldr	r3, [r3, #12]
 801e3de:	60fb      	str	r3, [r7, #12]
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d1ef      	bne.n	801e3c6 <tcp_close_shutdown+0xae>
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	2200      	movs	r2, #0
 801e3ea:	60da      	str	r2, [r3, #12]
 801e3ec:	4b37      	ldr	r3, [pc, #220]	@ (801e4cc <tcp_close_shutdown+0x1b4>)
 801e3ee:	2201      	movs	r2, #1
 801e3f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801e3f2:	4b37      	ldr	r3, [pc, #220]	@ (801e4d0 <tcp_close_shutdown+0x1b8>)
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	687a      	ldr	r2, [r7, #4]
 801e3f8:	429a      	cmp	r2, r3
 801e3fa:	d102      	bne.n	801e402 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801e3fc:	f003 fd5c 	bl	8021eb8 <tcp_trigger_input_pcb_close>
 801e400:	e002      	b.n	801e408 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801e402:	6878      	ldr	r0, [r7, #4]
 801e404:	f7ff fed6 	bl	801e1b4 <tcp_free>
      }
      return ERR_OK;
 801e408:	2300      	movs	r3, #0
 801e40a:	e050      	b.n	801e4ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	7d1b      	ldrb	r3, [r3, #20]
 801e410:	2b02      	cmp	r3, #2
 801e412:	d03b      	beq.n	801e48c <tcp_close_shutdown+0x174>
 801e414:	2b02      	cmp	r3, #2
 801e416:	dc44      	bgt.n	801e4a2 <tcp_close_shutdown+0x18a>
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d002      	beq.n	801e422 <tcp_close_shutdown+0x10a>
 801e41c:	2b01      	cmp	r3, #1
 801e41e:	d02a      	beq.n	801e476 <tcp_close_shutdown+0x15e>
 801e420:	e03f      	b.n	801e4a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	8adb      	ldrh	r3, [r3, #22]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d021      	beq.n	801e46e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801e42a:	4b2a      	ldr	r3, [pc, #168]	@ (801e4d4 <tcp_close_shutdown+0x1bc>)
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	687a      	ldr	r2, [r7, #4]
 801e430:	429a      	cmp	r2, r3
 801e432:	d105      	bne.n	801e440 <tcp_close_shutdown+0x128>
 801e434:	4b27      	ldr	r3, [pc, #156]	@ (801e4d4 <tcp_close_shutdown+0x1bc>)
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	68db      	ldr	r3, [r3, #12]
 801e43a:	4a26      	ldr	r2, [pc, #152]	@ (801e4d4 <tcp_close_shutdown+0x1bc>)
 801e43c:	6013      	str	r3, [r2, #0]
 801e43e:	e013      	b.n	801e468 <tcp_close_shutdown+0x150>
 801e440:	4b24      	ldr	r3, [pc, #144]	@ (801e4d4 <tcp_close_shutdown+0x1bc>)
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	60bb      	str	r3, [r7, #8]
 801e446:	e00c      	b.n	801e462 <tcp_close_shutdown+0x14a>
 801e448:	68bb      	ldr	r3, [r7, #8]
 801e44a:	68db      	ldr	r3, [r3, #12]
 801e44c:	687a      	ldr	r2, [r7, #4]
 801e44e:	429a      	cmp	r2, r3
 801e450:	d104      	bne.n	801e45c <tcp_close_shutdown+0x144>
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	68da      	ldr	r2, [r3, #12]
 801e456:	68bb      	ldr	r3, [r7, #8]
 801e458:	60da      	str	r2, [r3, #12]
 801e45a:	e005      	b.n	801e468 <tcp_close_shutdown+0x150>
 801e45c:	68bb      	ldr	r3, [r7, #8]
 801e45e:	68db      	ldr	r3, [r3, #12]
 801e460:	60bb      	str	r3, [r7, #8]
 801e462:	68bb      	ldr	r3, [r7, #8]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d1ef      	bne.n	801e448 <tcp_close_shutdown+0x130>
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	2200      	movs	r2, #0
 801e46c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801e46e:	6878      	ldr	r0, [r7, #4]
 801e470:	f7ff fea0 	bl	801e1b4 <tcp_free>
      break;
 801e474:	e01a      	b.n	801e4ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801e476:	6878      	ldr	r0, [r7, #4]
 801e478:	f7ff ff14 	bl	801e2a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801e47c:	6879      	ldr	r1, [r7, #4]
 801e47e:	4816      	ldr	r0, [pc, #88]	@ (801e4d8 <tcp_close_shutdown+0x1c0>)
 801e480:	f001 f8aa 	bl	801f5d8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801e484:	6878      	ldr	r0, [r7, #4]
 801e486:	f7ff feb1 	bl	801e1ec <tcp_free_listen>
      break;
 801e48a:	e00f      	b.n	801e4ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801e48c:	6879      	ldr	r1, [r7, #4]
 801e48e:	480e      	ldr	r0, [pc, #56]	@ (801e4c8 <tcp_close_shutdown+0x1b0>)
 801e490:	f001 f8a2 	bl	801f5d8 <tcp_pcb_remove>
 801e494:	4b0d      	ldr	r3, [pc, #52]	@ (801e4cc <tcp_close_shutdown+0x1b4>)
 801e496:	2201      	movs	r2, #1
 801e498:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801e49a:	6878      	ldr	r0, [r7, #4]
 801e49c:	f7ff fe8a 	bl	801e1b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801e4a0:	e004      	b.n	801e4ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801e4a2:	6878      	ldr	r0, [r7, #4]
 801e4a4:	f000 f81a 	bl	801e4dc <tcp_close_shutdown_fin>
 801e4a8:	4603      	mov	r3, r0
 801e4aa:	e000      	b.n	801e4ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801e4ac:	2300      	movs	r3, #0
}
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	3710      	adds	r7, #16
 801e4b2:	46bd      	mov	sp, r7
 801e4b4:	bdb0      	pop	{r4, r5, r7, pc}
 801e4b6:	bf00      	nop
 801e4b8:	0802e610 	.word	0x0802e610
 801e4bc:	0802e6e4 	.word	0x0802e6e4
 801e4c0:	0802e654 	.word	0x0802e654
 801e4c4:	0802e704 	.word	0x0802e704
 801e4c8:	2400b498 	.word	0x2400b498
 801e4cc:	2400b4a0 	.word	0x2400b4a0
 801e4d0:	2400b4d8 	.word	0x2400b4d8
 801e4d4:	2400b490 	.word	0x2400b490
 801e4d8:	2400b494 	.word	0x2400b494

0801e4dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801e4dc:	b580      	push	{r7, lr}
 801e4de:	b084      	sub	sp, #16
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d106      	bne.n	801e4f8 <tcp_close_shutdown_fin+0x1c>
 801e4ea:	4b2e      	ldr	r3, [pc, #184]	@ (801e5a4 <tcp_close_shutdown_fin+0xc8>)
 801e4ec:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801e4f0:	492d      	ldr	r1, [pc, #180]	@ (801e5a8 <tcp_close_shutdown_fin+0xcc>)
 801e4f2:	482e      	ldr	r0, [pc, #184]	@ (801e5ac <tcp_close_shutdown_fin+0xd0>)
 801e4f4:	f00a ff38 	bl	8029368 <iprintf>

  switch (pcb->state) {
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	7d1b      	ldrb	r3, [r3, #20]
 801e4fc:	2b07      	cmp	r3, #7
 801e4fe:	d020      	beq.n	801e542 <tcp_close_shutdown_fin+0x66>
 801e500:	2b07      	cmp	r3, #7
 801e502:	dc2b      	bgt.n	801e55c <tcp_close_shutdown_fin+0x80>
 801e504:	2b03      	cmp	r3, #3
 801e506:	d002      	beq.n	801e50e <tcp_close_shutdown_fin+0x32>
 801e508:	2b04      	cmp	r3, #4
 801e50a:	d00d      	beq.n	801e528 <tcp_close_shutdown_fin+0x4c>
 801e50c:	e026      	b.n	801e55c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	f003 fee2 	bl	80222d8 <tcp_send_fin>
 801e514:	4603      	mov	r3, r0
 801e516:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801e518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d11f      	bne.n	801e560 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	2205      	movs	r2, #5
 801e524:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e526:	e01b      	b.n	801e560 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801e528:	6878      	ldr	r0, [r7, #4]
 801e52a:	f003 fed5 	bl	80222d8 <tcp_send_fin>
 801e52e:	4603      	mov	r3, r0
 801e530:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801e532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d114      	bne.n	801e564 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	2205      	movs	r2, #5
 801e53e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e540:	e010      	b.n	801e564 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801e542:	6878      	ldr	r0, [r7, #4]
 801e544:	f003 fec8 	bl	80222d8 <tcp_send_fin>
 801e548:	4603      	mov	r3, r0
 801e54a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801e54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e550:	2b00      	cmp	r3, #0
 801e552:	d109      	bne.n	801e568 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	2209      	movs	r2, #9
 801e558:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e55a:	e005      	b.n	801e568 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801e55c:	2300      	movs	r3, #0
 801e55e:	e01c      	b.n	801e59a <tcp_close_shutdown_fin+0xbe>
      break;
 801e560:	bf00      	nop
 801e562:	e002      	b.n	801e56a <tcp_close_shutdown_fin+0x8e>
      break;
 801e564:	bf00      	nop
 801e566:	e000      	b.n	801e56a <tcp_close_shutdown_fin+0x8e>
      break;
 801e568:	bf00      	nop
  }

  if (err == ERR_OK) {
 801e56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d103      	bne.n	801e57a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801e572:	6878      	ldr	r0, [r7, #4]
 801e574:	f003 ffee 	bl	8022554 <tcp_output>
 801e578:	e00d      	b.n	801e596 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801e57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e582:	d108      	bne.n	801e596 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	8b5b      	ldrh	r3, [r3, #26]
 801e588:	f043 0308 	orr.w	r3, r3, #8
 801e58c:	b29a      	uxth	r2, r3
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801e592:	2300      	movs	r3, #0
 801e594:	e001      	b.n	801e59a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801e596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e59a:	4618      	mov	r0, r3
 801e59c:	3710      	adds	r7, #16
 801e59e:	46bd      	mov	sp, r7
 801e5a0:	bd80      	pop	{r7, pc}
 801e5a2:	bf00      	nop
 801e5a4:	0802e610 	.word	0x0802e610
 801e5a8:	0802e6c0 	.word	0x0802e6c0
 801e5ac:	0802e654 	.word	0x0802e654

0801e5b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801e5b0:	b580      	push	{r7, lr}
 801e5b2:	b082      	sub	sp, #8
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d109      	bne.n	801e5d2 <tcp_close+0x22>
 801e5be:	4b0f      	ldr	r3, [pc, #60]	@ (801e5fc <tcp_close+0x4c>)
 801e5c0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801e5c4:	490e      	ldr	r1, [pc, #56]	@ (801e600 <tcp_close+0x50>)
 801e5c6:	480f      	ldr	r0, [pc, #60]	@ (801e604 <tcp_close+0x54>)
 801e5c8:	f00a fece 	bl	8029368 <iprintf>
 801e5cc:	f06f 030f 	mvn.w	r3, #15
 801e5d0:	e00f      	b.n	801e5f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	7d1b      	ldrb	r3, [r3, #20]
 801e5d6:	2b01      	cmp	r3, #1
 801e5d8:	d006      	beq.n	801e5e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	8b5b      	ldrh	r3, [r3, #26]
 801e5de:	f043 0310 	orr.w	r3, r3, #16
 801e5e2:	b29a      	uxth	r2, r3
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801e5e8:	2101      	movs	r1, #1
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f7ff fe94 	bl	801e318 <tcp_close_shutdown>
 801e5f0:	4603      	mov	r3, r0
}
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	3708      	adds	r7, #8
 801e5f6:	46bd      	mov	sp, r7
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	bf00      	nop
 801e5fc:	0802e610 	.word	0x0802e610
 801e600:	0802e720 	.word	0x0802e720
 801e604:	0802e654 	.word	0x0802e654

0801e608 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b08e      	sub	sp, #56	@ 0x38
 801e60c:	af04      	add	r7, sp, #16
 801e60e:	6078      	str	r0, [r7, #4]
 801e610:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d107      	bne.n	801e628 <tcp_abandon+0x20>
 801e618:	4b52      	ldr	r3, [pc, #328]	@ (801e764 <tcp_abandon+0x15c>)
 801e61a:	f240 223d 	movw	r2, #573	@ 0x23d
 801e61e:	4952      	ldr	r1, [pc, #328]	@ (801e768 <tcp_abandon+0x160>)
 801e620:	4852      	ldr	r0, [pc, #328]	@ (801e76c <tcp_abandon+0x164>)
 801e622:	f00a fea1 	bl	8029368 <iprintf>
 801e626:	e099      	b.n	801e75c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	7d1b      	ldrb	r3, [r3, #20]
 801e62c:	2b01      	cmp	r3, #1
 801e62e:	d106      	bne.n	801e63e <tcp_abandon+0x36>
 801e630:	4b4c      	ldr	r3, [pc, #304]	@ (801e764 <tcp_abandon+0x15c>)
 801e632:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801e636:	494e      	ldr	r1, [pc, #312]	@ (801e770 <tcp_abandon+0x168>)
 801e638:	484c      	ldr	r0, [pc, #304]	@ (801e76c <tcp_abandon+0x164>)
 801e63a:	f00a fe95 	bl	8029368 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	7d1b      	ldrb	r3, [r3, #20]
 801e642:	2b0a      	cmp	r3, #10
 801e644:	d107      	bne.n	801e656 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801e646:	6879      	ldr	r1, [r7, #4]
 801e648:	484a      	ldr	r0, [pc, #296]	@ (801e774 <tcp_abandon+0x16c>)
 801e64a:	f000 ffc5 	bl	801f5d8 <tcp_pcb_remove>
    tcp_free(pcb);
 801e64e:	6878      	ldr	r0, [r7, #4]
 801e650:	f7ff fdb0 	bl	801e1b4 <tcp_free>
 801e654:	e082      	b.n	801e75c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801e656:	2300      	movs	r3, #0
 801e658:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801e65a:	2300      	movs	r3, #0
 801e65c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e662:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e668:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e670:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	691b      	ldr	r3, [r3, #16]
 801e676:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	7d1b      	ldrb	r3, [r3, #20]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d126      	bne.n	801e6ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	8adb      	ldrh	r3, [r3, #22]
 801e684:	2b00      	cmp	r3, #0
 801e686:	d02e      	beq.n	801e6e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801e688:	4b3b      	ldr	r3, [pc, #236]	@ (801e778 <tcp_abandon+0x170>)
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	687a      	ldr	r2, [r7, #4]
 801e68e:	429a      	cmp	r2, r3
 801e690:	d105      	bne.n	801e69e <tcp_abandon+0x96>
 801e692:	4b39      	ldr	r3, [pc, #228]	@ (801e778 <tcp_abandon+0x170>)
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	68db      	ldr	r3, [r3, #12]
 801e698:	4a37      	ldr	r2, [pc, #220]	@ (801e778 <tcp_abandon+0x170>)
 801e69a:	6013      	str	r3, [r2, #0]
 801e69c:	e013      	b.n	801e6c6 <tcp_abandon+0xbe>
 801e69e:	4b36      	ldr	r3, [pc, #216]	@ (801e778 <tcp_abandon+0x170>)
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	61fb      	str	r3, [r7, #28]
 801e6a4:	e00c      	b.n	801e6c0 <tcp_abandon+0xb8>
 801e6a6:	69fb      	ldr	r3, [r7, #28]
 801e6a8:	68db      	ldr	r3, [r3, #12]
 801e6aa:	687a      	ldr	r2, [r7, #4]
 801e6ac:	429a      	cmp	r2, r3
 801e6ae:	d104      	bne.n	801e6ba <tcp_abandon+0xb2>
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	68da      	ldr	r2, [r3, #12]
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	60da      	str	r2, [r3, #12]
 801e6b8:	e005      	b.n	801e6c6 <tcp_abandon+0xbe>
 801e6ba:	69fb      	ldr	r3, [r7, #28]
 801e6bc:	68db      	ldr	r3, [r3, #12]
 801e6be:	61fb      	str	r3, [r7, #28]
 801e6c0:	69fb      	ldr	r3, [r7, #28]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d1ef      	bne.n	801e6a6 <tcp_abandon+0x9e>
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	60da      	str	r2, [r3, #12]
 801e6cc:	e00b      	b.n	801e6e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801e6ce:	683b      	ldr	r3, [r7, #0]
 801e6d0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	8adb      	ldrh	r3, [r3, #22]
 801e6d6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801e6d8:	6879      	ldr	r1, [r7, #4]
 801e6da:	4828      	ldr	r0, [pc, #160]	@ (801e77c <tcp_abandon+0x174>)
 801e6dc:	f000 ff7c 	bl	801f5d8 <tcp_pcb_remove>
 801e6e0:	4b27      	ldr	r3, [pc, #156]	@ (801e780 <tcp_abandon+0x178>)
 801e6e2:	2201      	movs	r2, #1
 801e6e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d004      	beq.n	801e6f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	f000 fd1e 	bl	801f134 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d004      	beq.n	801e70a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e704:	4618      	mov	r0, r3
 801e706:	f000 fd15 	bl	801f134 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d004      	beq.n	801e71c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e716:	4618      	mov	r0, r3
 801e718:	f000 fd0c 	bl	801f134 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801e71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d00e      	beq.n	801e740 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801e722:	6879      	ldr	r1, [r7, #4]
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	3304      	adds	r3, #4
 801e728:	687a      	ldr	r2, [r7, #4]
 801e72a:	8b12      	ldrh	r2, [r2, #24]
 801e72c:	9202      	str	r2, [sp, #8]
 801e72e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e730:	9201      	str	r2, [sp, #4]
 801e732:	9300      	str	r3, [sp, #0]
 801e734:	460b      	mov	r3, r1
 801e736:	697a      	ldr	r2, [r7, #20]
 801e738:	69b9      	ldr	r1, [r7, #24]
 801e73a:	6878      	ldr	r0, [r7, #4]
 801e73c:	f004 fcbe 	bl	80230bc <tcp_rst>
    }
    last_state = pcb->state;
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	7d1b      	ldrb	r3, [r3, #20]
 801e744:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801e746:	6878      	ldr	r0, [r7, #4]
 801e748:	f7ff fd34 	bl	801e1b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801e74c:	693b      	ldr	r3, [r7, #16]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d004      	beq.n	801e75c <tcp_abandon+0x154>
 801e752:	693b      	ldr	r3, [r7, #16]
 801e754:	f06f 010c 	mvn.w	r1, #12
 801e758:	68f8      	ldr	r0, [r7, #12]
 801e75a:	4798      	blx	r3
  }
}
 801e75c:	3728      	adds	r7, #40	@ 0x28
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd80      	pop	{r7, pc}
 801e762:	bf00      	nop
 801e764:	0802e610 	.word	0x0802e610
 801e768:	0802e754 	.word	0x0802e754
 801e76c:	0802e654 	.word	0x0802e654
 801e770:	0802e770 	.word	0x0802e770
 801e774:	2400b49c 	.word	0x2400b49c
 801e778:	2400b490 	.word	0x2400b490
 801e77c:	2400b498 	.word	0x2400b498
 801e780:	2400b4a0 	.word	0x2400b4a0

0801e784 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b082      	sub	sp, #8
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801e78c:	2101      	movs	r1, #1
 801e78e:	6878      	ldr	r0, [r7, #4]
 801e790:	f7ff ff3a 	bl	801e608 <tcp_abandon>
}
 801e794:	bf00      	nop
 801e796:	3708      	adds	r7, #8
 801e798:	46bd      	mov	sp, r7
 801e79a:	bd80      	pop	{r7, pc}

0801e79c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b084      	sub	sp, #16
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d106      	bne.n	801e7b8 <tcp_update_rcv_ann_wnd+0x1c>
 801e7aa:	4b25      	ldr	r3, [pc, #148]	@ (801e840 <tcp_update_rcv_ann_wnd+0xa4>)
 801e7ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801e7b0:	4924      	ldr	r1, [pc, #144]	@ (801e844 <tcp_update_rcv_ann_wnd+0xa8>)
 801e7b2:	4825      	ldr	r0, [pc, #148]	@ (801e848 <tcp_update_rcv_ann_wnd+0xac>)
 801e7b4:	f00a fdd8 	bl	8029368 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7bc:	687a      	ldr	r2, [r7, #4]
 801e7be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801e7c0:	4413      	add	r3, r2
 801e7c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7c8:	687a      	ldr	r2, [r7, #4]
 801e7ca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801e7cc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801e7d0:	bf28      	it	cs
 801e7d2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801e7d6:	b292      	uxth	r2, r2
 801e7d8:	4413      	add	r3, r2
 801e7da:	68fa      	ldr	r2, [r7, #12]
 801e7dc:	1ad3      	subs	r3, r2, r3
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	db08      	blt.n	801e7f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7ee:	68fa      	ldr	r2, [r7, #12]
 801e7f0:	1ad3      	subs	r3, r2, r3
 801e7f2:	e020      	b.n	801e836 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7fc:	1ad3      	subs	r3, r2, r3
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	dd03      	ble.n	801e80a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	2200      	movs	r2, #0
 801e806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801e808:	e014      	b.n	801e834 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e812:	1ad3      	subs	r3, r2, r3
 801e814:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801e816:	68bb      	ldr	r3, [r7, #8]
 801e818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e81c:	d306      	bcc.n	801e82c <tcp_update_rcv_ann_wnd+0x90>
 801e81e:	4b08      	ldr	r3, [pc, #32]	@ (801e840 <tcp_update_rcv_ann_wnd+0xa4>)
 801e820:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801e824:	4909      	ldr	r1, [pc, #36]	@ (801e84c <tcp_update_rcv_ann_wnd+0xb0>)
 801e826:	4808      	ldr	r0, [pc, #32]	@ (801e848 <tcp_update_rcv_ann_wnd+0xac>)
 801e828:	f00a fd9e 	bl	8029368 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801e82c:	68bb      	ldr	r3, [r7, #8]
 801e82e:	b29a      	uxth	r2, r3
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801e834:	2300      	movs	r3, #0
  }
}
 801e836:	4618      	mov	r0, r3
 801e838:	3710      	adds	r7, #16
 801e83a:	46bd      	mov	sp, r7
 801e83c:	bd80      	pop	{r7, pc}
 801e83e:	bf00      	nop
 801e840:	0802e610 	.word	0x0802e610
 801e844:	0802e86c 	.word	0x0802e86c
 801e848:	0802e654 	.word	0x0802e654
 801e84c:	0802e890 	.word	0x0802e890

0801e850 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801e850:	b580      	push	{r7, lr}
 801e852:	b084      	sub	sp, #16
 801e854:	af00      	add	r7, sp, #0
 801e856:	6078      	str	r0, [r7, #4]
 801e858:	460b      	mov	r3, r1
 801e85a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d107      	bne.n	801e872 <tcp_recved+0x22>
 801e862:	4b1f      	ldr	r3, [pc, #124]	@ (801e8e0 <tcp_recved+0x90>)
 801e864:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801e868:	491e      	ldr	r1, [pc, #120]	@ (801e8e4 <tcp_recved+0x94>)
 801e86a:	481f      	ldr	r0, [pc, #124]	@ (801e8e8 <tcp_recved+0x98>)
 801e86c:	f00a fd7c 	bl	8029368 <iprintf>
 801e870:	e032      	b.n	801e8d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	7d1b      	ldrb	r3, [r3, #20]
 801e876:	2b01      	cmp	r3, #1
 801e878:	d106      	bne.n	801e888 <tcp_recved+0x38>
 801e87a:	4b19      	ldr	r3, [pc, #100]	@ (801e8e0 <tcp_recved+0x90>)
 801e87c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801e880:	491a      	ldr	r1, [pc, #104]	@ (801e8ec <tcp_recved+0x9c>)
 801e882:	4819      	ldr	r0, [pc, #100]	@ (801e8e8 <tcp_recved+0x98>)
 801e884:	f00a fd70 	bl	8029368 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e88c:	887b      	ldrh	r3, [r7, #2]
 801e88e:	4413      	add	r3, r2
 801e890:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801e892:	89fb      	ldrh	r3, [r7, #14]
 801e894:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801e898:	d804      	bhi.n	801e8a4 <tcp_recved+0x54>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e89e:	89fa      	ldrh	r2, [r7, #14]
 801e8a0:	429a      	cmp	r2, r3
 801e8a2:	d204      	bcs.n	801e8ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801e8aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 801e8ac:	e002      	b.n	801e8b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	89fa      	ldrh	r2, [r7, #14]
 801e8b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801e8b4:	6878      	ldr	r0, [r7, #4]
 801e8b6:	f7ff ff71 	bl	801e79c <tcp_update_rcv_ann_wnd>
 801e8ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801e8bc:	68bb      	ldr	r3, [r7, #8]
 801e8be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801e8c2:	d309      	bcc.n	801e8d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	8b5b      	ldrh	r3, [r3, #26]
 801e8c8:	f043 0302 	orr.w	r3, r3, #2
 801e8cc:	b29a      	uxth	r2, r3
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e8d2:	6878      	ldr	r0, [r7, #4]
 801e8d4:	f003 fe3e 	bl	8022554 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801e8d8:	3710      	adds	r7, #16
 801e8da:	46bd      	mov	sp, r7
 801e8dc:	bd80      	pop	{r7, pc}
 801e8de:	bf00      	nop
 801e8e0:	0802e610 	.word	0x0802e610
 801e8e4:	0802e8ac 	.word	0x0802e8ac
 801e8e8:	0802e654 	.word	0x0802e654
 801e8ec:	0802e8c4 	.word	0x0802e8c4

0801e8f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801e8f0:	b5b0      	push	{r4, r5, r7, lr}
 801e8f2:	b090      	sub	sp, #64	@ 0x40
 801e8f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801e8fc:	4b95      	ldr	r3, [pc, #596]	@ (801eb54 <tcp_slowtmr+0x264>)
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	3301      	adds	r3, #1
 801e902:	4a94      	ldr	r2, [pc, #592]	@ (801eb54 <tcp_slowtmr+0x264>)
 801e904:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801e906:	4b94      	ldr	r3, [pc, #592]	@ (801eb58 <tcp_slowtmr+0x268>)
 801e908:	781b      	ldrb	r3, [r3, #0]
 801e90a:	3301      	adds	r3, #1
 801e90c:	b2da      	uxtb	r2, r3
 801e90e:	4b92      	ldr	r3, [pc, #584]	@ (801eb58 <tcp_slowtmr+0x268>)
 801e910:	701a      	strb	r2, [r3, #0]
 801e912:	e000      	b.n	801e916 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801e914:	bf00      	nop
  prev = NULL;
 801e916:	2300      	movs	r3, #0
 801e918:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801e91a:	4b90      	ldr	r3, [pc, #576]	@ (801eb5c <tcp_slowtmr+0x26c>)
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801e920:	e29d      	b.n	801ee5e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e924:	7d1b      	ldrb	r3, [r3, #20]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d106      	bne.n	801e938 <tcp_slowtmr+0x48>
 801e92a:	4b8d      	ldr	r3, [pc, #564]	@ (801eb60 <tcp_slowtmr+0x270>)
 801e92c:	f240 42be 	movw	r2, #1214	@ 0x4be
 801e930:	498c      	ldr	r1, [pc, #560]	@ (801eb64 <tcp_slowtmr+0x274>)
 801e932:	488d      	ldr	r0, [pc, #564]	@ (801eb68 <tcp_slowtmr+0x278>)
 801e934:	f00a fd18 	bl	8029368 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e93a:	7d1b      	ldrb	r3, [r3, #20]
 801e93c:	2b01      	cmp	r3, #1
 801e93e:	d106      	bne.n	801e94e <tcp_slowtmr+0x5e>
 801e940:	4b87      	ldr	r3, [pc, #540]	@ (801eb60 <tcp_slowtmr+0x270>)
 801e942:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801e946:	4989      	ldr	r1, [pc, #548]	@ (801eb6c <tcp_slowtmr+0x27c>)
 801e948:	4887      	ldr	r0, [pc, #540]	@ (801eb68 <tcp_slowtmr+0x278>)
 801e94a:	f00a fd0d 	bl	8029368 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801e94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e950:	7d1b      	ldrb	r3, [r3, #20]
 801e952:	2b0a      	cmp	r3, #10
 801e954:	d106      	bne.n	801e964 <tcp_slowtmr+0x74>
 801e956:	4b82      	ldr	r3, [pc, #520]	@ (801eb60 <tcp_slowtmr+0x270>)
 801e958:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801e95c:	4984      	ldr	r1, [pc, #528]	@ (801eb70 <tcp_slowtmr+0x280>)
 801e95e:	4882      	ldr	r0, [pc, #520]	@ (801eb68 <tcp_slowtmr+0x278>)
 801e960:	f00a fd02 	bl	8029368 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e966:	7f9a      	ldrb	r2, [r3, #30]
 801e968:	4b7b      	ldr	r3, [pc, #492]	@ (801eb58 <tcp_slowtmr+0x268>)
 801e96a:	781b      	ldrb	r3, [r3, #0]
 801e96c:	429a      	cmp	r2, r3
 801e96e:	d105      	bne.n	801e97c <tcp_slowtmr+0x8c>
      prev = pcb;
 801e970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e972:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801e974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e976:	68db      	ldr	r3, [r3, #12]
 801e978:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801e97a:	e270      	b.n	801ee5e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801e97c:	4b76      	ldr	r3, [pc, #472]	@ (801eb58 <tcp_slowtmr+0x268>)
 801e97e:	781a      	ldrb	r2, [r3, #0]
 801e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e982:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801e984:	2300      	movs	r3, #0
 801e986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801e98a:	2300      	movs	r3, #0
 801e98c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801e990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e992:	7d1b      	ldrb	r3, [r3, #20]
 801e994:	2b02      	cmp	r3, #2
 801e996:	d10a      	bne.n	801e9ae <tcp_slowtmr+0xbe>
 801e998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e99a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801e99e:	2b05      	cmp	r3, #5
 801e9a0:	d905      	bls.n	801e9ae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801e9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e9a6:	3301      	adds	r3, #1
 801e9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e9ac:	e11e      	b.n	801ebec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801e9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801e9b4:	2b0b      	cmp	r3, #11
 801e9b6:	d905      	bls.n	801e9c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801e9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e9bc:	3301      	adds	r3, #1
 801e9be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e9c2:	e113      	b.n	801ebec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801e9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d075      	beq.n	801eaba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801e9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d006      	beq.n	801e9e4 <tcp_slowtmr+0xf4>
 801e9d6:	4b62      	ldr	r3, [pc, #392]	@ (801eb60 <tcp_slowtmr+0x270>)
 801e9d8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801e9dc:	4965      	ldr	r1, [pc, #404]	@ (801eb74 <tcp_slowtmr+0x284>)
 801e9de:	4862      	ldr	r0, [pc, #392]	@ (801eb68 <tcp_slowtmr+0x278>)
 801e9e0:	f00a fcc2 	bl	8029368 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801e9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d106      	bne.n	801e9fa <tcp_slowtmr+0x10a>
 801e9ec:	4b5c      	ldr	r3, [pc, #368]	@ (801eb60 <tcp_slowtmr+0x270>)
 801e9ee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801e9f2:	4961      	ldr	r1, [pc, #388]	@ (801eb78 <tcp_slowtmr+0x288>)
 801e9f4:	485c      	ldr	r0, [pc, #368]	@ (801eb68 <tcp_slowtmr+0x278>)
 801e9f6:	f00a fcb7 	bl	8029368 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801e9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801ea00:	2b0b      	cmp	r3, #11
 801ea02:	d905      	bls.n	801ea10 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801ea04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ea08:	3301      	adds	r3, #1
 801ea0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ea0e:	e0ed      	b.n	801ebec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801ea10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801ea16:	3b01      	subs	r3, #1
 801ea18:	4a58      	ldr	r2, [pc, #352]	@ (801eb7c <tcp_slowtmr+0x28c>)
 801ea1a:	5cd3      	ldrb	r3, [r2, r3]
 801ea1c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801ea1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea20:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ea24:	7c7a      	ldrb	r2, [r7, #17]
 801ea26:	429a      	cmp	r2, r3
 801ea28:	d907      	bls.n	801ea3a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801ea2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea2c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ea30:	3301      	adds	r3, #1
 801ea32:	b2da      	uxtb	r2, r3
 801ea34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea36:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801ea3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ea40:	7c7a      	ldrb	r2, [r7, #17]
 801ea42:	429a      	cmp	r2, r3
 801ea44:	f200 80d2 	bhi.w	801ebec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801ea48:	2301      	movs	r3, #1
 801ea4a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801ea4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d108      	bne.n	801ea68 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801ea56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ea58:	f004 fc24 	bl	80232a4 <tcp_zero_window_probe>
 801ea5c:	4603      	mov	r3, r0
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d014      	beq.n	801ea8c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801ea62:	2300      	movs	r3, #0
 801ea64:	623b      	str	r3, [r7, #32]
 801ea66:	e011      	b.n	801ea8c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801ea68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ea6e:	4619      	mov	r1, r3
 801ea70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ea72:	f003 fae9 	bl	8022048 <tcp_split_unsent_seg>
 801ea76:	4603      	mov	r3, r0
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d107      	bne.n	801ea8c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801ea7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ea7e:	f003 fd69 	bl	8022554 <tcp_output>
 801ea82:	4603      	mov	r3, r0
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d101      	bne.n	801ea8c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801ea88:	2300      	movs	r3, #0
 801ea8a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801ea8c:	6a3b      	ldr	r3, [r7, #32]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	f000 80ac 	beq.w	801ebec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801ea94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea96:	2200      	movs	r2, #0
 801ea98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801ea9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801eaa2:	2b06      	cmp	r3, #6
 801eaa4:	f200 80a2 	bhi.w	801ebec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801eaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eaaa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801eaae:	3301      	adds	r3, #1
 801eab0:	b2da      	uxtb	r2, r3
 801eab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eab4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801eab8:	e098      	b.n	801ebec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801eaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eabc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	db0f      	blt.n	801eae4 <tcp_slowtmr+0x1f4>
 801eac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eac6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801eaca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801eace:	4293      	cmp	r3, r2
 801ead0:	d008      	beq.n	801eae4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801ead2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ead4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801ead8:	b29b      	uxth	r3, r3
 801eada:	3301      	adds	r3, #1
 801eadc:	b29b      	uxth	r3, r3
 801eade:	b21a      	sxth	r2, r3
 801eae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eae2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801eae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eae6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801eaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eaec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801eaf0:	429a      	cmp	r2, r3
 801eaf2:	db7b      	blt.n	801ebec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801eaf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801eaf6:	f004 f821 	bl	8022b3c <tcp_rexmit_rto_prepare>
 801eafa:	4603      	mov	r3, r0
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d007      	beq.n	801eb10 <tcp_slowtmr+0x220>
 801eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d171      	bne.n	801ebec <tcp_slowtmr+0x2fc>
 801eb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d06d      	beq.n	801ebec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801eb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb12:	7d1b      	ldrb	r3, [r3, #20]
 801eb14:	2b02      	cmp	r3, #2
 801eb16:	d03a      	beq.n	801eb8e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801eb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801eb1e:	2b0c      	cmp	r3, #12
 801eb20:	bf28      	it	cs
 801eb22:	230c      	movcs	r3, #12
 801eb24:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801eb2c:	10db      	asrs	r3, r3, #3
 801eb2e:	b21b      	sxth	r3, r3
 801eb30:	461a      	mov	r2, r3
 801eb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801eb38:	4413      	add	r3, r2
 801eb3a:	7efa      	ldrb	r2, [r7, #27]
 801eb3c:	4910      	ldr	r1, [pc, #64]	@ (801eb80 <tcp_slowtmr+0x290>)
 801eb3e:	5c8a      	ldrb	r2, [r1, r2]
 801eb40:	4093      	lsls	r3, r2
 801eb42:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801eb44:	697b      	ldr	r3, [r7, #20]
 801eb46:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801eb4a:	4293      	cmp	r3, r2
 801eb4c:	dc1a      	bgt.n	801eb84 <tcp_slowtmr+0x294>
 801eb4e:	697b      	ldr	r3, [r7, #20]
 801eb50:	b21a      	sxth	r2, r3
 801eb52:	e019      	b.n	801eb88 <tcp_slowtmr+0x298>
 801eb54:	2400b48c 	.word	0x2400b48c
 801eb58:	2400b4a2 	.word	0x2400b4a2
 801eb5c:	2400b498 	.word	0x2400b498
 801eb60:	0802e610 	.word	0x0802e610
 801eb64:	0802e954 	.word	0x0802e954
 801eb68:	0802e654 	.word	0x0802e654
 801eb6c:	0802e980 	.word	0x0802e980
 801eb70:	0802e9ac 	.word	0x0802e9ac
 801eb74:	0802e9dc 	.word	0x0802e9dc
 801eb78:	0802ea10 	.word	0x0802ea10
 801eb7c:	08030eac 	.word	0x08030eac
 801eb80:	08030e9c 	.word	0x08030e9c
 801eb84:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801eb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801eb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb90:	2200      	movs	r2, #0
 801eb92:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801eb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801eb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801eba0:	4293      	cmp	r3, r2
 801eba2:	bf28      	it	cs
 801eba4:	4613      	movcs	r3, r2
 801eba6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801eba8:	8a7b      	ldrh	r3, [r7, #18]
 801ebaa:	085b      	lsrs	r3, r3, #1
 801ebac:	b29a      	uxth	r2, r3
 801ebae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebb0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801ebb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ebba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ebbe:	005b      	lsls	r3, r3, #1
 801ebc0:	b29b      	uxth	r3, r3
 801ebc2:	429a      	cmp	r2, r3
 801ebc4:	d206      	bcs.n	801ebd4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801ebc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ebca:	005b      	lsls	r3, r3, #1
 801ebcc:	b29a      	uxth	r2, r3
 801ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebd6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801ebde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebe0:	2200      	movs	r2, #0
 801ebe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801ebe6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ebe8:	f004 f818 	bl	8022c1c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebee:	7d1b      	ldrb	r3, [r3, #20]
 801ebf0:	2b06      	cmp	r3, #6
 801ebf2:	d111      	bne.n	801ec18 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebf6:	8b5b      	ldrh	r3, [r3, #26]
 801ebf8:	f003 0310 	and.w	r3, r3, #16
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d00b      	beq.n	801ec18 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ec00:	4b9c      	ldr	r3, [pc, #624]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ec02:	681a      	ldr	r2, [r3, #0]
 801ec04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec06:	6a1b      	ldr	r3, [r3, #32]
 801ec08:	1ad3      	subs	r3, r2, r3
 801ec0a:	2b28      	cmp	r3, #40	@ 0x28
 801ec0c:	d904      	bls.n	801ec18 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801ec0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ec12:	3301      	adds	r3, #1
 801ec14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ec18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec1a:	7a5b      	ldrb	r3, [r3, #9]
 801ec1c:	f003 0308 	and.w	r3, r3, #8
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d04a      	beq.n	801ecba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801ec24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec26:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ec28:	2b04      	cmp	r3, #4
 801ec2a:	d003      	beq.n	801ec34 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801ec2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec2e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801ec30:	2b07      	cmp	r3, #7
 801ec32:	d142      	bne.n	801ecba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ec34:	4b8f      	ldr	r3, [pc, #572]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ec36:	681a      	ldr	r2, [r3, #0]
 801ec38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec3a:	6a1b      	ldr	r3, [r3, #32]
 801ec3c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ec3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec40:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801ec44:	4b8c      	ldr	r3, [pc, #560]	@ (801ee78 <tcp_slowtmr+0x588>)
 801ec46:	440b      	add	r3, r1
 801ec48:	498c      	ldr	r1, [pc, #560]	@ (801ee7c <tcp_slowtmr+0x58c>)
 801ec4a:	fba1 1303 	umull	r1, r3, r1, r3
 801ec4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ec50:	429a      	cmp	r2, r3
 801ec52:	d90a      	bls.n	801ec6a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801ec54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ec58:	3301      	adds	r3, #1
 801ec5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801ec5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ec62:	3301      	adds	r3, #1
 801ec64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ec68:	e027      	b.n	801ecba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ec6a:	4b82      	ldr	r3, [pc, #520]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ec6c:	681a      	ldr	r2, [r3, #0]
 801ec6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec70:	6a1b      	ldr	r3, [r3, #32]
 801ec72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801ec74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec76:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801ec7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec7c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801ec80:	4618      	mov	r0, r3
 801ec82:	4b7f      	ldr	r3, [pc, #508]	@ (801ee80 <tcp_slowtmr+0x590>)
 801ec84:	fb00 f303 	mul.w	r3, r0, r3
 801ec88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801ec8a:	497c      	ldr	r1, [pc, #496]	@ (801ee7c <tcp_slowtmr+0x58c>)
 801ec8c:	fba1 1303 	umull	r1, r3, r1, r3
 801ec90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ec92:	429a      	cmp	r2, r3
 801ec94:	d911      	bls.n	801ecba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801ec96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ec98:	f004 fac4 	bl	8023224 <tcp_keepalive>
 801ec9c:	4603      	mov	r3, r0
 801ec9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801eca2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d107      	bne.n	801ecba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801ecaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801ecb0:	3301      	adds	r3, #1
 801ecb2:	b2da      	uxtb	r2, r3
 801ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecb6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d011      	beq.n	801ece6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801ecc2:	4b6c      	ldr	r3, [pc, #432]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ecc4:	681a      	ldr	r2, [r3, #0]
 801ecc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecc8:	6a1b      	ldr	r3, [r3, #32]
 801ecca:	1ad2      	subs	r2, r2, r3
 801eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801ecd2:	4619      	mov	r1, r3
 801ecd4:	460b      	mov	r3, r1
 801ecd6:	005b      	lsls	r3, r3, #1
 801ecd8:	440b      	add	r3, r1
 801ecda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801ecdc:	429a      	cmp	r2, r3
 801ecde:	d302      	bcc.n	801ece6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801ece0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ece2:	f000 fddd 	bl	801f8a0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801ece6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ece8:	7d1b      	ldrb	r3, [r3, #20]
 801ecea:	2b03      	cmp	r3, #3
 801ecec:	d10b      	bne.n	801ed06 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ecee:	4b61      	ldr	r3, [pc, #388]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ecf0:	681a      	ldr	r2, [r3, #0]
 801ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecf4:	6a1b      	ldr	r3, [r3, #32]
 801ecf6:	1ad3      	subs	r3, r2, r3
 801ecf8:	2b28      	cmp	r3, #40	@ 0x28
 801ecfa:	d904      	bls.n	801ed06 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801ecfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ed00:	3301      	adds	r3, #1
 801ed02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed08:	7d1b      	ldrb	r3, [r3, #20]
 801ed0a:	2b09      	cmp	r3, #9
 801ed0c:	d10b      	bne.n	801ed26 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801ed0e:	4b59      	ldr	r3, [pc, #356]	@ (801ee74 <tcp_slowtmr+0x584>)
 801ed10:	681a      	ldr	r2, [r3, #0]
 801ed12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed14:	6a1b      	ldr	r3, [r3, #32]
 801ed16:	1ad3      	subs	r3, r2, r3
 801ed18:	2bf0      	cmp	r3, #240	@ 0xf0
 801ed1a:	d904      	bls.n	801ed26 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801ed1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ed20:	3301      	adds	r3, #1
 801ed22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801ed26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d060      	beq.n	801edf0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801ed2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ed34:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801ed36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ed38:	f000 fbfe 	bl	801f538 <tcp_pcb_purge>
      if (prev != NULL) {
 801ed3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d010      	beq.n	801ed64 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801ed42:	4b50      	ldr	r3, [pc, #320]	@ (801ee84 <tcp_slowtmr+0x594>)
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ed48:	429a      	cmp	r2, r3
 801ed4a:	d106      	bne.n	801ed5a <tcp_slowtmr+0x46a>
 801ed4c:	4b4e      	ldr	r3, [pc, #312]	@ (801ee88 <tcp_slowtmr+0x598>)
 801ed4e:	f240 526d 	movw	r2, #1389	@ 0x56d
 801ed52:	494e      	ldr	r1, [pc, #312]	@ (801ee8c <tcp_slowtmr+0x59c>)
 801ed54:	484e      	ldr	r0, [pc, #312]	@ (801ee90 <tcp_slowtmr+0x5a0>)
 801ed56:	f00a fb07 	bl	8029368 <iprintf>
        prev->next = pcb->next;
 801ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed5c:	68da      	ldr	r2, [r3, #12]
 801ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed60:	60da      	str	r2, [r3, #12]
 801ed62:	e00f      	b.n	801ed84 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801ed64:	4b47      	ldr	r3, [pc, #284]	@ (801ee84 <tcp_slowtmr+0x594>)
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ed6a:	429a      	cmp	r2, r3
 801ed6c:	d006      	beq.n	801ed7c <tcp_slowtmr+0x48c>
 801ed6e:	4b46      	ldr	r3, [pc, #280]	@ (801ee88 <tcp_slowtmr+0x598>)
 801ed70:	f240 5271 	movw	r2, #1393	@ 0x571
 801ed74:	4947      	ldr	r1, [pc, #284]	@ (801ee94 <tcp_slowtmr+0x5a4>)
 801ed76:	4846      	ldr	r0, [pc, #280]	@ (801ee90 <tcp_slowtmr+0x5a0>)
 801ed78:	f00a faf6 	bl	8029368 <iprintf>
        tcp_active_pcbs = pcb->next;
 801ed7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed7e:	68db      	ldr	r3, [r3, #12]
 801ed80:	4a40      	ldr	r2, [pc, #256]	@ (801ee84 <tcp_slowtmr+0x594>)
 801ed82:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801ed84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d013      	beq.n	801edb4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ed8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed8e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ed90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed92:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ed94:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801ed96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed98:	3304      	adds	r3, #4
 801ed9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ed9c:	8ad2      	ldrh	r2, [r2, #22]
 801ed9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801eda0:	8b09      	ldrh	r1, [r1, #24]
 801eda2:	9102      	str	r1, [sp, #8]
 801eda4:	9201      	str	r2, [sp, #4]
 801eda6:	9300      	str	r3, [sp, #0]
 801eda8:	462b      	mov	r3, r5
 801edaa:	4622      	mov	r2, r4
 801edac:	4601      	mov	r1, r0
 801edae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801edb0:	f004 f984 	bl	80230bc <tcp_rst>
      err_arg = pcb->callback_arg;
 801edb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edb6:	691b      	ldr	r3, [r3, #16]
 801edb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801edba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edbc:	7d1b      	ldrb	r3, [r3, #20]
 801edbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801edc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801edc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edc6:	68db      	ldr	r3, [r3, #12]
 801edc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801edca:	6838      	ldr	r0, [r7, #0]
 801edcc:	f7ff f9f2 	bl	801e1b4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801edd0:	4b31      	ldr	r3, [pc, #196]	@ (801ee98 <tcp_slowtmr+0x5a8>)
 801edd2:	2200      	movs	r2, #0
 801edd4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d004      	beq.n	801ede6 <tcp_slowtmr+0x4f6>
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	f06f 010c 	mvn.w	r1, #12
 801ede2:	68b8      	ldr	r0, [r7, #8]
 801ede4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801ede6:	4b2c      	ldr	r3, [pc, #176]	@ (801ee98 <tcp_slowtmr+0x5a8>)
 801ede8:	781b      	ldrb	r3, [r3, #0]
 801edea:	2b00      	cmp	r3, #0
 801edec:	d037      	beq.n	801ee5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801edee:	e592      	b.n	801e916 <tcp_slowtmr+0x26>
      prev = pcb;
 801edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801edf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edf6:	68db      	ldr	r3, [r3, #12]
 801edf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801edfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801edfc:	7f1b      	ldrb	r3, [r3, #28]
 801edfe:	3301      	adds	r3, #1
 801ee00:	b2da      	uxtb	r2, r3
 801ee02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801ee06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee08:	7f1a      	ldrb	r2, [r3, #28]
 801ee0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee0c:	7f5b      	ldrb	r3, [r3, #29]
 801ee0e:	429a      	cmp	r2, r3
 801ee10:	d325      	bcc.n	801ee5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801ee12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee14:	2200      	movs	r2, #0
 801ee16:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801ee18:	4b1f      	ldr	r3, [pc, #124]	@ (801ee98 <tcp_slowtmr+0x5a8>)
 801ee1a:	2200      	movs	r2, #0
 801ee1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801ee1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d00b      	beq.n	801ee40 <tcp_slowtmr+0x550>
 801ee28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ee2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ee30:	6912      	ldr	r2, [r2, #16]
 801ee32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ee34:	4610      	mov	r0, r2
 801ee36:	4798      	blx	r3
 801ee38:	4603      	mov	r3, r0
 801ee3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801ee3e:	e002      	b.n	801ee46 <tcp_slowtmr+0x556>
 801ee40:	2300      	movs	r3, #0
 801ee42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801ee46:	4b14      	ldr	r3, [pc, #80]	@ (801ee98 <tcp_slowtmr+0x5a8>)
 801ee48:	781b      	ldrb	r3, [r3, #0]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	f47f ad62 	bne.w	801e914 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801ee50:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d102      	bne.n	801ee5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801ee58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ee5a:	f003 fb7b 	bl	8022554 <tcp_output>
  while (pcb != NULL) {
 801ee5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	f47f ad5e 	bne.w	801e922 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801ee66:	2300      	movs	r3, #0
 801ee68:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801ee6a:	4b0c      	ldr	r3, [pc, #48]	@ (801ee9c <tcp_slowtmr+0x5ac>)
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801ee70:	e069      	b.n	801ef46 <tcp_slowtmr+0x656>
 801ee72:	bf00      	nop
 801ee74:	2400b48c 	.word	0x2400b48c
 801ee78:	000a4cb8 	.word	0x000a4cb8
 801ee7c:	10624dd3 	.word	0x10624dd3
 801ee80:	000124f8 	.word	0x000124f8
 801ee84:	2400b498 	.word	0x2400b498
 801ee88:	0802e610 	.word	0x0802e610
 801ee8c:	0802ea48 	.word	0x0802ea48
 801ee90:	0802e654 	.word	0x0802e654
 801ee94:	0802ea74 	.word	0x0802ea74
 801ee98:	2400b4a0 	.word	0x2400b4a0
 801ee9c:	2400b49c 	.word	0x2400b49c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eea2:	7d1b      	ldrb	r3, [r3, #20]
 801eea4:	2b0a      	cmp	r3, #10
 801eea6:	d006      	beq.n	801eeb6 <tcp_slowtmr+0x5c6>
 801eea8:	4b2b      	ldr	r3, [pc, #172]	@ (801ef58 <tcp_slowtmr+0x668>)
 801eeaa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801eeae:	492b      	ldr	r1, [pc, #172]	@ (801ef5c <tcp_slowtmr+0x66c>)
 801eeb0:	482b      	ldr	r0, [pc, #172]	@ (801ef60 <tcp_slowtmr+0x670>)
 801eeb2:	f00a fa59 	bl	8029368 <iprintf>
    pcb_remove = 0;
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801eebc:	4b29      	ldr	r3, [pc, #164]	@ (801ef64 <tcp_slowtmr+0x674>)
 801eebe:	681a      	ldr	r2, [r3, #0]
 801eec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eec2:	6a1b      	ldr	r3, [r3, #32]
 801eec4:	1ad3      	subs	r3, r2, r3
 801eec6:	2bf0      	cmp	r3, #240	@ 0xf0
 801eec8:	d904      	bls.n	801eed4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801eeca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801eece:	3301      	adds	r3, #1
 801eed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801eed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d02f      	beq.n	801ef3c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801eedc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801eede:	f000 fb2b 	bl	801f538 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801eee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d010      	beq.n	801ef0a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801eee8:	4b1f      	ldr	r3, [pc, #124]	@ (801ef68 <tcp_slowtmr+0x678>)
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eeee:	429a      	cmp	r2, r3
 801eef0:	d106      	bne.n	801ef00 <tcp_slowtmr+0x610>
 801eef2:	4b19      	ldr	r3, [pc, #100]	@ (801ef58 <tcp_slowtmr+0x668>)
 801eef4:	f240 52af 	movw	r2, #1455	@ 0x5af
 801eef8:	491c      	ldr	r1, [pc, #112]	@ (801ef6c <tcp_slowtmr+0x67c>)
 801eefa:	4819      	ldr	r0, [pc, #100]	@ (801ef60 <tcp_slowtmr+0x670>)
 801eefc:	f00a fa34 	bl	8029368 <iprintf>
        prev->next = pcb->next;
 801ef00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef02:	68da      	ldr	r2, [r3, #12]
 801ef04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef06:	60da      	str	r2, [r3, #12]
 801ef08:	e00f      	b.n	801ef2a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801ef0a:	4b17      	ldr	r3, [pc, #92]	@ (801ef68 <tcp_slowtmr+0x678>)
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ef10:	429a      	cmp	r2, r3
 801ef12:	d006      	beq.n	801ef22 <tcp_slowtmr+0x632>
 801ef14:	4b10      	ldr	r3, [pc, #64]	@ (801ef58 <tcp_slowtmr+0x668>)
 801ef16:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801ef1a:	4915      	ldr	r1, [pc, #84]	@ (801ef70 <tcp_slowtmr+0x680>)
 801ef1c:	4810      	ldr	r0, [pc, #64]	@ (801ef60 <tcp_slowtmr+0x670>)
 801ef1e:	f00a fa23 	bl	8029368 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801ef22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef24:	68db      	ldr	r3, [r3, #12]
 801ef26:	4a10      	ldr	r2, [pc, #64]	@ (801ef68 <tcp_slowtmr+0x678>)
 801ef28:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801ef2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef2c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801ef2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef30:	68db      	ldr	r3, [r3, #12]
 801ef32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801ef34:	69f8      	ldr	r0, [r7, #28]
 801ef36:	f7ff f93d 	bl	801e1b4 <tcp_free>
 801ef3a:	e004      	b.n	801ef46 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801ef3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801ef40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef42:	68db      	ldr	r3, [r3, #12]
 801ef44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801ef46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d1a9      	bne.n	801eea0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801ef4c:	bf00      	nop
 801ef4e:	bf00      	nop
 801ef50:	3730      	adds	r7, #48	@ 0x30
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bdb0      	pop	{r4, r5, r7, pc}
 801ef56:	bf00      	nop
 801ef58:	0802e610 	.word	0x0802e610
 801ef5c:	0802eaa0 	.word	0x0802eaa0
 801ef60:	0802e654 	.word	0x0802e654
 801ef64:	2400b48c 	.word	0x2400b48c
 801ef68:	2400b49c 	.word	0x2400b49c
 801ef6c:	0802ead0 	.word	0x0802ead0
 801ef70:	0802eaf8 	.word	0x0802eaf8

0801ef74 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801ef74:	b580      	push	{r7, lr}
 801ef76:	b082      	sub	sp, #8
 801ef78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801ef7a:	4b2d      	ldr	r3, [pc, #180]	@ (801f030 <tcp_fasttmr+0xbc>)
 801ef7c:	781b      	ldrb	r3, [r3, #0]
 801ef7e:	3301      	adds	r3, #1
 801ef80:	b2da      	uxtb	r2, r3
 801ef82:	4b2b      	ldr	r3, [pc, #172]	@ (801f030 <tcp_fasttmr+0xbc>)
 801ef84:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801ef86:	4b2b      	ldr	r3, [pc, #172]	@ (801f034 <tcp_fasttmr+0xc0>)
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ef8c:	e048      	b.n	801f020 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	7f9a      	ldrb	r2, [r3, #30]
 801ef92:	4b27      	ldr	r3, [pc, #156]	@ (801f030 <tcp_fasttmr+0xbc>)
 801ef94:	781b      	ldrb	r3, [r3, #0]
 801ef96:	429a      	cmp	r2, r3
 801ef98:	d03f      	beq.n	801f01a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801ef9a:	4b25      	ldr	r3, [pc, #148]	@ (801f030 <tcp_fasttmr+0xbc>)
 801ef9c:	781a      	ldrb	r2, [r3, #0]
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	8b5b      	ldrh	r3, [r3, #26]
 801efa6:	f003 0301 	and.w	r3, r3, #1
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d010      	beq.n	801efd0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	8b5b      	ldrh	r3, [r3, #26]
 801efb2:	f043 0302 	orr.w	r3, r3, #2
 801efb6:	b29a      	uxth	r2, r3
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801efbc:	6878      	ldr	r0, [r7, #4]
 801efbe:	f003 fac9 	bl	8022554 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	8b5b      	ldrh	r3, [r3, #26]
 801efc6:	f023 0303 	bic.w	r3, r3, #3
 801efca:	b29a      	uxth	r2, r3
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	8b5b      	ldrh	r3, [r3, #26]
 801efd4:	f003 0308 	and.w	r3, r3, #8
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d009      	beq.n	801eff0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	8b5b      	ldrh	r3, [r3, #26]
 801efe0:	f023 0308 	bic.w	r3, r3, #8
 801efe4:	b29a      	uxth	r2, r3
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801efea:	6878      	ldr	r0, [r7, #4]
 801efec:	f7ff fa76 	bl	801e4dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	68db      	ldr	r3, [r3, #12]
 801eff4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801effa:	2b00      	cmp	r3, #0
 801effc:	d00a      	beq.n	801f014 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801effe:	4b0e      	ldr	r3, [pc, #56]	@ (801f038 <tcp_fasttmr+0xc4>)
 801f000:	2200      	movs	r2, #0
 801f002:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801f004:	6878      	ldr	r0, [r7, #4]
 801f006:	f000 f819 	bl	801f03c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801f00a:	4b0b      	ldr	r3, [pc, #44]	@ (801f038 <tcp_fasttmr+0xc4>)
 801f00c:	781b      	ldrb	r3, [r3, #0]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d000      	beq.n	801f014 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801f012:	e7b8      	b.n	801ef86 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801f014:	683b      	ldr	r3, [r7, #0]
 801f016:	607b      	str	r3, [r7, #4]
 801f018:	e002      	b.n	801f020 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	68db      	ldr	r3, [r3, #12]
 801f01e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2b00      	cmp	r3, #0
 801f024:	d1b3      	bne.n	801ef8e <tcp_fasttmr+0x1a>
    }
  }
}
 801f026:	bf00      	nop
 801f028:	bf00      	nop
 801f02a:	3708      	adds	r7, #8
 801f02c:	46bd      	mov	sp, r7
 801f02e:	bd80      	pop	{r7, pc}
 801f030:	2400b4a2 	.word	0x2400b4a2
 801f034:	2400b498 	.word	0x2400b498
 801f038:	2400b4a0 	.word	0x2400b4a0

0801f03c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801f03c:	b590      	push	{r4, r7, lr}
 801f03e:	b085      	sub	sp, #20
 801f040:	af00      	add	r7, sp, #0
 801f042:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	2b00      	cmp	r3, #0
 801f048:	d109      	bne.n	801f05e <tcp_process_refused_data+0x22>
 801f04a:	4b37      	ldr	r3, [pc, #220]	@ (801f128 <tcp_process_refused_data+0xec>)
 801f04c:	f240 6209 	movw	r2, #1545	@ 0x609
 801f050:	4936      	ldr	r1, [pc, #216]	@ (801f12c <tcp_process_refused_data+0xf0>)
 801f052:	4837      	ldr	r0, [pc, #220]	@ (801f130 <tcp_process_refused_data+0xf4>)
 801f054:	f00a f988 	bl	8029368 <iprintf>
 801f058:	f06f 030f 	mvn.w	r3, #15
 801f05c:	e060      	b.n	801f120 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f062:	7b5b      	ldrb	r3, [r3, #13]
 801f064:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f06a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	2200      	movs	r2, #0
 801f070:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d00b      	beq.n	801f094 <tcp_process_refused_data+0x58>
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	6918      	ldr	r0, [r3, #16]
 801f086:	2300      	movs	r3, #0
 801f088:	68ba      	ldr	r2, [r7, #8]
 801f08a:	6879      	ldr	r1, [r7, #4]
 801f08c:	47a0      	blx	r4
 801f08e:	4603      	mov	r3, r0
 801f090:	73fb      	strb	r3, [r7, #15]
 801f092:	e007      	b.n	801f0a4 <tcp_process_refused_data+0x68>
 801f094:	2300      	movs	r3, #0
 801f096:	68ba      	ldr	r2, [r7, #8]
 801f098:	6879      	ldr	r1, [r7, #4]
 801f09a:	2000      	movs	r0, #0
 801f09c:	f000 f8a4 	bl	801f1e8 <tcp_recv_null>
 801f0a0:	4603      	mov	r3, r0
 801f0a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801f0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d12a      	bne.n	801f102 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801f0ac:	7bbb      	ldrb	r3, [r7, #14]
 801f0ae:	f003 0320 	and.w	r3, r3, #32
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d033      	beq.n	801f11e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f0ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801f0be:	d005      	beq.n	801f0cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f0c4:	3301      	adds	r3, #1
 801f0c6:	b29a      	uxth	r2, r3
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d00b      	beq.n	801f0ee <tcp_process_refused_data+0xb2>
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	6918      	ldr	r0, [r3, #16]
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	2200      	movs	r2, #0
 801f0e4:	6879      	ldr	r1, [r7, #4]
 801f0e6:	47a0      	blx	r4
 801f0e8:	4603      	mov	r3, r0
 801f0ea:	73fb      	strb	r3, [r7, #15]
 801f0ec:	e001      	b.n	801f0f2 <tcp_process_refused_data+0xb6>
 801f0ee:	2300      	movs	r3, #0
 801f0f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801f0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f0f6:	f113 0f0d 	cmn.w	r3, #13
 801f0fa:	d110      	bne.n	801f11e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801f0fc:	f06f 030c 	mvn.w	r3, #12
 801f100:	e00e      	b.n	801f120 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801f102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f106:	f113 0f0d 	cmn.w	r3, #13
 801f10a:	d102      	bne.n	801f112 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801f10c:	f06f 030c 	mvn.w	r3, #12
 801f110:	e006      	b.n	801f120 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	68ba      	ldr	r2, [r7, #8]
 801f116:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801f118:	f06f 0304 	mvn.w	r3, #4
 801f11c:	e000      	b.n	801f120 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801f11e:	2300      	movs	r3, #0
}
 801f120:	4618      	mov	r0, r3
 801f122:	3714      	adds	r7, #20
 801f124:	46bd      	mov	sp, r7
 801f126:	bd90      	pop	{r4, r7, pc}
 801f128:	0802e610 	.word	0x0802e610
 801f12c:	0802eb20 	.word	0x0802eb20
 801f130:	0802e654 	.word	0x0802e654

0801f134 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801f134:	b580      	push	{r7, lr}
 801f136:	b084      	sub	sp, #16
 801f138:	af00      	add	r7, sp, #0
 801f13a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801f13c:	e007      	b.n	801f14e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801f144:	6878      	ldr	r0, [r7, #4]
 801f146:	f000 f80a 	bl	801f15e <tcp_seg_free>
    seg = next;
 801f14a:	68fb      	ldr	r3, [r7, #12]
 801f14c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	2b00      	cmp	r3, #0
 801f152:	d1f4      	bne.n	801f13e <tcp_segs_free+0xa>
  }
}
 801f154:	bf00      	nop
 801f156:	bf00      	nop
 801f158:	3710      	adds	r7, #16
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}

0801f15e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801f15e:	b580      	push	{r7, lr}
 801f160:	b082      	sub	sp, #8
 801f162:	af00      	add	r7, sp, #0
 801f164:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d00c      	beq.n	801f186 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	685b      	ldr	r3, [r3, #4]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d004      	beq.n	801f17e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	685b      	ldr	r3, [r3, #4]
 801f178:	4618      	mov	r0, r3
 801f17a:	f7fe fc11 	bl	801d9a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801f17e:	6879      	ldr	r1, [r7, #4]
 801f180:	2003      	movs	r0, #3
 801f182:	f7fd fdab 	bl	801ccdc <memp_free>
  }
}
 801f186:	bf00      	nop
 801f188:	3708      	adds	r7, #8
 801f18a:	46bd      	mov	sp, r7
 801f18c:	bd80      	pop	{r7, pc}
	...

0801f190 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b084      	sub	sp, #16
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d106      	bne.n	801f1ac <tcp_seg_copy+0x1c>
 801f19e:	4b0f      	ldr	r3, [pc, #60]	@ (801f1dc <tcp_seg_copy+0x4c>)
 801f1a0:	f240 6282 	movw	r2, #1666	@ 0x682
 801f1a4:	490e      	ldr	r1, [pc, #56]	@ (801f1e0 <tcp_seg_copy+0x50>)
 801f1a6:	480f      	ldr	r0, [pc, #60]	@ (801f1e4 <tcp_seg_copy+0x54>)
 801f1a8:	f00a f8de 	bl	8029368 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801f1ac:	2003      	movs	r0, #3
 801f1ae:	f7fd fd25 	bl	801cbfc <memp_malloc>
 801f1b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d101      	bne.n	801f1be <tcp_seg_copy+0x2e>
    return NULL;
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	e00a      	b.n	801f1d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801f1be:	2210      	movs	r2, #16
 801f1c0:	6879      	ldr	r1, [r7, #4]
 801f1c2:	68f8      	ldr	r0, [r7, #12]
 801f1c4:	f00a fb43 	bl	802984e <memcpy>
  pbuf_ref(cseg->p);
 801f1c8:	68fb      	ldr	r3, [r7, #12]
 801f1ca:	685b      	ldr	r3, [r3, #4]
 801f1cc:	4618      	mov	r0, r3
 801f1ce:	f7fe fc87 	bl	801dae0 <pbuf_ref>
  return cseg;
 801f1d2:	68fb      	ldr	r3, [r7, #12]
}
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	3710      	adds	r7, #16
 801f1d8:	46bd      	mov	sp, r7
 801f1da:	bd80      	pop	{r7, pc}
 801f1dc:	0802e610 	.word	0x0802e610
 801f1e0:	0802eb64 	.word	0x0802eb64
 801f1e4:	0802e654 	.word	0x0802e654

0801f1e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801f1e8:	b580      	push	{r7, lr}
 801f1ea:	b084      	sub	sp, #16
 801f1ec:	af00      	add	r7, sp, #0
 801f1ee:	60f8      	str	r0, [r7, #12]
 801f1f0:	60b9      	str	r1, [r7, #8]
 801f1f2:	607a      	str	r2, [r7, #4]
 801f1f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801f1f6:	68bb      	ldr	r3, [r7, #8]
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	d109      	bne.n	801f210 <tcp_recv_null+0x28>
 801f1fc:	4b12      	ldr	r3, [pc, #72]	@ (801f248 <tcp_recv_null+0x60>)
 801f1fe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801f202:	4912      	ldr	r1, [pc, #72]	@ (801f24c <tcp_recv_null+0x64>)
 801f204:	4812      	ldr	r0, [pc, #72]	@ (801f250 <tcp_recv_null+0x68>)
 801f206:	f00a f8af 	bl	8029368 <iprintf>
 801f20a:	f06f 030f 	mvn.w	r3, #15
 801f20e:	e016      	b.n	801f23e <tcp_recv_null+0x56>

  if (p != NULL) {
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d009      	beq.n	801f22a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	891b      	ldrh	r3, [r3, #8]
 801f21a:	4619      	mov	r1, r3
 801f21c:	68b8      	ldr	r0, [r7, #8]
 801f21e:	f7ff fb17 	bl	801e850 <tcp_recved>
    pbuf_free(p);
 801f222:	6878      	ldr	r0, [r7, #4]
 801f224:	f7fe fbbc 	bl	801d9a0 <pbuf_free>
 801f228:	e008      	b.n	801f23c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801f22a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d104      	bne.n	801f23c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801f232:	68b8      	ldr	r0, [r7, #8]
 801f234:	f7ff f9bc 	bl	801e5b0 <tcp_close>
 801f238:	4603      	mov	r3, r0
 801f23a:	e000      	b.n	801f23e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801f23c:	2300      	movs	r3, #0
}
 801f23e:	4618      	mov	r0, r3
 801f240:	3710      	adds	r7, #16
 801f242:	46bd      	mov	sp, r7
 801f244:	bd80      	pop	{r7, pc}
 801f246:	bf00      	nop
 801f248:	0802e610 	.word	0x0802e610
 801f24c:	0802eb80 	.word	0x0802eb80
 801f250:	0802e654 	.word	0x0802e654

0801f254 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801f254:	b580      	push	{r7, lr}
 801f256:	b086      	sub	sp, #24
 801f258:	af00      	add	r7, sp, #0
 801f25a:	4603      	mov	r3, r0
 801f25c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801f25e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f262:	2b00      	cmp	r3, #0
 801f264:	db01      	blt.n	801f26a <tcp_kill_prio+0x16>
 801f266:	79fb      	ldrb	r3, [r7, #7]
 801f268:	e000      	b.n	801f26c <tcp_kill_prio+0x18>
 801f26a:	237f      	movs	r3, #127	@ 0x7f
 801f26c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801f26e:	7afb      	ldrb	r3, [r7, #11]
 801f270:	2b00      	cmp	r3, #0
 801f272:	d034      	beq.n	801f2de <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801f274:	7afb      	ldrb	r3, [r7, #11]
 801f276:	3b01      	subs	r3, #1
 801f278:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801f27a:	2300      	movs	r3, #0
 801f27c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801f27e:	2300      	movs	r3, #0
 801f280:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801f282:	4b19      	ldr	r3, [pc, #100]	@ (801f2e8 <tcp_kill_prio+0x94>)
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	617b      	str	r3, [r7, #20]
 801f288:	e01f      	b.n	801f2ca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801f28a:	697b      	ldr	r3, [r7, #20]
 801f28c:	7d5b      	ldrb	r3, [r3, #21]
 801f28e:	7afa      	ldrb	r2, [r7, #11]
 801f290:	429a      	cmp	r2, r3
 801f292:	d80c      	bhi.n	801f2ae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801f294:	697b      	ldr	r3, [r7, #20]
 801f296:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801f298:	7afa      	ldrb	r2, [r7, #11]
 801f29a:	429a      	cmp	r2, r3
 801f29c:	d112      	bne.n	801f2c4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801f29e:	4b13      	ldr	r3, [pc, #76]	@ (801f2ec <tcp_kill_prio+0x98>)
 801f2a0:	681a      	ldr	r2, [r3, #0]
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	6a1b      	ldr	r3, [r3, #32]
 801f2a6:	1ad3      	subs	r3, r2, r3
 801f2a8:	68fa      	ldr	r2, [r7, #12]
 801f2aa:	429a      	cmp	r2, r3
 801f2ac:	d80a      	bhi.n	801f2c4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801f2ae:	4b0f      	ldr	r3, [pc, #60]	@ (801f2ec <tcp_kill_prio+0x98>)
 801f2b0:	681a      	ldr	r2, [r3, #0]
 801f2b2:	697b      	ldr	r3, [r7, #20]
 801f2b4:	6a1b      	ldr	r3, [r3, #32]
 801f2b6:	1ad3      	subs	r3, r2, r3
 801f2b8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801f2ba:	697b      	ldr	r3, [r7, #20]
 801f2bc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801f2be:	697b      	ldr	r3, [r7, #20]
 801f2c0:	7d5b      	ldrb	r3, [r3, #21]
 801f2c2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801f2c4:	697b      	ldr	r3, [r7, #20]
 801f2c6:	68db      	ldr	r3, [r3, #12]
 801f2c8:	617b      	str	r3, [r7, #20]
 801f2ca:	697b      	ldr	r3, [r7, #20]
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d1dc      	bne.n	801f28a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801f2d0:	693b      	ldr	r3, [r7, #16]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d004      	beq.n	801f2e0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801f2d6:	6938      	ldr	r0, [r7, #16]
 801f2d8:	f7ff fa54 	bl	801e784 <tcp_abort>
 801f2dc:	e000      	b.n	801f2e0 <tcp_kill_prio+0x8c>
    return;
 801f2de:	bf00      	nop
  }
}
 801f2e0:	3718      	adds	r7, #24
 801f2e2:	46bd      	mov	sp, r7
 801f2e4:	bd80      	pop	{r7, pc}
 801f2e6:	bf00      	nop
 801f2e8:	2400b498 	.word	0x2400b498
 801f2ec:	2400b48c 	.word	0x2400b48c

0801f2f0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b086      	sub	sp, #24
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	4603      	mov	r3, r0
 801f2f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801f2fa:	79fb      	ldrb	r3, [r7, #7]
 801f2fc:	2b08      	cmp	r3, #8
 801f2fe:	d009      	beq.n	801f314 <tcp_kill_state+0x24>
 801f300:	79fb      	ldrb	r3, [r7, #7]
 801f302:	2b09      	cmp	r3, #9
 801f304:	d006      	beq.n	801f314 <tcp_kill_state+0x24>
 801f306:	4b1a      	ldr	r3, [pc, #104]	@ (801f370 <tcp_kill_state+0x80>)
 801f308:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801f30c:	4919      	ldr	r1, [pc, #100]	@ (801f374 <tcp_kill_state+0x84>)
 801f30e:	481a      	ldr	r0, [pc, #104]	@ (801f378 <tcp_kill_state+0x88>)
 801f310:	f00a f82a 	bl	8029368 <iprintf>

  inactivity = 0;
 801f314:	2300      	movs	r3, #0
 801f316:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801f318:	2300      	movs	r3, #0
 801f31a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801f31c:	4b17      	ldr	r3, [pc, #92]	@ (801f37c <tcp_kill_state+0x8c>)
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	617b      	str	r3, [r7, #20]
 801f322:	e017      	b.n	801f354 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	7d1b      	ldrb	r3, [r3, #20]
 801f328:	79fa      	ldrb	r2, [r7, #7]
 801f32a:	429a      	cmp	r2, r3
 801f32c:	d10f      	bne.n	801f34e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801f32e:	4b14      	ldr	r3, [pc, #80]	@ (801f380 <tcp_kill_state+0x90>)
 801f330:	681a      	ldr	r2, [r3, #0]
 801f332:	697b      	ldr	r3, [r7, #20]
 801f334:	6a1b      	ldr	r3, [r3, #32]
 801f336:	1ad3      	subs	r3, r2, r3
 801f338:	68fa      	ldr	r2, [r7, #12]
 801f33a:	429a      	cmp	r2, r3
 801f33c:	d807      	bhi.n	801f34e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801f33e:	4b10      	ldr	r3, [pc, #64]	@ (801f380 <tcp_kill_state+0x90>)
 801f340:	681a      	ldr	r2, [r3, #0]
 801f342:	697b      	ldr	r3, [r7, #20]
 801f344:	6a1b      	ldr	r3, [r3, #32]
 801f346:	1ad3      	subs	r3, r2, r3
 801f348:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801f34a:	697b      	ldr	r3, [r7, #20]
 801f34c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801f34e:	697b      	ldr	r3, [r7, #20]
 801f350:	68db      	ldr	r3, [r3, #12]
 801f352:	617b      	str	r3, [r7, #20]
 801f354:	697b      	ldr	r3, [r7, #20]
 801f356:	2b00      	cmp	r3, #0
 801f358:	d1e4      	bne.n	801f324 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801f35a:	693b      	ldr	r3, [r7, #16]
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d003      	beq.n	801f368 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801f360:	2100      	movs	r1, #0
 801f362:	6938      	ldr	r0, [r7, #16]
 801f364:	f7ff f950 	bl	801e608 <tcp_abandon>
  }
}
 801f368:	bf00      	nop
 801f36a:	3718      	adds	r7, #24
 801f36c:	46bd      	mov	sp, r7
 801f36e:	bd80      	pop	{r7, pc}
 801f370:	0802e610 	.word	0x0802e610
 801f374:	0802eb9c 	.word	0x0802eb9c
 801f378:	0802e654 	.word	0x0802e654
 801f37c:	2400b498 	.word	0x2400b498
 801f380:	2400b48c 	.word	0x2400b48c

0801f384 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801f384:	b580      	push	{r7, lr}
 801f386:	b084      	sub	sp, #16
 801f388:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801f38a:	2300      	movs	r3, #0
 801f38c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801f38e:	2300      	movs	r3, #0
 801f390:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f392:	4b12      	ldr	r3, [pc, #72]	@ (801f3dc <tcp_kill_timewait+0x58>)
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	60fb      	str	r3, [r7, #12]
 801f398:	e012      	b.n	801f3c0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801f39a:	4b11      	ldr	r3, [pc, #68]	@ (801f3e0 <tcp_kill_timewait+0x5c>)
 801f39c:	681a      	ldr	r2, [r3, #0]
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	6a1b      	ldr	r3, [r3, #32]
 801f3a2:	1ad3      	subs	r3, r2, r3
 801f3a4:	687a      	ldr	r2, [r7, #4]
 801f3a6:	429a      	cmp	r2, r3
 801f3a8:	d807      	bhi.n	801f3ba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801f3aa:	4b0d      	ldr	r3, [pc, #52]	@ (801f3e0 <tcp_kill_timewait+0x5c>)
 801f3ac:	681a      	ldr	r2, [r3, #0]
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	6a1b      	ldr	r3, [r3, #32]
 801f3b2:	1ad3      	subs	r3, r2, r3
 801f3b4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	68db      	ldr	r3, [r3, #12]
 801f3be:	60fb      	str	r3, [r7, #12]
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d1e9      	bne.n	801f39a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801f3c6:	68bb      	ldr	r3, [r7, #8]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d002      	beq.n	801f3d2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801f3cc:	68b8      	ldr	r0, [r7, #8]
 801f3ce:	f7ff f9d9 	bl	801e784 <tcp_abort>
  }
}
 801f3d2:	bf00      	nop
 801f3d4:	3710      	adds	r7, #16
 801f3d6:	46bd      	mov	sp, r7
 801f3d8:	bd80      	pop	{r7, pc}
 801f3da:	bf00      	nop
 801f3dc:	2400b49c 	.word	0x2400b49c
 801f3e0:	2400b48c 	.word	0x2400b48c

0801f3e4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b082      	sub	sp, #8
 801f3e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801f3ea:	4b10      	ldr	r3, [pc, #64]	@ (801f42c <tcp_handle_closepend+0x48>)
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801f3f0:	e014      	b.n	801f41c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	68db      	ldr	r3, [r3, #12]
 801f3f6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	8b5b      	ldrh	r3, [r3, #26]
 801f3fc:	f003 0308 	and.w	r3, r3, #8
 801f400:	2b00      	cmp	r3, #0
 801f402:	d009      	beq.n	801f418 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	8b5b      	ldrh	r3, [r3, #26]
 801f408:	f023 0308 	bic.w	r3, r3, #8
 801f40c:	b29a      	uxth	r2, r3
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801f412:	6878      	ldr	r0, [r7, #4]
 801f414:	f7ff f862 	bl	801e4dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 801f418:	683b      	ldr	r3, [r7, #0]
 801f41a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d1e7      	bne.n	801f3f2 <tcp_handle_closepend+0xe>
  }
}
 801f422:	bf00      	nop
 801f424:	bf00      	nop
 801f426:	3708      	adds	r7, #8
 801f428:	46bd      	mov	sp, r7
 801f42a:	bd80      	pop	{r7, pc}
 801f42c:	2400b498 	.word	0x2400b498

0801f430 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801f430:	b580      	push	{r7, lr}
 801f432:	b084      	sub	sp, #16
 801f434:	af00      	add	r7, sp, #0
 801f436:	4603      	mov	r3, r0
 801f438:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801f43a:	2001      	movs	r0, #1
 801f43c:	f7fd fbde 	bl	801cbfc <memp_malloc>
 801f440:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	2b00      	cmp	r3, #0
 801f446:	d126      	bne.n	801f496 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801f448:	f7ff ffcc 	bl	801f3e4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801f44c:	f7ff ff9a 	bl	801f384 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801f450:	2001      	movs	r0, #1
 801f452:	f7fd fbd3 	bl	801cbfc <memp_malloc>
 801f456:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d11b      	bne.n	801f496 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801f45e:	2009      	movs	r0, #9
 801f460:	f7ff ff46 	bl	801f2f0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801f464:	2001      	movs	r0, #1
 801f466:	f7fd fbc9 	bl	801cbfc <memp_malloc>
 801f46a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d111      	bne.n	801f496 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801f472:	2008      	movs	r0, #8
 801f474:	f7ff ff3c 	bl	801f2f0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801f478:	2001      	movs	r0, #1
 801f47a:	f7fd fbbf 	bl	801cbfc <memp_malloc>
 801f47e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801f480:	68fb      	ldr	r3, [r7, #12]
 801f482:	2b00      	cmp	r3, #0
 801f484:	d107      	bne.n	801f496 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801f486:	79fb      	ldrb	r3, [r7, #7]
 801f488:	4618      	mov	r0, r3
 801f48a:	f7ff fee3 	bl	801f254 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801f48e:	2001      	movs	r0, #1
 801f490:	f7fd fbb4 	bl	801cbfc <memp_malloc>
 801f494:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801f496:	68fb      	ldr	r3, [r7, #12]
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d03f      	beq.n	801f51c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801f49c:	229c      	movs	r2, #156	@ 0x9c
 801f49e:	2100      	movs	r1, #0
 801f4a0:	68f8      	ldr	r0, [r7, #12]
 801f4a2:	f00a f90f 	bl	80296c4 <memset>
    pcb->prio = prio;
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	79fa      	ldrb	r2, [r7, #7]
 801f4aa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801f4b2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801f4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	22ff      	movs	r2, #255	@ 0xff
 801f4ca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801f4d2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	2206      	movs	r2, #6
 801f4d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	2206      	movs	r2, #6
 801f4e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f4e8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	2201      	movs	r2, #1
 801f4ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801f4f2:	4b0d      	ldr	r3, [pc, #52]	@ (801f528 <tcp_alloc+0xf8>)
 801f4f4:	681a      	ldr	r2, [r3, #0]
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801f4fa:	4b0c      	ldr	r3, [pc, #48]	@ (801f52c <tcp_alloc+0xfc>)
 801f4fc:	781a      	ldrb	r2, [r3, #0]
 801f4fe:	68fb      	ldr	r3, [r7, #12]
 801f500:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801f508:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	4a08      	ldr	r2, [pc, #32]	@ (801f530 <tcp_alloc+0x100>)
 801f510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	4a07      	ldr	r2, [pc, #28]	@ (801f534 <tcp_alloc+0x104>)
 801f518:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801f51c:	68fb      	ldr	r3, [r7, #12]
}
 801f51e:	4618      	mov	r0, r3
 801f520:	3710      	adds	r7, #16
 801f522:	46bd      	mov	sp, r7
 801f524:	bd80      	pop	{r7, pc}
 801f526:	bf00      	nop
 801f528:	2400b48c 	.word	0x2400b48c
 801f52c:	2400b4a2 	.word	0x2400b4a2
 801f530:	0801f1e9 	.word	0x0801f1e9
 801f534:	006ddd00 	.word	0x006ddd00

0801f538 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b082      	sub	sp, #8
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d107      	bne.n	801f556 <tcp_pcb_purge+0x1e>
 801f546:	4b21      	ldr	r3, [pc, #132]	@ (801f5cc <tcp_pcb_purge+0x94>)
 801f548:	f640 0251 	movw	r2, #2129	@ 0x851
 801f54c:	4920      	ldr	r1, [pc, #128]	@ (801f5d0 <tcp_pcb_purge+0x98>)
 801f54e:	4821      	ldr	r0, [pc, #132]	@ (801f5d4 <tcp_pcb_purge+0x9c>)
 801f550:	f009 ff0a 	bl	8029368 <iprintf>
 801f554:	e037      	b.n	801f5c6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	7d1b      	ldrb	r3, [r3, #20]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d033      	beq.n	801f5c6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801f562:	2b0a      	cmp	r3, #10
 801f564:	d02f      	beq.n	801f5c6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801f56a:	2b01      	cmp	r3, #1
 801f56c:	d02b      	beq.n	801f5c6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f572:	2b00      	cmp	r3, #0
 801f574:	d007      	beq.n	801f586 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7fe fa10 	bl	801d9a0 <pbuf_free>
      pcb->refused_data = NULL;
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	2200      	movs	r2, #0
 801f584:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d002      	beq.n	801f594 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801f58e:	6878      	ldr	r0, [r7, #4]
 801f590:	f000 f986 	bl	801f8a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f59a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f5a0:	4618      	mov	r0, r3
 801f5a2:	f7ff fdc7 	bl	801f134 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f5aa:	4618      	mov	r0, r3
 801f5ac:	f7ff fdc2 	bl	801f134 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	2200      	movs	r2, #0
 801f5b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	2200      	movs	r2, #0
 801f5c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801f5c6:	3708      	adds	r7, #8
 801f5c8:	46bd      	mov	sp, r7
 801f5ca:	bd80      	pop	{r7, pc}
 801f5cc:	0802e610 	.word	0x0802e610
 801f5d0:	0802ec5c 	.word	0x0802ec5c
 801f5d4:	0802e654 	.word	0x0802e654

0801f5d8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b084      	sub	sp, #16
 801f5dc:	af00      	add	r7, sp, #0
 801f5de:	6078      	str	r0, [r7, #4]
 801f5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d106      	bne.n	801f5f6 <tcp_pcb_remove+0x1e>
 801f5e8:	4b3e      	ldr	r3, [pc, #248]	@ (801f6e4 <tcp_pcb_remove+0x10c>)
 801f5ea:	f640 0283 	movw	r2, #2179	@ 0x883
 801f5ee:	493e      	ldr	r1, [pc, #248]	@ (801f6e8 <tcp_pcb_remove+0x110>)
 801f5f0:	483e      	ldr	r0, [pc, #248]	@ (801f6ec <tcp_pcb_remove+0x114>)
 801f5f2:	f009 feb9 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d106      	bne.n	801f60a <tcp_pcb_remove+0x32>
 801f5fc:	4b39      	ldr	r3, [pc, #228]	@ (801f6e4 <tcp_pcb_remove+0x10c>)
 801f5fe:	f640 0284 	movw	r2, #2180	@ 0x884
 801f602:	493b      	ldr	r1, [pc, #236]	@ (801f6f0 <tcp_pcb_remove+0x118>)
 801f604:	4839      	ldr	r0, [pc, #228]	@ (801f6ec <tcp_pcb_remove+0x114>)
 801f606:	f009 feaf 	bl	8029368 <iprintf>

  TCP_RMV(pcblist, pcb);
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	683a      	ldr	r2, [r7, #0]
 801f610:	429a      	cmp	r2, r3
 801f612:	d105      	bne.n	801f620 <tcp_pcb_remove+0x48>
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	68da      	ldr	r2, [r3, #12]
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	601a      	str	r2, [r3, #0]
 801f61e:	e013      	b.n	801f648 <tcp_pcb_remove+0x70>
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	60fb      	str	r3, [r7, #12]
 801f626:	e00c      	b.n	801f642 <tcp_pcb_remove+0x6a>
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	68db      	ldr	r3, [r3, #12]
 801f62c:	683a      	ldr	r2, [r7, #0]
 801f62e:	429a      	cmp	r2, r3
 801f630:	d104      	bne.n	801f63c <tcp_pcb_remove+0x64>
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	68da      	ldr	r2, [r3, #12]
 801f636:	68fb      	ldr	r3, [r7, #12]
 801f638:	60da      	str	r2, [r3, #12]
 801f63a:	e005      	b.n	801f648 <tcp_pcb_remove+0x70>
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	68db      	ldr	r3, [r3, #12]
 801f640:	60fb      	str	r3, [r7, #12]
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	2b00      	cmp	r3, #0
 801f646:	d1ef      	bne.n	801f628 <tcp_pcb_remove+0x50>
 801f648:	683b      	ldr	r3, [r7, #0]
 801f64a:	2200      	movs	r2, #0
 801f64c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801f64e:	6838      	ldr	r0, [r7, #0]
 801f650:	f7ff ff72 	bl	801f538 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	7d1b      	ldrb	r3, [r3, #20]
 801f658:	2b0a      	cmp	r3, #10
 801f65a:	d013      	beq.n	801f684 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801f65c:	683b      	ldr	r3, [r7, #0]
 801f65e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801f660:	2b01      	cmp	r3, #1
 801f662:	d00f      	beq.n	801f684 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801f664:	683b      	ldr	r3, [r7, #0]
 801f666:	8b5b      	ldrh	r3, [r3, #26]
 801f668:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d009      	beq.n	801f684 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801f670:	683b      	ldr	r3, [r7, #0]
 801f672:	8b5b      	ldrh	r3, [r3, #26]
 801f674:	f043 0302 	orr.w	r3, r3, #2
 801f678:	b29a      	uxth	r2, r3
 801f67a:	683b      	ldr	r3, [r7, #0]
 801f67c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801f67e:	6838      	ldr	r0, [r7, #0]
 801f680:	f002 ff68 	bl	8022554 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	7d1b      	ldrb	r3, [r3, #20]
 801f688:	2b01      	cmp	r3, #1
 801f68a:	d020      	beq.n	801f6ce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801f68c:	683b      	ldr	r3, [r7, #0]
 801f68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f690:	2b00      	cmp	r3, #0
 801f692:	d006      	beq.n	801f6a2 <tcp_pcb_remove+0xca>
 801f694:	4b13      	ldr	r3, [pc, #76]	@ (801f6e4 <tcp_pcb_remove+0x10c>)
 801f696:	f640 0293 	movw	r2, #2195	@ 0x893
 801f69a:	4916      	ldr	r1, [pc, #88]	@ (801f6f4 <tcp_pcb_remove+0x11c>)
 801f69c:	4813      	ldr	r0, [pc, #76]	@ (801f6ec <tcp_pcb_remove+0x114>)
 801f69e:	f009 fe63 	bl	8029368 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801f6a2:	683b      	ldr	r3, [r7, #0]
 801f6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	d006      	beq.n	801f6b8 <tcp_pcb_remove+0xe0>
 801f6aa:	4b0e      	ldr	r3, [pc, #56]	@ (801f6e4 <tcp_pcb_remove+0x10c>)
 801f6ac:	f640 0294 	movw	r2, #2196	@ 0x894
 801f6b0:	4911      	ldr	r1, [pc, #68]	@ (801f6f8 <tcp_pcb_remove+0x120>)
 801f6b2:	480e      	ldr	r0, [pc, #56]	@ (801f6ec <tcp_pcb_remove+0x114>)
 801f6b4:	f009 fe58 	bl	8029368 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801f6b8:	683b      	ldr	r3, [r7, #0]
 801f6ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d006      	beq.n	801f6ce <tcp_pcb_remove+0xf6>
 801f6c0:	4b08      	ldr	r3, [pc, #32]	@ (801f6e4 <tcp_pcb_remove+0x10c>)
 801f6c2:	f640 0296 	movw	r2, #2198	@ 0x896
 801f6c6:	490d      	ldr	r1, [pc, #52]	@ (801f6fc <tcp_pcb_remove+0x124>)
 801f6c8:	4808      	ldr	r0, [pc, #32]	@ (801f6ec <tcp_pcb_remove+0x114>)
 801f6ca:	f009 fe4d 	bl	8029368 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	2200      	movs	r2, #0
 801f6d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	2200      	movs	r2, #0
 801f6d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801f6da:	bf00      	nop
 801f6dc:	3710      	adds	r7, #16
 801f6de:	46bd      	mov	sp, r7
 801f6e0:	bd80      	pop	{r7, pc}
 801f6e2:	bf00      	nop
 801f6e4:	0802e610 	.word	0x0802e610
 801f6e8:	0802ec78 	.word	0x0802ec78
 801f6ec:	0802e654 	.word	0x0802e654
 801f6f0:	0802ec94 	.word	0x0802ec94
 801f6f4:	0802ecb4 	.word	0x0802ecb4
 801f6f8:	0802eccc 	.word	0x0802eccc
 801f6fc:	0802ece8 	.word	0x0802ece8

0801f700 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801f700:	b580      	push	{r7, lr}
 801f702:	b082      	sub	sp, #8
 801f704:	af00      	add	r7, sp, #0
 801f706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d106      	bne.n	801f71c <tcp_next_iss+0x1c>
 801f70e:	4b0a      	ldr	r3, [pc, #40]	@ (801f738 <tcp_next_iss+0x38>)
 801f710:	f640 02af 	movw	r2, #2223	@ 0x8af
 801f714:	4909      	ldr	r1, [pc, #36]	@ (801f73c <tcp_next_iss+0x3c>)
 801f716:	480a      	ldr	r0, [pc, #40]	@ (801f740 <tcp_next_iss+0x40>)
 801f718:	f009 fe26 	bl	8029368 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801f71c:	4b09      	ldr	r3, [pc, #36]	@ (801f744 <tcp_next_iss+0x44>)
 801f71e:	681a      	ldr	r2, [r3, #0]
 801f720:	4b09      	ldr	r3, [pc, #36]	@ (801f748 <tcp_next_iss+0x48>)
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	4413      	add	r3, r2
 801f726:	4a07      	ldr	r2, [pc, #28]	@ (801f744 <tcp_next_iss+0x44>)
 801f728:	6013      	str	r3, [r2, #0]
  return iss;
 801f72a:	4b06      	ldr	r3, [pc, #24]	@ (801f744 <tcp_next_iss+0x44>)
 801f72c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801f72e:	4618      	mov	r0, r3
 801f730:	3708      	adds	r7, #8
 801f732:	46bd      	mov	sp, r7
 801f734:	bd80      	pop	{r7, pc}
 801f736:	bf00      	nop
 801f738:	0802e610 	.word	0x0802e610
 801f73c:	0802ed00 	.word	0x0802ed00
 801f740:	0802e654 	.word	0x0802e654
 801f744:	24000064 	.word	0x24000064
 801f748:	2400b48c 	.word	0x2400b48c

0801f74c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801f74c:	b580      	push	{r7, lr}
 801f74e:	b086      	sub	sp, #24
 801f750:	af00      	add	r7, sp, #0
 801f752:	4603      	mov	r3, r0
 801f754:	60b9      	str	r1, [r7, #8]
 801f756:	607a      	str	r2, [r7, #4]
 801f758:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d106      	bne.n	801f76e <tcp_eff_send_mss_netif+0x22>
 801f760:	4b14      	ldr	r3, [pc, #80]	@ (801f7b4 <tcp_eff_send_mss_netif+0x68>)
 801f762:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801f766:	4914      	ldr	r1, [pc, #80]	@ (801f7b8 <tcp_eff_send_mss_netif+0x6c>)
 801f768:	4814      	ldr	r0, [pc, #80]	@ (801f7bc <tcp_eff_send_mss_netif+0x70>)
 801f76a:	f009 fdfd 	bl	8029368 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801f76e:	68bb      	ldr	r3, [r7, #8]
 801f770:	2b00      	cmp	r3, #0
 801f772:	d101      	bne.n	801f778 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801f774:	89fb      	ldrh	r3, [r7, #14]
 801f776:	e019      	b.n	801f7ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801f778:	68bb      	ldr	r3, [r7, #8]
 801f77a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f77c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801f77e:	8afb      	ldrh	r3, [r7, #22]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d012      	beq.n	801f7aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801f784:	2328      	movs	r3, #40	@ 0x28
 801f786:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801f788:	8afa      	ldrh	r2, [r7, #22]
 801f78a:	8abb      	ldrh	r3, [r7, #20]
 801f78c:	429a      	cmp	r2, r3
 801f78e:	d904      	bls.n	801f79a <tcp_eff_send_mss_netif+0x4e>
 801f790:	8afa      	ldrh	r2, [r7, #22]
 801f792:	8abb      	ldrh	r3, [r7, #20]
 801f794:	1ad3      	subs	r3, r2, r3
 801f796:	b29b      	uxth	r3, r3
 801f798:	e000      	b.n	801f79c <tcp_eff_send_mss_netif+0x50>
 801f79a:	2300      	movs	r3, #0
 801f79c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801f79e:	8a7a      	ldrh	r2, [r7, #18]
 801f7a0:	89fb      	ldrh	r3, [r7, #14]
 801f7a2:	4293      	cmp	r3, r2
 801f7a4:	bf28      	it	cs
 801f7a6:	4613      	movcs	r3, r2
 801f7a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801f7aa:	89fb      	ldrh	r3, [r7, #14]
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	3718      	adds	r7, #24
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	bd80      	pop	{r7, pc}
 801f7b4:	0802e610 	.word	0x0802e610
 801f7b8:	0802ed1c 	.word	0x0802ed1c
 801f7bc:	0802e654 	.word	0x0802e654

0801f7c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801f7c0:	b580      	push	{r7, lr}
 801f7c2:	b084      	sub	sp, #16
 801f7c4:	af00      	add	r7, sp, #0
 801f7c6:	6078      	str	r0, [r7, #4]
 801f7c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801f7ca:	683b      	ldr	r3, [r7, #0]
 801f7cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d119      	bne.n	801f808 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801f7d4:	4b10      	ldr	r3, [pc, #64]	@ (801f818 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801f7d6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801f7da:	4910      	ldr	r1, [pc, #64]	@ (801f81c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801f7dc:	4810      	ldr	r0, [pc, #64]	@ (801f820 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801f7de:	f009 fdc3 	bl	8029368 <iprintf>

  while (pcb != NULL) {
 801f7e2:	e011      	b.n	801f808 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	681a      	ldr	r2, [r3, #0]
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	429a      	cmp	r2, r3
 801f7ee:	d108      	bne.n	801f802 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	68db      	ldr	r3, [r3, #12]
 801f7f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801f7f6:	68f8      	ldr	r0, [r7, #12]
 801f7f8:	f7fe ffc4 	bl	801e784 <tcp_abort>
      pcb = next;
 801f7fc:	68bb      	ldr	r3, [r7, #8]
 801f7fe:	60fb      	str	r3, [r7, #12]
 801f800:	e002      	b.n	801f808 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801f802:	68fb      	ldr	r3, [r7, #12]
 801f804:	68db      	ldr	r3, [r3, #12]
 801f806:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d1ea      	bne.n	801f7e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801f80e:	bf00      	nop
 801f810:	bf00      	nop
 801f812:	3710      	adds	r7, #16
 801f814:	46bd      	mov	sp, r7
 801f816:	bd80      	pop	{r7, pc}
 801f818:	0802e610 	.word	0x0802e610
 801f81c:	0802ed44 	.word	0x0802ed44
 801f820:	0802e654 	.word	0x0802e654

0801f824 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f824:	b580      	push	{r7, lr}
 801f826:	b084      	sub	sp, #16
 801f828:	af00      	add	r7, sp, #0
 801f82a:	6078      	str	r0, [r7, #4]
 801f82c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	2b00      	cmp	r3, #0
 801f832:	d02a      	beq.n	801f88a <tcp_netif_ip_addr_changed+0x66>
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d026      	beq.n	801f88a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801f83c:	4b15      	ldr	r3, [pc, #84]	@ (801f894 <tcp_netif_ip_addr_changed+0x70>)
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	4619      	mov	r1, r3
 801f842:	6878      	ldr	r0, [r7, #4]
 801f844:	f7ff ffbc 	bl	801f7c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801f848:	4b13      	ldr	r3, [pc, #76]	@ (801f898 <tcp_netif_ip_addr_changed+0x74>)
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	4619      	mov	r1, r3
 801f84e:	6878      	ldr	r0, [r7, #4]
 801f850:	f7ff ffb6 	bl	801f7c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d017      	beq.n	801f88a <tcp_netif_ip_addr_changed+0x66>
 801f85a:	683b      	ldr	r3, [r7, #0]
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d013      	beq.n	801f88a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f862:	4b0e      	ldr	r3, [pc, #56]	@ (801f89c <tcp_netif_ip_addr_changed+0x78>)
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	60fb      	str	r3, [r7, #12]
 801f868:	e00c      	b.n	801f884 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	681a      	ldr	r2, [r3, #0]
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	429a      	cmp	r2, r3
 801f874:	d103      	bne.n	801f87e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801f876:	683b      	ldr	r3, [r7, #0]
 801f878:	681a      	ldr	r2, [r3, #0]
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	68db      	ldr	r3, [r3, #12]
 801f882:	60fb      	str	r3, [r7, #12]
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d1ef      	bne.n	801f86a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801f88a:	bf00      	nop
 801f88c:	3710      	adds	r7, #16
 801f88e:	46bd      	mov	sp, r7
 801f890:	bd80      	pop	{r7, pc}
 801f892:	bf00      	nop
 801f894:	2400b498 	.word	0x2400b498
 801f898:	2400b490 	.word	0x2400b490
 801f89c:	2400b494 	.word	0x2400b494

0801f8a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801f8a0:	b580      	push	{r7, lr}
 801f8a2:	b082      	sub	sp, #8
 801f8a4:	af00      	add	r7, sp, #0
 801f8a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d007      	beq.n	801f8c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f8b4:	4618      	mov	r0, r3
 801f8b6:	f7ff fc3d 	bl	801f134 <tcp_segs_free>
    pcb->ooseq = NULL;
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	2200      	movs	r2, #0
 801f8be:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801f8c0:	bf00      	nop
 801f8c2:	3708      	adds	r7, #8
 801f8c4:	46bd      	mov	sp, r7
 801f8c6:	bd80      	pop	{r7, pc}

0801f8c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801f8c8:	b590      	push	{r4, r7, lr}
 801f8ca:	b08d      	sub	sp, #52	@ 0x34
 801f8cc:	af04      	add	r7, sp, #16
 801f8ce:	6078      	str	r0, [r7, #4]
 801f8d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d105      	bne.n	801f8e4 <tcp_input+0x1c>
 801f8d8:	4b9b      	ldr	r3, [pc, #620]	@ (801fb48 <tcp_input+0x280>)
 801f8da:	2283      	movs	r2, #131	@ 0x83
 801f8dc:	499b      	ldr	r1, [pc, #620]	@ (801fb4c <tcp_input+0x284>)
 801f8de:	489c      	ldr	r0, [pc, #624]	@ (801fb50 <tcp_input+0x288>)
 801f8e0:	f009 fd42 	bl	8029368 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801f8e4:	687b      	ldr	r3, [r7, #4]
 801f8e6:	685b      	ldr	r3, [r3, #4]
 801f8e8:	4a9a      	ldr	r2, [pc, #616]	@ (801fb54 <tcp_input+0x28c>)
 801f8ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	895b      	ldrh	r3, [r3, #10]
 801f8f0:	2b13      	cmp	r3, #19
 801f8f2:	f240 83d1 	bls.w	8020098 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801f8f6:	4b98      	ldr	r3, [pc, #608]	@ (801fb58 <tcp_input+0x290>)
 801f8f8:	695b      	ldr	r3, [r3, #20]
 801f8fa:	4a97      	ldr	r2, [pc, #604]	@ (801fb58 <tcp_input+0x290>)
 801f8fc:	6812      	ldr	r2, [r2, #0]
 801f8fe:	4611      	mov	r1, r2
 801f900:	4618      	mov	r0, r3
 801f902:	f007 fe53 	bl	80275ac <ip4_addr_isbroadcast_u32>
 801f906:	4603      	mov	r3, r0
 801f908:	2b00      	cmp	r3, #0
 801f90a:	f040 83c7 	bne.w	802009c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801f90e:	4b92      	ldr	r3, [pc, #584]	@ (801fb58 <tcp_input+0x290>)
 801f910:	695b      	ldr	r3, [r3, #20]
 801f912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801f916:	2be0      	cmp	r3, #224	@ 0xe0
 801f918:	f000 83c0 	beq.w	802009c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801f91c:	4b8d      	ldr	r3, [pc, #564]	@ (801fb54 <tcp_input+0x28c>)
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	899b      	ldrh	r3, [r3, #12]
 801f922:	b29b      	uxth	r3, r3
 801f924:	4618      	mov	r0, r3
 801f926:	f7fc f94b 	bl	801bbc0 <lwip_htons>
 801f92a:	4603      	mov	r3, r0
 801f92c:	0b1b      	lsrs	r3, r3, #12
 801f92e:	b29b      	uxth	r3, r3
 801f930:	b2db      	uxtb	r3, r3
 801f932:	009b      	lsls	r3, r3, #2
 801f934:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801f936:	7cbb      	ldrb	r3, [r7, #18]
 801f938:	2b13      	cmp	r3, #19
 801f93a:	f240 83b1 	bls.w	80200a0 <tcp_input+0x7d8>
 801f93e:	7cbb      	ldrb	r3, [r7, #18]
 801f940:	b29a      	uxth	r2, r3
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	891b      	ldrh	r3, [r3, #8]
 801f946:	429a      	cmp	r2, r3
 801f948:	f200 83aa 	bhi.w	80200a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801f94c:	7cbb      	ldrb	r3, [r7, #18]
 801f94e:	b29b      	uxth	r3, r3
 801f950:	3b14      	subs	r3, #20
 801f952:	b29a      	uxth	r2, r3
 801f954:	4b81      	ldr	r3, [pc, #516]	@ (801fb5c <tcp_input+0x294>)
 801f956:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801f958:	4b81      	ldr	r3, [pc, #516]	@ (801fb60 <tcp_input+0x298>)
 801f95a:	2200      	movs	r2, #0
 801f95c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801f95e:	687b      	ldr	r3, [r7, #4]
 801f960:	895a      	ldrh	r2, [r3, #10]
 801f962:	7cbb      	ldrb	r3, [r7, #18]
 801f964:	b29b      	uxth	r3, r3
 801f966:	429a      	cmp	r2, r3
 801f968:	d309      	bcc.n	801f97e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801f96a:	4b7c      	ldr	r3, [pc, #496]	@ (801fb5c <tcp_input+0x294>)
 801f96c:	881a      	ldrh	r2, [r3, #0]
 801f96e:	4b7d      	ldr	r3, [pc, #500]	@ (801fb64 <tcp_input+0x29c>)
 801f970:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f972:	7cbb      	ldrb	r3, [r7, #18]
 801f974:	4619      	mov	r1, r3
 801f976:	6878      	ldr	r0, [r7, #4]
 801f978:	f7fd ff8c 	bl	801d894 <pbuf_remove_header>
 801f97c:	e04e      	b.n	801fa1c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	2b00      	cmp	r3, #0
 801f984:	d105      	bne.n	801f992 <tcp_input+0xca>
 801f986:	4b70      	ldr	r3, [pc, #448]	@ (801fb48 <tcp_input+0x280>)
 801f988:	22c2      	movs	r2, #194	@ 0xc2
 801f98a:	4977      	ldr	r1, [pc, #476]	@ (801fb68 <tcp_input+0x2a0>)
 801f98c:	4870      	ldr	r0, [pc, #448]	@ (801fb50 <tcp_input+0x288>)
 801f98e:	f009 fceb 	bl	8029368 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801f992:	2114      	movs	r1, #20
 801f994:	6878      	ldr	r0, [r7, #4]
 801f996:	f7fd ff7d 	bl	801d894 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	895a      	ldrh	r2, [r3, #10]
 801f99e:	4b71      	ldr	r3, [pc, #452]	@ (801fb64 <tcp_input+0x29c>)
 801f9a0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801f9a2:	4b6e      	ldr	r3, [pc, #440]	@ (801fb5c <tcp_input+0x294>)
 801f9a4:	881a      	ldrh	r2, [r3, #0]
 801f9a6:	4b6f      	ldr	r3, [pc, #444]	@ (801fb64 <tcp_input+0x29c>)
 801f9a8:	881b      	ldrh	r3, [r3, #0]
 801f9aa:	1ad3      	subs	r3, r2, r3
 801f9ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801f9ae:	4b6d      	ldr	r3, [pc, #436]	@ (801fb64 <tcp_input+0x29c>)
 801f9b0:	881b      	ldrh	r3, [r3, #0]
 801f9b2:	4619      	mov	r1, r3
 801f9b4:	6878      	ldr	r0, [r7, #4]
 801f9b6:	f7fd ff6d 	bl	801d894 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	895b      	ldrh	r3, [r3, #10]
 801f9c0:	8a3a      	ldrh	r2, [r7, #16]
 801f9c2:	429a      	cmp	r2, r3
 801f9c4:	f200 836e 	bhi.w	80200a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	685b      	ldr	r3, [r3, #4]
 801f9ce:	4a64      	ldr	r2, [pc, #400]	@ (801fb60 <tcp_input+0x298>)
 801f9d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	681b      	ldr	r3, [r3, #0]
 801f9d6:	8a3a      	ldrh	r2, [r7, #16]
 801f9d8:	4611      	mov	r1, r2
 801f9da:	4618      	mov	r0, r3
 801f9dc:	f7fd ff5a 	bl	801d894 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	891a      	ldrh	r2, [r3, #8]
 801f9e4:	8a3b      	ldrh	r3, [r7, #16]
 801f9e6:	1ad3      	subs	r3, r2, r3
 801f9e8:	b29a      	uxth	r2, r3
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	895b      	ldrh	r3, [r3, #10]
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	d005      	beq.n	801fa02 <tcp_input+0x13a>
 801f9f6:	4b54      	ldr	r3, [pc, #336]	@ (801fb48 <tcp_input+0x280>)
 801f9f8:	22df      	movs	r2, #223	@ 0xdf
 801f9fa:	495c      	ldr	r1, [pc, #368]	@ (801fb6c <tcp_input+0x2a4>)
 801f9fc:	4854      	ldr	r0, [pc, #336]	@ (801fb50 <tcp_input+0x288>)
 801f9fe:	f009 fcb3 	bl	8029368 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	891a      	ldrh	r2, [r3, #8]
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	891b      	ldrh	r3, [r3, #8]
 801fa0c:	429a      	cmp	r2, r3
 801fa0e:	d005      	beq.n	801fa1c <tcp_input+0x154>
 801fa10:	4b4d      	ldr	r3, [pc, #308]	@ (801fb48 <tcp_input+0x280>)
 801fa12:	22e0      	movs	r2, #224	@ 0xe0
 801fa14:	4956      	ldr	r1, [pc, #344]	@ (801fb70 <tcp_input+0x2a8>)
 801fa16:	484e      	ldr	r0, [pc, #312]	@ (801fb50 <tcp_input+0x288>)
 801fa18:	f009 fca6 	bl	8029368 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801fa1c:	4b4d      	ldr	r3, [pc, #308]	@ (801fb54 <tcp_input+0x28c>)
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	881b      	ldrh	r3, [r3, #0]
 801fa22:	b29b      	uxth	r3, r3
 801fa24:	4a4b      	ldr	r2, [pc, #300]	@ (801fb54 <tcp_input+0x28c>)
 801fa26:	6814      	ldr	r4, [r2, #0]
 801fa28:	4618      	mov	r0, r3
 801fa2a:	f7fc f8c9 	bl	801bbc0 <lwip_htons>
 801fa2e:	4603      	mov	r3, r0
 801fa30:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801fa32:	4b48      	ldr	r3, [pc, #288]	@ (801fb54 <tcp_input+0x28c>)
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	885b      	ldrh	r3, [r3, #2]
 801fa38:	b29b      	uxth	r3, r3
 801fa3a:	4a46      	ldr	r2, [pc, #280]	@ (801fb54 <tcp_input+0x28c>)
 801fa3c:	6814      	ldr	r4, [r2, #0]
 801fa3e:	4618      	mov	r0, r3
 801fa40:	f7fc f8be 	bl	801bbc0 <lwip_htons>
 801fa44:	4603      	mov	r3, r0
 801fa46:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801fa48:	4b42      	ldr	r3, [pc, #264]	@ (801fb54 <tcp_input+0x28c>)
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	685b      	ldr	r3, [r3, #4]
 801fa4e:	4a41      	ldr	r2, [pc, #260]	@ (801fb54 <tcp_input+0x28c>)
 801fa50:	6814      	ldr	r4, [r2, #0]
 801fa52:	4618      	mov	r0, r3
 801fa54:	f7fc f8c9 	bl	801bbea <lwip_htonl>
 801fa58:	4603      	mov	r3, r0
 801fa5a:	6063      	str	r3, [r4, #4]
 801fa5c:	6863      	ldr	r3, [r4, #4]
 801fa5e:	4a45      	ldr	r2, [pc, #276]	@ (801fb74 <tcp_input+0x2ac>)
 801fa60:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801fa62:	4b3c      	ldr	r3, [pc, #240]	@ (801fb54 <tcp_input+0x28c>)
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	689b      	ldr	r3, [r3, #8]
 801fa68:	4a3a      	ldr	r2, [pc, #232]	@ (801fb54 <tcp_input+0x28c>)
 801fa6a:	6814      	ldr	r4, [r2, #0]
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	f7fc f8bc 	bl	801bbea <lwip_htonl>
 801fa72:	4603      	mov	r3, r0
 801fa74:	60a3      	str	r3, [r4, #8]
 801fa76:	68a3      	ldr	r3, [r4, #8]
 801fa78:	4a3f      	ldr	r2, [pc, #252]	@ (801fb78 <tcp_input+0x2b0>)
 801fa7a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801fa7c:	4b35      	ldr	r3, [pc, #212]	@ (801fb54 <tcp_input+0x28c>)
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	89db      	ldrh	r3, [r3, #14]
 801fa82:	b29b      	uxth	r3, r3
 801fa84:	4a33      	ldr	r2, [pc, #204]	@ (801fb54 <tcp_input+0x28c>)
 801fa86:	6814      	ldr	r4, [r2, #0]
 801fa88:	4618      	mov	r0, r3
 801fa8a:	f7fc f899 	bl	801bbc0 <lwip_htons>
 801fa8e:	4603      	mov	r3, r0
 801fa90:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801fa92:	4b30      	ldr	r3, [pc, #192]	@ (801fb54 <tcp_input+0x28c>)
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	899b      	ldrh	r3, [r3, #12]
 801fa98:	b29b      	uxth	r3, r3
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	f7fc f890 	bl	801bbc0 <lwip_htons>
 801faa0:	4603      	mov	r3, r0
 801faa2:	b2db      	uxtb	r3, r3
 801faa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801faa8:	b2da      	uxtb	r2, r3
 801faaa:	4b34      	ldr	r3, [pc, #208]	@ (801fb7c <tcp_input+0x2b4>)
 801faac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	891a      	ldrh	r2, [r3, #8]
 801fab2:	4b33      	ldr	r3, [pc, #204]	@ (801fb80 <tcp_input+0x2b8>)
 801fab4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801fab6:	4b31      	ldr	r3, [pc, #196]	@ (801fb7c <tcp_input+0x2b4>)
 801fab8:	781b      	ldrb	r3, [r3, #0]
 801faba:	f003 0303 	and.w	r3, r3, #3
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	d00c      	beq.n	801fadc <tcp_input+0x214>
    tcplen++;
 801fac2:	4b2f      	ldr	r3, [pc, #188]	@ (801fb80 <tcp_input+0x2b8>)
 801fac4:	881b      	ldrh	r3, [r3, #0]
 801fac6:	3301      	adds	r3, #1
 801fac8:	b29a      	uxth	r2, r3
 801faca:	4b2d      	ldr	r3, [pc, #180]	@ (801fb80 <tcp_input+0x2b8>)
 801facc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	891a      	ldrh	r2, [r3, #8]
 801fad2:	4b2b      	ldr	r3, [pc, #172]	@ (801fb80 <tcp_input+0x2b8>)
 801fad4:	881b      	ldrh	r3, [r3, #0]
 801fad6:	429a      	cmp	r2, r3
 801fad8:	f200 82e6 	bhi.w	80200a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801fadc:	2300      	movs	r3, #0
 801fade:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801fae0:	4b28      	ldr	r3, [pc, #160]	@ (801fb84 <tcp_input+0x2bc>)
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	61fb      	str	r3, [r7, #28]
 801fae6:	e09d      	b.n	801fc24 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801fae8:	69fb      	ldr	r3, [r7, #28]
 801faea:	7d1b      	ldrb	r3, [r3, #20]
 801faec:	2b00      	cmp	r3, #0
 801faee:	d105      	bne.n	801fafc <tcp_input+0x234>
 801faf0:	4b15      	ldr	r3, [pc, #84]	@ (801fb48 <tcp_input+0x280>)
 801faf2:	22fb      	movs	r2, #251	@ 0xfb
 801faf4:	4924      	ldr	r1, [pc, #144]	@ (801fb88 <tcp_input+0x2c0>)
 801faf6:	4816      	ldr	r0, [pc, #88]	@ (801fb50 <tcp_input+0x288>)
 801faf8:	f009 fc36 	bl	8029368 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801fafc:	69fb      	ldr	r3, [r7, #28]
 801fafe:	7d1b      	ldrb	r3, [r3, #20]
 801fb00:	2b0a      	cmp	r3, #10
 801fb02:	d105      	bne.n	801fb10 <tcp_input+0x248>
 801fb04:	4b10      	ldr	r3, [pc, #64]	@ (801fb48 <tcp_input+0x280>)
 801fb06:	22fc      	movs	r2, #252	@ 0xfc
 801fb08:	4920      	ldr	r1, [pc, #128]	@ (801fb8c <tcp_input+0x2c4>)
 801fb0a:	4811      	ldr	r0, [pc, #68]	@ (801fb50 <tcp_input+0x288>)
 801fb0c:	f009 fc2c 	bl	8029368 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801fb10:	69fb      	ldr	r3, [r7, #28]
 801fb12:	7d1b      	ldrb	r3, [r3, #20]
 801fb14:	2b01      	cmp	r3, #1
 801fb16:	d105      	bne.n	801fb24 <tcp_input+0x25c>
 801fb18:	4b0b      	ldr	r3, [pc, #44]	@ (801fb48 <tcp_input+0x280>)
 801fb1a:	22fd      	movs	r2, #253	@ 0xfd
 801fb1c:	491c      	ldr	r1, [pc, #112]	@ (801fb90 <tcp_input+0x2c8>)
 801fb1e:	480c      	ldr	r0, [pc, #48]	@ (801fb50 <tcp_input+0x288>)
 801fb20:	f009 fc22 	bl	8029368 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fb24:	69fb      	ldr	r3, [r7, #28]
 801fb26:	7a1b      	ldrb	r3, [r3, #8]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d033      	beq.n	801fb94 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fb2c:	69fb      	ldr	r3, [r7, #28]
 801fb2e:	7a1a      	ldrb	r2, [r3, #8]
 801fb30:	4b09      	ldr	r3, [pc, #36]	@ (801fb58 <tcp_input+0x290>)
 801fb32:	685b      	ldr	r3, [r3, #4]
 801fb34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801fb38:	3301      	adds	r3, #1
 801fb3a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d029      	beq.n	801fb94 <tcp_input+0x2cc>
      prev = pcb;
 801fb40:	69fb      	ldr	r3, [r7, #28]
 801fb42:	61bb      	str	r3, [r7, #24]
      continue;
 801fb44:	e06b      	b.n	801fc1e <tcp_input+0x356>
 801fb46:	bf00      	nop
 801fb48:	0802ed78 	.word	0x0802ed78
 801fb4c:	0802edac 	.word	0x0802edac
 801fb50:	0802edc4 	.word	0x0802edc4
 801fb54:	2400b4b4 	.word	0x2400b4b4
 801fb58:	24008540 	.word	0x24008540
 801fb5c:	2400b4b8 	.word	0x2400b4b8
 801fb60:	2400b4bc 	.word	0x2400b4bc
 801fb64:	2400b4ba 	.word	0x2400b4ba
 801fb68:	0802edec 	.word	0x0802edec
 801fb6c:	0802edfc 	.word	0x0802edfc
 801fb70:	0802ee08 	.word	0x0802ee08
 801fb74:	2400b4c4 	.word	0x2400b4c4
 801fb78:	2400b4c8 	.word	0x2400b4c8
 801fb7c:	2400b4d0 	.word	0x2400b4d0
 801fb80:	2400b4ce 	.word	0x2400b4ce
 801fb84:	2400b498 	.word	0x2400b498
 801fb88:	0802ee28 	.word	0x0802ee28
 801fb8c:	0802ee50 	.word	0x0802ee50
 801fb90:	0802ee7c 	.word	0x0802ee7c
    }

    if (pcb->remote_port == tcphdr->src &&
 801fb94:	69fb      	ldr	r3, [r7, #28]
 801fb96:	8b1a      	ldrh	r2, [r3, #24]
 801fb98:	4b72      	ldr	r3, [pc, #456]	@ (801fd64 <tcp_input+0x49c>)
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	881b      	ldrh	r3, [r3, #0]
 801fb9e:	b29b      	uxth	r3, r3
 801fba0:	429a      	cmp	r2, r3
 801fba2:	d13a      	bne.n	801fc1a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801fba4:	69fb      	ldr	r3, [r7, #28]
 801fba6:	8ada      	ldrh	r2, [r3, #22]
 801fba8:	4b6e      	ldr	r3, [pc, #440]	@ (801fd64 <tcp_input+0x49c>)
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	885b      	ldrh	r3, [r3, #2]
 801fbae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801fbb0:	429a      	cmp	r2, r3
 801fbb2:	d132      	bne.n	801fc1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801fbb4:	69fb      	ldr	r3, [r7, #28]
 801fbb6:	685a      	ldr	r2, [r3, #4]
 801fbb8:	4b6b      	ldr	r3, [pc, #428]	@ (801fd68 <tcp_input+0x4a0>)
 801fbba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801fbbc:	429a      	cmp	r2, r3
 801fbbe:	d12c      	bne.n	801fc1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fbc0:	69fb      	ldr	r3, [r7, #28]
 801fbc2:	681a      	ldr	r2, [r3, #0]
 801fbc4:	4b68      	ldr	r3, [pc, #416]	@ (801fd68 <tcp_input+0x4a0>)
 801fbc6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801fbc8:	429a      	cmp	r2, r3
 801fbca:	d126      	bne.n	801fc1a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801fbcc:	69fb      	ldr	r3, [r7, #28]
 801fbce:	68db      	ldr	r3, [r3, #12]
 801fbd0:	69fa      	ldr	r2, [r7, #28]
 801fbd2:	429a      	cmp	r2, r3
 801fbd4:	d106      	bne.n	801fbe4 <tcp_input+0x31c>
 801fbd6:	4b65      	ldr	r3, [pc, #404]	@ (801fd6c <tcp_input+0x4a4>)
 801fbd8:	f240 120d 	movw	r2, #269	@ 0x10d
 801fbdc:	4964      	ldr	r1, [pc, #400]	@ (801fd70 <tcp_input+0x4a8>)
 801fbde:	4865      	ldr	r0, [pc, #404]	@ (801fd74 <tcp_input+0x4ac>)
 801fbe0:	f009 fbc2 	bl	8029368 <iprintf>
      if (prev != NULL) {
 801fbe4:	69bb      	ldr	r3, [r7, #24]
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d00a      	beq.n	801fc00 <tcp_input+0x338>
        prev->next = pcb->next;
 801fbea:	69fb      	ldr	r3, [r7, #28]
 801fbec:	68da      	ldr	r2, [r3, #12]
 801fbee:	69bb      	ldr	r3, [r7, #24]
 801fbf0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801fbf2:	4b61      	ldr	r3, [pc, #388]	@ (801fd78 <tcp_input+0x4b0>)
 801fbf4:	681a      	ldr	r2, [r3, #0]
 801fbf6:	69fb      	ldr	r3, [r7, #28]
 801fbf8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801fbfa:	4a5f      	ldr	r2, [pc, #380]	@ (801fd78 <tcp_input+0x4b0>)
 801fbfc:	69fb      	ldr	r3, [r7, #28]
 801fbfe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801fc00:	69fb      	ldr	r3, [r7, #28]
 801fc02:	68db      	ldr	r3, [r3, #12]
 801fc04:	69fa      	ldr	r2, [r7, #28]
 801fc06:	429a      	cmp	r2, r3
 801fc08:	d111      	bne.n	801fc2e <tcp_input+0x366>
 801fc0a:	4b58      	ldr	r3, [pc, #352]	@ (801fd6c <tcp_input+0x4a4>)
 801fc0c:	f240 1215 	movw	r2, #277	@ 0x115
 801fc10:	495a      	ldr	r1, [pc, #360]	@ (801fd7c <tcp_input+0x4b4>)
 801fc12:	4858      	ldr	r0, [pc, #352]	@ (801fd74 <tcp_input+0x4ac>)
 801fc14:	f009 fba8 	bl	8029368 <iprintf>
      break;
 801fc18:	e009      	b.n	801fc2e <tcp_input+0x366>
    }
    prev = pcb;
 801fc1a:	69fb      	ldr	r3, [r7, #28]
 801fc1c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801fc1e:	69fb      	ldr	r3, [r7, #28]
 801fc20:	68db      	ldr	r3, [r3, #12]
 801fc22:	61fb      	str	r3, [r7, #28]
 801fc24:	69fb      	ldr	r3, [r7, #28]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	f47f af5e 	bne.w	801fae8 <tcp_input+0x220>
 801fc2c:	e000      	b.n	801fc30 <tcp_input+0x368>
      break;
 801fc2e:	bf00      	nop
  }

  if (pcb == NULL) {
 801fc30:	69fb      	ldr	r3, [r7, #28]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	f040 80aa 	bne.w	801fd8c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801fc38:	4b51      	ldr	r3, [pc, #324]	@ (801fd80 <tcp_input+0x4b8>)
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	61fb      	str	r3, [r7, #28]
 801fc3e:	e03f      	b.n	801fcc0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801fc40:	69fb      	ldr	r3, [r7, #28]
 801fc42:	7d1b      	ldrb	r3, [r3, #20]
 801fc44:	2b0a      	cmp	r3, #10
 801fc46:	d006      	beq.n	801fc56 <tcp_input+0x38e>
 801fc48:	4b48      	ldr	r3, [pc, #288]	@ (801fd6c <tcp_input+0x4a4>)
 801fc4a:	f240 121f 	movw	r2, #287	@ 0x11f
 801fc4e:	494d      	ldr	r1, [pc, #308]	@ (801fd84 <tcp_input+0x4bc>)
 801fc50:	4848      	ldr	r0, [pc, #288]	@ (801fd74 <tcp_input+0x4ac>)
 801fc52:	f009 fb89 	bl	8029368 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fc56:	69fb      	ldr	r3, [r7, #28]
 801fc58:	7a1b      	ldrb	r3, [r3, #8]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d009      	beq.n	801fc72 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fc5e:	69fb      	ldr	r3, [r7, #28]
 801fc60:	7a1a      	ldrb	r2, [r3, #8]
 801fc62:	4b41      	ldr	r3, [pc, #260]	@ (801fd68 <tcp_input+0x4a0>)
 801fc64:	685b      	ldr	r3, [r3, #4]
 801fc66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801fc6a:	3301      	adds	r3, #1
 801fc6c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fc6e:	429a      	cmp	r2, r3
 801fc70:	d122      	bne.n	801fcb8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801fc72:	69fb      	ldr	r3, [r7, #28]
 801fc74:	8b1a      	ldrh	r2, [r3, #24]
 801fc76:	4b3b      	ldr	r3, [pc, #236]	@ (801fd64 <tcp_input+0x49c>)
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	881b      	ldrh	r3, [r3, #0]
 801fc7c:	b29b      	uxth	r3, r3
 801fc7e:	429a      	cmp	r2, r3
 801fc80:	d11b      	bne.n	801fcba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801fc82:	69fb      	ldr	r3, [r7, #28]
 801fc84:	8ada      	ldrh	r2, [r3, #22]
 801fc86:	4b37      	ldr	r3, [pc, #220]	@ (801fd64 <tcp_input+0x49c>)
 801fc88:	681b      	ldr	r3, [r3, #0]
 801fc8a:	885b      	ldrh	r3, [r3, #2]
 801fc8c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801fc8e:	429a      	cmp	r2, r3
 801fc90:	d113      	bne.n	801fcba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801fc92:	69fb      	ldr	r3, [r7, #28]
 801fc94:	685a      	ldr	r2, [r3, #4]
 801fc96:	4b34      	ldr	r3, [pc, #208]	@ (801fd68 <tcp_input+0x4a0>)
 801fc98:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801fc9a:	429a      	cmp	r2, r3
 801fc9c:	d10d      	bne.n	801fcba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fc9e:	69fb      	ldr	r3, [r7, #28]
 801fca0:	681a      	ldr	r2, [r3, #0]
 801fca2:	4b31      	ldr	r3, [pc, #196]	@ (801fd68 <tcp_input+0x4a0>)
 801fca4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801fca6:	429a      	cmp	r2, r3
 801fca8:	d107      	bne.n	801fcba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801fcaa:	69f8      	ldr	r0, [r7, #28]
 801fcac:	f000 fb56 	bl	802035c <tcp_timewait_input>
        }
        pbuf_free(p);
 801fcb0:	6878      	ldr	r0, [r7, #4]
 801fcb2:	f7fd fe75 	bl	801d9a0 <pbuf_free>
        return;
 801fcb6:	e1fd      	b.n	80200b4 <tcp_input+0x7ec>
        continue;
 801fcb8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801fcba:	69fb      	ldr	r3, [r7, #28]
 801fcbc:	68db      	ldr	r3, [r3, #12]
 801fcbe:	61fb      	str	r3, [r7, #28]
 801fcc0:	69fb      	ldr	r3, [r7, #28]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d1bc      	bne.n	801fc40 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801fcca:	4b2f      	ldr	r3, [pc, #188]	@ (801fd88 <tcp_input+0x4c0>)
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	617b      	str	r3, [r7, #20]
 801fcd0:	e02a      	b.n	801fd28 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801fcd2:	697b      	ldr	r3, [r7, #20]
 801fcd4:	7a1b      	ldrb	r3, [r3, #8]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d00c      	beq.n	801fcf4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fcda:	697b      	ldr	r3, [r7, #20]
 801fcdc:	7a1a      	ldrb	r2, [r3, #8]
 801fcde:	4b22      	ldr	r3, [pc, #136]	@ (801fd68 <tcp_input+0x4a0>)
 801fce0:	685b      	ldr	r3, [r3, #4]
 801fce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801fce6:	3301      	adds	r3, #1
 801fce8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801fcea:	429a      	cmp	r2, r3
 801fcec:	d002      	beq.n	801fcf4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801fcee:	697b      	ldr	r3, [r7, #20]
 801fcf0:	61bb      	str	r3, [r7, #24]
        continue;
 801fcf2:	e016      	b.n	801fd22 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801fcf4:	697b      	ldr	r3, [r7, #20]
 801fcf6:	8ada      	ldrh	r2, [r3, #22]
 801fcf8:	4b1a      	ldr	r3, [pc, #104]	@ (801fd64 <tcp_input+0x49c>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	885b      	ldrh	r3, [r3, #2]
 801fcfe:	b29b      	uxth	r3, r3
 801fd00:	429a      	cmp	r2, r3
 801fd02:	d10c      	bne.n	801fd1e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801fd04:	697b      	ldr	r3, [r7, #20]
 801fd06:	681a      	ldr	r2, [r3, #0]
 801fd08:	4b17      	ldr	r3, [pc, #92]	@ (801fd68 <tcp_input+0x4a0>)
 801fd0a:	695b      	ldr	r3, [r3, #20]
 801fd0c:	429a      	cmp	r2, r3
 801fd0e:	d00f      	beq.n	801fd30 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801fd10:	697b      	ldr	r3, [r7, #20]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d00d      	beq.n	801fd32 <tcp_input+0x46a>
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d009      	beq.n	801fd32 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801fd1e:	697b      	ldr	r3, [r7, #20]
 801fd20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801fd22:	697b      	ldr	r3, [r7, #20]
 801fd24:	68db      	ldr	r3, [r3, #12]
 801fd26:	617b      	str	r3, [r7, #20]
 801fd28:	697b      	ldr	r3, [r7, #20]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d1d1      	bne.n	801fcd2 <tcp_input+0x40a>
 801fd2e:	e000      	b.n	801fd32 <tcp_input+0x46a>
            break;
 801fd30:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801fd32:	697b      	ldr	r3, [r7, #20]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d029      	beq.n	801fd8c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801fd38:	69bb      	ldr	r3, [r7, #24]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d00a      	beq.n	801fd54 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801fd3e:	697b      	ldr	r3, [r7, #20]
 801fd40:	68da      	ldr	r2, [r3, #12]
 801fd42:	69bb      	ldr	r3, [r7, #24]
 801fd44:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801fd46:	4b10      	ldr	r3, [pc, #64]	@ (801fd88 <tcp_input+0x4c0>)
 801fd48:	681a      	ldr	r2, [r3, #0]
 801fd4a:	697b      	ldr	r3, [r7, #20]
 801fd4c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801fd4e:	4a0e      	ldr	r2, [pc, #56]	@ (801fd88 <tcp_input+0x4c0>)
 801fd50:	697b      	ldr	r3, [r7, #20]
 801fd52:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801fd54:	6978      	ldr	r0, [r7, #20]
 801fd56:	f000 fa03 	bl	8020160 <tcp_listen_input>
      }
      pbuf_free(p);
 801fd5a:	6878      	ldr	r0, [r7, #4]
 801fd5c:	f7fd fe20 	bl	801d9a0 <pbuf_free>
      return;
 801fd60:	e1a8      	b.n	80200b4 <tcp_input+0x7ec>
 801fd62:	bf00      	nop
 801fd64:	2400b4b4 	.word	0x2400b4b4
 801fd68:	24008540 	.word	0x24008540
 801fd6c:	0802ed78 	.word	0x0802ed78
 801fd70:	0802eea4 	.word	0x0802eea4
 801fd74:	0802edc4 	.word	0x0802edc4
 801fd78:	2400b498 	.word	0x2400b498
 801fd7c:	0802eed0 	.word	0x0802eed0
 801fd80:	2400b49c 	.word	0x2400b49c
 801fd84:	0802eefc 	.word	0x0802eefc
 801fd88:	2400b494 	.word	0x2400b494
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801fd8c:	69fb      	ldr	r3, [r7, #28]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	f000 8158 	beq.w	8020044 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801fd94:	4b95      	ldr	r3, [pc, #596]	@ (801ffec <tcp_input+0x724>)
 801fd96:	2200      	movs	r2, #0
 801fd98:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	891a      	ldrh	r2, [r3, #8]
 801fd9e:	4b93      	ldr	r3, [pc, #588]	@ (801ffec <tcp_input+0x724>)
 801fda0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801fda2:	4a92      	ldr	r2, [pc, #584]	@ (801ffec <tcp_input+0x724>)
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801fda8:	4b91      	ldr	r3, [pc, #580]	@ (801fff0 <tcp_input+0x728>)
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	4a8f      	ldr	r2, [pc, #572]	@ (801ffec <tcp_input+0x724>)
 801fdae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801fdb0:	4b90      	ldr	r3, [pc, #576]	@ (801fff4 <tcp_input+0x72c>)
 801fdb2:	2200      	movs	r2, #0
 801fdb4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801fdb6:	4b90      	ldr	r3, [pc, #576]	@ (801fff8 <tcp_input+0x730>)
 801fdb8:	2200      	movs	r2, #0
 801fdba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801fdbc:	4b8f      	ldr	r3, [pc, #572]	@ (801fffc <tcp_input+0x734>)
 801fdbe:	2200      	movs	r2, #0
 801fdc0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801fdc2:	4b8f      	ldr	r3, [pc, #572]	@ (8020000 <tcp_input+0x738>)
 801fdc4:	781b      	ldrb	r3, [r3, #0]
 801fdc6:	f003 0308 	and.w	r3, r3, #8
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d006      	beq.n	801fddc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	7b5b      	ldrb	r3, [r3, #13]
 801fdd2:	f043 0301 	orr.w	r3, r3, #1
 801fdd6:	b2da      	uxtb	r2, r3
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801fddc:	69fb      	ldr	r3, [r7, #28]
 801fdde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d017      	beq.n	801fe14 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801fde4:	69f8      	ldr	r0, [r7, #28]
 801fde6:	f7ff f929 	bl	801f03c <tcp_process_refused_data>
 801fdea:	4603      	mov	r3, r0
 801fdec:	f113 0f0d 	cmn.w	r3, #13
 801fdf0:	d007      	beq.n	801fe02 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801fdf2:	69fb      	ldr	r3, [r7, #28]
 801fdf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d00c      	beq.n	801fe14 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801fdfa:	4b82      	ldr	r3, [pc, #520]	@ (8020004 <tcp_input+0x73c>)
 801fdfc:	881b      	ldrh	r3, [r3, #0]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d008      	beq.n	801fe14 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801fe02:	69fb      	ldr	r3, [r7, #28]
 801fe04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	f040 80e3 	bne.w	801ffd2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801fe0c:	69f8      	ldr	r0, [r7, #28]
 801fe0e:	f003 f9a7 	bl	8023160 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801fe12:	e0de      	b.n	801ffd2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801fe14:	4a7c      	ldr	r2, [pc, #496]	@ (8020008 <tcp_input+0x740>)
 801fe16:	69fb      	ldr	r3, [r7, #28]
 801fe18:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801fe1a:	69f8      	ldr	r0, [r7, #28]
 801fe1c:	f000 fb18 	bl	8020450 <tcp_process>
 801fe20:	4603      	mov	r3, r0
 801fe22:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801fe24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fe28:	f113 0f0d 	cmn.w	r3, #13
 801fe2c:	f000 80d3 	beq.w	801ffd6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801fe30:	4b71      	ldr	r3, [pc, #452]	@ (801fff8 <tcp_input+0x730>)
 801fe32:	781b      	ldrb	r3, [r3, #0]
 801fe34:	f003 0308 	and.w	r3, r3, #8
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d015      	beq.n	801fe68 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801fe3c:	69fb      	ldr	r3, [r7, #28]
 801fe3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d008      	beq.n	801fe58 <tcp_input+0x590>
 801fe46:	69fb      	ldr	r3, [r7, #28]
 801fe48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801fe4c:	69fa      	ldr	r2, [r7, #28]
 801fe4e:	6912      	ldr	r2, [r2, #16]
 801fe50:	f06f 010d 	mvn.w	r1, #13
 801fe54:	4610      	mov	r0, r2
 801fe56:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801fe58:	69f9      	ldr	r1, [r7, #28]
 801fe5a:	486c      	ldr	r0, [pc, #432]	@ (802000c <tcp_input+0x744>)
 801fe5c:	f7ff fbbc 	bl	801f5d8 <tcp_pcb_remove>
        tcp_free(pcb);
 801fe60:	69f8      	ldr	r0, [r7, #28]
 801fe62:	f7fe f9a7 	bl	801e1b4 <tcp_free>
 801fe66:	e0da      	b.n	802001e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801fe68:	2300      	movs	r3, #0
 801fe6a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801fe6c:	4b63      	ldr	r3, [pc, #396]	@ (801fffc <tcp_input+0x734>)
 801fe6e:	881b      	ldrh	r3, [r3, #0]
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d01d      	beq.n	801feb0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801fe74:	4b61      	ldr	r3, [pc, #388]	@ (801fffc <tcp_input+0x734>)
 801fe76:	881b      	ldrh	r3, [r3, #0]
 801fe78:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801fe7a:	69fb      	ldr	r3, [r7, #28]
 801fe7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d00a      	beq.n	801fe9a <tcp_input+0x5d2>
 801fe84:	69fb      	ldr	r3, [r7, #28]
 801fe86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fe8a:	69fa      	ldr	r2, [r7, #28]
 801fe8c:	6910      	ldr	r0, [r2, #16]
 801fe8e:	89fa      	ldrh	r2, [r7, #14]
 801fe90:	69f9      	ldr	r1, [r7, #28]
 801fe92:	4798      	blx	r3
 801fe94:	4603      	mov	r3, r0
 801fe96:	74fb      	strb	r3, [r7, #19]
 801fe98:	e001      	b.n	801fe9e <tcp_input+0x5d6>
 801fe9a:	2300      	movs	r3, #0
 801fe9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801fe9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fea2:	f113 0f0d 	cmn.w	r3, #13
 801fea6:	f000 8098 	beq.w	801ffda <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801feaa:	4b54      	ldr	r3, [pc, #336]	@ (801fffc <tcp_input+0x734>)
 801feac:	2200      	movs	r2, #0
 801feae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801feb0:	69f8      	ldr	r0, [r7, #28]
 801feb2:	f000 f915 	bl	80200e0 <tcp_input_delayed_close>
 801feb6:	4603      	mov	r3, r0
 801feb8:	2b00      	cmp	r3, #0
 801feba:	f040 8090 	bne.w	801ffde <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801febe:	4b4d      	ldr	r3, [pc, #308]	@ (801fff4 <tcp_input+0x72c>)
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d041      	beq.n	801ff4a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801fec6:	69fb      	ldr	r3, [r7, #28]
 801fec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d006      	beq.n	801fedc <tcp_input+0x614>
 801fece:	4b50      	ldr	r3, [pc, #320]	@ (8020010 <tcp_input+0x748>)
 801fed0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801fed4:	494f      	ldr	r1, [pc, #316]	@ (8020014 <tcp_input+0x74c>)
 801fed6:	4850      	ldr	r0, [pc, #320]	@ (8020018 <tcp_input+0x750>)
 801fed8:	f009 fa46 	bl	8029368 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801fedc:	69fb      	ldr	r3, [r7, #28]
 801fede:	8b5b      	ldrh	r3, [r3, #26]
 801fee0:	f003 0310 	and.w	r3, r3, #16
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d008      	beq.n	801fefa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801fee8:	4b42      	ldr	r3, [pc, #264]	@ (801fff4 <tcp_input+0x72c>)
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	4618      	mov	r0, r3
 801feee:	f7fd fd57 	bl	801d9a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801fef2:	69f8      	ldr	r0, [r7, #28]
 801fef4:	f7fe fc46 	bl	801e784 <tcp_abort>
            goto aborted;
 801fef8:	e091      	b.n	802001e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801fefa:	69fb      	ldr	r3, [r7, #28]
 801fefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d00c      	beq.n	801ff1e <tcp_input+0x656>
 801ff04:	69fb      	ldr	r3, [r7, #28]
 801ff06:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ff0a:	69fb      	ldr	r3, [r7, #28]
 801ff0c:	6918      	ldr	r0, [r3, #16]
 801ff0e:	4b39      	ldr	r3, [pc, #228]	@ (801fff4 <tcp_input+0x72c>)
 801ff10:	681a      	ldr	r2, [r3, #0]
 801ff12:	2300      	movs	r3, #0
 801ff14:	69f9      	ldr	r1, [r7, #28]
 801ff16:	47a0      	blx	r4
 801ff18:	4603      	mov	r3, r0
 801ff1a:	74fb      	strb	r3, [r7, #19]
 801ff1c:	e008      	b.n	801ff30 <tcp_input+0x668>
 801ff1e:	4b35      	ldr	r3, [pc, #212]	@ (801fff4 <tcp_input+0x72c>)
 801ff20:	681a      	ldr	r2, [r3, #0]
 801ff22:	2300      	movs	r3, #0
 801ff24:	69f9      	ldr	r1, [r7, #28]
 801ff26:	2000      	movs	r0, #0
 801ff28:	f7ff f95e 	bl	801f1e8 <tcp_recv_null>
 801ff2c:	4603      	mov	r3, r0
 801ff2e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ff30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ff34:	f113 0f0d 	cmn.w	r3, #13
 801ff38:	d053      	beq.n	801ffe2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ff3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d003      	beq.n	801ff4a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ff42:	4b2c      	ldr	r3, [pc, #176]	@ (801fff4 <tcp_input+0x72c>)
 801ff44:	681a      	ldr	r2, [r3, #0]
 801ff46:	69fb      	ldr	r3, [r7, #28]
 801ff48:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ff4a:	4b2b      	ldr	r3, [pc, #172]	@ (801fff8 <tcp_input+0x730>)
 801ff4c:	781b      	ldrb	r3, [r3, #0]
 801ff4e:	f003 0320 	and.w	r3, r3, #32
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d030      	beq.n	801ffb8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801ff56:	69fb      	ldr	r3, [r7, #28]
 801ff58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d009      	beq.n	801ff72 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ff5e:	69fb      	ldr	r3, [r7, #28]
 801ff60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ff62:	7b5a      	ldrb	r2, [r3, #13]
 801ff64:	69fb      	ldr	r3, [r7, #28]
 801ff66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ff68:	f042 0220 	orr.w	r2, r2, #32
 801ff6c:	b2d2      	uxtb	r2, r2
 801ff6e:	735a      	strb	r2, [r3, #13]
 801ff70:	e022      	b.n	801ffb8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ff72:	69fb      	ldr	r3, [r7, #28]
 801ff74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ff76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801ff7a:	d005      	beq.n	801ff88 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801ff7c:	69fb      	ldr	r3, [r7, #28]
 801ff7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ff80:	3301      	adds	r3, #1
 801ff82:	b29a      	uxth	r2, r3
 801ff84:	69fb      	ldr	r3, [r7, #28]
 801ff86:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801ff88:	69fb      	ldr	r3, [r7, #28]
 801ff8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d00b      	beq.n	801ffaa <tcp_input+0x6e2>
 801ff92:	69fb      	ldr	r3, [r7, #28]
 801ff94:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ff98:	69fb      	ldr	r3, [r7, #28]
 801ff9a:	6918      	ldr	r0, [r3, #16]
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	2200      	movs	r2, #0
 801ffa0:	69f9      	ldr	r1, [r7, #28]
 801ffa2:	47a0      	blx	r4
 801ffa4:	4603      	mov	r3, r0
 801ffa6:	74fb      	strb	r3, [r7, #19]
 801ffa8:	e001      	b.n	801ffae <tcp_input+0x6e6>
 801ffaa:	2300      	movs	r3, #0
 801ffac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ffae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ffb2:	f113 0f0d 	cmn.w	r3, #13
 801ffb6:	d016      	beq.n	801ffe6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801ffb8:	4b13      	ldr	r3, [pc, #76]	@ (8020008 <tcp_input+0x740>)
 801ffba:	2200      	movs	r2, #0
 801ffbc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801ffbe:	69f8      	ldr	r0, [r7, #28]
 801ffc0:	f000 f88e 	bl	80200e0 <tcp_input_delayed_close>
 801ffc4:	4603      	mov	r3, r0
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	d128      	bne.n	802001c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801ffca:	69f8      	ldr	r0, [r7, #28]
 801ffcc:	f002 fac2 	bl	8022554 <tcp_output>
 801ffd0:	e025      	b.n	802001e <tcp_input+0x756>
        goto aborted;
 801ffd2:	bf00      	nop
 801ffd4:	e023      	b.n	802001e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801ffd6:	bf00      	nop
 801ffd8:	e021      	b.n	802001e <tcp_input+0x756>
              goto aborted;
 801ffda:	bf00      	nop
 801ffdc:	e01f      	b.n	802001e <tcp_input+0x756>
          goto aborted;
 801ffde:	bf00      	nop
 801ffe0:	e01d      	b.n	802001e <tcp_input+0x756>
            goto aborted;
 801ffe2:	bf00      	nop
 801ffe4:	e01b      	b.n	802001e <tcp_input+0x756>
              goto aborted;
 801ffe6:	bf00      	nop
 801ffe8:	e019      	b.n	802001e <tcp_input+0x756>
 801ffea:	bf00      	nop
 801ffec:	2400b4a4 	.word	0x2400b4a4
 801fff0:	2400b4b4 	.word	0x2400b4b4
 801fff4:	2400b4d4 	.word	0x2400b4d4
 801fff8:	2400b4d1 	.word	0x2400b4d1
 801fffc:	2400b4cc 	.word	0x2400b4cc
 8020000:	2400b4d0 	.word	0x2400b4d0
 8020004:	2400b4ce 	.word	0x2400b4ce
 8020008:	2400b4d8 	.word	0x2400b4d8
 802000c:	2400b498 	.word	0x2400b498
 8020010:	0802ed78 	.word	0x0802ed78
 8020014:	0802ef2c 	.word	0x0802ef2c
 8020018:	0802edc4 	.word	0x0802edc4
          goto aborted;
 802001c:	bf00      	nop
    tcp_input_pcb = NULL;
 802001e:	4b27      	ldr	r3, [pc, #156]	@ (80200bc <tcp_input+0x7f4>)
 8020020:	2200      	movs	r2, #0
 8020022:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8020024:	4b26      	ldr	r3, [pc, #152]	@ (80200c0 <tcp_input+0x7f8>)
 8020026:	2200      	movs	r2, #0
 8020028:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 802002a:	4b26      	ldr	r3, [pc, #152]	@ (80200c4 <tcp_input+0x7fc>)
 802002c:	685b      	ldr	r3, [r3, #4]
 802002e:	2b00      	cmp	r3, #0
 8020030:	d03f      	beq.n	80200b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8020032:	4b24      	ldr	r3, [pc, #144]	@ (80200c4 <tcp_input+0x7fc>)
 8020034:	685b      	ldr	r3, [r3, #4]
 8020036:	4618      	mov	r0, r3
 8020038:	f7fd fcb2 	bl	801d9a0 <pbuf_free>
      inseg.p = NULL;
 802003c:	4b21      	ldr	r3, [pc, #132]	@ (80200c4 <tcp_input+0x7fc>)
 802003e:	2200      	movs	r2, #0
 8020040:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8020042:	e036      	b.n	80200b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8020044:	4b20      	ldr	r3, [pc, #128]	@ (80200c8 <tcp_input+0x800>)
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	899b      	ldrh	r3, [r3, #12]
 802004a:	b29b      	uxth	r3, r3
 802004c:	4618      	mov	r0, r3
 802004e:	f7fb fdb7 	bl	801bbc0 <lwip_htons>
 8020052:	4603      	mov	r3, r0
 8020054:	b2db      	uxtb	r3, r3
 8020056:	f003 0304 	and.w	r3, r3, #4
 802005a:	2b00      	cmp	r3, #0
 802005c:	d118      	bne.n	8020090 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 802005e:	4b1b      	ldr	r3, [pc, #108]	@ (80200cc <tcp_input+0x804>)
 8020060:	6819      	ldr	r1, [r3, #0]
 8020062:	4b1b      	ldr	r3, [pc, #108]	@ (80200d0 <tcp_input+0x808>)
 8020064:	881b      	ldrh	r3, [r3, #0]
 8020066:	461a      	mov	r2, r3
 8020068:	4b1a      	ldr	r3, [pc, #104]	@ (80200d4 <tcp_input+0x80c>)
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802006e:	4b16      	ldr	r3, [pc, #88]	@ (80200c8 <tcp_input+0x800>)
 8020070:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8020072:	885b      	ldrh	r3, [r3, #2]
 8020074:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8020076:	4a14      	ldr	r2, [pc, #80]	@ (80200c8 <tcp_input+0x800>)
 8020078:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 802007a:	8812      	ldrh	r2, [r2, #0]
 802007c:	b292      	uxth	r2, r2
 802007e:	9202      	str	r2, [sp, #8]
 8020080:	9301      	str	r3, [sp, #4]
 8020082:	4b15      	ldr	r3, [pc, #84]	@ (80200d8 <tcp_input+0x810>)
 8020084:	9300      	str	r3, [sp, #0]
 8020086:	4b15      	ldr	r3, [pc, #84]	@ (80200dc <tcp_input+0x814>)
 8020088:	4602      	mov	r2, r0
 802008a:	2000      	movs	r0, #0
 802008c:	f003 f816 	bl	80230bc <tcp_rst>
    pbuf_free(p);
 8020090:	6878      	ldr	r0, [r7, #4]
 8020092:	f7fd fc85 	bl	801d9a0 <pbuf_free>
  return;
 8020096:	e00c      	b.n	80200b2 <tcp_input+0x7ea>
    goto dropped;
 8020098:	bf00      	nop
 802009a:	e006      	b.n	80200aa <tcp_input+0x7e2>
    goto dropped;
 802009c:	bf00      	nop
 802009e:	e004      	b.n	80200aa <tcp_input+0x7e2>
    goto dropped;
 80200a0:	bf00      	nop
 80200a2:	e002      	b.n	80200aa <tcp_input+0x7e2>
      goto dropped;
 80200a4:	bf00      	nop
 80200a6:	e000      	b.n	80200aa <tcp_input+0x7e2>
      goto dropped;
 80200a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80200aa:	6878      	ldr	r0, [r7, #4]
 80200ac:	f7fd fc78 	bl	801d9a0 <pbuf_free>
 80200b0:	e000      	b.n	80200b4 <tcp_input+0x7ec>
  return;
 80200b2:	bf00      	nop
}
 80200b4:	3724      	adds	r7, #36	@ 0x24
 80200b6:	46bd      	mov	sp, r7
 80200b8:	bd90      	pop	{r4, r7, pc}
 80200ba:	bf00      	nop
 80200bc:	2400b4d8 	.word	0x2400b4d8
 80200c0:	2400b4d4 	.word	0x2400b4d4
 80200c4:	2400b4a4 	.word	0x2400b4a4
 80200c8:	2400b4b4 	.word	0x2400b4b4
 80200cc:	2400b4c8 	.word	0x2400b4c8
 80200d0:	2400b4ce 	.word	0x2400b4ce
 80200d4:	2400b4c4 	.word	0x2400b4c4
 80200d8:	24008550 	.word	0x24008550
 80200dc:	24008554 	.word	0x24008554

080200e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80200e0:	b580      	push	{r7, lr}
 80200e2:	b082      	sub	sp, #8
 80200e4:	af00      	add	r7, sp, #0
 80200e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d106      	bne.n	80200fc <tcp_input_delayed_close+0x1c>
 80200ee:	4b17      	ldr	r3, [pc, #92]	@ (802014c <tcp_input_delayed_close+0x6c>)
 80200f0:	f240 225a 	movw	r2, #602	@ 0x25a
 80200f4:	4916      	ldr	r1, [pc, #88]	@ (8020150 <tcp_input_delayed_close+0x70>)
 80200f6:	4817      	ldr	r0, [pc, #92]	@ (8020154 <tcp_input_delayed_close+0x74>)
 80200f8:	f009 f936 	bl	8029368 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80200fc:	4b16      	ldr	r3, [pc, #88]	@ (8020158 <tcp_input_delayed_close+0x78>)
 80200fe:	781b      	ldrb	r3, [r3, #0]
 8020100:	f003 0310 	and.w	r3, r3, #16
 8020104:	2b00      	cmp	r3, #0
 8020106:	d01c      	beq.n	8020142 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	8b5b      	ldrh	r3, [r3, #26]
 802010c:	f003 0310 	and.w	r3, r3, #16
 8020110:	2b00      	cmp	r3, #0
 8020112:	d10d      	bne.n	8020130 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802011a:	2b00      	cmp	r3, #0
 802011c:	d008      	beq.n	8020130 <tcp_input_delayed_close+0x50>
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020124:	687a      	ldr	r2, [r7, #4]
 8020126:	6912      	ldr	r2, [r2, #16]
 8020128:	f06f 010e 	mvn.w	r1, #14
 802012c:	4610      	mov	r0, r2
 802012e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8020130:	6879      	ldr	r1, [r7, #4]
 8020132:	480a      	ldr	r0, [pc, #40]	@ (802015c <tcp_input_delayed_close+0x7c>)
 8020134:	f7ff fa50 	bl	801f5d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8020138:	6878      	ldr	r0, [r7, #4]
 802013a:	f7fe f83b 	bl	801e1b4 <tcp_free>
    return 1;
 802013e:	2301      	movs	r3, #1
 8020140:	e000      	b.n	8020144 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8020142:	2300      	movs	r3, #0
}
 8020144:	4618      	mov	r0, r3
 8020146:	3708      	adds	r7, #8
 8020148:	46bd      	mov	sp, r7
 802014a:	bd80      	pop	{r7, pc}
 802014c:	0802ed78 	.word	0x0802ed78
 8020150:	0802ef48 	.word	0x0802ef48
 8020154:	0802edc4 	.word	0x0802edc4
 8020158:	2400b4d1 	.word	0x2400b4d1
 802015c:	2400b498 	.word	0x2400b498

08020160 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8020160:	b590      	push	{r4, r7, lr}
 8020162:	b08b      	sub	sp, #44	@ 0x2c
 8020164:	af04      	add	r7, sp, #16
 8020166:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8020168:	4b6f      	ldr	r3, [pc, #444]	@ (8020328 <tcp_listen_input+0x1c8>)
 802016a:	781b      	ldrb	r3, [r3, #0]
 802016c:	f003 0304 	and.w	r3, r3, #4
 8020170:	2b00      	cmp	r3, #0
 8020172:	f040 80d2 	bne.w	802031a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	2b00      	cmp	r3, #0
 802017a:	d106      	bne.n	802018a <tcp_listen_input+0x2a>
 802017c:	4b6b      	ldr	r3, [pc, #428]	@ (802032c <tcp_listen_input+0x1cc>)
 802017e:	f240 2281 	movw	r2, #641	@ 0x281
 8020182:	496b      	ldr	r1, [pc, #428]	@ (8020330 <tcp_listen_input+0x1d0>)
 8020184:	486b      	ldr	r0, [pc, #428]	@ (8020334 <tcp_listen_input+0x1d4>)
 8020186:	f009 f8ef 	bl	8029368 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 802018a:	4b67      	ldr	r3, [pc, #412]	@ (8020328 <tcp_listen_input+0x1c8>)
 802018c:	781b      	ldrb	r3, [r3, #0]
 802018e:	f003 0310 	and.w	r3, r3, #16
 8020192:	2b00      	cmp	r3, #0
 8020194:	d019      	beq.n	80201ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8020196:	4b68      	ldr	r3, [pc, #416]	@ (8020338 <tcp_listen_input+0x1d8>)
 8020198:	6819      	ldr	r1, [r3, #0]
 802019a:	4b68      	ldr	r3, [pc, #416]	@ (802033c <tcp_listen_input+0x1dc>)
 802019c:	881b      	ldrh	r3, [r3, #0]
 802019e:	461a      	mov	r2, r3
 80201a0:	4b67      	ldr	r3, [pc, #412]	@ (8020340 <tcp_listen_input+0x1e0>)
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80201a6:	4b67      	ldr	r3, [pc, #412]	@ (8020344 <tcp_listen_input+0x1e4>)
 80201a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80201aa:	885b      	ldrh	r3, [r3, #2]
 80201ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80201ae:	4a65      	ldr	r2, [pc, #404]	@ (8020344 <tcp_listen_input+0x1e4>)
 80201b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80201b2:	8812      	ldrh	r2, [r2, #0]
 80201b4:	b292      	uxth	r2, r2
 80201b6:	9202      	str	r2, [sp, #8]
 80201b8:	9301      	str	r3, [sp, #4]
 80201ba:	4b63      	ldr	r3, [pc, #396]	@ (8020348 <tcp_listen_input+0x1e8>)
 80201bc:	9300      	str	r3, [sp, #0]
 80201be:	4b63      	ldr	r3, [pc, #396]	@ (802034c <tcp_listen_input+0x1ec>)
 80201c0:	4602      	mov	r2, r0
 80201c2:	6878      	ldr	r0, [r7, #4]
 80201c4:	f002 ff7a 	bl	80230bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80201c8:	e0a9      	b.n	802031e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80201ca:	4b57      	ldr	r3, [pc, #348]	@ (8020328 <tcp_listen_input+0x1c8>)
 80201cc:	781b      	ldrb	r3, [r3, #0]
 80201ce:	f003 0302 	and.w	r3, r3, #2
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	f000 80a3 	beq.w	802031e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	7d5b      	ldrb	r3, [r3, #21]
 80201dc:	4618      	mov	r0, r3
 80201de:	f7ff f927 	bl	801f430 <tcp_alloc>
 80201e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80201e4:	697b      	ldr	r3, [r7, #20]
 80201e6:	2b00      	cmp	r3, #0
 80201e8:	d111      	bne.n	802020e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	699b      	ldr	r3, [r3, #24]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d00a      	beq.n	8020208 <tcp_listen_input+0xa8>
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	699b      	ldr	r3, [r3, #24]
 80201f6:	687a      	ldr	r2, [r7, #4]
 80201f8:	6910      	ldr	r0, [r2, #16]
 80201fa:	f04f 32ff 	mov.w	r2, #4294967295
 80201fe:	2100      	movs	r1, #0
 8020200:	4798      	blx	r3
 8020202:	4603      	mov	r3, r0
 8020204:	73bb      	strb	r3, [r7, #14]
      return;
 8020206:	e08b      	b.n	8020320 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8020208:	23f0      	movs	r3, #240	@ 0xf0
 802020a:	73bb      	strb	r3, [r7, #14]
      return;
 802020c:	e088      	b.n	8020320 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 802020e:	4b50      	ldr	r3, [pc, #320]	@ (8020350 <tcp_listen_input+0x1f0>)
 8020210:	695a      	ldr	r2, [r3, #20]
 8020212:	697b      	ldr	r3, [r7, #20]
 8020214:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8020216:	4b4e      	ldr	r3, [pc, #312]	@ (8020350 <tcp_listen_input+0x1f0>)
 8020218:	691a      	ldr	r2, [r3, #16]
 802021a:	697b      	ldr	r3, [r7, #20]
 802021c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	8ada      	ldrh	r2, [r3, #22]
 8020222:	697b      	ldr	r3, [r7, #20]
 8020224:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8020226:	4b47      	ldr	r3, [pc, #284]	@ (8020344 <tcp_listen_input+0x1e4>)
 8020228:	681b      	ldr	r3, [r3, #0]
 802022a:	881b      	ldrh	r3, [r3, #0]
 802022c:	b29a      	uxth	r2, r3
 802022e:	697b      	ldr	r3, [r7, #20]
 8020230:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8020232:	697b      	ldr	r3, [r7, #20]
 8020234:	2203      	movs	r2, #3
 8020236:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8020238:	4b41      	ldr	r3, [pc, #260]	@ (8020340 <tcp_listen_input+0x1e0>)
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	1c5a      	adds	r2, r3, #1
 802023e:	697b      	ldr	r3, [r7, #20]
 8020240:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8020242:	697b      	ldr	r3, [r7, #20]
 8020244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020246:	697b      	ldr	r3, [r7, #20]
 8020248:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 802024a:	6978      	ldr	r0, [r7, #20]
 802024c:	f7ff fa58 	bl	801f700 <tcp_next_iss>
 8020250:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8020252:	697b      	ldr	r3, [r7, #20]
 8020254:	693a      	ldr	r2, [r7, #16]
 8020256:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8020258:	697b      	ldr	r3, [r7, #20]
 802025a:	693a      	ldr	r2, [r7, #16]
 802025c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 802025e:	697b      	ldr	r3, [r7, #20]
 8020260:	693a      	ldr	r2, [r7, #16]
 8020262:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8020264:	697b      	ldr	r3, [r7, #20]
 8020266:	693a      	ldr	r2, [r7, #16]
 8020268:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 802026a:	4b35      	ldr	r3, [pc, #212]	@ (8020340 <tcp_listen_input+0x1e0>)
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	1e5a      	subs	r2, r3, #1
 8020270:	697b      	ldr	r3, [r7, #20]
 8020272:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	691a      	ldr	r2, [r3, #16]
 8020278:	697b      	ldr	r3, [r7, #20]
 802027a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 802027c:	697b      	ldr	r3, [r7, #20]
 802027e:	687a      	ldr	r2, [r7, #4]
 8020280:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8020282:	687b      	ldr	r3, [r7, #4]
 8020284:	7a5b      	ldrb	r3, [r3, #9]
 8020286:	f003 030c 	and.w	r3, r3, #12
 802028a:	b2da      	uxtb	r2, r3
 802028c:	697b      	ldr	r3, [r7, #20]
 802028e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	7a1a      	ldrb	r2, [r3, #8]
 8020294:	697b      	ldr	r3, [r7, #20]
 8020296:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8020298:	4b2e      	ldr	r3, [pc, #184]	@ (8020354 <tcp_listen_input+0x1f4>)
 802029a:	681a      	ldr	r2, [r3, #0]
 802029c:	697b      	ldr	r3, [r7, #20]
 802029e:	60da      	str	r2, [r3, #12]
 80202a0:	4a2c      	ldr	r2, [pc, #176]	@ (8020354 <tcp_listen_input+0x1f4>)
 80202a2:	697b      	ldr	r3, [r7, #20]
 80202a4:	6013      	str	r3, [r2, #0]
 80202a6:	f003 f8cb 	bl	8023440 <tcp_timer_needed>
 80202aa:	4b2b      	ldr	r3, [pc, #172]	@ (8020358 <tcp_listen_input+0x1f8>)
 80202ac:	2201      	movs	r2, #1
 80202ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80202b0:	6978      	ldr	r0, [r7, #20]
 80202b2:	f001 fd8b 	bl	8021dcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80202b6:	4b23      	ldr	r3, [pc, #140]	@ (8020344 <tcp_listen_input+0x1e4>)
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	89db      	ldrh	r3, [r3, #14]
 80202bc:	b29a      	uxth	r2, r3
 80202be:	697b      	ldr	r3, [r7, #20]
 80202c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80202c4:	697b      	ldr	r3, [r7, #20]
 80202c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80202ca:	697b      	ldr	r3, [r7, #20]
 80202cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80202d0:	697b      	ldr	r3, [r7, #20]
 80202d2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80202d4:	697b      	ldr	r3, [r7, #20]
 80202d6:	3304      	adds	r3, #4
 80202d8:	4618      	mov	r0, r3
 80202da:	f006 feb3 	bl	8027044 <ip4_route>
 80202de:	4601      	mov	r1, r0
 80202e0:	697b      	ldr	r3, [r7, #20]
 80202e2:	3304      	adds	r3, #4
 80202e4:	461a      	mov	r2, r3
 80202e6:	4620      	mov	r0, r4
 80202e8:	f7ff fa30 	bl	801f74c <tcp_eff_send_mss_netif>
 80202ec:	4603      	mov	r3, r0
 80202ee:	461a      	mov	r2, r3
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80202f4:	2112      	movs	r1, #18
 80202f6:	6978      	ldr	r0, [r7, #20]
 80202f8:	f002 f83e 	bl	8022378 <tcp_enqueue_flags>
 80202fc:	4603      	mov	r3, r0
 80202fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8020300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020304:	2b00      	cmp	r3, #0
 8020306:	d004      	beq.n	8020312 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8020308:	2100      	movs	r1, #0
 802030a:	6978      	ldr	r0, [r7, #20]
 802030c:	f7fe f97c 	bl	801e608 <tcp_abandon>
      return;
 8020310:	e006      	b.n	8020320 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8020312:	6978      	ldr	r0, [r7, #20]
 8020314:	f002 f91e 	bl	8022554 <tcp_output>
  return;
 8020318:	e001      	b.n	802031e <tcp_listen_input+0x1be>
    return;
 802031a:	bf00      	nop
 802031c:	e000      	b.n	8020320 <tcp_listen_input+0x1c0>
  return;
 802031e:	bf00      	nop
}
 8020320:	371c      	adds	r7, #28
 8020322:	46bd      	mov	sp, r7
 8020324:	bd90      	pop	{r4, r7, pc}
 8020326:	bf00      	nop
 8020328:	2400b4d0 	.word	0x2400b4d0
 802032c:	0802ed78 	.word	0x0802ed78
 8020330:	0802ef70 	.word	0x0802ef70
 8020334:	0802edc4 	.word	0x0802edc4
 8020338:	2400b4c8 	.word	0x2400b4c8
 802033c:	2400b4ce 	.word	0x2400b4ce
 8020340:	2400b4c4 	.word	0x2400b4c4
 8020344:	2400b4b4 	.word	0x2400b4b4
 8020348:	24008550 	.word	0x24008550
 802034c:	24008554 	.word	0x24008554
 8020350:	24008540 	.word	0x24008540
 8020354:	2400b498 	.word	0x2400b498
 8020358:	2400b4a0 	.word	0x2400b4a0

0802035c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 802035c:	b580      	push	{r7, lr}
 802035e:	b086      	sub	sp, #24
 8020360:	af04      	add	r7, sp, #16
 8020362:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8020364:	4b2f      	ldr	r3, [pc, #188]	@ (8020424 <tcp_timewait_input+0xc8>)
 8020366:	781b      	ldrb	r3, [r3, #0]
 8020368:	f003 0304 	and.w	r3, r3, #4
 802036c:	2b00      	cmp	r3, #0
 802036e:	d153      	bne.n	8020418 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d106      	bne.n	8020384 <tcp_timewait_input+0x28>
 8020376:	4b2c      	ldr	r3, [pc, #176]	@ (8020428 <tcp_timewait_input+0xcc>)
 8020378:	f240 22ee 	movw	r2, #750	@ 0x2ee
 802037c:	492b      	ldr	r1, [pc, #172]	@ (802042c <tcp_timewait_input+0xd0>)
 802037e:	482c      	ldr	r0, [pc, #176]	@ (8020430 <tcp_timewait_input+0xd4>)
 8020380:	f008 fff2 	bl	8029368 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8020384:	4b27      	ldr	r3, [pc, #156]	@ (8020424 <tcp_timewait_input+0xc8>)
 8020386:	781b      	ldrb	r3, [r3, #0]
 8020388:	f003 0302 	and.w	r3, r3, #2
 802038c:	2b00      	cmp	r3, #0
 802038e:	d02a      	beq.n	80203e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8020390:	4b28      	ldr	r3, [pc, #160]	@ (8020434 <tcp_timewait_input+0xd8>)
 8020392:	681a      	ldr	r2, [r3, #0]
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020398:	1ad3      	subs	r3, r2, r3
 802039a:	2b00      	cmp	r3, #0
 802039c:	db2d      	blt.n	80203fa <tcp_timewait_input+0x9e>
 802039e:	4b25      	ldr	r3, [pc, #148]	@ (8020434 <tcp_timewait_input+0xd8>)
 80203a0:	681a      	ldr	r2, [r3, #0]
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203a6:	6879      	ldr	r1, [r7, #4]
 80203a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80203aa:	440b      	add	r3, r1
 80203ac:	1ad3      	subs	r3, r2, r3
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	dc23      	bgt.n	80203fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80203b2:	4b21      	ldr	r3, [pc, #132]	@ (8020438 <tcp_timewait_input+0xdc>)
 80203b4:	6819      	ldr	r1, [r3, #0]
 80203b6:	4b21      	ldr	r3, [pc, #132]	@ (802043c <tcp_timewait_input+0xe0>)
 80203b8:	881b      	ldrh	r3, [r3, #0]
 80203ba:	461a      	mov	r2, r3
 80203bc:	4b1d      	ldr	r3, [pc, #116]	@ (8020434 <tcp_timewait_input+0xd8>)
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80203c2:	4b1f      	ldr	r3, [pc, #124]	@ (8020440 <tcp_timewait_input+0xe4>)
 80203c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80203c6:	885b      	ldrh	r3, [r3, #2]
 80203c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80203ca:	4a1d      	ldr	r2, [pc, #116]	@ (8020440 <tcp_timewait_input+0xe4>)
 80203cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80203ce:	8812      	ldrh	r2, [r2, #0]
 80203d0:	b292      	uxth	r2, r2
 80203d2:	9202      	str	r2, [sp, #8]
 80203d4:	9301      	str	r3, [sp, #4]
 80203d6:	4b1b      	ldr	r3, [pc, #108]	@ (8020444 <tcp_timewait_input+0xe8>)
 80203d8:	9300      	str	r3, [sp, #0]
 80203da:	4b1b      	ldr	r3, [pc, #108]	@ (8020448 <tcp_timewait_input+0xec>)
 80203dc:	4602      	mov	r2, r0
 80203de:	6878      	ldr	r0, [r7, #4]
 80203e0:	f002 fe6c 	bl	80230bc <tcp_rst>
      return;
 80203e4:	e01b      	b.n	802041e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80203e6:	4b0f      	ldr	r3, [pc, #60]	@ (8020424 <tcp_timewait_input+0xc8>)
 80203e8:	781b      	ldrb	r3, [r3, #0]
 80203ea:	f003 0301 	and.w	r3, r3, #1
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d003      	beq.n	80203fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80203f2:	4b16      	ldr	r3, [pc, #88]	@ (802044c <tcp_timewait_input+0xf0>)
 80203f4:	681a      	ldr	r2, [r3, #0]
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80203fa:	4b10      	ldr	r3, [pc, #64]	@ (802043c <tcp_timewait_input+0xe0>)
 80203fc:	881b      	ldrh	r3, [r3, #0]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d00c      	beq.n	802041c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	8b5b      	ldrh	r3, [r3, #26]
 8020406:	f043 0302 	orr.w	r3, r3, #2
 802040a:	b29a      	uxth	r2, r3
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8020410:	6878      	ldr	r0, [r7, #4]
 8020412:	f002 f89f 	bl	8022554 <tcp_output>
  }
  return;
 8020416:	e001      	b.n	802041c <tcp_timewait_input+0xc0>
    return;
 8020418:	bf00      	nop
 802041a:	e000      	b.n	802041e <tcp_timewait_input+0xc2>
  return;
 802041c:	bf00      	nop
}
 802041e:	3708      	adds	r7, #8
 8020420:	46bd      	mov	sp, r7
 8020422:	bd80      	pop	{r7, pc}
 8020424:	2400b4d0 	.word	0x2400b4d0
 8020428:	0802ed78 	.word	0x0802ed78
 802042c:	0802ef90 	.word	0x0802ef90
 8020430:	0802edc4 	.word	0x0802edc4
 8020434:	2400b4c4 	.word	0x2400b4c4
 8020438:	2400b4c8 	.word	0x2400b4c8
 802043c:	2400b4ce 	.word	0x2400b4ce
 8020440:	2400b4b4 	.word	0x2400b4b4
 8020444:	24008550 	.word	0x24008550
 8020448:	24008554 	.word	0x24008554
 802044c:	2400b48c 	.word	0x2400b48c

08020450 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8020450:	b590      	push	{r4, r7, lr}
 8020452:	b08d      	sub	sp, #52	@ 0x34
 8020454:	af04      	add	r7, sp, #16
 8020456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8020458:	2300      	movs	r3, #0
 802045a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 802045c:	2300      	movs	r3, #0
 802045e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d106      	bne.n	8020474 <tcp_process+0x24>
 8020466:	4b9d      	ldr	r3, [pc, #628]	@ (80206dc <tcp_process+0x28c>)
 8020468:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 802046c:	499c      	ldr	r1, [pc, #624]	@ (80206e0 <tcp_process+0x290>)
 802046e:	489d      	ldr	r0, [pc, #628]	@ (80206e4 <tcp_process+0x294>)
 8020470:	f008 ff7a 	bl	8029368 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8020474:	4b9c      	ldr	r3, [pc, #624]	@ (80206e8 <tcp_process+0x298>)
 8020476:	781b      	ldrb	r3, [r3, #0]
 8020478:	f003 0304 	and.w	r3, r3, #4
 802047c:	2b00      	cmp	r3, #0
 802047e:	d04e      	beq.n	802051e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	7d1b      	ldrb	r3, [r3, #20]
 8020484:	2b02      	cmp	r3, #2
 8020486:	d108      	bne.n	802049a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802048c:	4b97      	ldr	r3, [pc, #604]	@ (80206ec <tcp_process+0x29c>)
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	429a      	cmp	r2, r3
 8020492:	d123      	bne.n	80204dc <tcp_process+0x8c>
        acceptable = 1;
 8020494:	2301      	movs	r3, #1
 8020496:	76fb      	strb	r3, [r7, #27]
 8020498:	e020      	b.n	80204dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802049e:	4b94      	ldr	r3, [pc, #592]	@ (80206f0 <tcp_process+0x2a0>)
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	429a      	cmp	r2, r3
 80204a4:	d102      	bne.n	80204ac <tcp_process+0x5c>
        acceptable = 1;
 80204a6:	2301      	movs	r3, #1
 80204a8:	76fb      	strb	r3, [r7, #27]
 80204aa:	e017      	b.n	80204dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80204ac:	4b90      	ldr	r3, [pc, #576]	@ (80206f0 <tcp_process+0x2a0>)
 80204ae:	681a      	ldr	r2, [r3, #0]
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80204b4:	1ad3      	subs	r3, r2, r3
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	db10      	blt.n	80204dc <tcp_process+0x8c>
 80204ba:	4b8d      	ldr	r3, [pc, #564]	@ (80206f0 <tcp_process+0x2a0>)
 80204bc:	681a      	ldr	r2, [r3, #0]
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80204c2:	6879      	ldr	r1, [r7, #4]
 80204c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80204c6:	440b      	add	r3, r1
 80204c8:	1ad3      	subs	r3, r2, r3
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	dc06      	bgt.n	80204dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	8b5b      	ldrh	r3, [r3, #26]
 80204d2:	f043 0302 	orr.w	r3, r3, #2
 80204d6:	b29a      	uxth	r2, r3
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80204dc:	7efb      	ldrb	r3, [r7, #27]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d01b      	beq.n	802051a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	7d1b      	ldrb	r3, [r3, #20]
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d106      	bne.n	80204f8 <tcp_process+0xa8>
 80204ea:	4b7c      	ldr	r3, [pc, #496]	@ (80206dc <tcp_process+0x28c>)
 80204ec:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80204f0:	4980      	ldr	r1, [pc, #512]	@ (80206f4 <tcp_process+0x2a4>)
 80204f2:	487c      	ldr	r0, [pc, #496]	@ (80206e4 <tcp_process+0x294>)
 80204f4:	f008 ff38 	bl	8029368 <iprintf>
      recv_flags |= TF_RESET;
 80204f8:	4b7f      	ldr	r3, [pc, #508]	@ (80206f8 <tcp_process+0x2a8>)
 80204fa:	781b      	ldrb	r3, [r3, #0]
 80204fc:	f043 0308 	orr.w	r3, r3, #8
 8020500:	b2da      	uxtb	r2, r3
 8020502:	4b7d      	ldr	r3, [pc, #500]	@ (80206f8 <tcp_process+0x2a8>)
 8020504:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	8b5b      	ldrh	r3, [r3, #26]
 802050a:	f023 0301 	bic.w	r3, r3, #1
 802050e:	b29a      	uxth	r2, r3
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8020514:	f06f 030d 	mvn.w	r3, #13
 8020518:	e37a      	b.n	8020c10 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 802051a:	2300      	movs	r3, #0
 802051c:	e378      	b.n	8020c10 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 802051e:	4b72      	ldr	r3, [pc, #456]	@ (80206e8 <tcp_process+0x298>)
 8020520:	781b      	ldrb	r3, [r3, #0]
 8020522:	f003 0302 	and.w	r3, r3, #2
 8020526:	2b00      	cmp	r3, #0
 8020528:	d010      	beq.n	802054c <tcp_process+0xfc>
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	7d1b      	ldrb	r3, [r3, #20]
 802052e:	2b02      	cmp	r3, #2
 8020530:	d00c      	beq.n	802054c <tcp_process+0xfc>
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	7d1b      	ldrb	r3, [r3, #20]
 8020536:	2b03      	cmp	r3, #3
 8020538:	d008      	beq.n	802054c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	8b5b      	ldrh	r3, [r3, #26]
 802053e:	f043 0302 	orr.w	r3, r3, #2
 8020542:	b29a      	uxth	r2, r3
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8020548:	2300      	movs	r3, #0
 802054a:	e361      	b.n	8020c10 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	8b5b      	ldrh	r3, [r3, #26]
 8020550:	f003 0310 	and.w	r3, r3, #16
 8020554:	2b00      	cmp	r3, #0
 8020556:	d103      	bne.n	8020560 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8020558:	4b68      	ldr	r3, [pc, #416]	@ (80206fc <tcp_process+0x2ac>)
 802055a:	681a      	ldr	r2, [r3, #0]
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	2200      	movs	r2, #0
 8020564:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	2200      	movs	r2, #0
 802056c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8020570:	6878      	ldr	r0, [r7, #4]
 8020572:	f001 fc2b 	bl	8021dcc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	7d1b      	ldrb	r3, [r3, #20]
 802057a:	3b02      	subs	r3, #2
 802057c:	2b07      	cmp	r3, #7
 802057e:	f200 8337 	bhi.w	8020bf0 <tcp_process+0x7a0>
 8020582:	a201      	add	r2, pc, #4	@ (adr r2, 8020588 <tcp_process+0x138>)
 8020584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020588:	080205a9 	.word	0x080205a9
 802058c:	080207d9 	.word	0x080207d9
 8020590:	08020951 	.word	0x08020951
 8020594:	0802097b 	.word	0x0802097b
 8020598:	08020a9f 	.word	0x08020a9f
 802059c:	08020951 	.word	0x08020951
 80205a0:	08020b2b 	.word	0x08020b2b
 80205a4:	08020bbb 	.word	0x08020bbb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80205a8:	4b4f      	ldr	r3, [pc, #316]	@ (80206e8 <tcp_process+0x298>)
 80205aa:	781b      	ldrb	r3, [r3, #0]
 80205ac:	f003 0310 	and.w	r3, r3, #16
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	f000 80e4 	beq.w	802077e <tcp_process+0x32e>
 80205b6:	4b4c      	ldr	r3, [pc, #304]	@ (80206e8 <tcp_process+0x298>)
 80205b8:	781b      	ldrb	r3, [r3, #0]
 80205ba:	f003 0302 	and.w	r3, r3, #2
 80205be:	2b00      	cmp	r3, #0
 80205c0:	f000 80dd 	beq.w	802077e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80205c8:	1c5a      	adds	r2, r3, #1
 80205ca:	4b48      	ldr	r3, [pc, #288]	@ (80206ec <tcp_process+0x29c>)
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	429a      	cmp	r2, r3
 80205d0:	f040 80d5 	bne.w	802077e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80205d4:	4b46      	ldr	r3, [pc, #280]	@ (80206f0 <tcp_process+0x2a0>)
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	1c5a      	adds	r2, r3, #1
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80205e6:	4b41      	ldr	r3, [pc, #260]	@ (80206ec <tcp_process+0x29c>)
 80205e8:	681a      	ldr	r2, [r3, #0]
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80205ee:	4b44      	ldr	r3, [pc, #272]	@ (8020700 <tcp_process+0x2b0>)
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	89db      	ldrh	r3, [r3, #14]
 80205f4:	b29a      	uxth	r2, r3
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8020608:	4b39      	ldr	r3, [pc, #228]	@ (80206f0 <tcp_process+0x2a0>)
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	1e5a      	subs	r2, r3, #1
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	2204      	movs	r2, #4
 8020616:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	3304      	adds	r3, #4
 8020620:	4618      	mov	r0, r3
 8020622:	f006 fd0f 	bl	8027044 <ip4_route>
 8020626:	4601      	mov	r1, r0
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	3304      	adds	r3, #4
 802062c:	461a      	mov	r2, r3
 802062e:	4620      	mov	r0, r4
 8020630:	f7ff f88c 	bl	801f74c <tcp_eff_send_mss_netif>
 8020634:	4603      	mov	r3, r0
 8020636:	461a      	mov	r2, r3
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020640:	009a      	lsls	r2, r3, #2
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020646:	005b      	lsls	r3, r3, #1
 8020648:	f241 111c 	movw	r1, #4380	@ 0x111c
 802064c:	428b      	cmp	r3, r1
 802064e:	bf38      	it	cc
 8020650:	460b      	movcc	r3, r1
 8020652:	429a      	cmp	r2, r3
 8020654:	d204      	bcs.n	8020660 <tcp_process+0x210>
 8020656:	687b      	ldr	r3, [r7, #4]
 8020658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802065a:	009b      	lsls	r3, r3, #2
 802065c:	b29b      	uxth	r3, r3
 802065e:	e00d      	b.n	802067c <tcp_process+0x22c>
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020664:	005b      	lsls	r3, r3, #1
 8020666:	f241 121c 	movw	r2, #4380	@ 0x111c
 802066a:	4293      	cmp	r3, r2
 802066c:	d904      	bls.n	8020678 <tcp_process+0x228>
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020672:	005b      	lsls	r3, r3, #1
 8020674:	b29b      	uxth	r3, r3
 8020676:	e001      	b.n	802067c <tcp_process+0x22c>
 8020678:	f241 131c 	movw	r3, #4380	@ 0x111c
 802067c:	687a      	ldr	r2, [r7, #4]
 802067e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020688:	2b00      	cmp	r3, #0
 802068a:	d106      	bne.n	802069a <tcp_process+0x24a>
 802068c:	4b13      	ldr	r3, [pc, #76]	@ (80206dc <tcp_process+0x28c>)
 802068e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8020692:	491c      	ldr	r1, [pc, #112]	@ (8020704 <tcp_process+0x2b4>)
 8020694:	4813      	ldr	r0, [pc, #76]	@ (80206e4 <tcp_process+0x294>)
 8020696:	f008 fe67 	bl	8029368 <iprintf>
        --pcb->snd_queuelen;
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80206a0:	3b01      	subs	r3, #1
 80206a2:	b29a      	uxth	r2, r3
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80206ae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80206b0:	69fb      	ldr	r3, [r7, #28]
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	d12a      	bne.n	802070c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80206ba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80206bc:	69fb      	ldr	r3, [r7, #28]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d106      	bne.n	80206d0 <tcp_process+0x280>
 80206c2:	4b06      	ldr	r3, [pc, #24]	@ (80206dc <tcp_process+0x28c>)
 80206c4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80206c8:	490f      	ldr	r1, [pc, #60]	@ (8020708 <tcp_process+0x2b8>)
 80206ca:	4806      	ldr	r0, [pc, #24]	@ (80206e4 <tcp_process+0x294>)
 80206cc:	f008 fe4c 	bl	8029368 <iprintf>
          pcb->unsent = rseg->next;
 80206d0:	69fb      	ldr	r3, [r7, #28]
 80206d2:	681a      	ldr	r2, [r3, #0]
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80206d8:	e01c      	b.n	8020714 <tcp_process+0x2c4>
 80206da:	bf00      	nop
 80206dc:	0802ed78 	.word	0x0802ed78
 80206e0:	0802efb0 	.word	0x0802efb0
 80206e4:	0802edc4 	.word	0x0802edc4
 80206e8:	2400b4d0 	.word	0x2400b4d0
 80206ec:	2400b4c8 	.word	0x2400b4c8
 80206f0:	2400b4c4 	.word	0x2400b4c4
 80206f4:	0802efcc 	.word	0x0802efcc
 80206f8:	2400b4d1 	.word	0x2400b4d1
 80206fc:	2400b48c 	.word	0x2400b48c
 8020700:	2400b4b4 	.word	0x2400b4b4
 8020704:	0802efec 	.word	0x0802efec
 8020708:	0802f004 	.word	0x0802f004
        } else {
          pcb->unacked = rseg->next;
 802070c:	69fb      	ldr	r3, [r7, #28]
 802070e:	681a      	ldr	r2, [r3, #0]
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8020714:	69f8      	ldr	r0, [r7, #28]
 8020716:	f7fe fd22 	bl	801f15e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802071e:	2b00      	cmp	r3, #0
 8020720:	d104      	bne.n	802072c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020728:	861a      	strh	r2, [r3, #48]	@ 0x30
 802072a:	e006      	b.n	802073a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	2200      	movs	r2, #0
 8020730:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8020732:	687b      	ldr	r3, [r7, #4]
 8020734:	2200      	movs	r2, #0
 8020736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020740:	2b00      	cmp	r3, #0
 8020742:	d00a      	beq.n	802075a <tcp_process+0x30a>
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802074a:	687a      	ldr	r2, [r7, #4]
 802074c:	6910      	ldr	r0, [r2, #16]
 802074e:	2200      	movs	r2, #0
 8020750:	6879      	ldr	r1, [r7, #4]
 8020752:	4798      	blx	r3
 8020754:	4603      	mov	r3, r0
 8020756:	76bb      	strb	r3, [r7, #26]
 8020758:	e001      	b.n	802075e <tcp_process+0x30e>
 802075a:	2300      	movs	r3, #0
 802075c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 802075e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8020762:	f113 0f0d 	cmn.w	r3, #13
 8020766:	d102      	bne.n	802076e <tcp_process+0x31e>
          return ERR_ABRT;
 8020768:	f06f 030c 	mvn.w	r3, #12
 802076c:	e250      	b.n	8020c10 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	8b5b      	ldrh	r3, [r3, #26]
 8020772:	f043 0302 	orr.w	r3, r3, #2
 8020776:	b29a      	uxth	r2, r3
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 802077c:	e23a      	b.n	8020bf4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 802077e:	4b98      	ldr	r3, [pc, #608]	@ (80209e0 <tcp_process+0x590>)
 8020780:	781b      	ldrb	r3, [r3, #0]
 8020782:	f003 0310 	and.w	r3, r3, #16
 8020786:	2b00      	cmp	r3, #0
 8020788:	f000 8234 	beq.w	8020bf4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802078c:	4b95      	ldr	r3, [pc, #596]	@ (80209e4 <tcp_process+0x594>)
 802078e:	6819      	ldr	r1, [r3, #0]
 8020790:	4b95      	ldr	r3, [pc, #596]	@ (80209e8 <tcp_process+0x598>)
 8020792:	881b      	ldrh	r3, [r3, #0]
 8020794:	461a      	mov	r2, r3
 8020796:	4b95      	ldr	r3, [pc, #596]	@ (80209ec <tcp_process+0x59c>)
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802079c:	4b94      	ldr	r3, [pc, #592]	@ (80209f0 <tcp_process+0x5a0>)
 802079e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80207a0:	885b      	ldrh	r3, [r3, #2]
 80207a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80207a4:	4a92      	ldr	r2, [pc, #584]	@ (80209f0 <tcp_process+0x5a0>)
 80207a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80207a8:	8812      	ldrh	r2, [r2, #0]
 80207aa:	b292      	uxth	r2, r2
 80207ac:	9202      	str	r2, [sp, #8]
 80207ae:	9301      	str	r3, [sp, #4]
 80207b0:	4b90      	ldr	r3, [pc, #576]	@ (80209f4 <tcp_process+0x5a4>)
 80207b2:	9300      	str	r3, [sp, #0]
 80207b4:	4b90      	ldr	r3, [pc, #576]	@ (80209f8 <tcp_process+0x5a8>)
 80207b6:	4602      	mov	r2, r0
 80207b8:	6878      	ldr	r0, [r7, #4]
 80207ba:	f002 fc7f 	bl	80230bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80207c4:	2b05      	cmp	r3, #5
 80207c6:	f200 8215 	bhi.w	8020bf4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	2200      	movs	r2, #0
 80207ce:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80207d0:	6878      	ldr	r0, [r7, #4]
 80207d2:	f002 fa4b 	bl	8022c6c <tcp_rexmit_rto>
      break;
 80207d6:	e20d      	b.n	8020bf4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80207d8:	4b81      	ldr	r3, [pc, #516]	@ (80209e0 <tcp_process+0x590>)
 80207da:	781b      	ldrb	r3, [r3, #0]
 80207dc:	f003 0310 	and.w	r3, r3, #16
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	f000 80a1 	beq.w	8020928 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80207e6:	4b7f      	ldr	r3, [pc, #508]	@ (80209e4 <tcp_process+0x594>)
 80207e8:	681a      	ldr	r2, [r3, #0]
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80207ee:	1ad3      	subs	r3, r2, r3
 80207f0:	3b01      	subs	r3, #1
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	db7e      	blt.n	80208f4 <tcp_process+0x4a4>
 80207f6:	4b7b      	ldr	r3, [pc, #492]	@ (80209e4 <tcp_process+0x594>)
 80207f8:	681a      	ldr	r2, [r3, #0]
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80207fe:	1ad3      	subs	r3, r2, r3
 8020800:	2b00      	cmp	r3, #0
 8020802:	dc77      	bgt.n	80208f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	2204      	movs	r2, #4
 8020808:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802080e:	2b00      	cmp	r3, #0
 8020810:	d102      	bne.n	8020818 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8020812:	23fa      	movs	r3, #250	@ 0xfa
 8020814:	76bb      	strb	r3, [r7, #26]
 8020816:	e01d      	b.n	8020854 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802081c:	699b      	ldr	r3, [r3, #24]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d106      	bne.n	8020830 <tcp_process+0x3e0>
 8020822:	4b76      	ldr	r3, [pc, #472]	@ (80209fc <tcp_process+0x5ac>)
 8020824:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8020828:	4975      	ldr	r1, [pc, #468]	@ (8020a00 <tcp_process+0x5b0>)
 802082a:	4876      	ldr	r0, [pc, #472]	@ (8020a04 <tcp_process+0x5b4>)
 802082c:	f008 fd9c 	bl	8029368 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020834:	699b      	ldr	r3, [r3, #24]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d00a      	beq.n	8020850 <tcp_process+0x400>
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802083e:	699b      	ldr	r3, [r3, #24]
 8020840:	687a      	ldr	r2, [r7, #4]
 8020842:	6910      	ldr	r0, [r2, #16]
 8020844:	2200      	movs	r2, #0
 8020846:	6879      	ldr	r1, [r7, #4]
 8020848:	4798      	blx	r3
 802084a:	4603      	mov	r3, r0
 802084c:	76bb      	strb	r3, [r7, #26]
 802084e:	e001      	b.n	8020854 <tcp_process+0x404>
 8020850:	23f0      	movs	r3, #240	@ 0xf0
 8020852:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8020854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8020858:	2b00      	cmp	r3, #0
 802085a:	d00a      	beq.n	8020872 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 802085c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8020860:	f113 0f0d 	cmn.w	r3, #13
 8020864:	d002      	beq.n	802086c <tcp_process+0x41c>
              tcp_abort(pcb);
 8020866:	6878      	ldr	r0, [r7, #4]
 8020868:	f7fd ff8c 	bl	801e784 <tcp_abort>
            }
            return ERR_ABRT;
 802086c:	f06f 030c 	mvn.w	r3, #12
 8020870:	e1ce      	b.n	8020c10 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8020872:	6878      	ldr	r0, [r7, #4]
 8020874:	f000 fae0 	bl	8020e38 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8020878:	4b63      	ldr	r3, [pc, #396]	@ (8020a08 <tcp_process+0x5b8>)
 802087a:	881b      	ldrh	r3, [r3, #0]
 802087c:	2b00      	cmp	r3, #0
 802087e:	d005      	beq.n	802088c <tcp_process+0x43c>
            recv_acked--;
 8020880:	4b61      	ldr	r3, [pc, #388]	@ (8020a08 <tcp_process+0x5b8>)
 8020882:	881b      	ldrh	r3, [r3, #0]
 8020884:	3b01      	subs	r3, #1
 8020886:	b29a      	uxth	r2, r3
 8020888:	4b5f      	ldr	r3, [pc, #380]	@ (8020a08 <tcp_process+0x5b8>)
 802088a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020890:	009a      	lsls	r2, r3, #2
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020896:	005b      	lsls	r3, r3, #1
 8020898:	f241 111c 	movw	r1, #4380	@ 0x111c
 802089c:	428b      	cmp	r3, r1
 802089e:	bf38      	it	cc
 80208a0:	460b      	movcc	r3, r1
 80208a2:	429a      	cmp	r2, r3
 80208a4:	d204      	bcs.n	80208b0 <tcp_process+0x460>
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80208aa:	009b      	lsls	r3, r3, #2
 80208ac:	b29b      	uxth	r3, r3
 80208ae:	e00d      	b.n	80208cc <tcp_process+0x47c>
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80208b4:	005b      	lsls	r3, r3, #1
 80208b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80208ba:	4293      	cmp	r3, r2
 80208bc:	d904      	bls.n	80208c8 <tcp_process+0x478>
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80208c2:	005b      	lsls	r3, r3, #1
 80208c4:	b29b      	uxth	r3, r3
 80208c6:	e001      	b.n	80208cc <tcp_process+0x47c>
 80208c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80208cc:	687a      	ldr	r2, [r7, #4]
 80208ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80208d2:	4b4e      	ldr	r3, [pc, #312]	@ (8020a0c <tcp_process+0x5bc>)
 80208d4:	781b      	ldrb	r3, [r3, #0]
 80208d6:	f003 0320 	and.w	r3, r3, #32
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d037      	beq.n	802094e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	8b5b      	ldrh	r3, [r3, #26]
 80208e2:	f043 0302 	orr.w	r3, r3, #2
 80208e6:	b29a      	uxth	r2, r3
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	2207      	movs	r2, #7
 80208f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80208f2:	e02c      	b.n	802094e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80208f4:	4b3b      	ldr	r3, [pc, #236]	@ (80209e4 <tcp_process+0x594>)
 80208f6:	6819      	ldr	r1, [r3, #0]
 80208f8:	4b3b      	ldr	r3, [pc, #236]	@ (80209e8 <tcp_process+0x598>)
 80208fa:	881b      	ldrh	r3, [r3, #0]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4b3b      	ldr	r3, [pc, #236]	@ (80209ec <tcp_process+0x59c>)
 8020900:	681b      	ldr	r3, [r3, #0]
 8020902:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8020904:	4b3a      	ldr	r3, [pc, #232]	@ (80209f0 <tcp_process+0x5a0>)
 8020906:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8020908:	885b      	ldrh	r3, [r3, #2]
 802090a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802090c:	4a38      	ldr	r2, [pc, #224]	@ (80209f0 <tcp_process+0x5a0>)
 802090e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8020910:	8812      	ldrh	r2, [r2, #0]
 8020912:	b292      	uxth	r2, r2
 8020914:	9202      	str	r2, [sp, #8]
 8020916:	9301      	str	r3, [sp, #4]
 8020918:	4b36      	ldr	r3, [pc, #216]	@ (80209f4 <tcp_process+0x5a4>)
 802091a:	9300      	str	r3, [sp, #0]
 802091c:	4b36      	ldr	r3, [pc, #216]	@ (80209f8 <tcp_process+0x5a8>)
 802091e:	4602      	mov	r2, r0
 8020920:	6878      	ldr	r0, [r7, #4]
 8020922:	f002 fbcb 	bl	80230bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8020926:	e167      	b.n	8020bf8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8020928:	4b2d      	ldr	r3, [pc, #180]	@ (80209e0 <tcp_process+0x590>)
 802092a:	781b      	ldrb	r3, [r3, #0]
 802092c:	f003 0302 	and.w	r3, r3, #2
 8020930:	2b00      	cmp	r3, #0
 8020932:	f000 8161 	beq.w	8020bf8 <tcp_process+0x7a8>
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802093a:	1e5a      	subs	r2, r3, #1
 802093c:	4b2b      	ldr	r3, [pc, #172]	@ (80209ec <tcp_process+0x59c>)
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	429a      	cmp	r2, r3
 8020942:	f040 8159 	bne.w	8020bf8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8020946:	6878      	ldr	r0, [r7, #4]
 8020948:	f002 f9b2 	bl	8022cb0 <tcp_rexmit>
      break;
 802094c:	e154      	b.n	8020bf8 <tcp_process+0x7a8>
 802094e:	e153      	b.n	8020bf8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8020950:	6878      	ldr	r0, [r7, #4]
 8020952:	f000 fa71 	bl	8020e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8020956:	4b2d      	ldr	r3, [pc, #180]	@ (8020a0c <tcp_process+0x5bc>)
 8020958:	781b      	ldrb	r3, [r3, #0]
 802095a:	f003 0320 	and.w	r3, r3, #32
 802095e:	2b00      	cmp	r3, #0
 8020960:	f000 814c 	beq.w	8020bfc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	8b5b      	ldrh	r3, [r3, #26]
 8020968:	f043 0302 	orr.w	r3, r3, #2
 802096c:	b29a      	uxth	r2, r3
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	2207      	movs	r2, #7
 8020976:	751a      	strb	r2, [r3, #20]
      }
      break;
 8020978:	e140      	b.n	8020bfc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 802097a:	6878      	ldr	r0, [r7, #4]
 802097c:	f000 fa5c 	bl	8020e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8020980:	4b22      	ldr	r3, [pc, #136]	@ (8020a0c <tcp_process+0x5bc>)
 8020982:	781b      	ldrb	r3, [r3, #0]
 8020984:	f003 0320 	and.w	r3, r3, #32
 8020988:	2b00      	cmp	r3, #0
 802098a:	d071      	beq.n	8020a70 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802098c:	4b14      	ldr	r3, [pc, #80]	@ (80209e0 <tcp_process+0x590>)
 802098e:	781b      	ldrb	r3, [r3, #0]
 8020990:	f003 0310 	and.w	r3, r3, #16
 8020994:	2b00      	cmp	r3, #0
 8020996:	d060      	beq.n	8020a5a <tcp_process+0x60a>
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802099c:	4b11      	ldr	r3, [pc, #68]	@ (80209e4 <tcp_process+0x594>)
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	429a      	cmp	r2, r3
 80209a2:	d15a      	bne.n	8020a5a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d156      	bne.n	8020a5a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	8b5b      	ldrh	r3, [r3, #26]
 80209b0:	f043 0302 	orr.w	r3, r3, #2
 80209b4:	b29a      	uxth	r2, r3
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80209ba:	6878      	ldr	r0, [r7, #4]
 80209bc:	f7fe fdbc 	bl	801f538 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80209c0:	4b13      	ldr	r3, [pc, #76]	@ (8020a10 <tcp_process+0x5c0>)
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	687a      	ldr	r2, [r7, #4]
 80209c6:	429a      	cmp	r2, r3
 80209c8:	d105      	bne.n	80209d6 <tcp_process+0x586>
 80209ca:	4b11      	ldr	r3, [pc, #68]	@ (8020a10 <tcp_process+0x5c0>)
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	68db      	ldr	r3, [r3, #12]
 80209d0:	4a0f      	ldr	r2, [pc, #60]	@ (8020a10 <tcp_process+0x5c0>)
 80209d2:	6013      	str	r3, [r2, #0]
 80209d4:	e02e      	b.n	8020a34 <tcp_process+0x5e4>
 80209d6:	4b0e      	ldr	r3, [pc, #56]	@ (8020a10 <tcp_process+0x5c0>)
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	617b      	str	r3, [r7, #20]
 80209dc:	e027      	b.n	8020a2e <tcp_process+0x5de>
 80209de:	bf00      	nop
 80209e0:	2400b4d0 	.word	0x2400b4d0
 80209e4:	2400b4c8 	.word	0x2400b4c8
 80209e8:	2400b4ce 	.word	0x2400b4ce
 80209ec:	2400b4c4 	.word	0x2400b4c4
 80209f0:	2400b4b4 	.word	0x2400b4b4
 80209f4:	24008550 	.word	0x24008550
 80209f8:	24008554 	.word	0x24008554
 80209fc:	0802ed78 	.word	0x0802ed78
 8020a00:	0802f018 	.word	0x0802f018
 8020a04:	0802edc4 	.word	0x0802edc4
 8020a08:	2400b4cc 	.word	0x2400b4cc
 8020a0c:	2400b4d1 	.word	0x2400b4d1
 8020a10:	2400b498 	.word	0x2400b498
 8020a14:	697b      	ldr	r3, [r7, #20]
 8020a16:	68db      	ldr	r3, [r3, #12]
 8020a18:	687a      	ldr	r2, [r7, #4]
 8020a1a:	429a      	cmp	r2, r3
 8020a1c:	d104      	bne.n	8020a28 <tcp_process+0x5d8>
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	68da      	ldr	r2, [r3, #12]
 8020a22:	697b      	ldr	r3, [r7, #20]
 8020a24:	60da      	str	r2, [r3, #12]
 8020a26:	e005      	b.n	8020a34 <tcp_process+0x5e4>
 8020a28:	697b      	ldr	r3, [r7, #20]
 8020a2a:	68db      	ldr	r3, [r3, #12]
 8020a2c:	617b      	str	r3, [r7, #20]
 8020a2e:	697b      	ldr	r3, [r7, #20]
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d1ef      	bne.n	8020a14 <tcp_process+0x5c4>
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	2200      	movs	r2, #0
 8020a38:	60da      	str	r2, [r3, #12]
 8020a3a:	4b77      	ldr	r3, [pc, #476]	@ (8020c18 <tcp_process+0x7c8>)
 8020a3c:	2201      	movs	r2, #1
 8020a3e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	220a      	movs	r2, #10
 8020a44:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8020a46:	4b75      	ldr	r3, [pc, #468]	@ (8020c1c <tcp_process+0x7cc>)
 8020a48:	681a      	ldr	r2, [r3, #0]
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	60da      	str	r2, [r3, #12]
 8020a4e:	4a73      	ldr	r2, [pc, #460]	@ (8020c1c <tcp_process+0x7cc>)
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	6013      	str	r3, [r2, #0]
 8020a54:	f002 fcf4 	bl	8023440 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8020a58:	e0d2      	b.n	8020c00 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8020a5a:	687b      	ldr	r3, [r7, #4]
 8020a5c:	8b5b      	ldrh	r3, [r3, #26]
 8020a5e:	f043 0302 	orr.w	r3, r3, #2
 8020a62:	b29a      	uxth	r2, r3
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	2208      	movs	r2, #8
 8020a6c:	751a      	strb	r2, [r3, #20]
      break;
 8020a6e:	e0c7      	b.n	8020c00 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8020a70:	4b6b      	ldr	r3, [pc, #428]	@ (8020c20 <tcp_process+0x7d0>)
 8020a72:	781b      	ldrb	r3, [r3, #0]
 8020a74:	f003 0310 	and.w	r3, r3, #16
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	f000 80c1 	beq.w	8020c00 <tcp_process+0x7b0>
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020a82:	4b68      	ldr	r3, [pc, #416]	@ (8020c24 <tcp_process+0x7d4>)
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	429a      	cmp	r2, r3
 8020a88:	f040 80ba 	bne.w	8020c00 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	f040 80b5 	bne.w	8020c00 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	2206      	movs	r2, #6
 8020a9a:	751a      	strb	r2, [r3, #20]
      break;
 8020a9c:	e0b0      	b.n	8020c00 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8020a9e:	6878      	ldr	r0, [r7, #4]
 8020aa0:	f000 f9ca 	bl	8020e38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8020aa4:	4b60      	ldr	r3, [pc, #384]	@ (8020c28 <tcp_process+0x7d8>)
 8020aa6:	781b      	ldrb	r3, [r3, #0]
 8020aa8:	f003 0320 	and.w	r3, r3, #32
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	f000 80a9 	beq.w	8020c04 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	8b5b      	ldrh	r3, [r3, #26]
 8020ab6:	f043 0302 	orr.w	r3, r3, #2
 8020aba:	b29a      	uxth	r2, r3
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8020ac0:	6878      	ldr	r0, [r7, #4]
 8020ac2:	f7fe fd39 	bl	801f538 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8020ac6:	4b59      	ldr	r3, [pc, #356]	@ (8020c2c <tcp_process+0x7dc>)
 8020ac8:	681b      	ldr	r3, [r3, #0]
 8020aca:	687a      	ldr	r2, [r7, #4]
 8020acc:	429a      	cmp	r2, r3
 8020ace:	d105      	bne.n	8020adc <tcp_process+0x68c>
 8020ad0:	4b56      	ldr	r3, [pc, #344]	@ (8020c2c <tcp_process+0x7dc>)
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	68db      	ldr	r3, [r3, #12]
 8020ad6:	4a55      	ldr	r2, [pc, #340]	@ (8020c2c <tcp_process+0x7dc>)
 8020ad8:	6013      	str	r3, [r2, #0]
 8020ada:	e013      	b.n	8020b04 <tcp_process+0x6b4>
 8020adc:	4b53      	ldr	r3, [pc, #332]	@ (8020c2c <tcp_process+0x7dc>)
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	613b      	str	r3, [r7, #16]
 8020ae2:	e00c      	b.n	8020afe <tcp_process+0x6ae>
 8020ae4:	693b      	ldr	r3, [r7, #16]
 8020ae6:	68db      	ldr	r3, [r3, #12]
 8020ae8:	687a      	ldr	r2, [r7, #4]
 8020aea:	429a      	cmp	r2, r3
 8020aec:	d104      	bne.n	8020af8 <tcp_process+0x6a8>
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	68da      	ldr	r2, [r3, #12]
 8020af2:	693b      	ldr	r3, [r7, #16]
 8020af4:	60da      	str	r2, [r3, #12]
 8020af6:	e005      	b.n	8020b04 <tcp_process+0x6b4>
 8020af8:	693b      	ldr	r3, [r7, #16]
 8020afa:	68db      	ldr	r3, [r3, #12]
 8020afc:	613b      	str	r3, [r7, #16]
 8020afe:	693b      	ldr	r3, [r7, #16]
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d1ef      	bne.n	8020ae4 <tcp_process+0x694>
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	2200      	movs	r2, #0
 8020b08:	60da      	str	r2, [r3, #12]
 8020b0a:	4b43      	ldr	r3, [pc, #268]	@ (8020c18 <tcp_process+0x7c8>)
 8020b0c:	2201      	movs	r2, #1
 8020b0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	220a      	movs	r2, #10
 8020b14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8020b16:	4b41      	ldr	r3, [pc, #260]	@ (8020c1c <tcp_process+0x7cc>)
 8020b18:	681a      	ldr	r2, [r3, #0]
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	60da      	str	r2, [r3, #12]
 8020b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8020c1c <tcp_process+0x7cc>)
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	6013      	str	r3, [r2, #0]
 8020b24:	f002 fc8c 	bl	8023440 <tcp_timer_needed>
      }
      break;
 8020b28:	e06c      	b.n	8020c04 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8020b2a:	6878      	ldr	r0, [r7, #4]
 8020b2c:	f000 f984 	bl	8020e38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8020b30:	4b3b      	ldr	r3, [pc, #236]	@ (8020c20 <tcp_process+0x7d0>)
 8020b32:	781b      	ldrb	r3, [r3, #0]
 8020b34:	f003 0310 	and.w	r3, r3, #16
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d065      	beq.n	8020c08 <tcp_process+0x7b8>
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020b40:	4b38      	ldr	r3, [pc, #224]	@ (8020c24 <tcp_process+0x7d4>)
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	429a      	cmp	r2, r3
 8020b46:	d15f      	bne.n	8020c08 <tcp_process+0x7b8>
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d15b      	bne.n	8020c08 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8020b50:	6878      	ldr	r0, [r7, #4]
 8020b52:	f7fe fcf1 	bl	801f538 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8020b56:	4b35      	ldr	r3, [pc, #212]	@ (8020c2c <tcp_process+0x7dc>)
 8020b58:	681b      	ldr	r3, [r3, #0]
 8020b5a:	687a      	ldr	r2, [r7, #4]
 8020b5c:	429a      	cmp	r2, r3
 8020b5e:	d105      	bne.n	8020b6c <tcp_process+0x71c>
 8020b60:	4b32      	ldr	r3, [pc, #200]	@ (8020c2c <tcp_process+0x7dc>)
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	68db      	ldr	r3, [r3, #12]
 8020b66:	4a31      	ldr	r2, [pc, #196]	@ (8020c2c <tcp_process+0x7dc>)
 8020b68:	6013      	str	r3, [r2, #0]
 8020b6a:	e013      	b.n	8020b94 <tcp_process+0x744>
 8020b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8020c2c <tcp_process+0x7dc>)
 8020b6e:	681b      	ldr	r3, [r3, #0]
 8020b70:	60fb      	str	r3, [r7, #12]
 8020b72:	e00c      	b.n	8020b8e <tcp_process+0x73e>
 8020b74:	68fb      	ldr	r3, [r7, #12]
 8020b76:	68db      	ldr	r3, [r3, #12]
 8020b78:	687a      	ldr	r2, [r7, #4]
 8020b7a:	429a      	cmp	r2, r3
 8020b7c:	d104      	bne.n	8020b88 <tcp_process+0x738>
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	68da      	ldr	r2, [r3, #12]
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	60da      	str	r2, [r3, #12]
 8020b86:	e005      	b.n	8020b94 <tcp_process+0x744>
 8020b88:	68fb      	ldr	r3, [r7, #12]
 8020b8a:	68db      	ldr	r3, [r3, #12]
 8020b8c:	60fb      	str	r3, [r7, #12]
 8020b8e:	68fb      	ldr	r3, [r7, #12]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d1ef      	bne.n	8020b74 <tcp_process+0x724>
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	2200      	movs	r2, #0
 8020b98:	60da      	str	r2, [r3, #12]
 8020b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8020c18 <tcp_process+0x7c8>)
 8020b9c:	2201      	movs	r2, #1
 8020b9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	220a      	movs	r2, #10
 8020ba4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8020ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8020c1c <tcp_process+0x7cc>)
 8020ba8:	681a      	ldr	r2, [r3, #0]
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	60da      	str	r2, [r3, #12]
 8020bae:	4a1b      	ldr	r2, [pc, #108]	@ (8020c1c <tcp_process+0x7cc>)
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	6013      	str	r3, [r2, #0]
 8020bb4:	f002 fc44 	bl	8023440 <tcp_timer_needed>
      }
      break;
 8020bb8:	e026      	b.n	8020c08 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8020bba:	6878      	ldr	r0, [r7, #4]
 8020bbc:	f000 f93c 	bl	8020e38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8020bc0:	4b17      	ldr	r3, [pc, #92]	@ (8020c20 <tcp_process+0x7d0>)
 8020bc2:	781b      	ldrb	r3, [r3, #0]
 8020bc4:	f003 0310 	and.w	r3, r3, #16
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d01f      	beq.n	8020c0c <tcp_process+0x7bc>
 8020bcc:	687b      	ldr	r3, [r7, #4]
 8020bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020bd0:	4b14      	ldr	r3, [pc, #80]	@ (8020c24 <tcp_process+0x7d4>)
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	429a      	cmp	r2, r3
 8020bd6:	d119      	bne.n	8020c0c <tcp_process+0x7bc>
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d115      	bne.n	8020c0c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8020be0:	4b11      	ldr	r3, [pc, #68]	@ (8020c28 <tcp_process+0x7d8>)
 8020be2:	781b      	ldrb	r3, [r3, #0]
 8020be4:	f043 0310 	orr.w	r3, r3, #16
 8020be8:	b2da      	uxtb	r2, r3
 8020bea:	4b0f      	ldr	r3, [pc, #60]	@ (8020c28 <tcp_process+0x7d8>)
 8020bec:	701a      	strb	r2, [r3, #0]
      }
      break;
 8020bee:	e00d      	b.n	8020c0c <tcp_process+0x7bc>
    default:
      break;
 8020bf0:	bf00      	nop
 8020bf2:	e00c      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020bf4:	bf00      	nop
 8020bf6:	e00a      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020bf8:	bf00      	nop
 8020bfa:	e008      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020bfc:	bf00      	nop
 8020bfe:	e006      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020c00:	bf00      	nop
 8020c02:	e004      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020c04:	bf00      	nop
 8020c06:	e002      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020c08:	bf00      	nop
 8020c0a:	e000      	b.n	8020c0e <tcp_process+0x7be>
      break;
 8020c0c:	bf00      	nop
  }
  return ERR_OK;
 8020c0e:	2300      	movs	r3, #0
}
 8020c10:	4618      	mov	r0, r3
 8020c12:	3724      	adds	r7, #36	@ 0x24
 8020c14:	46bd      	mov	sp, r7
 8020c16:	bd90      	pop	{r4, r7, pc}
 8020c18:	2400b4a0 	.word	0x2400b4a0
 8020c1c:	2400b49c 	.word	0x2400b49c
 8020c20:	2400b4d0 	.word	0x2400b4d0
 8020c24:	2400b4c8 	.word	0x2400b4c8
 8020c28:	2400b4d1 	.word	0x2400b4d1
 8020c2c:	2400b498 	.word	0x2400b498

08020c30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8020c30:	b590      	push	{r4, r7, lr}
 8020c32:	b085      	sub	sp, #20
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
 8020c38:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d106      	bne.n	8020c4e <tcp_oos_insert_segment+0x1e>
 8020c40:	4b3b      	ldr	r3, [pc, #236]	@ (8020d30 <tcp_oos_insert_segment+0x100>)
 8020c42:	f240 421f 	movw	r2, #1055	@ 0x41f
 8020c46:	493b      	ldr	r1, [pc, #236]	@ (8020d34 <tcp_oos_insert_segment+0x104>)
 8020c48:	483b      	ldr	r0, [pc, #236]	@ (8020d38 <tcp_oos_insert_segment+0x108>)
 8020c4a:	f008 fb8d 	bl	8029368 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	68db      	ldr	r3, [r3, #12]
 8020c52:	899b      	ldrh	r3, [r3, #12]
 8020c54:	b29b      	uxth	r3, r3
 8020c56:	4618      	mov	r0, r3
 8020c58:	f7fa ffb2 	bl	801bbc0 <lwip_htons>
 8020c5c:	4603      	mov	r3, r0
 8020c5e:	b2db      	uxtb	r3, r3
 8020c60:	f003 0301 	and.w	r3, r3, #1
 8020c64:	2b00      	cmp	r3, #0
 8020c66:	d028      	beq.n	8020cba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8020c68:	6838      	ldr	r0, [r7, #0]
 8020c6a:	f7fe fa63 	bl	801f134 <tcp_segs_free>
    next = NULL;
 8020c6e:	2300      	movs	r3, #0
 8020c70:	603b      	str	r3, [r7, #0]
 8020c72:	e056      	b.n	8020d22 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8020c74:	683b      	ldr	r3, [r7, #0]
 8020c76:	68db      	ldr	r3, [r3, #12]
 8020c78:	899b      	ldrh	r3, [r3, #12]
 8020c7a:	b29b      	uxth	r3, r3
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	f7fa ff9f 	bl	801bbc0 <lwip_htons>
 8020c82:	4603      	mov	r3, r0
 8020c84:	b2db      	uxtb	r3, r3
 8020c86:	f003 0301 	and.w	r3, r3, #1
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d00d      	beq.n	8020caa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	68db      	ldr	r3, [r3, #12]
 8020c92:	899b      	ldrh	r3, [r3, #12]
 8020c94:	b29c      	uxth	r4, r3
 8020c96:	2001      	movs	r0, #1
 8020c98:	f7fa ff92 	bl	801bbc0 <lwip_htons>
 8020c9c:	4603      	mov	r3, r0
 8020c9e:	461a      	mov	r2, r3
 8020ca0:	687b      	ldr	r3, [r7, #4]
 8020ca2:	68db      	ldr	r3, [r3, #12]
 8020ca4:	4322      	orrs	r2, r4
 8020ca6:	b292      	uxth	r2, r2
 8020ca8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8020cae:	683b      	ldr	r3, [r7, #0]
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8020cb4:	68f8      	ldr	r0, [r7, #12]
 8020cb6:	f7fe fa52 	bl	801f15e <tcp_seg_free>
    while (next &&
 8020cba:	683b      	ldr	r3, [r7, #0]
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d00e      	beq.n	8020cde <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	891b      	ldrh	r3, [r3, #8]
 8020cc4:	461a      	mov	r2, r3
 8020cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8020d3c <tcp_oos_insert_segment+0x10c>)
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	441a      	add	r2, r3
 8020ccc:	683b      	ldr	r3, [r7, #0]
 8020cce:	68db      	ldr	r3, [r3, #12]
 8020cd0:	685b      	ldr	r3, [r3, #4]
 8020cd2:	6839      	ldr	r1, [r7, #0]
 8020cd4:	8909      	ldrh	r1, [r1, #8]
 8020cd6:	440b      	add	r3, r1
 8020cd8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	daca      	bge.n	8020c74 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8020cde:	683b      	ldr	r3, [r7, #0]
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d01e      	beq.n	8020d22 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	891b      	ldrh	r3, [r3, #8]
 8020ce8:	461a      	mov	r2, r3
 8020cea:	4b14      	ldr	r3, [pc, #80]	@ (8020d3c <tcp_oos_insert_segment+0x10c>)
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	441a      	add	r2, r3
 8020cf0:	683b      	ldr	r3, [r7, #0]
 8020cf2:	68db      	ldr	r3, [r3, #12]
 8020cf4:	685b      	ldr	r3, [r3, #4]
 8020cf6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	dd12      	ble.n	8020d22 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	68db      	ldr	r3, [r3, #12]
 8020d00:	685b      	ldr	r3, [r3, #4]
 8020d02:	b29a      	uxth	r2, r3
 8020d04:	4b0d      	ldr	r3, [pc, #52]	@ (8020d3c <tcp_oos_insert_segment+0x10c>)
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	b29b      	uxth	r3, r3
 8020d0a:	1ad3      	subs	r3, r2, r3
 8020d0c:	b29a      	uxth	r2, r3
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8020d12:	687b      	ldr	r3, [r7, #4]
 8020d14:	685a      	ldr	r2, [r3, #4]
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	891b      	ldrh	r3, [r3, #8]
 8020d1a:	4619      	mov	r1, r3
 8020d1c:	4610      	mov	r0, r2
 8020d1e:	f7fc fcb9 	bl	801d694 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	683a      	ldr	r2, [r7, #0]
 8020d26:	601a      	str	r2, [r3, #0]
}
 8020d28:	bf00      	nop
 8020d2a:	3714      	adds	r7, #20
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	bd90      	pop	{r4, r7, pc}
 8020d30:	0802ed78 	.word	0x0802ed78
 8020d34:	0802f038 	.word	0x0802f038
 8020d38:	0802edc4 	.word	0x0802edc4
 8020d3c:	2400b4c4 	.word	0x2400b4c4

08020d40 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8020d40:	b5b0      	push	{r4, r5, r7, lr}
 8020d42:	b086      	sub	sp, #24
 8020d44:	af00      	add	r7, sp, #0
 8020d46:	60f8      	str	r0, [r7, #12]
 8020d48:	60b9      	str	r1, [r7, #8]
 8020d4a:	607a      	str	r2, [r7, #4]
 8020d4c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8020d4e:	e03e      	b.n	8020dce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8020d50:	68bb      	ldr	r3, [r7, #8]
 8020d52:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8020d54:	68bb      	ldr	r3, [r7, #8]
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8020d5a:	697b      	ldr	r3, [r7, #20]
 8020d5c:	685b      	ldr	r3, [r3, #4]
 8020d5e:	4618      	mov	r0, r3
 8020d60:	f7fc fea6 	bl	801dab0 <pbuf_clen>
 8020d64:	4603      	mov	r3, r0
 8020d66:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020d6e:	8a7a      	ldrh	r2, [r7, #18]
 8020d70:	429a      	cmp	r2, r3
 8020d72:	d906      	bls.n	8020d82 <tcp_free_acked_segments+0x42>
 8020d74:	4b2a      	ldr	r3, [pc, #168]	@ (8020e20 <tcp_free_acked_segments+0xe0>)
 8020d76:	f240 4257 	movw	r2, #1111	@ 0x457
 8020d7a:	492a      	ldr	r1, [pc, #168]	@ (8020e24 <tcp_free_acked_segments+0xe4>)
 8020d7c:	482a      	ldr	r0, [pc, #168]	@ (8020e28 <tcp_free_acked_segments+0xe8>)
 8020d7e:	f008 faf3 	bl	8029368 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8020d82:	68fb      	ldr	r3, [r7, #12]
 8020d84:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8020d88:	8a7b      	ldrh	r3, [r7, #18]
 8020d8a:	1ad3      	subs	r3, r2, r3
 8020d8c:	b29a      	uxth	r2, r3
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8020d94:	697b      	ldr	r3, [r7, #20]
 8020d96:	891a      	ldrh	r2, [r3, #8]
 8020d98:	4b24      	ldr	r3, [pc, #144]	@ (8020e2c <tcp_free_acked_segments+0xec>)
 8020d9a:	881b      	ldrh	r3, [r3, #0]
 8020d9c:	4413      	add	r3, r2
 8020d9e:	b29a      	uxth	r2, r3
 8020da0:	4b22      	ldr	r3, [pc, #136]	@ (8020e2c <tcp_free_acked_segments+0xec>)
 8020da2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8020da4:	6978      	ldr	r0, [r7, #20]
 8020da6:	f7fe f9da 	bl	801f15e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d00c      	beq.n	8020dce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8020db4:	68bb      	ldr	r3, [r7, #8]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d109      	bne.n	8020dce <tcp_free_acked_segments+0x8e>
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d106      	bne.n	8020dce <tcp_free_acked_segments+0x8e>
 8020dc0:	4b17      	ldr	r3, [pc, #92]	@ (8020e20 <tcp_free_acked_segments+0xe0>)
 8020dc2:	f240 4261 	movw	r2, #1121	@ 0x461
 8020dc6:	491a      	ldr	r1, [pc, #104]	@ (8020e30 <tcp_free_acked_segments+0xf0>)
 8020dc8:	4817      	ldr	r0, [pc, #92]	@ (8020e28 <tcp_free_acked_segments+0xe8>)
 8020dca:	f008 facd 	bl	8029368 <iprintf>
  while (seg_list != NULL &&
 8020dce:	68bb      	ldr	r3, [r7, #8]
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d020      	beq.n	8020e16 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8020dd4:	68bb      	ldr	r3, [r7, #8]
 8020dd6:	68db      	ldr	r3, [r3, #12]
 8020dd8:	685b      	ldr	r3, [r3, #4]
 8020dda:	4618      	mov	r0, r3
 8020ddc:	f7fa ff05 	bl	801bbea <lwip_htonl>
 8020de0:	4604      	mov	r4, r0
 8020de2:	68bb      	ldr	r3, [r7, #8]
 8020de4:	891b      	ldrh	r3, [r3, #8]
 8020de6:	461d      	mov	r5, r3
 8020de8:	68bb      	ldr	r3, [r7, #8]
 8020dea:	68db      	ldr	r3, [r3, #12]
 8020dec:	899b      	ldrh	r3, [r3, #12]
 8020dee:	b29b      	uxth	r3, r3
 8020df0:	4618      	mov	r0, r3
 8020df2:	f7fa fee5 	bl	801bbc0 <lwip_htons>
 8020df6:	4603      	mov	r3, r0
 8020df8:	b2db      	uxtb	r3, r3
 8020dfa:	f003 0303 	and.w	r3, r3, #3
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d001      	beq.n	8020e06 <tcp_free_acked_segments+0xc6>
 8020e02:	2301      	movs	r3, #1
 8020e04:	e000      	b.n	8020e08 <tcp_free_acked_segments+0xc8>
 8020e06:	2300      	movs	r3, #0
 8020e08:	442b      	add	r3, r5
 8020e0a:	18e2      	adds	r2, r4, r3
 8020e0c:	4b09      	ldr	r3, [pc, #36]	@ (8020e34 <tcp_free_acked_segments+0xf4>)
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	dd9c      	ble.n	8020d50 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8020e16:	68bb      	ldr	r3, [r7, #8]
}
 8020e18:	4618      	mov	r0, r3
 8020e1a:	3718      	adds	r7, #24
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8020e20:	0802ed78 	.word	0x0802ed78
 8020e24:	0802f060 	.word	0x0802f060
 8020e28:	0802edc4 	.word	0x0802edc4
 8020e2c:	2400b4cc 	.word	0x2400b4cc
 8020e30:	0802f088 	.word	0x0802f088
 8020e34:	2400b4c8 	.word	0x2400b4c8

08020e38 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8020e38:	b5b0      	push	{r4, r5, r7, lr}
 8020e3a:	b094      	sub	sp, #80	@ 0x50
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8020e40:	2300      	movs	r3, #0
 8020e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d106      	bne.n	8020e58 <tcp_receive+0x20>
 8020e4a:	4b91      	ldr	r3, [pc, #580]	@ (8021090 <tcp_receive+0x258>)
 8020e4c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8020e50:	4990      	ldr	r1, [pc, #576]	@ (8021094 <tcp_receive+0x25c>)
 8020e52:	4891      	ldr	r0, [pc, #580]	@ (8021098 <tcp_receive+0x260>)
 8020e54:	f008 fa88 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	7d1b      	ldrb	r3, [r3, #20]
 8020e5c:	2b03      	cmp	r3, #3
 8020e5e:	d806      	bhi.n	8020e6e <tcp_receive+0x36>
 8020e60:	4b8b      	ldr	r3, [pc, #556]	@ (8021090 <tcp_receive+0x258>)
 8020e62:	f240 427c 	movw	r2, #1148	@ 0x47c
 8020e66:	498d      	ldr	r1, [pc, #564]	@ (802109c <tcp_receive+0x264>)
 8020e68:	488b      	ldr	r0, [pc, #556]	@ (8021098 <tcp_receive+0x260>)
 8020e6a:	f008 fa7d 	bl	8029368 <iprintf>

  if (flags & TCP_ACK) {
 8020e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80210a0 <tcp_receive+0x268>)
 8020e70:	781b      	ldrb	r3, [r3, #0]
 8020e72:	f003 0310 	and.w	r3, r3, #16
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	f000 8264 	beq.w	8021344 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8020e82:	461a      	mov	r2, r3
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020e88:	4413      	add	r3, r2
 8020e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020e90:	4b84      	ldr	r3, [pc, #528]	@ (80210a4 <tcp_receive+0x26c>)
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	1ad3      	subs	r3, r2, r3
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	db1b      	blt.n	8020ed2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020e9e:	4b81      	ldr	r3, [pc, #516]	@ (80210a4 <tcp_receive+0x26c>)
 8020ea0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8020ea2:	429a      	cmp	r2, r3
 8020ea4:	d106      	bne.n	8020eb4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8020eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80210a8 <tcp_receive+0x270>)
 8020eac:	681b      	ldr	r3, [r3, #0]
 8020eae:	1ad3      	subs	r3, r2, r3
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	db0e      	blt.n	8020ed2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8020eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80210a8 <tcp_receive+0x270>)
 8020eba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8020ebc:	429a      	cmp	r2, r3
 8020ebe:	d125      	bne.n	8020f0c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8020ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80210ac <tcp_receive+0x274>)
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	89db      	ldrh	r3, [r3, #14]
 8020ec6:	b29a      	uxth	r2, r3
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8020ece:	429a      	cmp	r2, r3
 8020ed0:	d91c      	bls.n	8020f0c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8020ed2:	4b76      	ldr	r3, [pc, #472]	@ (80210ac <tcp_receive+0x274>)
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	89db      	ldrh	r3, [r3, #14]
 8020ed8:	b29a      	uxth	r2, r3
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8020eec:	429a      	cmp	r2, r3
 8020eee:	d205      	bcs.n	8020efc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8020efc:	4b69      	ldr	r3, [pc, #420]	@ (80210a4 <tcp_receive+0x26c>)
 8020efe:	681a      	ldr	r2, [r3, #0]
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8020f04:	4b68      	ldr	r3, [pc, #416]	@ (80210a8 <tcp_receive+0x270>)
 8020f06:	681a      	ldr	r2, [r3, #0]
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8020f0c:	4b66      	ldr	r3, [pc, #408]	@ (80210a8 <tcp_receive+0x270>)
 8020f0e:	681a      	ldr	r2, [r3, #0]
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020f14:	1ad3      	subs	r3, r2, r3
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	dc58      	bgt.n	8020fcc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8020f1a:	4b65      	ldr	r3, [pc, #404]	@ (80210b0 <tcp_receive+0x278>)
 8020f1c:	881b      	ldrh	r3, [r3, #0]
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d14b      	bne.n	8020fba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020f26:	687a      	ldr	r2, [r7, #4]
 8020f28:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8020f2c:	4413      	add	r3, r2
 8020f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020f30:	429a      	cmp	r2, r3
 8020f32:	d142      	bne.n	8020fba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	db3d      	blt.n	8020fba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020f42:	4b59      	ldr	r3, [pc, #356]	@ (80210a8 <tcp_receive+0x270>)
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	429a      	cmp	r2, r3
 8020f48:	d137      	bne.n	8020fba <tcp_receive+0x182>
              found_dupack = 1;
 8020f4a:	2301      	movs	r3, #1
 8020f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020f54:	2bff      	cmp	r3, #255	@ 0xff
 8020f56:	d007      	beq.n	8020f68 <tcp_receive+0x130>
                ++pcb->dupacks;
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020f5e:	3301      	adds	r3, #1
 8020f60:	b2da      	uxtb	r2, r3
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020f6e:	2b03      	cmp	r3, #3
 8020f70:	d91b      	bls.n	8020faa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020f7c:	4413      	add	r3, r2
 8020f7e:	b29a      	uxth	r2, r3
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8020f86:	429a      	cmp	r2, r3
 8020f88:	d30a      	bcc.n	8020fa0 <tcp_receive+0x168>
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020f94:	4413      	add	r3, r2
 8020f96:	b29a      	uxth	r2, r3
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8020f9e:	e004      	b.n	8020faa <tcp_receive+0x172>
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8020fb0:	2b02      	cmp	r3, #2
 8020fb2:	d902      	bls.n	8020fba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8020fb4:	6878      	ldr	r0, [r7, #4]
 8020fb6:	f001 fee7 	bl	8022d88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8020fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	f040 8161 	bne.w	8021284 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	2200      	movs	r2, #0
 8020fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8020fca:	e15b      	b.n	8021284 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8020fcc:	4b36      	ldr	r3, [pc, #216]	@ (80210a8 <tcp_receive+0x270>)
 8020fce:	681a      	ldr	r2, [r3, #0]
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020fd4:	1ad3      	subs	r3, r2, r3
 8020fd6:	3b01      	subs	r3, #1
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	f2c0 814e 	blt.w	802127a <tcp_receive+0x442>
 8020fde:	4b32      	ldr	r3, [pc, #200]	@ (80210a8 <tcp_receive+0x270>)
 8020fe0:	681a      	ldr	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020fe6:	1ad3      	subs	r3, r2, r3
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	f300 8146 	bgt.w	802127a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	8b5b      	ldrh	r3, [r3, #26]
 8020ff2:	f003 0304 	and.w	r3, r3, #4
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d010      	beq.n	802101c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	8b5b      	ldrh	r3, [r3, #26]
 8020ffe:	f023 0304 	bic.w	r3, r3, #4
 8021002:	b29a      	uxth	r2, r3
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	2200      	movs	r2, #0
 8021018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	2200      	movs	r2, #0
 8021020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 802102a:	10db      	asrs	r3, r3, #3
 802102c:	b21b      	sxth	r3, r3
 802102e:	b29a      	uxth	r2, r3
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8021036:	b29b      	uxth	r3, r3
 8021038:	4413      	add	r3, r2
 802103a:	b29b      	uxth	r3, r3
 802103c:	b21a      	sxth	r2, r3
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8021044:	4b18      	ldr	r3, [pc, #96]	@ (80210a8 <tcp_receive+0x270>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	b29a      	uxth	r2, r3
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802104e:	b29b      	uxth	r3, r3
 8021050:	1ad3      	subs	r3, r2, r3
 8021052:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	2200      	movs	r2, #0
 8021058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 802105c:	4b12      	ldr	r3, [pc, #72]	@ (80210a8 <tcp_receive+0x270>)
 802105e:	681a      	ldr	r2, [r3, #0]
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	7d1b      	ldrb	r3, [r3, #20]
 8021068:	2b03      	cmp	r3, #3
 802106a:	f240 8097 	bls.w	802119c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 802107a:	429a      	cmp	r2, r3
 802107c:	d245      	bcs.n	802110a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	8b5b      	ldrh	r3, [r3, #26]
 8021082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021086:	2b00      	cmp	r3, #0
 8021088:	d014      	beq.n	80210b4 <tcp_receive+0x27c>
 802108a:	2301      	movs	r3, #1
 802108c:	e013      	b.n	80210b6 <tcp_receive+0x27e>
 802108e:	bf00      	nop
 8021090:	0802ed78 	.word	0x0802ed78
 8021094:	0802f0a8 	.word	0x0802f0a8
 8021098:	0802edc4 	.word	0x0802edc4
 802109c:	0802f0c4 	.word	0x0802f0c4
 80210a0:	2400b4d0 	.word	0x2400b4d0
 80210a4:	2400b4c4 	.word	0x2400b4c4
 80210a8:	2400b4c8 	.word	0x2400b4c8
 80210ac:	2400b4b4 	.word	0x2400b4b4
 80210b0:	2400b4ce 	.word	0x2400b4ce
 80210b4:	2302      	movs	r3, #2
 80210b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80210ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80210be:	b29a      	uxth	r2, r3
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80210c4:	fb12 f303 	smulbb	r3, r2, r3
 80210c8:	b29b      	uxth	r3, r3
 80210ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80210cc:	4293      	cmp	r3, r2
 80210ce:	bf28      	it	cs
 80210d0:	4613      	movcs	r3, r2
 80210d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80210da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80210dc:	4413      	add	r3, r2
 80210de:	b29a      	uxth	r2, r3
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80210e6:	429a      	cmp	r2, r3
 80210e8:	d309      	bcc.n	80210fe <tcp_receive+0x2c6>
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80210f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80210f2:	4413      	add	r3, r2
 80210f4:	b29a      	uxth	r2, r3
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80210fc:	e04e      	b.n	802119c <tcp_receive+0x364>
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021104:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8021108:	e048      	b.n	802119c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8021110:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8021112:	4413      	add	r3, r2
 8021114:	b29a      	uxth	r2, r3
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 802111c:	429a      	cmp	r2, r3
 802111e:	d309      	bcc.n	8021134 <tcp_receive+0x2fc>
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8021126:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8021128:	4413      	add	r3, r2
 802112a:	b29a      	uxth	r2, r3
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8021132:	e004      	b.n	802113e <tcp_receive+0x306>
 8021134:	687b      	ldr	r3, [r7, #4]
 8021136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802113a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802114a:	429a      	cmp	r2, r3
 802114c:	d326      	bcc.n	802119c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802115a:	1ad3      	subs	r3, r2, r3
 802115c:	b29a      	uxth	r2, r3
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802116e:	4413      	add	r3, r2
 8021170:	b29a      	uxth	r2, r3
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8021178:	429a      	cmp	r2, r3
 802117a:	d30a      	bcc.n	8021192 <tcp_receive+0x35a>
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8021186:	4413      	add	r3, r2
 8021188:	b29a      	uxth	r2, r3
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8021190:	e004      	b.n	802119c <tcp_receive+0x364>
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021198:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80211a4:	4a98      	ldr	r2, [pc, #608]	@ (8021408 <tcp_receive+0x5d0>)
 80211a6:	6878      	ldr	r0, [r7, #4]
 80211a8:	f7ff fdca 	bl	8020d40 <tcp_free_acked_segments>
 80211ac:	4602      	mov	r2, r0
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80211ba:	4a94      	ldr	r2, [pc, #592]	@ (802140c <tcp_receive+0x5d4>)
 80211bc:	6878      	ldr	r0, [r7, #4]
 80211be:	f7ff fdbf 	bl	8020d40 <tcp_free_acked_segments>
 80211c2:	4602      	mov	r2, r0
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d104      	bne.n	80211da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80211d6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80211d8:	e002      	b.n	80211e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	2200      	movs	r2, #0
 80211de:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	2200      	movs	r2, #0
 80211e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80211e6:	687b      	ldr	r3, [r7, #4]
 80211e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d103      	bne.n	80211f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	2200      	movs	r2, #0
 80211f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80211fc:	4b84      	ldr	r3, [pc, #528]	@ (8021410 <tcp_receive+0x5d8>)
 80211fe:	881b      	ldrh	r3, [r3, #0]
 8021200:	4413      	add	r3, r2
 8021202:	b29a      	uxth	r2, r3
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	8b5b      	ldrh	r3, [r3, #26]
 802120e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021212:	2b00      	cmp	r3, #0
 8021214:	d035      	beq.n	8021282 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802121a:	2b00      	cmp	r3, #0
 802121c:	d118      	bne.n	8021250 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021222:	2b00      	cmp	r3, #0
 8021224:	d00c      	beq.n	8021240 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802122e:	68db      	ldr	r3, [r3, #12]
 8021230:	685b      	ldr	r3, [r3, #4]
 8021232:	4618      	mov	r0, r3
 8021234:	f7fa fcd9 	bl	801bbea <lwip_htonl>
 8021238:	4603      	mov	r3, r0
 802123a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 802123c:	2b00      	cmp	r3, #0
 802123e:	dc20      	bgt.n	8021282 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	8b5b      	ldrh	r3, [r3, #26]
 8021244:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8021248:	b29a      	uxth	r2, r3
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802124e:	e018      	b.n	8021282 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8021254:	687b      	ldr	r3, [r7, #4]
 8021256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021258:	68db      	ldr	r3, [r3, #12]
 802125a:	685b      	ldr	r3, [r3, #4]
 802125c:	4618      	mov	r0, r3
 802125e:	f7fa fcc4 	bl	801bbea <lwip_htonl>
 8021262:	4603      	mov	r3, r0
 8021264:	1ae3      	subs	r3, r4, r3
 8021266:	2b00      	cmp	r3, #0
 8021268:	dc0b      	bgt.n	8021282 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	8b5b      	ldrh	r3, [r3, #26]
 802126e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8021272:	b29a      	uxth	r2, r3
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8021278:	e003      	b.n	8021282 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 802127a:	6878      	ldr	r0, [r7, #4]
 802127c:	f001 ff70 	bl	8023160 <tcp_send_empty_ack>
 8021280:	e000      	b.n	8021284 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8021282:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021288:	2b00      	cmp	r3, #0
 802128a:	d05b      	beq.n	8021344 <tcp_receive+0x50c>
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021290:	4b60      	ldr	r3, [pc, #384]	@ (8021414 <tcp_receive+0x5dc>)
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	1ad3      	subs	r3, r2, r3
 8021296:	2b00      	cmp	r3, #0
 8021298:	da54      	bge.n	8021344 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802129a:	4b5f      	ldr	r3, [pc, #380]	@ (8021418 <tcp_receive+0x5e0>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	b29a      	uxth	r2, r3
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80212a4:	b29b      	uxth	r3, r3
 80212a6:	1ad3      	subs	r3, r2, r3
 80212a8:	b29b      	uxth	r3, r3
 80212aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80212ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80212b8:	10db      	asrs	r3, r3, #3
 80212ba:	b21b      	sxth	r3, r3
 80212bc:	b29b      	uxth	r3, r3
 80212be:	1ad3      	subs	r3, r2, r3
 80212c0:	b29b      	uxth	r3, r3
 80212c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80212cc:	b29a      	uxth	r2, r3
 80212ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80212d2:	4413      	add	r3, r2
 80212d4:	b29b      	uxth	r3, r3
 80212d6:	b21a      	sxth	r2, r3
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80212dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	da05      	bge.n	80212f0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80212e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80212e8:	425b      	negs	r3, r3
 80212ea:	b29b      	uxth	r3, r3
 80212ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80212f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80212fa:	109b      	asrs	r3, r3, #2
 80212fc:	b21b      	sxth	r3, r3
 80212fe:	b29b      	uxth	r3, r3
 8021300:	1ad3      	subs	r3, r2, r3
 8021302:	b29b      	uxth	r3, r3
 8021304:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 802130e:	b29a      	uxth	r2, r3
 8021310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8021314:	4413      	add	r3, r2
 8021316:	b29b      	uxth	r3, r3
 8021318:	b21a      	sxth	r2, r3
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8021324:	10db      	asrs	r3, r3, #3
 8021326:	b21b      	sxth	r3, r3
 8021328:	b29a      	uxth	r2, r3
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8021330:	b29b      	uxth	r3, r3
 8021332:	4413      	add	r3, r2
 8021334:	b29b      	uxth	r3, r3
 8021336:	b21a      	sxth	r2, r3
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	2200      	movs	r2, #0
 8021342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8021344:	4b35      	ldr	r3, [pc, #212]	@ (802141c <tcp_receive+0x5e4>)
 8021346:	881b      	ldrh	r3, [r3, #0]
 8021348:	2b00      	cmp	r3, #0
 802134a:	f000 84df 	beq.w	8021d0c <tcp_receive+0xed4>
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	7d1b      	ldrb	r3, [r3, #20]
 8021352:	2b06      	cmp	r3, #6
 8021354:	f200 84da 	bhi.w	8021d0c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802135c:	4b30      	ldr	r3, [pc, #192]	@ (8021420 <tcp_receive+0x5e8>)
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	1ad3      	subs	r3, r2, r3
 8021362:	3b01      	subs	r3, #1
 8021364:	2b00      	cmp	r3, #0
 8021366:	f2c0 808f 	blt.w	8021488 <tcp_receive+0x650>
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802136e:	4b2b      	ldr	r3, [pc, #172]	@ (802141c <tcp_receive+0x5e4>)
 8021370:	881b      	ldrh	r3, [r3, #0]
 8021372:	4619      	mov	r1, r3
 8021374:	4b2a      	ldr	r3, [pc, #168]	@ (8021420 <tcp_receive+0x5e8>)
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	440b      	add	r3, r1
 802137a:	1ad3      	subs	r3, r2, r3
 802137c:	3301      	adds	r3, #1
 802137e:	2b00      	cmp	r3, #0
 8021380:	f300 8082 	bgt.w	8021488 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8021384:	4b27      	ldr	r3, [pc, #156]	@ (8021424 <tcp_receive+0x5ec>)
 8021386:	685b      	ldr	r3, [r3, #4]
 8021388:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802138e:	4b24      	ldr	r3, [pc, #144]	@ (8021420 <tcp_receive+0x5e8>)
 8021390:	681b      	ldr	r3, [r3, #0]
 8021392:	1ad3      	subs	r3, r2, r3
 8021394:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8021396:	4b23      	ldr	r3, [pc, #140]	@ (8021424 <tcp_receive+0x5ec>)
 8021398:	685b      	ldr	r3, [r3, #4]
 802139a:	2b00      	cmp	r3, #0
 802139c:	d106      	bne.n	80213ac <tcp_receive+0x574>
 802139e:	4b22      	ldr	r3, [pc, #136]	@ (8021428 <tcp_receive+0x5f0>)
 80213a0:	f240 5294 	movw	r2, #1428	@ 0x594
 80213a4:	4921      	ldr	r1, [pc, #132]	@ (802142c <tcp_receive+0x5f4>)
 80213a6:	4822      	ldr	r0, [pc, #136]	@ (8021430 <tcp_receive+0x5f8>)
 80213a8:	f007 ffde 	bl	8029368 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80213ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80213b2:	4293      	cmp	r3, r2
 80213b4:	d906      	bls.n	80213c4 <tcp_receive+0x58c>
 80213b6:	4b1c      	ldr	r3, [pc, #112]	@ (8021428 <tcp_receive+0x5f0>)
 80213b8:	f240 5295 	movw	r2, #1429	@ 0x595
 80213bc:	491d      	ldr	r1, [pc, #116]	@ (8021434 <tcp_receive+0x5fc>)
 80213be:	481c      	ldr	r0, [pc, #112]	@ (8021430 <tcp_receive+0x5f8>)
 80213c0:	f007 ffd2 	bl	8029368 <iprintf>
      off = (u16_t)off32;
 80213c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80213ca:	4b16      	ldr	r3, [pc, #88]	@ (8021424 <tcp_receive+0x5ec>)
 80213cc:	685b      	ldr	r3, [r3, #4]
 80213ce:	891b      	ldrh	r3, [r3, #8]
 80213d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80213d4:	429a      	cmp	r2, r3
 80213d6:	d906      	bls.n	80213e6 <tcp_receive+0x5ae>
 80213d8:	4b13      	ldr	r3, [pc, #76]	@ (8021428 <tcp_receive+0x5f0>)
 80213da:	f240 5297 	movw	r2, #1431	@ 0x597
 80213de:	4916      	ldr	r1, [pc, #88]	@ (8021438 <tcp_receive+0x600>)
 80213e0:	4813      	ldr	r0, [pc, #76]	@ (8021430 <tcp_receive+0x5f8>)
 80213e2:	f007 ffc1 	bl	8029368 <iprintf>
      inseg.len -= off;
 80213e6:	4b0f      	ldr	r3, [pc, #60]	@ (8021424 <tcp_receive+0x5ec>)
 80213e8:	891a      	ldrh	r2, [r3, #8]
 80213ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80213ee:	1ad3      	subs	r3, r2, r3
 80213f0:	b29a      	uxth	r2, r3
 80213f2:	4b0c      	ldr	r3, [pc, #48]	@ (8021424 <tcp_receive+0x5ec>)
 80213f4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80213f6:	4b0b      	ldr	r3, [pc, #44]	@ (8021424 <tcp_receive+0x5ec>)
 80213f8:	685b      	ldr	r3, [r3, #4]
 80213fa:	891a      	ldrh	r2, [r3, #8]
 80213fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8021400:	1ad3      	subs	r3, r2, r3
 8021402:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8021404:	e02a      	b.n	802145c <tcp_receive+0x624>
 8021406:	bf00      	nop
 8021408:	0802f0e0 	.word	0x0802f0e0
 802140c:	0802f0e8 	.word	0x0802f0e8
 8021410:	2400b4cc 	.word	0x2400b4cc
 8021414:	2400b4c8 	.word	0x2400b4c8
 8021418:	2400b48c 	.word	0x2400b48c
 802141c:	2400b4ce 	.word	0x2400b4ce
 8021420:	2400b4c4 	.word	0x2400b4c4
 8021424:	2400b4a4 	.word	0x2400b4a4
 8021428:	0802ed78 	.word	0x0802ed78
 802142c:	0802f0f0 	.word	0x0802f0f0
 8021430:	0802edc4 	.word	0x0802edc4
 8021434:	0802f100 	.word	0x0802f100
 8021438:	0802f110 	.word	0x0802f110
        off -= p->len;
 802143c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802143e:	895b      	ldrh	r3, [r3, #10]
 8021440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8021444:	1ad3      	subs	r3, r2, r3
 8021446:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 802144a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802144c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 802144e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8021450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021452:	2200      	movs	r2, #0
 8021454:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8021456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 802145c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802145e:	895b      	ldrh	r3, [r3, #10]
 8021460:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8021464:	429a      	cmp	r2, r3
 8021466:	d8e9      	bhi.n	802143c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8021468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802146c:	4619      	mov	r1, r3
 802146e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8021470:	f7fc fa10 	bl	801d894 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021478:	4a90      	ldr	r2, [pc, #576]	@ (80216bc <tcp_receive+0x884>)
 802147a:	6013      	str	r3, [r2, #0]
 802147c:	4b90      	ldr	r3, [pc, #576]	@ (80216c0 <tcp_receive+0x888>)
 802147e:	68db      	ldr	r3, [r3, #12]
 8021480:	4a8e      	ldr	r2, [pc, #568]	@ (80216bc <tcp_receive+0x884>)
 8021482:	6812      	ldr	r2, [r2, #0]
 8021484:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8021486:	e00d      	b.n	80214a4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8021488:	4b8c      	ldr	r3, [pc, #560]	@ (80216bc <tcp_receive+0x884>)
 802148a:	681a      	ldr	r2, [r3, #0]
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021490:	1ad3      	subs	r3, r2, r3
 8021492:	2b00      	cmp	r3, #0
 8021494:	da06      	bge.n	80214a4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8021496:	687b      	ldr	r3, [r7, #4]
 8021498:	8b5b      	ldrh	r3, [r3, #26]
 802149a:	f043 0302 	orr.w	r3, r3, #2
 802149e:	b29a      	uxth	r2, r3
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80214a4:	4b85      	ldr	r3, [pc, #532]	@ (80216bc <tcp_receive+0x884>)
 80214a6:	681a      	ldr	r2, [r3, #0]
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214ac:	1ad3      	subs	r3, r2, r3
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	f2c0 8427 	blt.w	8021d02 <tcp_receive+0xeca>
 80214b4:	4b81      	ldr	r3, [pc, #516]	@ (80216bc <tcp_receive+0x884>)
 80214b6:	681a      	ldr	r2, [r3, #0]
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214bc:	6879      	ldr	r1, [r7, #4]
 80214be:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80214c0:	440b      	add	r3, r1
 80214c2:	1ad3      	subs	r3, r2, r3
 80214c4:	3301      	adds	r3, #1
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	f300 841b 	bgt.w	8021d02 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80214d0:	4b7a      	ldr	r3, [pc, #488]	@ (80216bc <tcp_receive+0x884>)
 80214d2:	681b      	ldr	r3, [r3, #0]
 80214d4:	429a      	cmp	r2, r3
 80214d6:	f040 8298 	bne.w	8021a0a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80214da:	4b79      	ldr	r3, [pc, #484]	@ (80216c0 <tcp_receive+0x888>)
 80214dc:	891c      	ldrh	r4, [r3, #8]
 80214de:	4b78      	ldr	r3, [pc, #480]	@ (80216c0 <tcp_receive+0x888>)
 80214e0:	68db      	ldr	r3, [r3, #12]
 80214e2:	899b      	ldrh	r3, [r3, #12]
 80214e4:	b29b      	uxth	r3, r3
 80214e6:	4618      	mov	r0, r3
 80214e8:	f7fa fb6a 	bl	801bbc0 <lwip_htons>
 80214ec:	4603      	mov	r3, r0
 80214ee:	b2db      	uxtb	r3, r3
 80214f0:	f003 0303 	and.w	r3, r3, #3
 80214f4:	2b00      	cmp	r3, #0
 80214f6:	d001      	beq.n	80214fc <tcp_receive+0x6c4>
 80214f8:	2301      	movs	r3, #1
 80214fa:	e000      	b.n	80214fe <tcp_receive+0x6c6>
 80214fc:	2300      	movs	r3, #0
 80214fe:	4423      	add	r3, r4
 8021500:	b29a      	uxth	r2, r3
 8021502:	4b70      	ldr	r3, [pc, #448]	@ (80216c4 <tcp_receive+0x88c>)
 8021504:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 802150a:	4b6e      	ldr	r3, [pc, #440]	@ (80216c4 <tcp_receive+0x88c>)
 802150c:	881b      	ldrh	r3, [r3, #0]
 802150e:	429a      	cmp	r2, r3
 8021510:	d274      	bcs.n	80215fc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8021512:	4b6b      	ldr	r3, [pc, #428]	@ (80216c0 <tcp_receive+0x888>)
 8021514:	68db      	ldr	r3, [r3, #12]
 8021516:	899b      	ldrh	r3, [r3, #12]
 8021518:	b29b      	uxth	r3, r3
 802151a:	4618      	mov	r0, r3
 802151c:	f7fa fb50 	bl	801bbc0 <lwip_htons>
 8021520:	4603      	mov	r3, r0
 8021522:	b2db      	uxtb	r3, r3
 8021524:	f003 0301 	and.w	r3, r3, #1
 8021528:	2b00      	cmp	r3, #0
 802152a:	d01e      	beq.n	802156a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 802152c:	4b64      	ldr	r3, [pc, #400]	@ (80216c0 <tcp_receive+0x888>)
 802152e:	68db      	ldr	r3, [r3, #12]
 8021530:	899b      	ldrh	r3, [r3, #12]
 8021532:	b29b      	uxth	r3, r3
 8021534:	b21b      	sxth	r3, r3
 8021536:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 802153a:	b21c      	sxth	r4, r3
 802153c:	4b60      	ldr	r3, [pc, #384]	@ (80216c0 <tcp_receive+0x888>)
 802153e:	68db      	ldr	r3, [r3, #12]
 8021540:	899b      	ldrh	r3, [r3, #12]
 8021542:	b29b      	uxth	r3, r3
 8021544:	4618      	mov	r0, r3
 8021546:	f7fa fb3b 	bl	801bbc0 <lwip_htons>
 802154a:	4603      	mov	r3, r0
 802154c:	b2db      	uxtb	r3, r3
 802154e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8021552:	b29b      	uxth	r3, r3
 8021554:	4618      	mov	r0, r3
 8021556:	f7fa fb33 	bl	801bbc0 <lwip_htons>
 802155a:	4603      	mov	r3, r0
 802155c:	b21b      	sxth	r3, r3
 802155e:	4323      	orrs	r3, r4
 8021560:	b21a      	sxth	r2, r3
 8021562:	4b57      	ldr	r3, [pc, #348]	@ (80216c0 <tcp_receive+0x888>)
 8021564:	68db      	ldr	r3, [r3, #12]
 8021566:	b292      	uxth	r2, r2
 8021568:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 802156e:	4b54      	ldr	r3, [pc, #336]	@ (80216c0 <tcp_receive+0x888>)
 8021570:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8021572:	4b53      	ldr	r3, [pc, #332]	@ (80216c0 <tcp_receive+0x888>)
 8021574:	68db      	ldr	r3, [r3, #12]
 8021576:	899b      	ldrh	r3, [r3, #12]
 8021578:	b29b      	uxth	r3, r3
 802157a:	4618      	mov	r0, r3
 802157c:	f7fa fb20 	bl	801bbc0 <lwip_htons>
 8021580:	4603      	mov	r3, r0
 8021582:	b2db      	uxtb	r3, r3
 8021584:	f003 0302 	and.w	r3, r3, #2
 8021588:	2b00      	cmp	r3, #0
 802158a:	d005      	beq.n	8021598 <tcp_receive+0x760>
            inseg.len -= 1;
 802158c:	4b4c      	ldr	r3, [pc, #304]	@ (80216c0 <tcp_receive+0x888>)
 802158e:	891b      	ldrh	r3, [r3, #8]
 8021590:	3b01      	subs	r3, #1
 8021592:	b29a      	uxth	r2, r3
 8021594:	4b4a      	ldr	r3, [pc, #296]	@ (80216c0 <tcp_receive+0x888>)
 8021596:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8021598:	4b49      	ldr	r3, [pc, #292]	@ (80216c0 <tcp_receive+0x888>)
 802159a:	685b      	ldr	r3, [r3, #4]
 802159c:	4a48      	ldr	r2, [pc, #288]	@ (80216c0 <tcp_receive+0x888>)
 802159e:	8912      	ldrh	r2, [r2, #8]
 80215a0:	4611      	mov	r1, r2
 80215a2:	4618      	mov	r0, r3
 80215a4:	f7fc f876 	bl	801d694 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80215a8:	4b45      	ldr	r3, [pc, #276]	@ (80216c0 <tcp_receive+0x888>)
 80215aa:	891c      	ldrh	r4, [r3, #8]
 80215ac:	4b44      	ldr	r3, [pc, #272]	@ (80216c0 <tcp_receive+0x888>)
 80215ae:	68db      	ldr	r3, [r3, #12]
 80215b0:	899b      	ldrh	r3, [r3, #12]
 80215b2:	b29b      	uxth	r3, r3
 80215b4:	4618      	mov	r0, r3
 80215b6:	f7fa fb03 	bl	801bbc0 <lwip_htons>
 80215ba:	4603      	mov	r3, r0
 80215bc:	b2db      	uxtb	r3, r3
 80215be:	f003 0303 	and.w	r3, r3, #3
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d001      	beq.n	80215ca <tcp_receive+0x792>
 80215c6:	2301      	movs	r3, #1
 80215c8:	e000      	b.n	80215cc <tcp_receive+0x794>
 80215ca:	2300      	movs	r3, #0
 80215cc:	4423      	add	r3, r4
 80215ce:	b29a      	uxth	r2, r3
 80215d0:	4b3c      	ldr	r3, [pc, #240]	@ (80216c4 <tcp_receive+0x88c>)
 80215d2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80215d4:	4b3b      	ldr	r3, [pc, #236]	@ (80216c4 <tcp_receive+0x88c>)
 80215d6:	881b      	ldrh	r3, [r3, #0]
 80215d8:	461a      	mov	r2, r3
 80215da:	4b38      	ldr	r3, [pc, #224]	@ (80216bc <tcp_receive+0x884>)
 80215dc:	681b      	ldr	r3, [r3, #0]
 80215de:	441a      	add	r2, r3
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215e4:	6879      	ldr	r1, [r7, #4]
 80215e6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80215e8:	440b      	add	r3, r1
 80215ea:	429a      	cmp	r2, r3
 80215ec:	d006      	beq.n	80215fc <tcp_receive+0x7c4>
 80215ee:	4b36      	ldr	r3, [pc, #216]	@ (80216c8 <tcp_receive+0x890>)
 80215f0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80215f4:	4935      	ldr	r1, [pc, #212]	@ (80216cc <tcp_receive+0x894>)
 80215f6:	4836      	ldr	r0, [pc, #216]	@ (80216d0 <tcp_receive+0x898>)
 80215f8:	f007 feb6 	bl	8029368 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021600:	2b00      	cmp	r3, #0
 8021602:	f000 80e6 	beq.w	80217d2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8021606:	4b2e      	ldr	r3, [pc, #184]	@ (80216c0 <tcp_receive+0x888>)
 8021608:	68db      	ldr	r3, [r3, #12]
 802160a:	899b      	ldrh	r3, [r3, #12]
 802160c:	b29b      	uxth	r3, r3
 802160e:	4618      	mov	r0, r3
 8021610:	f7fa fad6 	bl	801bbc0 <lwip_htons>
 8021614:	4603      	mov	r3, r0
 8021616:	b2db      	uxtb	r3, r3
 8021618:	f003 0301 	and.w	r3, r3, #1
 802161c:	2b00      	cmp	r3, #0
 802161e:	d010      	beq.n	8021642 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8021620:	e00a      	b.n	8021638 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021626:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802162c:	681a      	ldr	r2, [r3, #0]
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8021632:	68f8      	ldr	r0, [r7, #12]
 8021634:	f7fd fd93 	bl	801f15e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802163c:	2b00      	cmp	r3, #0
 802163e:	d1f0      	bne.n	8021622 <tcp_receive+0x7ea>
 8021640:	e0c7      	b.n	80217d2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021646:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8021648:	e051      	b.n	80216ee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802164a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802164c:	68db      	ldr	r3, [r3, #12]
 802164e:	899b      	ldrh	r3, [r3, #12]
 8021650:	b29b      	uxth	r3, r3
 8021652:	4618      	mov	r0, r3
 8021654:	f7fa fab4 	bl	801bbc0 <lwip_htons>
 8021658:	4603      	mov	r3, r0
 802165a:	b2db      	uxtb	r3, r3
 802165c:	f003 0301 	and.w	r3, r3, #1
 8021660:	2b00      	cmp	r3, #0
 8021662:	d03c      	beq.n	80216de <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8021664:	4b16      	ldr	r3, [pc, #88]	@ (80216c0 <tcp_receive+0x888>)
 8021666:	68db      	ldr	r3, [r3, #12]
 8021668:	899b      	ldrh	r3, [r3, #12]
 802166a:	b29b      	uxth	r3, r3
 802166c:	4618      	mov	r0, r3
 802166e:	f7fa faa7 	bl	801bbc0 <lwip_htons>
 8021672:	4603      	mov	r3, r0
 8021674:	b2db      	uxtb	r3, r3
 8021676:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802167a:	2b00      	cmp	r3, #0
 802167c:	d12f      	bne.n	80216de <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 802167e:	4b10      	ldr	r3, [pc, #64]	@ (80216c0 <tcp_receive+0x888>)
 8021680:	68db      	ldr	r3, [r3, #12]
 8021682:	899b      	ldrh	r3, [r3, #12]
 8021684:	b29c      	uxth	r4, r3
 8021686:	2001      	movs	r0, #1
 8021688:	f7fa fa9a 	bl	801bbc0 <lwip_htons>
 802168c:	4603      	mov	r3, r0
 802168e:	461a      	mov	r2, r3
 8021690:	4b0b      	ldr	r3, [pc, #44]	@ (80216c0 <tcp_receive+0x888>)
 8021692:	68db      	ldr	r3, [r3, #12]
 8021694:	4322      	orrs	r2, r4
 8021696:	b292      	uxth	r2, r2
 8021698:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 802169a:	4b09      	ldr	r3, [pc, #36]	@ (80216c0 <tcp_receive+0x888>)
 802169c:	891c      	ldrh	r4, [r3, #8]
 802169e:	4b08      	ldr	r3, [pc, #32]	@ (80216c0 <tcp_receive+0x888>)
 80216a0:	68db      	ldr	r3, [r3, #12]
 80216a2:	899b      	ldrh	r3, [r3, #12]
 80216a4:	b29b      	uxth	r3, r3
 80216a6:	4618      	mov	r0, r3
 80216a8:	f7fa fa8a 	bl	801bbc0 <lwip_htons>
 80216ac:	4603      	mov	r3, r0
 80216ae:	b2db      	uxtb	r3, r3
 80216b0:	f003 0303 	and.w	r3, r3, #3
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d00d      	beq.n	80216d4 <tcp_receive+0x89c>
 80216b8:	2301      	movs	r3, #1
 80216ba:	e00c      	b.n	80216d6 <tcp_receive+0x89e>
 80216bc:	2400b4c4 	.word	0x2400b4c4
 80216c0:	2400b4a4 	.word	0x2400b4a4
 80216c4:	2400b4ce 	.word	0x2400b4ce
 80216c8:	0802ed78 	.word	0x0802ed78
 80216cc:	0802f120 	.word	0x0802f120
 80216d0:	0802edc4 	.word	0x0802edc4
 80216d4:	2300      	movs	r3, #0
 80216d6:	4423      	add	r3, r4
 80216d8:	b29a      	uxth	r2, r3
 80216da:	4b98      	ldr	r3, [pc, #608]	@ (802193c <tcp_receive+0xb04>)
 80216dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80216de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80216e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80216e8:	6938      	ldr	r0, [r7, #16]
 80216ea:	f7fd fd38 	bl	801f15e <tcp_seg_free>
            while (next &&
 80216ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d00e      	beq.n	8021712 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80216f4:	4b91      	ldr	r3, [pc, #580]	@ (802193c <tcp_receive+0xb04>)
 80216f6:	881b      	ldrh	r3, [r3, #0]
 80216f8:	461a      	mov	r2, r3
 80216fa:	4b91      	ldr	r3, [pc, #580]	@ (8021940 <tcp_receive+0xb08>)
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	441a      	add	r2, r3
 8021700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021702:	68db      	ldr	r3, [r3, #12]
 8021704:	685b      	ldr	r3, [r3, #4]
 8021706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021708:	8909      	ldrh	r1, [r1, #8]
 802170a:	440b      	add	r3, r1
 802170c:	1ad3      	subs	r3, r2, r3
            while (next &&
 802170e:	2b00      	cmp	r3, #0
 8021710:	da9b      	bge.n	802164a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8021712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021714:	2b00      	cmp	r3, #0
 8021716:	d059      	beq.n	80217cc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8021718:	4b88      	ldr	r3, [pc, #544]	@ (802193c <tcp_receive+0xb04>)
 802171a:	881b      	ldrh	r3, [r3, #0]
 802171c:	461a      	mov	r2, r3
 802171e:	4b88      	ldr	r3, [pc, #544]	@ (8021940 <tcp_receive+0xb08>)
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	441a      	add	r2, r3
 8021724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021726:	68db      	ldr	r3, [r3, #12]
 8021728:	685b      	ldr	r3, [r3, #4]
 802172a:	1ad3      	subs	r3, r2, r3
            if (next &&
 802172c:	2b00      	cmp	r3, #0
 802172e:	dd4d      	ble.n	80217cc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8021730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021732:	68db      	ldr	r3, [r3, #12]
 8021734:	685b      	ldr	r3, [r3, #4]
 8021736:	b29a      	uxth	r2, r3
 8021738:	4b81      	ldr	r3, [pc, #516]	@ (8021940 <tcp_receive+0xb08>)
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	b29b      	uxth	r3, r3
 802173e:	1ad3      	subs	r3, r2, r3
 8021740:	b29a      	uxth	r2, r3
 8021742:	4b80      	ldr	r3, [pc, #512]	@ (8021944 <tcp_receive+0xb0c>)
 8021744:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8021746:	4b7f      	ldr	r3, [pc, #508]	@ (8021944 <tcp_receive+0xb0c>)
 8021748:	68db      	ldr	r3, [r3, #12]
 802174a:	899b      	ldrh	r3, [r3, #12]
 802174c:	b29b      	uxth	r3, r3
 802174e:	4618      	mov	r0, r3
 8021750:	f7fa fa36 	bl	801bbc0 <lwip_htons>
 8021754:	4603      	mov	r3, r0
 8021756:	b2db      	uxtb	r3, r3
 8021758:	f003 0302 	and.w	r3, r3, #2
 802175c:	2b00      	cmp	r3, #0
 802175e:	d005      	beq.n	802176c <tcp_receive+0x934>
                inseg.len -= 1;
 8021760:	4b78      	ldr	r3, [pc, #480]	@ (8021944 <tcp_receive+0xb0c>)
 8021762:	891b      	ldrh	r3, [r3, #8]
 8021764:	3b01      	subs	r3, #1
 8021766:	b29a      	uxth	r2, r3
 8021768:	4b76      	ldr	r3, [pc, #472]	@ (8021944 <tcp_receive+0xb0c>)
 802176a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 802176c:	4b75      	ldr	r3, [pc, #468]	@ (8021944 <tcp_receive+0xb0c>)
 802176e:	685b      	ldr	r3, [r3, #4]
 8021770:	4a74      	ldr	r2, [pc, #464]	@ (8021944 <tcp_receive+0xb0c>)
 8021772:	8912      	ldrh	r2, [r2, #8]
 8021774:	4611      	mov	r1, r2
 8021776:	4618      	mov	r0, r3
 8021778:	f7fb ff8c 	bl	801d694 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 802177c:	4b71      	ldr	r3, [pc, #452]	@ (8021944 <tcp_receive+0xb0c>)
 802177e:	891c      	ldrh	r4, [r3, #8]
 8021780:	4b70      	ldr	r3, [pc, #448]	@ (8021944 <tcp_receive+0xb0c>)
 8021782:	68db      	ldr	r3, [r3, #12]
 8021784:	899b      	ldrh	r3, [r3, #12]
 8021786:	b29b      	uxth	r3, r3
 8021788:	4618      	mov	r0, r3
 802178a:	f7fa fa19 	bl	801bbc0 <lwip_htons>
 802178e:	4603      	mov	r3, r0
 8021790:	b2db      	uxtb	r3, r3
 8021792:	f003 0303 	and.w	r3, r3, #3
 8021796:	2b00      	cmp	r3, #0
 8021798:	d001      	beq.n	802179e <tcp_receive+0x966>
 802179a:	2301      	movs	r3, #1
 802179c:	e000      	b.n	80217a0 <tcp_receive+0x968>
 802179e:	2300      	movs	r3, #0
 80217a0:	4423      	add	r3, r4
 80217a2:	b29a      	uxth	r2, r3
 80217a4:	4b65      	ldr	r3, [pc, #404]	@ (802193c <tcp_receive+0xb04>)
 80217a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80217a8:	4b64      	ldr	r3, [pc, #400]	@ (802193c <tcp_receive+0xb04>)
 80217aa:	881b      	ldrh	r3, [r3, #0]
 80217ac:	461a      	mov	r2, r3
 80217ae:	4b64      	ldr	r3, [pc, #400]	@ (8021940 <tcp_receive+0xb08>)
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	441a      	add	r2, r3
 80217b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80217b6:	68db      	ldr	r3, [r3, #12]
 80217b8:	685b      	ldr	r3, [r3, #4]
 80217ba:	429a      	cmp	r2, r3
 80217bc:	d006      	beq.n	80217cc <tcp_receive+0x994>
 80217be:	4b62      	ldr	r3, [pc, #392]	@ (8021948 <tcp_receive+0xb10>)
 80217c0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80217c4:	4961      	ldr	r1, [pc, #388]	@ (802194c <tcp_receive+0xb14>)
 80217c6:	4862      	ldr	r0, [pc, #392]	@ (8021950 <tcp_receive+0xb18>)
 80217c8:	f007 fdce 	bl	8029368 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80217d0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80217d2:	4b5a      	ldr	r3, [pc, #360]	@ (802193c <tcp_receive+0xb04>)
 80217d4:	881b      	ldrh	r3, [r3, #0]
 80217d6:	461a      	mov	r2, r3
 80217d8:	4b59      	ldr	r3, [pc, #356]	@ (8021940 <tcp_receive+0xb08>)
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	441a      	add	r2, r3
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80217e6:	4b55      	ldr	r3, [pc, #340]	@ (802193c <tcp_receive+0xb04>)
 80217e8:	881b      	ldrh	r3, [r3, #0]
 80217ea:	429a      	cmp	r2, r3
 80217ec:	d206      	bcs.n	80217fc <tcp_receive+0x9c4>
 80217ee:	4b56      	ldr	r3, [pc, #344]	@ (8021948 <tcp_receive+0xb10>)
 80217f0:	f240 6207 	movw	r2, #1543	@ 0x607
 80217f4:	4957      	ldr	r1, [pc, #348]	@ (8021954 <tcp_receive+0xb1c>)
 80217f6:	4856      	ldr	r0, [pc, #344]	@ (8021950 <tcp_receive+0xb18>)
 80217f8:	f007 fdb6 	bl	8029368 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8021800:	4b4e      	ldr	r3, [pc, #312]	@ (802193c <tcp_receive+0xb04>)
 8021802:	881b      	ldrh	r3, [r3, #0]
 8021804:	1ad3      	subs	r3, r2, r3
 8021806:	b29a      	uxth	r2, r3
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 802180c:	6878      	ldr	r0, [r7, #4]
 802180e:	f7fc ffc5 	bl	801e79c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8021812:	4b4c      	ldr	r3, [pc, #304]	@ (8021944 <tcp_receive+0xb0c>)
 8021814:	685b      	ldr	r3, [r3, #4]
 8021816:	891b      	ldrh	r3, [r3, #8]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d006      	beq.n	802182a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 802181c:	4b49      	ldr	r3, [pc, #292]	@ (8021944 <tcp_receive+0xb0c>)
 802181e:	685b      	ldr	r3, [r3, #4]
 8021820:	4a4d      	ldr	r2, [pc, #308]	@ (8021958 <tcp_receive+0xb20>)
 8021822:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8021824:	4b47      	ldr	r3, [pc, #284]	@ (8021944 <tcp_receive+0xb0c>)
 8021826:	2200      	movs	r2, #0
 8021828:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802182a:	4b46      	ldr	r3, [pc, #280]	@ (8021944 <tcp_receive+0xb0c>)
 802182c:	68db      	ldr	r3, [r3, #12]
 802182e:	899b      	ldrh	r3, [r3, #12]
 8021830:	b29b      	uxth	r3, r3
 8021832:	4618      	mov	r0, r3
 8021834:	f7fa f9c4 	bl	801bbc0 <lwip_htons>
 8021838:	4603      	mov	r3, r0
 802183a:	b2db      	uxtb	r3, r3
 802183c:	f003 0301 	and.w	r3, r3, #1
 8021840:	2b00      	cmp	r3, #0
 8021842:	f000 80b8 	beq.w	80219b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8021846:	4b45      	ldr	r3, [pc, #276]	@ (802195c <tcp_receive+0xb24>)
 8021848:	781b      	ldrb	r3, [r3, #0]
 802184a:	f043 0320 	orr.w	r3, r3, #32
 802184e:	b2da      	uxtb	r2, r3
 8021850:	4b42      	ldr	r3, [pc, #264]	@ (802195c <tcp_receive+0xb24>)
 8021852:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8021854:	e0af      	b.n	80219b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802185a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021860:	68db      	ldr	r3, [r3, #12]
 8021862:	685b      	ldr	r3, [r3, #4]
 8021864:	4a36      	ldr	r2, [pc, #216]	@ (8021940 <tcp_receive+0xb08>)
 8021866:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8021868:	68bb      	ldr	r3, [r7, #8]
 802186a:	891b      	ldrh	r3, [r3, #8]
 802186c:	461c      	mov	r4, r3
 802186e:	68bb      	ldr	r3, [r7, #8]
 8021870:	68db      	ldr	r3, [r3, #12]
 8021872:	899b      	ldrh	r3, [r3, #12]
 8021874:	b29b      	uxth	r3, r3
 8021876:	4618      	mov	r0, r3
 8021878:	f7fa f9a2 	bl	801bbc0 <lwip_htons>
 802187c:	4603      	mov	r3, r0
 802187e:	b2db      	uxtb	r3, r3
 8021880:	f003 0303 	and.w	r3, r3, #3
 8021884:	2b00      	cmp	r3, #0
 8021886:	d001      	beq.n	802188c <tcp_receive+0xa54>
 8021888:	2301      	movs	r3, #1
 802188a:	e000      	b.n	802188e <tcp_receive+0xa56>
 802188c:	2300      	movs	r3, #0
 802188e:	191a      	adds	r2, r3, r4
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021894:	441a      	add	r2, r3
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802189e:	461c      	mov	r4, r3
 80218a0:	68bb      	ldr	r3, [r7, #8]
 80218a2:	891b      	ldrh	r3, [r3, #8]
 80218a4:	461d      	mov	r5, r3
 80218a6:	68bb      	ldr	r3, [r7, #8]
 80218a8:	68db      	ldr	r3, [r3, #12]
 80218aa:	899b      	ldrh	r3, [r3, #12]
 80218ac:	b29b      	uxth	r3, r3
 80218ae:	4618      	mov	r0, r3
 80218b0:	f7fa f986 	bl	801bbc0 <lwip_htons>
 80218b4:	4603      	mov	r3, r0
 80218b6:	b2db      	uxtb	r3, r3
 80218b8:	f003 0303 	and.w	r3, r3, #3
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d001      	beq.n	80218c4 <tcp_receive+0xa8c>
 80218c0:	2301      	movs	r3, #1
 80218c2:	e000      	b.n	80218c6 <tcp_receive+0xa8e>
 80218c4:	2300      	movs	r3, #0
 80218c6:	442b      	add	r3, r5
 80218c8:	429c      	cmp	r4, r3
 80218ca:	d206      	bcs.n	80218da <tcp_receive+0xaa2>
 80218cc:	4b1e      	ldr	r3, [pc, #120]	@ (8021948 <tcp_receive+0xb10>)
 80218ce:	f240 622b 	movw	r2, #1579	@ 0x62b
 80218d2:	4923      	ldr	r1, [pc, #140]	@ (8021960 <tcp_receive+0xb28>)
 80218d4:	481e      	ldr	r0, [pc, #120]	@ (8021950 <tcp_receive+0xb18>)
 80218d6:	f007 fd47 	bl	8029368 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80218da:	68bb      	ldr	r3, [r7, #8]
 80218dc:	891b      	ldrh	r3, [r3, #8]
 80218de:	461c      	mov	r4, r3
 80218e0:	68bb      	ldr	r3, [r7, #8]
 80218e2:	68db      	ldr	r3, [r3, #12]
 80218e4:	899b      	ldrh	r3, [r3, #12]
 80218e6:	b29b      	uxth	r3, r3
 80218e8:	4618      	mov	r0, r3
 80218ea:	f7fa f969 	bl	801bbc0 <lwip_htons>
 80218ee:	4603      	mov	r3, r0
 80218f0:	b2db      	uxtb	r3, r3
 80218f2:	f003 0303 	and.w	r3, r3, #3
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d001      	beq.n	80218fe <tcp_receive+0xac6>
 80218fa:	2301      	movs	r3, #1
 80218fc:	e000      	b.n	8021900 <tcp_receive+0xac8>
 80218fe:	2300      	movs	r3, #0
 8021900:	1919      	adds	r1, r3, r4
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8021906:	b28b      	uxth	r3, r1
 8021908:	1ad3      	subs	r3, r2, r3
 802190a:	b29a      	uxth	r2, r3
 802190c:	687b      	ldr	r3, [r7, #4]
 802190e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8021910:	6878      	ldr	r0, [r7, #4]
 8021912:	f7fc ff43 	bl	801e79c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8021916:	68bb      	ldr	r3, [r7, #8]
 8021918:	685b      	ldr	r3, [r3, #4]
 802191a:	891b      	ldrh	r3, [r3, #8]
 802191c:	2b00      	cmp	r3, #0
 802191e:	d028      	beq.n	8021972 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8021920:	4b0d      	ldr	r3, [pc, #52]	@ (8021958 <tcp_receive+0xb20>)
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d01d      	beq.n	8021964 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8021928:	4b0b      	ldr	r3, [pc, #44]	@ (8021958 <tcp_receive+0xb20>)
 802192a:	681a      	ldr	r2, [r3, #0]
 802192c:	68bb      	ldr	r3, [r7, #8]
 802192e:	685b      	ldr	r3, [r3, #4]
 8021930:	4619      	mov	r1, r3
 8021932:	4610      	mov	r0, r2
 8021934:	f7fc f8f6 	bl	801db24 <pbuf_cat>
 8021938:	e018      	b.n	802196c <tcp_receive+0xb34>
 802193a:	bf00      	nop
 802193c:	2400b4ce 	.word	0x2400b4ce
 8021940:	2400b4c4 	.word	0x2400b4c4
 8021944:	2400b4a4 	.word	0x2400b4a4
 8021948:	0802ed78 	.word	0x0802ed78
 802194c:	0802f158 	.word	0x0802f158
 8021950:	0802edc4 	.word	0x0802edc4
 8021954:	0802f194 	.word	0x0802f194
 8021958:	2400b4d4 	.word	0x2400b4d4
 802195c:	2400b4d1 	.word	0x2400b4d1
 8021960:	0802f1b4 	.word	0x0802f1b4
            } else {
              recv_data = cseg->p;
 8021964:	68bb      	ldr	r3, [r7, #8]
 8021966:	685b      	ldr	r3, [r3, #4]
 8021968:	4a70      	ldr	r2, [pc, #448]	@ (8021b2c <tcp_receive+0xcf4>)
 802196a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 802196c:	68bb      	ldr	r3, [r7, #8]
 802196e:	2200      	movs	r2, #0
 8021970:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8021972:	68bb      	ldr	r3, [r7, #8]
 8021974:	68db      	ldr	r3, [r3, #12]
 8021976:	899b      	ldrh	r3, [r3, #12]
 8021978:	b29b      	uxth	r3, r3
 802197a:	4618      	mov	r0, r3
 802197c:	f7fa f920 	bl	801bbc0 <lwip_htons>
 8021980:	4603      	mov	r3, r0
 8021982:	b2db      	uxtb	r3, r3
 8021984:	f003 0301 	and.w	r3, r3, #1
 8021988:	2b00      	cmp	r3, #0
 802198a:	d00d      	beq.n	80219a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 802198c:	4b68      	ldr	r3, [pc, #416]	@ (8021b30 <tcp_receive+0xcf8>)
 802198e:	781b      	ldrb	r3, [r3, #0]
 8021990:	f043 0320 	orr.w	r3, r3, #32
 8021994:	b2da      	uxtb	r2, r3
 8021996:	4b66      	ldr	r3, [pc, #408]	@ (8021b30 <tcp_receive+0xcf8>)
 8021998:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	7d1b      	ldrb	r3, [r3, #20]
 802199e:	2b04      	cmp	r3, #4
 80219a0:	d102      	bne.n	80219a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	2207      	movs	r2, #7
 80219a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80219a8:	68bb      	ldr	r3, [r7, #8]
 80219aa:	681a      	ldr	r2, [r3, #0]
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80219b0:	68b8      	ldr	r0, [r7, #8]
 80219b2:	f7fd fbd4 	bl	801f15e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d008      	beq.n	80219d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80219c2:	68db      	ldr	r3, [r3, #12]
 80219c4:	685a      	ldr	r2, [r3, #4]
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80219ca:	429a      	cmp	r2, r3
 80219cc:	f43f af43 	beq.w	8021856 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80219d0:	687b      	ldr	r3, [r7, #4]
 80219d2:	8b5b      	ldrh	r3, [r3, #26]
 80219d4:	f003 0301 	and.w	r3, r3, #1
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d00e      	beq.n	80219fa <tcp_receive+0xbc2>
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	8b5b      	ldrh	r3, [r3, #26]
 80219e0:	f023 0301 	bic.w	r3, r3, #1
 80219e4:	b29a      	uxth	r2, r3
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	835a      	strh	r2, [r3, #26]
 80219ea:	687b      	ldr	r3, [r7, #4]
 80219ec:	8b5b      	ldrh	r3, [r3, #26]
 80219ee:	f043 0302 	orr.w	r3, r3, #2
 80219f2:	b29a      	uxth	r2, r3
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80219f8:	e187      	b.n	8021d0a <tcp_receive+0xed2>
        tcp_ack(pcb);
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	8b5b      	ldrh	r3, [r3, #26]
 80219fe:	f043 0301 	orr.w	r3, r3, #1
 8021a02:	b29a      	uxth	r2, r3
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8021a08:	e17f      	b.n	8021d0a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	d106      	bne.n	8021a20 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8021a12:	4848      	ldr	r0, [pc, #288]	@ (8021b34 <tcp_receive+0xcfc>)
 8021a14:	f7fd fbbc 	bl	801f190 <tcp_seg_copy>
 8021a18:	4602      	mov	r2, r0
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8021a1e:	e16c      	b.n	8021cfa <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8021a20:	2300      	movs	r3, #0
 8021a22:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8021a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021a2a:	e156      	b.n	8021cda <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8021a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a2e:	68db      	ldr	r3, [r3, #12]
 8021a30:	685a      	ldr	r2, [r3, #4]
 8021a32:	4b41      	ldr	r3, [pc, #260]	@ (8021b38 <tcp_receive+0xd00>)
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	429a      	cmp	r2, r3
 8021a38:	d11d      	bne.n	8021a76 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8021a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8021b34 <tcp_receive+0xcfc>)
 8021a3c:	891a      	ldrh	r2, [r3, #8]
 8021a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a40:	891b      	ldrh	r3, [r3, #8]
 8021a42:	429a      	cmp	r2, r3
 8021a44:	f240 814e 	bls.w	8021ce4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8021a48:	483a      	ldr	r0, [pc, #232]	@ (8021b34 <tcp_receive+0xcfc>)
 8021a4a:	f7fd fba1 	bl	801f190 <tcp_seg_copy>
 8021a4e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8021a50:	697b      	ldr	r3, [r7, #20]
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	f000 8148 	beq.w	8021ce8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8021a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d003      	beq.n	8021a66 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8021a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021a60:	697a      	ldr	r2, [r7, #20]
 8021a62:	601a      	str	r2, [r3, #0]
 8021a64:	e002      	b.n	8021a6c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	697a      	ldr	r2, [r7, #20]
 8021a6a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8021a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8021a6e:	6978      	ldr	r0, [r7, #20]
 8021a70:	f7ff f8de 	bl	8020c30 <tcp_oos_insert_segment>
                }
                break;
 8021a74:	e138      	b.n	8021ce8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8021a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d117      	bne.n	8021aac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8021a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8021b38 <tcp_receive+0xd00>)
 8021a7e:	681a      	ldr	r2, [r3, #0]
 8021a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a82:	68db      	ldr	r3, [r3, #12]
 8021a84:	685b      	ldr	r3, [r3, #4]
 8021a86:	1ad3      	subs	r3, r2, r3
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	da57      	bge.n	8021b3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8021a8c:	4829      	ldr	r0, [pc, #164]	@ (8021b34 <tcp_receive+0xcfc>)
 8021a8e:	f7fd fb7f 	bl	801f190 <tcp_seg_copy>
 8021a92:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8021a94:	69bb      	ldr	r3, [r7, #24]
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	f000 8128 	beq.w	8021cec <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	69ba      	ldr	r2, [r7, #24]
 8021aa0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8021aa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8021aa4:	69b8      	ldr	r0, [r7, #24]
 8021aa6:	f7ff f8c3 	bl	8020c30 <tcp_oos_insert_segment>
                  }
                  break;
 8021aaa:	e11f      	b.n	8021cec <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8021aac:	4b22      	ldr	r3, [pc, #136]	@ (8021b38 <tcp_receive+0xd00>)
 8021aae:	681a      	ldr	r2, [r3, #0]
 8021ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021ab2:	68db      	ldr	r3, [r3, #12]
 8021ab4:	685b      	ldr	r3, [r3, #4]
 8021ab6:	1ad3      	subs	r3, r2, r3
 8021ab8:	3b01      	subs	r3, #1
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	db3e      	blt.n	8021b3c <tcp_receive+0xd04>
 8021abe:	4b1e      	ldr	r3, [pc, #120]	@ (8021b38 <tcp_receive+0xd00>)
 8021ac0:	681a      	ldr	r2, [r3, #0]
 8021ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ac4:	68db      	ldr	r3, [r3, #12]
 8021ac6:	685b      	ldr	r3, [r3, #4]
 8021ac8:	1ad3      	subs	r3, r2, r3
 8021aca:	3301      	adds	r3, #1
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	dc35      	bgt.n	8021b3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8021ad0:	4818      	ldr	r0, [pc, #96]	@ (8021b34 <tcp_receive+0xcfc>)
 8021ad2:	f7fd fb5d 	bl	801f190 <tcp_seg_copy>
 8021ad6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8021ad8:	69fb      	ldr	r3, [r7, #28]
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	f000 8108 	beq.w	8021cf0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8021ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021ae2:	68db      	ldr	r3, [r3, #12]
 8021ae4:	685b      	ldr	r3, [r3, #4]
 8021ae6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021ae8:	8912      	ldrh	r2, [r2, #8]
 8021aea:	441a      	add	r2, r3
 8021aec:	4b12      	ldr	r3, [pc, #72]	@ (8021b38 <tcp_receive+0xd00>)
 8021aee:	681b      	ldr	r3, [r3, #0]
 8021af0:	1ad3      	subs	r3, r2, r3
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	dd12      	ble.n	8021b1c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8021af6:	4b10      	ldr	r3, [pc, #64]	@ (8021b38 <tcp_receive+0xd00>)
 8021af8:	681b      	ldr	r3, [r3, #0]
 8021afa:	b29a      	uxth	r2, r3
 8021afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021afe:	68db      	ldr	r3, [r3, #12]
 8021b00:	685b      	ldr	r3, [r3, #4]
 8021b02:	b29b      	uxth	r3, r3
 8021b04:	1ad3      	subs	r3, r2, r3
 8021b06:	b29a      	uxth	r2, r3
 8021b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021b0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8021b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021b0e:	685a      	ldr	r2, [r3, #4]
 8021b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021b12:	891b      	ldrh	r3, [r3, #8]
 8021b14:	4619      	mov	r1, r3
 8021b16:	4610      	mov	r0, r2
 8021b18:	f7fb fdbc 	bl	801d694 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8021b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021b1e:	69fa      	ldr	r2, [r7, #28]
 8021b20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8021b22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8021b24:	69f8      	ldr	r0, [r7, #28]
 8021b26:	f7ff f883 	bl	8020c30 <tcp_oos_insert_segment>
                  }
                  break;
 8021b2a:	e0e1      	b.n	8021cf0 <tcp_receive+0xeb8>
 8021b2c:	2400b4d4 	.word	0x2400b4d4
 8021b30:	2400b4d1 	.word	0x2400b4d1
 8021b34:	2400b4a4 	.word	0x2400b4a4
 8021b38:	2400b4c4 	.word	0x2400b4c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8021b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b3e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8021b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	f040 80c5 	bne.w	8021cd4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8021b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8021d48 <tcp_receive+0xf10>)
 8021b4c:	681a      	ldr	r2, [r3, #0]
 8021b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b50:	68db      	ldr	r3, [r3, #12]
 8021b52:	685b      	ldr	r3, [r3, #4]
 8021b54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	f340 80bc 	ble.w	8021cd4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8021b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b5e:	68db      	ldr	r3, [r3, #12]
 8021b60:	899b      	ldrh	r3, [r3, #12]
 8021b62:	b29b      	uxth	r3, r3
 8021b64:	4618      	mov	r0, r3
 8021b66:	f7fa f82b 	bl	801bbc0 <lwip_htons>
 8021b6a:	4603      	mov	r3, r0
 8021b6c:	b2db      	uxtb	r3, r3
 8021b6e:	f003 0301 	and.w	r3, r3, #1
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	f040 80be 	bne.w	8021cf4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8021b78:	4874      	ldr	r0, [pc, #464]	@ (8021d4c <tcp_receive+0xf14>)
 8021b7a:	f7fd fb09 	bl	801f190 <tcp_seg_copy>
 8021b7e:	4602      	mov	r2, r0
 8021b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8021b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	f000 80b5 	beq.w	8021cf8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8021b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b90:	68db      	ldr	r3, [r3, #12]
 8021b92:	685b      	ldr	r3, [r3, #4]
 8021b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021b96:	8912      	ldrh	r2, [r2, #8]
 8021b98:	441a      	add	r2, r3
 8021b9a:	4b6b      	ldr	r3, [pc, #428]	@ (8021d48 <tcp_receive+0xf10>)
 8021b9c:	681b      	ldr	r3, [r3, #0]
 8021b9e:	1ad3      	subs	r3, r2, r3
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	dd12      	ble.n	8021bca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8021ba4:	4b68      	ldr	r3, [pc, #416]	@ (8021d48 <tcp_receive+0xf10>)
 8021ba6:	681b      	ldr	r3, [r3, #0]
 8021ba8:	b29a      	uxth	r2, r3
 8021baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bac:	68db      	ldr	r3, [r3, #12]
 8021bae:	685b      	ldr	r3, [r3, #4]
 8021bb0:	b29b      	uxth	r3, r3
 8021bb2:	1ad3      	subs	r3, r2, r3
 8021bb4:	b29a      	uxth	r2, r3
 8021bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8021bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bbc:	685a      	ldr	r2, [r3, #4]
 8021bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bc0:	891b      	ldrh	r3, [r3, #8]
 8021bc2:	4619      	mov	r1, r3
 8021bc4:	4610      	mov	r0, r2
 8021bc6:	f7fb fd65 	bl	801d694 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8021bca:	4b61      	ldr	r3, [pc, #388]	@ (8021d50 <tcp_receive+0xf18>)
 8021bcc:	881b      	ldrh	r3, [r3, #0]
 8021bce:	461a      	mov	r2, r3
 8021bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8021d48 <tcp_receive+0xf10>)
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	441a      	add	r2, r3
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021bda:	6879      	ldr	r1, [r7, #4]
 8021bdc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8021bde:	440b      	add	r3, r1
 8021be0:	1ad3      	subs	r3, r2, r3
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	f340 8088 	ble.w	8021cf8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8021be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	68db      	ldr	r3, [r3, #12]
 8021bee:	899b      	ldrh	r3, [r3, #12]
 8021bf0:	b29b      	uxth	r3, r3
 8021bf2:	4618      	mov	r0, r3
 8021bf4:	f7f9 ffe4 	bl	801bbc0 <lwip_htons>
 8021bf8:	4603      	mov	r3, r0
 8021bfa:	b2db      	uxtb	r3, r3
 8021bfc:	f003 0301 	and.w	r3, r3, #1
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d021      	beq.n	8021c48 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8021c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	68db      	ldr	r3, [r3, #12]
 8021c0a:	899b      	ldrh	r3, [r3, #12]
 8021c0c:	b29b      	uxth	r3, r3
 8021c0e:	b21b      	sxth	r3, r3
 8021c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8021c14:	b21c      	sxth	r4, r3
 8021c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c18:	681b      	ldr	r3, [r3, #0]
 8021c1a:	68db      	ldr	r3, [r3, #12]
 8021c1c:	899b      	ldrh	r3, [r3, #12]
 8021c1e:	b29b      	uxth	r3, r3
 8021c20:	4618      	mov	r0, r3
 8021c22:	f7f9 ffcd 	bl	801bbc0 <lwip_htons>
 8021c26:	4603      	mov	r3, r0
 8021c28:	b2db      	uxtb	r3, r3
 8021c2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8021c2e:	b29b      	uxth	r3, r3
 8021c30:	4618      	mov	r0, r3
 8021c32:	f7f9 ffc5 	bl	801bbc0 <lwip_htons>
 8021c36:	4603      	mov	r3, r0
 8021c38:	b21b      	sxth	r3, r3
 8021c3a:	4323      	orrs	r3, r4
 8021c3c:	b21a      	sxth	r2, r3
 8021c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	68db      	ldr	r3, [r3, #12]
 8021c44:	b292      	uxth	r2, r2
 8021c46:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021c4c:	b29a      	uxth	r2, r3
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8021c52:	4413      	add	r3, r2
 8021c54:	b299      	uxth	r1, r3
 8021c56:	4b3c      	ldr	r3, [pc, #240]	@ (8021d48 <tcp_receive+0xf10>)
 8021c58:	681b      	ldr	r3, [r3, #0]
 8021c5a:	b29a      	uxth	r2, r3
 8021c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c5e:	681b      	ldr	r3, [r3, #0]
 8021c60:	1a8a      	subs	r2, r1, r2
 8021c62:	b292      	uxth	r2, r2
 8021c64:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8021c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	685a      	ldr	r2, [r3, #4]
 8021c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c6e:	681b      	ldr	r3, [r3, #0]
 8021c70:	891b      	ldrh	r3, [r3, #8]
 8021c72:	4619      	mov	r1, r3
 8021c74:	4610      	mov	r0, r2
 8021c76:	f7fb fd0d 	bl	801d694 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8021c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c7c:	681b      	ldr	r3, [r3, #0]
 8021c7e:	891c      	ldrh	r4, [r3, #8]
 8021c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	68db      	ldr	r3, [r3, #12]
 8021c86:	899b      	ldrh	r3, [r3, #12]
 8021c88:	b29b      	uxth	r3, r3
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	f7f9 ff98 	bl	801bbc0 <lwip_htons>
 8021c90:	4603      	mov	r3, r0
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	f003 0303 	and.w	r3, r3, #3
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	d001      	beq.n	8021ca0 <tcp_receive+0xe68>
 8021c9c:	2301      	movs	r3, #1
 8021c9e:	e000      	b.n	8021ca2 <tcp_receive+0xe6a>
 8021ca0:	2300      	movs	r3, #0
 8021ca2:	4423      	add	r3, r4
 8021ca4:	b29a      	uxth	r2, r3
 8021ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8021d50 <tcp_receive+0xf18>)
 8021ca8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8021caa:	4b29      	ldr	r3, [pc, #164]	@ (8021d50 <tcp_receive+0xf18>)
 8021cac:	881b      	ldrh	r3, [r3, #0]
 8021cae:	461a      	mov	r2, r3
 8021cb0:	4b25      	ldr	r3, [pc, #148]	@ (8021d48 <tcp_receive+0xf10>)
 8021cb2:	681b      	ldr	r3, [r3, #0]
 8021cb4:	441a      	add	r2, r3
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021cba:	6879      	ldr	r1, [r7, #4]
 8021cbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8021cbe:	440b      	add	r3, r1
 8021cc0:	429a      	cmp	r2, r3
 8021cc2:	d019      	beq.n	8021cf8 <tcp_receive+0xec0>
 8021cc4:	4b23      	ldr	r3, [pc, #140]	@ (8021d54 <tcp_receive+0xf1c>)
 8021cc6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8021cca:	4923      	ldr	r1, [pc, #140]	@ (8021d58 <tcp_receive+0xf20>)
 8021ccc:	4823      	ldr	r0, [pc, #140]	@ (8021d5c <tcp_receive+0xf24>)
 8021cce:	f007 fb4b 	bl	8029368 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8021cd2:	e011      	b.n	8021cf8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8021cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	f47f aea5 	bne.w	8021a2c <tcp_receive+0xbf4>
 8021ce2:	e00a      	b.n	8021cfa <tcp_receive+0xec2>
                break;
 8021ce4:	bf00      	nop
 8021ce6:	e008      	b.n	8021cfa <tcp_receive+0xec2>
                break;
 8021ce8:	bf00      	nop
 8021cea:	e006      	b.n	8021cfa <tcp_receive+0xec2>
                  break;
 8021cec:	bf00      	nop
 8021cee:	e004      	b.n	8021cfa <tcp_receive+0xec2>
                  break;
 8021cf0:	bf00      	nop
 8021cf2:	e002      	b.n	8021cfa <tcp_receive+0xec2>
                  break;
 8021cf4:	bf00      	nop
 8021cf6:	e000      	b.n	8021cfa <tcp_receive+0xec2>
                break;
 8021cf8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8021cfa:	6878      	ldr	r0, [r7, #4]
 8021cfc:	f001 fa30 	bl	8023160 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8021d00:	e003      	b.n	8021d0a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8021d02:	6878      	ldr	r0, [r7, #4]
 8021d04:	f001 fa2c 	bl	8023160 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8021d08:	e01a      	b.n	8021d40 <tcp_receive+0xf08>
 8021d0a:	e019      	b.n	8021d40 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8021d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8021d48 <tcp_receive+0xf10>)
 8021d0e:	681a      	ldr	r2, [r3, #0]
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d14:	1ad3      	subs	r3, r2, r3
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	db0a      	blt.n	8021d30 <tcp_receive+0xef8>
 8021d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8021d48 <tcp_receive+0xf10>)
 8021d1c:	681a      	ldr	r2, [r3, #0]
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d22:	6879      	ldr	r1, [r7, #4]
 8021d24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8021d26:	440b      	add	r3, r1
 8021d28:	1ad3      	subs	r3, r2, r3
 8021d2a:	3301      	adds	r3, #1
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	dd07      	ble.n	8021d40 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	8b5b      	ldrh	r3, [r3, #26]
 8021d34:	f043 0302 	orr.w	r3, r3, #2
 8021d38:	b29a      	uxth	r2, r3
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8021d3e:	e7ff      	b.n	8021d40 <tcp_receive+0xf08>
 8021d40:	bf00      	nop
 8021d42:	3750      	adds	r7, #80	@ 0x50
 8021d44:	46bd      	mov	sp, r7
 8021d46:	bdb0      	pop	{r4, r5, r7, pc}
 8021d48:	2400b4c4 	.word	0x2400b4c4
 8021d4c:	2400b4a4 	.word	0x2400b4a4
 8021d50:	2400b4ce 	.word	0x2400b4ce
 8021d54:	0802ed78 	.word	0x0802ed78
 8021d58:	0802f120 	.word	0x0802f120
 8021d5c:	0802edc4 	.word	0x0802edc4

08021d60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8021d60:	b480      	push	{r7}
 8021d62:	b083      	sub	sp, #12
 8021d64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8021d66:	4b15      	ldr	r3, [pc, #84]	@ (8021dbc <tcp_get_next_optbyte+0x5c>)
 8021d68:	881b      	ldrh	r3, [r3, #0]
 8021d6a:	1c5a      	adds	r2, r3, #1
 8021d6c:	b291      	uxth	r1, r2
 8021d6e:	4a13      	ldr	r2, [pc, #76]	@ (8021dbc <tcp_get_next_optbyte+0x5c>)
 8021d70:	8011      	strh	r1, [r2, #0]
 8021d72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8021d74:	4b12      	ldr	r3, [pc, #72]	@ (8021dc0 <tcp_get_next_optbyte+0x60>)
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d004      	beq.n	8021d86 <tcp_get_next_optbyte+0x26>
 8021d7c:	4b11      	ldr	r3, [pc, #68]	@ (8021dc4 <tcp_get_next_optbyte+0x64>)
 8021d7e:	881b      	ldrh	r3, [r3, #0]
 8021d80:	88fa      	ldrh	r2, [r7, #6]
 8021d82:	429a      	cmp	r2, r3
 8021d84:	d208      	bcs.n	8021d98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8021d86:	4b10      	ldr	r3, [pc, #64]	@ (8021dc8 <tcp_get_next_optbyte+0x68>)
 8021d88:	681b      	ldr	r3, [r3, #0]
 8021d8a:	3314      	adds	r3, #20
 8021d8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8021d8e:	88fb      	ldrh	r3, [r7, #6]
 8021d90:	683a      	ldr	r2, [r7, #0]
 8021d92:	4413      	add	r3, r2
 8021d94:	781b      	ldrb	r3, [r3, #0]
 8021d96:	e00b      	b.n	8021db0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8021d98:	88fb      	ldrh	r3, [r7, #6]
 8021d9a:	b2da      	uxtb	r2, r3
 8021d9c:	4b09      	ldr	r3, [pc, #36]	@ (8021dc4 <tcp_get_next_optbyte+0x64>)
 8021d9e:	881b      	ldrh	r3, [r3, #0]
 8021da0:	b2db      	uxtb	r3, r3
 8021da2:	1ad3      	subs	r3, r2, r3
 8021da4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8021da6:	4b06      	ldr	r3, [pc, #24]	@ (8021dc0 <tcp_get_next_optbyte+0x60>)
 8021da8:	681a      	ldr	r2, [r3, #0]
 8021daa:	797b      	ldrb	r3, [r7, #5]
 8021dac:	4413      	add	r3, r2
 8021dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8021db0:	4618      	mov	r0, r3
 8021db2:	370c      	adds	r7, #12
 8021db4:	46bd      	mov	sp, r7
 8021db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dba:	4770      	bx	lr
 8021dbc:	2400b4c0 	.word	0x2400b4c0
 8021dc0:	2400b4bc 	.word	0x2400b4bc
 8021dc4:	2400b4ba 	.word	0x2400b4ba
 8021dc8:	2400b4b4 	.word	0x2400b4b4

08021dcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8021dcc:	b580      	push	{r7, lr}
 8021dce:	b084      	sub	sp, #16
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d106      	bne.n	8021de8 <tcp_parseopt+0x1c>
 8021dda:	4b32      	ldr	r3, [pc, #200]	@ (8021ea4 <tcp_parseopt+0xd8>)
 8021ddc:	f240 727d 	movw	r2, #1917	@ 0x77d
 8021de0:	4931      	ldr	r1, [pc, #196]	@ (8021ea8 <tcp_parseopt+0xdc>)
 8021de2:	4832      	ldr	r0, [pc, #200]	@ (8021eac <tcp_parseopt+0xe0>)
 8021de4:	f007 fac0 	bl	8029368 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8021de8:	4b31      	ldr	r3, [pc, #196]	@ (8021eb0 <tcp_parseopt+0xe4>)
 8021dea:	881b      	ldrh	r3, [r3, #0]
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d056      	beq.n	8021e9e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8021df0:	4b30      	ldr	r3, [pc, #192]	@ (8021eb4 <tcp_parseopt+0xe8>)
 8021df2:	2200      	movs	r2, #0
 8021df4:	801a      	strh	r2, [r3, #0]
 8021df6:	e046      	b.n	8021e86 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8021df8:	f7ff ffb2 	bl	8021d60 <tcp_get_next_optbyte>
 8021dfc:	4603      	mov	r3, r0
 8021dfe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8021e00:	7bfb      	ldrb	r3, [r7, #15]
 8021e02:	2b02      	cmp	r3, #2
 8021e04:	d006      	beq.n	8021e14 <tcp_parseopt+0x48>
 8021e06:	2b02      	cmp	r3, #2
 8021e08:	dc2a      	bgt.n	8021e60 <tcp_parseopt+0x94>
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d042      	beq.n	8021e94 <tcp_parseopt+0xc8>
 8021e0e:	2b01      	cmp	r3, #1
 8021e10:	d038      	beq.n	8021e84 <tcp_parseopt+0xb8>
 8021e12:	e025      	b.n	8021e60 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8021e14:	f7ff ffa4 	bl	8021d60 <tcp_get_next_optbyte>
 8021e18:	4603      	mov	r3, r0
 8021e1a:	2b04      	cmp	r3, #4
 8021e1c:	d13c      	bne.n	8021e98 <tcp_parseopt+0xcc>
 8021e1e:	4b25      	ldr	r3, [pc, #148]	@ (8021eb4 <tcp_parseopt+0xe8>)
 8021e20:	881b      	ldrh	r3, [r3, #0]
 8021e22:	3301      	adds	r3, #1
 8021e24:	4a22      	ldr	r2, [pc, #136]	@ (8021eb0 <tcp_parseopt+0xe4>)
 8021e26:	8812      	ldrh	r2, [r2, #0]
 8021e28:	4293      	cmp	r3, r2
 8021e2a:	da35      	bge.n	8021e98 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8021e2c:	f7ff ff98 	bl	8021d60 <tcp_get_next_optbyte>
 8021e30:	4603      	mov	r3, r0
 8021e32:	021b      	lsls	r3, r3, #8
 8021e34:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8021e36:	f7ff ff93 	bl	8021d60 <tcp_get_next_optbyte>
 8021e3a:	4603      	mov	r3, r0
 8021e3c:	461a      	mov	r2, r3
 8021e3e:	89bb      	ldrh	r3, [r7, #12]
 8021e40:	4313      	orrs	r3, r2
 8021e42:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8021e44:	89bb      	ldrh	r3, [r7, #12]
 8021e46:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8021e4a:	d804      	bhi.n	8021e56 <tcp_parseopt+0x8a>
 8021e4c:	89bb      	ldrh	r3, [r7, #12]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d001      	beq.n	8021e56 <tcp_parseopt+0x8a>
 8021e52:	89ba      	ldrh	r2, [r7, #12]
 8021e54:	e001      	b.n	8021e5a <tcp_parseopt+0x8e>
 8021e56:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8021e5e:	e012      	b.n	8021e86 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8021e60:	f7ff ff7e 	bl	8021d60 <tcp_get_next_optbyte>
 8021e64:	4603      	mov	r3, r0
 8021e66:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8021e68:	7afb      	ldrb	r3, [r7, #11]
 8021e6a:	2b01      	cmp	r3, #1
 8021e6c:	d916      	bls.n	8021e9c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8021e6e:	7afb      	ldrb	r3, [r7, #11]
 8021e70:	b29a      	uxth	r2, r3
 8021e72:	4b10      	ldr	r3, [pc, #64]	@ (8021eb4 <tcp_parseopt+0xe8>)
 8021e74:	881b      	ldrh	r3, [r3, #0]
 8021e76:	4413      	add	r3, r2
 8021e78:	b29b      	uxth	r3, r3
 8021e7a:	3b02      	subs	r3, #2
 8021e7c:	b29a      	uxth	r2, r3
 8021e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8021eb4 <tcp_parseopt+0xe8>)
 8021e80:	801a      	strh	r2, [r3, #0]
 8021e82:	e000      	b.n	8021e86 <tcp_parseopt+0xba>
          break;
 8021e84:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8021e86:	4b0b      	ldr	r3, [pc, #44]	@ (8021eb4 <tcp_parseopt+0xe8>)
 8021e88:	881a      	ldrh	r2, [r3, #0]
 8021e8a:	4b09      	ldr	r3, [pc, #36]	@ (8021eb0 <tcp_parseopt+0xe4>)
 8021e8c:	881b      	ldrh	r3, [r3, #0]
 8021e8e:	429a      	cmp	r2, r3
 8021e90:	d3b2      	bcc.n	8021df8 <tcp_parseopt+0x2c>
 8021e92:	e004      	b.n	8021e9e <tcp_parseopt+0xd2>
          return;
 8021e94:	bf00      	nop
 8021e96:	e002      	b.n	8021e9e <tcp_parseopt+0xd2>
            return;
 8021e98:	bf00      	nop
 8021e9a:	e000      	b.n	8021e9e <tcp_parseopt+0xd2>
            return;
 8021e9c:	bf00      	nop
      }
    }
  }
}
 8021e9e:	3710      	adds	r7, #16
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	bd80      	pop	{r7, pc}
 8021ea4:	0802ed78 	.word	0x0802ed78
 8021ea8:	0802f1dc 	.word	0x0802f1dc
 8021eac:	0802edc4 	.word	0x0802edc4
 8021eb0:	2400b4b8 	.word	0x2400b4b8
 8021eb4:	2400b4c0 	.word	0x2400b4c0

08021eb8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8021eb8:	b480      	push	{r7}
 8021eba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8021ebc:	4b05      	ldr	r3, [pc, #20]	@ (8021ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8021ebe:	781b      	ldrb	r3, [r3, #0]
 8021ec0:	f043 0310 	orr.w	r3, r3, #16
 8021ec4:	b2da      	uxtb	r2, r3
 8021ec6:	4b03      	ldr	r3, [pc, #12]	@ (8021ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8021ec8:	701a      	strb	r2, [r3, #0]
}
 8021eca:	bf00      	nop
 8021ecc:	46bd      	mov	sp, r7
 8021ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ed2:	4770      	bx	lr
 8021ed4:	2400b4d1 	.word	0x2400b4d1

08021ed8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8021ed8:	b580      	push	{r7, lr}
 8021eda:	b084      	sub	sp, #16
 8021edc:	af00      	add	r7, sp, #0
 8021ede:	60f8      	str	r0, [r7, #12]
 8021ee0:	60b9      	str	r1, [r7, #8]
 8021ee2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8021ee4:	68fb      	ldr	r3, [r7, #12]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d00a      	beq.n	8021f00 <tcp_route+0x28>
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	7a1b      	ldrb	r3, [r3, #8]
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d006      	beq.n	8021f00 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8021ef2:	68fb      	ldr	r3, [r7, #12]
 8021ef4:	7a1b      	ldrb	r3, [r3, #8]
 8021ef6:	4618      	mov	r0, r3
 8021ef8:	f7fb fa12 	bl	801d320 <netif_get_by_index>
 8021efc:	4603      	mov	r3, r0
 8021efe:	e003      	b.n	8021f08 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8021f00:	6878      	ldr	r0, [r7, #4]
 8021f02:	f005 f89f 	bl	8027044 <ip4_route>
 8021f06:	4603      	mov	r3, r0
  }
}
 8021f08:	4618      	mov	r0, r3
 8021f0a:	3710      	adds	r7, #16
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	bd80      	pop	{r7, pc}

08021f10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8021f10:	b590      	push	{r4, r7, lr}
 8021f12:	b087      	sub	sp, #28
 8021f14:	af00      	add	r7, sp, #0
 8021f16:	60f8      	str	r0, [r7, #12]
 8021f18:	60b9      	str	r1, [r7, #8]
 8021f1a:	603b      	str	r3, [r7, #0]
 8021f1c:	4613      	mov	r3, r2
 8021f1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8021f20:	68fb      	ldr	r3, [r7, #12]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d105      	bne.n	8021f32 <tcp_create_segment+0x22>
 8021f26:	4b43      	ldr	r3, [pc, #268]	@ (8022034 <tcp_create_segment+0x124>)
 8021f28:	22a3      	movs	r2, #163	@ 0xa3
 8021f2a:	4943      	ldr	r1, [pc, #268]	@ (8022038 <tcp_create_segment+0x128>)
 8021f2c:	4843      	ldr	r0, [pc, #268]	@ (802203c <tcp_create_segment+0x12c>)
 8021f2e:	f007 fa1b 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8021f32:	68bb      	ldr	r3, [r7, #8]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d105      	bne.n	8021f44 <tcp_create_segment+0x34>
 8021f38:	4b3e      	ldr	r3, [pc, #248]	@ (8022034 <tcp_create_segment+0x124>)
 8021f3a:	22a4      	movs	r2, #164	@ 0xa4
 8021f3c:	4940      	ldr	r1, [pc, #256]	@ (8022040 <tcp_create_segment+0x130>)
 8021f3e:	483f      	ldr	r0, [pc, #252]	@ (802203c <tcp_create_segment+0x12c>)
 8021f40:	f007 fa12 	bl	8029368 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021f44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8021f48:	009b      	lsls	r3, r3, #2
 8021f4a:	b2db      	uxtb	r3, r3
 8021f4c:	f003 0304 	and.w	r3, r3, #4
 8021f50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8021f52:	2003      	movs	r0, #3
 8021f54:	f7fa fe52 	bl	801cbfc <memp_malloc>
 8021f58:	6138      	str	r0, [r7, #16]
 8021f5a:	693b      	ldr	r3, [r7, #16]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d104      	bne.n	8021f6a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8021f60:	68b8      	ldr	r0, [r7, #8]
 8021f62:	f7fb fd1d 	bl	801d9a0 <pbuf_free>
    return NULL;
 8021f66:	2300      	movs	r3, #0
 8021f68:	e060      	b.n	802202c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8021f6a:	693b      	ldr	r3, [r7, #16]
 8021f6c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8021f70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8021f72:	693b      	ldr	r3, [r7, #16]
 8021f74:	2200      	movs	r2, #0
 8021f76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8021f78:	693b      	ldr	r3, [r7, #16]
 8021f7a:	68ba      	ldr	r2, [r7, #8]
 8021f7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8021f7e:	68bb      	ldr	r3, [r7, #8]
 8021f80:	891a      	ldrh	r2, [r3, #8]
 8021f82:	7dfb      	ldrb	r3, [r7, #23]
 8021f84:	b29b      	uxth	r3, r3
 8021f86:	429a      	cmp	r2, r3
 8021f88:	d205      	bcs.n	8021f96 <tcp_create_segment+0x86>
 8021f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8022034 <tcp_create_segment+0x124>)
 8021f8c:	22b0      	movs	r2, #176	@ 0xb0
 8021f8e:	492d      	ldr	r1, [pc, #180]	@ (8022044 <tcp_create_segment+0x134>)
 8021f90:	482a      	ldr	r0, [pc, #168]	@ (802203c <tcp_create_segment+0x12c>)
 8021f92:	f007 f9e9 	bl	8029368 <iprintf>
  seg->len = p->tot_len - optlen;
 8021f96:	68bb      	ldr	r3, [r7, #8]
 8021f98:	891a      	ldrh	r2, [r3, #8]
 8021f9a:	7dfb      	ldrb	r3, [r7, #23]
 8021f9c:	b29b      	uxth	r3, r3
 8021f9e:	1ad3      	subs	r3, r2, r3
 8021fa0:	b29a      	uxth	r2, r3
 8021fa2:	693b      	ldr	r3, [r7, #16]
 8021fa4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8021fa6:	2114      	movs	r1, #20
 8021fa8:	68b8      	ldr	r0, [r7, #8]
 8021faa:	f7fb fc63 	bl	801d874 <pbuf_add_header>
 8021fae:	4603      	mov	r3, r0
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	d004      	beq.n	8021fbe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8021fb4:	6938      	ldr	r0, [r7, #16]
 8021fb6:	f7fd f8d2 	bl	801f15e <tcp_seg_free>
    return NULL;
 8021fba:	2300      	movs	r3, #0
 8021fbc:	e036      	b.n	802202c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8021fbe:	693b      	ldr	r3, [r7, #16]
 8021fc0:	685b      	ldr	r3, [r3, #4]
 8021fc2:	685a      	ldr	r2, [r3, #4]
 8021fc4:	693b      	ldr	r3, [r7, #16]
 8021fc6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	8ada      	ldrh	r2, [r3, #22]
 8021fcc:	693b      	ldr	r3, [r7, #16]
 8021fce:	68dc      	ldr	r4, [r3, #12]
 8021fd0:	4610      	mov	r0, r2
 8021fd2:	f7f9 fdf5 	bl	801bbc0 <lwip_htons>
 8021fd6:	4603      	mov	r3, r0
 8021fd8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8021fda:	68fb      	ldr	r3, [r7, #12]
 8021fdc:	8b1a      	ldrh	r2, [r3, #24]
 8021fde:	693b      	ldr	r3, [r7, #16]
 8021fe0:	68dc      	ldr	r4, [r3, #12]
 8021fe2:	4610      	mov	r0, r2
 8021fe4:	f7f9 fdec 	bl	801bbc0 <lwip_htons>
 8021fe8:	4603      	mov	r3, r0
 8021fea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8021fec:	693b      	ldr	r3, [r7, #16]
 8021fee:	68dc      	ldr	r4, [r3, #12]
 8021ff0:	6838      	ldr	r0, [r7, #0]
 8021ff2:	f7f9 fdfa 	bl	801bbea <lwip_htonl>
 8021ff6:	4603      	mov	r3, r0
 8021ff8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8021ffa:	7dfb      	ldrb	r3, [r7, #23]
 8021ffc:	089b      	lsrs	r3, r3, #2
 8021ffe:	b2db      	uxtb	r3, r3
 8022000:	3305      	adds	r3, #5
 8022002:	b29b      	uxth	r3, r3
 8022004:	031b      	lsls	r3, r3, #12
 8022006:	b29a      	uxth	r2, r3
 8022008:	79fb      	ldrb	r3, [r7, #7]
 802200a:	b29b      	uxth	r3, r3
 802200c:	4313      	orrs	r3, r2
 802200e:	b29a      	uxth	r2, r3
 8022010:	693b      	ldr	r3, [r7, #16]
 8022012:	68dc      	ldr	r4, [r3, #12]
 8022014:	4610      	mov	r0, r2
 8022016:	f7f9 fdd3 	bl	801bbc0 <lwip_htons>
 802201a:	4603      	mov	r3, r0
 802201c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 802201e:	693b      	ldr	r3, [r7, #16]
 8022020:	68db      	ldr	r3, [r3, #12]
 8022022:	2200      	movs	r2, #0
 8022024:	749a      	strb	r2, [r3, #18]
 8022026:	2200      	movs	r2, #0
 8022028:	74da      	strb	r2, [r3, #19]
  return seg;
 802202a:	693b      	ldr	r3, [r7, #16]
}
 802202c:	4618      	mov	r0, r3
 802202e:	371c      	adds	r7, #28
 8022030:	46bd      	mov	sp, r7
 8022032:	bd90      	pop	{r4, r7, pc}
 8022034:	0802f1f8 	.word	0x0802f1f8
 8022038:	0802f22c 	.word	0x0802f22c
 802203c:	0802f24c 	.word	0x0802f24c
 8022040:	0802f274 	.word	0x0802f274
 8022044:	0802f298 	.word	0x0802f298

08022048 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8022048:	b590      	push	{r4, r7, lr}
 802204a:	b08b      	sub	sp, #44	@ 0x2c
 802204c:	af02      	add	r7, sp, #8
 802204e:	6078      	str	r0, [r7, #4]
 8022050:	460b      	mov	r3, r1
 8022052:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8022054:	2300      	movs	r3, #0
 8022056:	61fb      	str	r3, [r7, #28]
 8022058:	2300      	movs	r3, #0
 802205a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 802205c:	2300      	movs	r3, #0
 802205e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	2b00      	cmp	r3, #0
 8022064:	d106      	bne.n	8022074 <tcp_split_unsent_seg+0x2c>
 8022066:	4b95      	ldr	r3, [pc, #596]	@ (80222bc <tcp_split_unsent_seg+0x274>)
 8022068:	f240 324b 	movw	r2, #843	@ 0x34b
 802206c:	4994      	ldr	r1, [pc, #592]	@ (80222c0 <tcp_split_unsent_seg+0x278>)
 802206e:	4895      	ldr	r0, [pc, #596]	@ (80222c4 <tcp_split_unsent_seg+0x27c>)
 8022070:	f007 f97a 	bl	8029368 <iprintf>

  useg = pcb->unsent;
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022078:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 802207a:	697b      	ldr	r3, [r7, #20]
 802207c:	2b00      	cmp	r3, #0
 802207e:	d102      	bne.n	8022086 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8022080:	f04f 33ff 	mov.w	r3, #4294967295
 8022084:	e116      	b.n	80222b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8022086:	887b      	ldrh	r3, [r7, #2]
 8022088:	2b00      	cmp	r3, #0
 802208a:	d109      	bne.n	80220a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 802208c:	4b8b      	ldr	r3, [pc, #556]	@ (80222bc <tcp_split_unsent_seg+0x274>)
 802208e:	f240 3253 	movw	r2, #851	@ 0x353
 8022092:	498d      	ldr	r1, [pc, #564]	@ (80222c8 <tcp_split_unsent_seg+0x280>)
 8022094:	488b      	ldr	r0, [pc, #556]	@ (80222c4 <tcp_split_unsent_seg+0x27c>)
 8022096:	f007 f967 	bl	8029368 <iprintf>
    return ERR_VAL;
 802209a:	f06f 0305 	mvn.w	r3, #5
 802209e:	e109      	b.n	80222b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80220a0:	697b      	ldr	r3, [r7, #20]
 80220a2:	891b      	ldrh	r3, [r3, #8]
 80220a4:	887a      	ldrh	r2, [r7, #2]
 80220a6:	429a      	cmp	r2, r3
 80220a8:	d301      	bcc.n	80220ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80220aa:	2300      	movs	r3, #0
 80220ac:	e102      	b.n	80222b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80220b2:	887a      	ldrh	r2, [r7, #2]
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d906      	bls.n	80220c6 <tcp_split_unsent_seg+0x7e>
 80220b8:	4b80      	ldr	r3, [pc, #512]	@ (80222bc <tcp_split_unsent_seg+0x274>)
 80220ba:	f240 325b 	movw	r2, #859	@ 0x35b
 80220be:	4983      	ldr	r1, [pc, #524]	@ (80222cc <tcp_split_unsent_seg+0x284>)
 80220c0:	4880      	ldr	r0, [pc, #512]	@ (80222c4 <tcp_split_unsent_seg+0x27c>)
 80220c2:	f007 f951 	bl	8029368 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80220c6:	697b      	ldr	r3, [r7, #20]
 80220c8:	891b      	ldrh	r3, [r3, #8]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d106      	bne.n	80220dc <tcp_split_unsent_seg+0x94>
 80220ce:	4b7b      	ldr	r3, [pc, #492]	@ (80222bc <tcp_split_unsent_seg+0x274>)
 80220d0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80220d4:	497e      	ldr	r1, [pc, #504]	@ (80222d0 <tcp_split_unsent_seg+0x288>)
 80220d6:	487b      	ldr	r0, [pc, #492]	@ (80222c4 <tcp_split_unsent_seg+0x27c>)
 80220d8:	f007 f946 	bl	8029368 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80220dc:	697b      	ldr	r3, [r7, #20]
 80220de:	7a9b      	ldrb	r3, [r3, #10]
 80220e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80220e2:	7bfb      	ldrb	r3, [r7, #15]
 80220e4:	009b      	lsls	r3, r3, #2
 80220e6:	b2db      	uxtb	r3, r3
 80220e8:	f003 0304 	and.w	r3, r3, #4
 80220ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80220ee:	697b      	ldr	r3, [r7, #20]
 80220f0:	891a      	ldrh	r2, [r3, #8]
 80220f2:	887b      	ldrh	r3, [r7, #2]
 80220f4:	1ad3      	subs	r3, r2, r3
 80220f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80220f8:	7bbb      	ldrb	r3, [r7, #14]
 80220fa:	b29a      	uxth	r2, r3
 80220fc:	89bb      	ldrh	r3, [r7, #12]
 80220fe:	4413      	add	r3, r2
 8022100:	b29b      	uxth	r3, r3
 8022102:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022106:	4619      	mov	r1, r3
 8022108:	2036      	movs	r0, #54	@ 0x36
 802210a:	f7fb f965 	bl	801d3d8 <pbuf_alloc>
 802210e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8022110:	693b      	ldr	r3, [r7, #16]
 8022112:	2b00      	cmp	r3, #0
 8022114:	f000 80b7 	beq.w	8022286 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8022118:	697b      	ldr	r3, [r7, #20]
 802211a:	685b      	ldr	r3, [r3, #4]
 802211c:	891a      	ldrh	r2, [r3, #8]
 802211e:	697b      	ldr	r3, [r7, #20]
 8022120:	891b      	ldrh	r3, [r3, #8]
 8022122:	1ad3      	subs	r3, r2, r3
 8022124:	b29a      	uxth	r2, r3
 8022126:	887b      	ldrh	r3, [r7, #2]
 8022128:	4413      	add	r3, r2
 802212a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 802212c:	697b      	ldr	r3, [r7, #20]
 802212e:	6858      	ldr	r0, [r3, #4]
 8022130:	693b      	ldr	r3, [r7, #16]
 8022132:	685a      	ldr	r2, [r3, #4]
 8022134:	7bbb      	ldrb	r3, [r7, #14]
 8022136:	18d1      	adds	r1, r2, r3
 8022138:	897b      	ldrh	r3, [r7, #10]
 802213a:	89ba      	ldrh	r2, [r7, #12]
 802213c:	f7fb fe2a 	bl	801dd94 <pbuf_copy_partial>
 8022140:	4603      	mov	r3, r0
 8022142:	461a      	mov	r2, r3
 8022144:	89bb      	ldrh	r3, [r7, #12]
 8022146:	4293      	cmp	r3, r2
 8022148:	f040 809f 	bne.w	802228a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 802214c:	697b      	ldr	r3, [r7, #20]
 802214e:	68db      	ldr	r3, [r3, #12]
 8022150:	899b      	ldrh	r3, [r3, #12]
 8022152:	b29b      	uxth	r3, r3
 8022154:	4618      	mov	r0, r3
 8022156:	f7f9 fd33 	bl	801bbc0 <lwip_htons>
 802215a:	4603      	mov	r3, r0
 802215c:	b2db      	uxtb	r3, r3
 802215e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022162:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8022164:	2300      	movs	r3, #0
 8022166:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8022168:	7efb      	ldrb	r3, [r7, #27]
 802216a:	f003 0308 	and.w	r3, r3, #8
 802216e:	2b00      	cmp	r3, #0
 8022170:	d007      	beq.n	8022182 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8022172:	7efb      	ldrb	r3, [r7, #27]
 8022174:	f023 0308 	bic.w	r3, r3, #8
 8022178:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 802217a:	7ebb      	ldrb	r3, [r7, #26]
 802217c:	f043 0308 	orr.w	r3, r3, #8
 8022180:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8022182:	7efb      	ldrb	r3, [r7, #27]
 8022184:	f003 0301 	and.w	r3, r3, #1
 8022188:	2b00      	cmp	r3, #0
 802218a:	d007      	beq.n	802219c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 802218c:	7efb      	ldrb	r3, [r7, #27]
 802218e:	f023 0301 	bic.w	r3, r3, #1
 8022192:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8022194:	7ebb      	ldrb	r3, [r7, #26]
 8022196:	f043 0301 	orr.w	r3, r3, #1
 802219a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 802219c:	697b      	ldr	r3, [r7, #20]
 802219e:	68db      	ldr	r3, [r3, #12]
 80221a0:	685b      	ldr	r3, [r3, #4]
 80221a2:	4618      	mov	r0, r3
 80221a4:	f7f9 fd21 	bl	801bbea <lwip_htonl>
 80221a8:	4602      	mov	r2, r0
 80221aa:	887b      	ldrh	r3, [r7, #2]
 80221ac:	18d1      	adds	r1, r2, r3
 80221ae:	7eba      	ldrb	r2, [r7, #26]
 80221b0:	7bfb      	ldrb	r3, [r7, #15]
 80221b2:	9300      	str	r3, [sp, #0]
 80221b4:	460b      	mov	r3, r1
 80221b6:	6939      	ldr	r1, [r7, #16]
 80221b8:	6878      	ldr	r0, [r7, #4]
 80221ba:	f7ff fea9 	bl	8021f10 <tcp_create_segment>
 80221be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80221c0:	69fb      	ldr	r3, [r7, #28]
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d063      	beq.n	802228e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80221c6:	697b      	ldr	r3, [r7, #20]
 80221c8:	685b      	ldr	r3, [r3, #4]
 80221ca:	4618      	mov	r0, r3
 80221cc:	f7fb fc70 	bl	801dab0 <pbuf_clen>
 80221d0:	4603      	mov	r3, r0
 80221d2:	461a      	mov	r2, r3
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80221da:	1a9b      	subs	r3, r3, r2
 80221dc:	b29a      	uxth	r2, r3
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80221e4:	697b      	ldr	r3, [r7, #20]
 80221e6:	6858      	ldr	r0, [r3, #4]
 80221e8:	697b      	ldr	r3, [r7, #20]
 80221ea:	685b      	ldr	r3, [r3, #4]
 80221ec:	891a      	ldrh	r2, [r3, #8]
 80221ee:	89bb      	ldrh	r3, [r7, #12]
 80221f0:	1ad3      	subs	r3, r2, r3
 80221f2:	b29b      	uxth	r3, r3
 80221f4:	4619      	mov	r1, r3
 80221f6:	f7fb fa4d 	bl	801d694 <pbuf_realloc>
  useg->len -= remainder;
 80221fa:	697b      	ldr	r3, [r7, #20]
 80221fc:	891a      	ldrh	r2, [r3, #8]
 80221fe:	89bb      	ldrh	r3, [r7, #12]
 8022200:	1ad3      	subs	r3, r2, r3
 8022202:	b29a      	uxth	r2, r3
 8022204:	697b      	ldr	r3, [r7, #20]
 8022206:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8022208:	697b      	ldr	r3, [r7, #20]
 802220a:	68db      	ldr	r3, [r3, #12]
 802220c:	899b      	ldrh	r3, [r3, #12]
 802220e:	b29c      	uxth	r4, r3
 8022210:	7efb      	ldrb	r3, [r7, #27]
 8022212:	b29b      	uxth	r3, r3
 8022214:	4618      	mov	r0, r3
 8022216:	f7f9 fcd3 	bl	801bbc0 <lwip_htons>
 802221a:	4603      	mov	r3, r0
 802221c:	461a      	mov	r2, r3
 802221e:	697b      	ldr	r3, [r7, #20]
 8022220:	68db      	ldr	r3, [r3, #12]
 8022222:	4322      	orrs	r2, r4
 8022224:	b292      	uxth	r2, r2
 8022226:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8022228:	697b      	ldr	r3, [r7, #20]
 802222a:	685b      	ldr	r3, [r3, #4]
 802222c:	4618      	mov	r0, r3
 802222e:	f7fb fc3f 	bl	801dab0 <pbuf_clen>
 8022232:	4603      	mov	r3, r0
 8022234:	461a      	mov	r2, r3
 8022236:	687b      	ldr	r3, [r7, #4]
 8022238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 802223c:	4413      	add	r3, r2
 802223e:	b29a      	uxth	r2, r3
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8022246:	69fb      	ldr	r3, [r7, #28]
 8022248:	685b      	ldr	r3, [r3, #4]
 802224a:	4618      	mov	r0, r3
 802224c:	f7fb fc30 	bl	801dab0 <pbuf_clen>
 8022250:	4603      	mov	r3, r0
 8022252:	461a      	mov	r2, r3
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 802225a:	4413      	add	r3, r2
 802225c:	b29a      	uxth	r2, r3
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8022264:	697b      	ldr	r3, [r7, #20]
 8022266:	681a      	ldr	r2, [r3, #0]
 8022268:	69fb      	ldr	r3, [r7, #28]
 802226a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 802226c:	697b      	ldr	r3, [r7, #20]
 802226e:	69fa      	ldr	r2, [r7, #28]
 8022270:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8022272:	69fb      	ldr	r3, [r7, #28]
 8022274:	681b      	ldr	r3, [r3, #0]
 8022276:	2b00      	cmp	r3, #0
 8022278:	d103      	bne.n	8022282 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	2200      	movs	r2, #0
 802227e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8022282:	2300      	movs	r3, #0
 8022284:	e016      	b.n	80222b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8022286:	bf00      	nop
 8022288:	e002      	b.n	8022290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 802228a:	bf00      	nop
 802228c:	e000      	b.n	8022290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 802228e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8022290:	69fb      	ldr	r3, [r7, #28]
 8022292:	2b00      	cmp	r3, #0
 8022294:	d006      	beq.n	80222a4 <tcp_split_unsent_seg+0x25c>
 8022296:	4b09      	ldr	r3, [pc, #36]	@ (80222bc <tcp_split_unsent_seg+0x274>)
 8022298:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 802229c:	490d      	ldr	r1, [pc, #52]	@ (80222d4 <tcp_split_unsent_seg+0x28c>)
 802229e:	4809      	ldr	r0, [pc, #36]	@ (80222c4 <tcp_split_unsent_seg+0x27c>)
 80222a0:	f007 f862 	bl	8029368 <iprintf>
  if (p != NULL) {
 80222a4:	693b      	ldr	r3, [r7, #16]
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d002      	beq.n	80222b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80222aa:	6938      	ldr	r0, [r7, #16]
 80222ac:	f7fb fb78 	bl	801d9a0 <pbuf_free>
  }

  return ERR_MEM;
 80222b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80222b4:	4618      	mov	r0, r3
 80222b6:	3724      	adds	r7, #36	@ 0x24
 80222b8:	46bd      	mov	sp, r7
 80222ba:	bd90      	pop	{r4, r7, pc}
 80222bc:	0802f1f8 	.word	0x0802f1f8
 80222c0:	0802f58c 	.word	0x0802f58c
 80222c4:	0802f24c 	.word	0x0802f24c
 80222c8:	0802f5b0 	.word	0x0802f5b0
 80222cc:	0802f5d4 	.word	0x0802f5d4
 80222d0:	0802f5e4 	.word	0x0802f5e4
 80222d4:	0802f5f4 	.word	0x0802f5f4

080222d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80222d8:	b590      	push	{r4, r7, lr}
 80222da:	b085      	sub	sp, #20
 80222dc:	af00      	add	r7, sp, #0
 80222de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d106      	bne.n	80222f4 <tcp_send_fin+0x1c>
 80222e6:	4b21      	ldr	r3, [pc, #132]	@ (802236c <tcp_send_fin+0x94>)
 80222e8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80222ec:	4920      	ldr	r1, [pc, #128]	@ (8022370 <tcp_send_fin+0x98>)
 80222ee:	4821      	ldr	r0, [pc, #132]	@ (8022374 <tcp_send_fin+0x9c>)
 80222f0:	f007 f83a 	bl	8029368 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d02e      	beq.n	802235a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022300:	60fb      	str	r3, [r7, #12]
 8022302:	e002      	b.n	802230a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802230a:	68fb      	ldr	r3, [r7, #12]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	2b00      	cmp	r3, #0
 8022310:	d1f8      	bne.n	8022304 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8022312:	68fb      	ldr	r3, [r7, #12]
 8022314:	68db      	ldr	r3, [r3, #12]
 8022316:	899b      	ldrh	r3, [r3, #12]
 8022318:	b29b      	uxth	r3, r3
 802231a:	4618      	mov	r0, r3
 802231c:	f7f9 fc50 	bl	801bbc0 <lwip_htons>
 8022320:	4603      	mov	r3, r0
 8022322:	b2db      	uxtb	r3, r3
 8022324:	f003 0307 	and.w	r3, r3, #7
 8022328:	2b00      	cmp	r3, #0
 802232a:	d116      	bne.n	802235a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802232c:	68fb      	ldr	r3, [r7, #12]
 802232e:	68db      	ldr	r3, [r3, #12]
 8022330:	899b      	ldrh	r3, [r3, #12]
 8022332:	b29c      	uxth	r4, r3
 8022334:	2001      	movs	r0, #1
 8022336:	f7f9 fc43 	bl	801bbc0 <lwip_htons>
 802233a:	4603      	mov	r3, r0
 802233c:	461a      	mov	r2, r3
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	68db      	ldr	r3, [r3, #12]
 8022342:	4322      	orrs	r2, r4
 8022344:	b292      	uxth	r2, r2
 8022346:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	8b5b      	ldrh	r3, [r3, #26]
 802234c:	f043 0320 	orr.w	r3, r3, #32
 8022350:	b29a      	uxth	r2, r3
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8022356:	2300      	movs	r3, #0
 8022358:	e004      	b.n	8022364 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 802235a:	2101      	movs	r1, #1
 802235c:	6878      	ldr	r0, [r7, #4]
 802235e:	f000 f80b 	bl	8022378 <tcp_enqueue_flags>
 8022362:	4603      	mov	r3, r0
}
 8022364:	4618      	mov	r0, r3
 8022366:	3714      	adds	r7, #20
 8022368:	46bd      	mov	sp, r7
 802236a:	bd90      	pop	{r4, r7, pc}
 802236c:	0802f1f8 	.word	0x0802f1f8
 8022370:	0802f600 	.word	0x0802f600
 8022374:	0802f24c 	.word	0x0802f24c

08022378 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8022378:	b580      	push	{r7, lr}
 802237a:	b08a      	sub	sp, #40	@ 0x28
 802237c:	af02      	add	r7, sp, #8
 802237e:	6078      	str	r0, [r7, #4]
 8022380:	460b      	mov	r3, r1
 8022382:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8022384:	2300      	movs	r3, #0
 8022386:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8022388:	2300      	movs	r3, #0
 802238a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 802238c:	78fb      	ldrb	r3, [r7, #3]
 802238e:	f003 0303 	and.w	r3, r3, #3
 8022392:	2b00      	cmp	r3, #0
 8022394:	d106      	bne.n	80223a4 <tcp_enqueue_flags+0x2c>
 8022396:	4b67      	ldr	r3, [pc, #412]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 8022398:	f240 4211 	movw	r2, #1041	@ 0x411
 802239c:	4966      	ldr	r1, [pc, #408]	@ (8022538 <tcp_enqueue_flags+0x1c0>)
 802239e:	4867      	ldr	r0, [pc, #412]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 80223a0:	f006 ffe2 	bl	8029368 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80223a4:	687b      	ldr	r3, [r7, #4]
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d106      	bne.n	80223b8 <tcp_enqueue_flags+0x40>
 80223aa:	4b62      	ldr	r3, [pc, #392]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 80223ac:	f240 4213 	movw	r2, #1043	@ 0x413
 80223b0:	4963      	ldr	r1, [pc, #396]	@ (8022540 <tcp_enqueue_flags+0x1c8>)
 80223b2:	4862      	ldr	r0, [pc, #392]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 80223b4:	f006 ffd8 	bl	8029368 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80223b8:	78fb      	ldrb	r3, [r7, #3]
 80223ba:	f003 0302 	and.w	r3, r3, #2
 80223be:	2b00      	cmp	r3, #0
 80223c0:	d001      	beq.n	80223c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80223c2:	2301      	movs	r3, #1
 80223c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80223c6:	7ffb      	ldrb	r3, [r7, #31]
 80223c8:	009b      	lsls	r3, r3, #2
 80223ca:	b2db      	uxtb	r3, r3
 80223cc:	f003 0304 	and.w	r3, r3, #4
 80223d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80223d2:	7dfb      	ldrb	r3, [r7, #23]
 80223d4:	b29b      	uxth	r3, r3
 80223d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80223da:	4619      	mov	r1, r3
 80223dc:	2036      	movs	r0, #54	@ 0x36
 80223de:	f7fa fffb 	bl	801d3d8 <pbuf_alloc>
 80223e2:	6138      	str	r0, [r7, #16]
 80223e4:	693b      	ldr	r3, [r7, #16]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d109      	bne.n	80223fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	8b5b      	ldrh	r3, [r3, #26]
 80223ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80223f2:	b29a      	uxth	r2, r3
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80223f8:	f04f 33ff 	mov.w	r3, #4294967295
 80223fc:	e095      	b.n	802252a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80223fe:	693b      	ldr	r3, [r7, #16]
 8022400:	895a      	ldrh	r2, [r3, #10]
 8022402:	7dfb      	ldrb	r3, [r7, #23]
 8022404:	b29b      	uxth	r3, r3
 8022406:	429a      	cmp	r2, r3
 8022408:	d206      	bcs.n	8022418 <tcp_enqueue_flags+0xa0>
 802240a:	4b4a      	ldr	r3, [pc, #296]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 802240c:	f240 4239 	movw	r2, #1081	@ 0x439
 8022410:	494c      	ldr	r1, [pc, #304]	@ (8022544 <tcp_enqueue_flags+0x1cc>)
 8022412:	484a      	ldr	r0, [pc, #296]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 8022414:	f006 ffa8 	bl	8029368 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 802241c:	78fa      	ldrb	r2, [r7, #3]
 802241e:	7ffb      	ldrb	r3, [r7, #31]
 8022420:	9300      	str	r3, [sp, #0]
 8022422:	460b      	mov	r3, r1
 8022424:	6939      	ldr	r1, [r7, #16]
 8022426:	6878      	ldr	r0, [r7, #4]
 8022428:	f7ff fd72 	bl	8021f10 <tcp_create_segment>
 802242c:	60f8      	str	r0, [r7, #12]
 802242e:	68fb      	ldr	r3, [r7, #12]
 8022430:	2b00      	cmp	r3, #0
 8022432:	d109      	bne.n	8022448 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	8b5b      	ldrh	r3, [r3, #26]
 8022438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802243c:	b29a      	uxth	r2, r3
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8022442:	f04f 33ff 	mov.w	r3, #4294967295
 8022446:	e070      	b.n	802252a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8022448:	68fb      	ldr	r3, [r7, #12]
 802244a:	68db      	ldr	r3, [r3, #12]
 802244c:	f003 0303 	and.w	r3, r3, #3
 8022450:	2b00      	cmp	r3, #0
 8022452:	d006      	beq.n	8022462 <tcp_enqueue_flags+0xea>
 8022454:	4b37      	ldr	r3, [pc, #220]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 8022456:	f240 4242 	movw	r2, #1090	@ 0x442
 802245a:	493b      	ldr	r1, [pc, #236]	@ (8022548 <tcp_enqueue_flags+0x1d0>)
 802245c:	4837      	ldr	r0, [pc, #220]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 802245e:	f006 ff83 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8022462:	68fb      	ldr	r3, [r7, #12]
 8022464:	891b      	ldrh	r3, [r3, #8]
 8022466:	2b00      	cmp	r3, #0
 8022468:	d006      	beq.n	8022478 <tcp_enqueue_flags+0x100>
 802246a:	4b32      	ldr	r3, [pc, #200]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 802246c:	f240 4243 	movw	r2, #1091	@ 0x443
 8022470:	4936      	ldr	r1, [pc, #216]	@ (802254c <tcp_enqueue_flags+0x1d4>)
 8022472:	4832      	ldr	r0, [pc, #200]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 8022474:	f006 ff78 	bl	8029368 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802247c:	2b00      	cmp	r3, #0
 802247e:	d103      	bne.n	8022488 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	68fa      	ldr	r2, [r7, #12]
 8022484:	66da      	str	r2, [r3, #108]	@ 0x6c
 8022486:	e00d      	b.n	80224a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802248c:	61bb      	str	r3, [r7, #24]
 802248e:	e002      	b.n	8022496 <tcp_enqueue_flags+0x11e>
 8022490:	69bb      	ldr	r3, [r7, #24]
 8022492:	681b      	ldr	r3, [r3, #0]
 8022494:	61bb      	str	r3, [r7, #24]
 8022496:	69bb      	ldr	r3, [r7, #24]
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d1f8      	bne.n	8022490 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 802249e:	69bb      	ldr	r3, [r7, #24]
 80224a0:	68fa      	ldr	r2, [r7, #12]
 80224a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	2200      	movs	r2, #0
 80224a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80224ac:	78fb      	ldrb	r3, [r7, #3]
 80224ae:	f003 0302 	and.w	r3, r3, #2
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d104      	bne.n	80224c0 <tcp_enqueue_flags+0x148>
 80224b6:	78fb      	ldrb	r3, [r7, #3]
 80224b8:	f003 0301 	and.w	r3, r3, #1
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d004      	beq.n	80224ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80224c4:	1c5a      	adds	r2, r3, #1
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80224ca:	78fb      	ldrb	r3, [r7, #3]
 80224cc:	f003 0301 	and.w	r3, r3, #1
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d006      	beq.n	80224e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	8b5b      	ldrh	r3, [r3, #26]
 80224d8:	f043 0320 	orr.w	r3, r3, #32
 80224dc:	b29a      	uxth	r2, r3
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	685b      	ldr	r3, [r3, #4]
 80224e6:	4618      	mov	r0, r3
 80224e8:	f7fb fae2 	bl	801dab0 <pbuf_clen>
 80224ec:	4603      	mov	r3, r0
 80224ee:	461a      	mov	r2, r3
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80224f6:	4413      	add	r3, r2
 80224f8:	b29a      	uxth	r2, r3
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8022506:	2b00      	cmp	r3, #0
 8022508:	d00e      	beq.n	8022528 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802250e:	2b00      	cmp	r3, #0
 8022510:	d10a      	bne.n	8022528 <tcp_enqueue_flags+0x1b0>
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022516:	2b00      	cmp	r3, #0
 8022518:	d106      	bne.n	8022528 <tcp_enqueue_flags+0x1b0>
 802251a:	4b06      	ldr	r3, [pc, #24]	@ (8022534 <tcp_enqueue_flags+0x1bc>)
 802251c:	f240 4265 	movw	r2, #1125	@ 0x465
 8022520:	490b      	ldr	r1, [pc, #44]	@ (8022550 <tcp_enqueue_flags+0x1d8>)
 8022522:	4806      	ldr	r0, [pc, #24]	@ (802253c <tcp_enqueue_flags+0x1c4>)
 8022524:	f006 ff20 	bl	8029368 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8022528:	2300      	movs	r3, #0
}
 802252a:	4618      	mov	r0, r3
 802252c:	3720      	adds	r7, #32
 802252e:	46bd      	mov	sp, r7
 8022530:	bd80      	pop	{r7, pc}
 8022532:	bf00      	nop
 8022534:	0802f1f8 	.word	0x0802f1f8
 8022538:	0802f61c 	.word	0x0802f61c
 802253c:	0802f24c 	.word	0x0802f24c
 8022540:	0802f674 	.word	0x0802f674
 8022544:	0802f694 	.word	0x0802f694
 8022548:	0802f6d0 	.word	0x0802f6d0
 802254c:	0802f6e8 	.word	0x0802f6e8
 8022550:	0802f714 	.word	0x0802f714

08022554 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8022554:	b5b0      	push	{r4, r5, r7, lr}
 8022556:	b08a      	sub	sp, #40	@ 0x28
 8022558:	af00      	add	r7, sp, #0
 802255a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d106      	bne.n	8022570 <tcp_output+0x1c>
 8022562:	4b8a      	ldr	r3, [pc, #552]	@ (802278c <tcp_output+0x238>)
 8022564:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8022568:	4989      	ldr	r1, [pc, #548]	@ (8022790 <tcp_output+0x23c>)
 802256a:	488a      	ldr	r0, [pc, #552]	@ (8022794 <tcp_output+0x240>)
 802256c:	f006 fefc 	bl	8029368 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	7d1b      	ldrb	r3, [r3, #20]
 8022574:	2b01      	cmp	r3, #1
 8022576:	d106      	bne.n	8022586 <tcp_output+0x32>
 8022578:	4b84      	ldr	r3, [pc, #528]	@ (802278c <tcp_output+0x238>)
 802257a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 802257e:	4986      	ldr	r1, [pc, #536]	@ (8022798 <tcp_output+0x244>)
 8022580:	4884      	ldr	r0, [pc, #528]	@ (8022794 <tcp_output+0x240>)
 8022582:	f006 fef1 	bl	8029368 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8022586:	4b85      	ldr	r3, [pc, #532]	@ (802279c <tcp_output+0x248>)
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	687a      	ldr	r2, [r7, #4]
 802258c:	429a      	cmp	r2, r3
 802258e:	d101      	bne.n	8022594 <tcp_output+0x40>
    return ERR_OK;
 8022590:	2300      	movs	r3, #0
 8022592:	e1ce      	b.n	8022932 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80225a0:	4293      	cmp	r3, r2
 80225a2:	bf28      	it	cs
 80225a4:	4613      	movcs	r3, r2
 80225a6:	b29b      	uxth	r3, r3
 80225a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80225ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80225b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d10b      	bne.n	80225ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	8b5b      	ldrh	r3, [r3, #26]
 80225ba:	f003 0302 	and.w	r3, r3, #2
 80225be:	2b00      	cmp	r3, #0
 80225c0:	f000 81aa 	beq.w	8022918 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80225c4:	6878      	ldr	r0, [r7, #4]
 80225c6:	f000 fdcb 	bl	8023160 <tcp_send_empty_ack>
 80225ca:	4603      	mov	r3, r0
 80225cc:	e1b1      	b.n	8022932 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80225ce:	6879      	ldr	r1, [r7, #4]
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	3304      	adds	r3, #4
 80225d4:	461a      	mov	r2, r3
 80225d6:	6878      	ldr	r0, [r7, #4]
 80225d8:	f7ff fc7e 	bl	8021ed8 <tcp_route>
 80225dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80225de:	697b      	ldr	r3, [r7, #20]
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d102      	bne.n	80225ea <tcp_output+0x96>
    return ERR_RTE;
 80225e4:	f06f 0303 	mvn.w	r3, #3
 80225e8:	e1a3      	b.n	8022932 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d003      	beq.n	80225f8 <tcp_output+0xa4>
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d111      	bne.n	802261c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80225f8:	697b      	ldr	r3, [r7, #20]
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d002      	beq.n	8022604 <tcp_output+0xb0>
 80225fe:	697b      	ldr	r3, [r7, #20]
 8022600:	3304      	adds	r3, #4
 8022602:	e000      	b.n	8022606 <tcp_output+0xb2>
 8022604:	2300      	movs	r3, #0
 8022606:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8022608:	693b      	ldr	r3, [r7, #16]
 802260a:	2b00      	cmp	r3, #0
 802260c:	d102      	bne.n	8022614 <tcp_output+0xc0>
      return ERR_RTE;
 802260e:	f06f 0303 	mvn.w	r3, #3
 8022612:	e18e      	b.n	8022932 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8022614:	693b      	ldr	r3, [r7, #16]
 8022616:	681a      	ldr	r2, [r3, #0]
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802261e:	68db      	ldr	r3, [r3, #12]
 8022620:	685b      	ldr	r3, [r3, #4]
 8022622:	4618      	mov	r0, r3
 8022624:	f7f9 fae1 	bl	801bbea <lwip_htonl>
 8022628:	4602      	mov	r2, r0
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802262e:	1ad3      	subs	r3, r2, r3
 8022630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022632:	8912      	ldrh	r2, [r2, #8]
 8022634:	4413      	add	r3, r2
 8022636:	69ba      	ldr	r2, [r7, #24]
 8022638:	429a      	cmp	r2, r3
 802263a:	d227      	bcs.n	802268c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8022642:	461a      	mov	r2, r3
 8022644:	69bb      	ldr	r3, [r7, #24]
 8022646:	4293      	cmp	r3, r2
 8022648:	d114      	bne.n	8022674 <tcp_output+0x120>
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802264e:	2b00      	cmp	r3, #0
 8022650:	d110      	bne.n	8022674 <tcp_output+0x120>
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8022658:	2b00      	cmp	r3, #0
 802265a:	d10b      	bne.n	8022674 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	2200      	movs	r2, #0
 8022660:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	2201      	movs	r2, #1
 8022668:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	2200      	movs	r2, #0
 8022670:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	8b5b      	ldrh	r3, [r3, #26]
 8022678:	f003 0302 	and.w	r3, r3, #2
 802267c:	2b00      	cmp	r3, #0
 802267e:	f000 814d 	beq.w	802291c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8022682:	6878      	ldr	r0, [r7, #4]
 8022684:	f000 fd6c 	bl	8023160 <tcp_send_empty_ack>
 8022688:	4603      	mov	r3, r0
 802268a:	e152      	b.n	8022932 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	2200      	movs	r2, #0
 8022690:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022698:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 802269a:	6a3b      	ldr	r3, [r7, #32]
 802269c:	2b00      	cmp	r3, #0
 802269e:	f000 811c 	beq.w	80228da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80226a2:	e002      	b.n	80226aa <tcp_output+0x156>
 80226a4:	6a3b      	ldr	r3, [r7, #32]
 80226a6:	681b      	ldr	r3, [r3, #0]
 80226a8:	623b      	str	r3, [r7, #32]
 80226aa:	6a3b      	ldr	r3, [r7, #32]
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d1f8      	bne.n	80226a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80226b2:	e112      	b.n	80228da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80226b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226b6:	68db      	ldr	r3, [r3, #12]
 80226b8:	899b      	ldrh	r3, [r3, #12]
 80226ba:	b29b      	uxth	r3, r3
 80226bc:	4618      	mov	r0, r3
 80226be:	f7f9 fa7f 	bl	801bbc0 <lwip_htons>
 80226c2:	4603      	mov	r3, r0
 80226c4:	b2db      	uxtb	r3, r3
 80226c6:	f003 0304 	and.w	r3, r3, #4
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d006      	beq.n	80226dc <tcp_output+0x188>
 80226ce:	4b2f      	ldr	r3, [pc, #188]	@ (802278c <tcp_output+0x238>)
 80226d0:	f240 5236 	movw	r2, #1334	@ 0x536
 80226d4:	4932      	ldr	r1, [pc, #200]	@ (80227a0 <tcp_output+0x24c>)
 80226d6:	482f      	ldr	r0, [pc, #188]	@ (8022794 <tcp_output+0x240>)
 80226d8:	f006 fe46 	bl	8029368 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d01f      	beq.n	8022724 <tcp_output+0x1d0>
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	8b5b      	ldrh	r3, [r3, #26]
 80226e8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	d119      	bne.n	8022724 <tcp_output+0x1d0>
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d00b      	beq.n	8022710 <tcp_output+0x1bc>
 80226f8:	687b      	ldr	r3, [r7, #4]
 80226fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d110      	bne.n	8022724 <tcp_output+0x1d0>
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022706:	891a      	ldrh	r2, [r3, #8]
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802270c:	429a      	cmp	r2, r3
 802270e:	d209      	bcs.n	8022724 <tcp_output+0x1d0>
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8022716:	2b00      	cmp	r3, #0
 8022718:	d004      	beq.n	8022724 <tcp_output+0x1d0>
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8022720:	2b08      	cmp	r3, #8
 8022722:	d901      	bls.n	8022728 <tcp_output+0x1d4>
 8022724:	2301      	movs	r3, #1
 8022726:	e000      	b.n	802272a <tcp_output+0x1d6>
 8022728:	2300      	movs	r3, #0
 802272a:	2b00      	cmp	r3, #0
 802272c:	d106      	bne.n	802273c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	8b5b      	ldrh	r3, [r3, #26]
 8022732:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8022736:	2b00      	cmp	r3, #0
 8022738:	f000 80e4 	beq.w	8022904 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	7d1b      	ldrb	r3, [r3, #20]
 8022740:	2b02      	cmp	r3, #2
 8022742:	d00d      	beq.n	8022760 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8022744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022746:	68db      	ldr	r3, [r3, #12]
 8022748:	899b      	ldrh	r3, [r3, #12]
 802274a:	b29c      	uxth	r4, r3
 802274c:	2010      	movs	r0, #16
 802274e:	f7f9 fa37 	bl	801bbc0 <lwip_htons>
 8022752:	4603      	mov	r3, r0
 8022754:	461a      	mov	r2, r3
 8022756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022758:	68db      	ldr	r3, [r3, #12]
 802275a:	4322      	orrs	r2, r4
 802275c:	b292      	uxth	r2, r2
 802275e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8022760:	697a      	ldr	r2, [r7, #20]
 8022762:	6879      	ldr	r1, [r7, #4]
 8022764:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8022766:	f000 f909 	bl	802297c <tcp_output_segment>
 802276a:	4603      	mov	r3, r0
 802276c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 802276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022772:	2b00      	cmp	r3, #0
 8022774:	d016      	beq.n	80227a4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	8b5b      	ldrh	r3, [r3, #26]
 802277a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802277e:	b29a      	uxth	r2, r3
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	835a      	strh	r2, [r3, #26]
      return err;
 8022784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022788:	e0d3      	b.n	8022932 <tcp_output+0x3de>
 802278a:	bf00      	nop
 802278c:	0802f1f8 	.word	0x0802f1f8
 8022790:	0802f73c 	.word	0x0802f73c
 8022794:	0802f24c 	.word	0x0802f24c
 8022798:	0802f754 	.word	0x0802f754
 802279c:	2400b4d8 	.word	0x2400b4d8
 80227a0:	0802f77c 	.word	0x0802f77c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80227a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227a6:	681a      	ldr	r2, [r3, #0]
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	7d1b      	ldrb	r3, [r3, #20]
 80227b0:	2b02      	cmp	r3, #2
 80227b2:	d006      	beq.n	80227c2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	8b5b      	ldrh	r3, [r3, #26]
 80227b8:	f023 0303 	bic.w	r3, r3, #3
 80227bc:	b29a      	uxth	r2, r3
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80227c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227c4:	68db      	ldr	r3, [r3, #12]
 80227c6:	685b      	ldr	r3, [r3, #4]
 80227c8:	4618      	mov	r0, r3
 80227ca:	f7f9 fa0e 	bl	801bbea <lwip_htonl>
 80227ce:	4604      	mov	r4, r0
 80227d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227d2:	891b      	ldrh	r3, [r3, #8]
 80227d4:	461d      	mov	r5, r3
 80227d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227d8:	68db      	ldr	r3, [r3, #12]
 80227da:	899b      	ldrh	r3, [r3, #12]
 80227dc:	b29b      	uxth	r3, r3
 80227de:	4618      	mov	r0, r3
 80227e0:	f7f9 f9ee 	bl	801bbc0 <lwip_htons>
 80227e4:	4603      	mov	r3, r0
 80227e6:	b2db      	uxtb	r3, r3
 80227e8:	f003 0303 	and.w	r3, r3, #3
 80227ec:	2b00      	cmp	r3, #0
 80227ee:	d001      	beq.n	80227f4 <tcp_output+0x2a0>
 80227f0:	2301      	movs	r3, #1
 80227f2:	e000      	b.n	80227f6 <tcp_output+0x2a2>
 80227f4:	2300      	movs	r3, #0
 80227f6:	442b      	add	r3, r5
 80227f8:	4423      	add	r3, r4
 80227fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8022800:	68bb      	ldr	r3, [r7, #8]
 8022802:	1ad3      	subs	r3, r2, r3
 8022804:	2b00      	cmp	r3, #0
 8022806:	da02      	bge.n	802280e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	68ba      	ldr	r2, [r7, #8]
 802280c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 802280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022810:	891b      	ldrh	r3, [r3, #8]
 8022812:	461c      	mov	r4, r3
 8022814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022816:	68db      	ldr	r3, [r3, #12]
 8022818:	899b      	ldrh	r3, [r3, #12]
 802281a:	b29b      	uxth	r3, r3
 802281c:	4618      	mov	r0, r3
 802281e:	f7f9 f9cf 	bl	801bbc0 <lwip_htons>
 8022822:	4603      	mov	r3, r0
 8022824:	b2db      	uxtb	r3, r3
 8022826:	f003 0303 	and.w	r3, r3, #3
 802282a:	2b00      	cmp	r3, #0
 802282c:	d001      	beq.n	8022832 <tcp_output+0x2de>
 802282e:	2301      	movs	r3, #1
 8022830:	e000      	b.n	8022834 <tcp_output+0x2e0>
 8022832:	2300      	movs	r3, #0
 8022834:	4423      	add	r3, r4
 8022836:	2b00      	cmp	r3, #0
 8022838:	d049      	beq.n	80228ce <tcp_output+0x37a>
      seg->next = NULL;
 802283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802283c:	2200      	movs	r2, #0
 802283e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022844:	2b00      	cmp	r3, #0
 8022846:	d105      	bne.n	8022854 <tcp_output+0x300>
        pcb->unacked = seg;
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802284c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 802284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022850:	623b      	str	r3, [r7, #32]
 8022852:	e03f      	b.n	80228d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8022854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022856:	68db      	ldr	r3, [r3, #12]
 8022858:	685b      	ldr	r3, [r3, #4]
 802285a:	4618      	mov	r0, r3
 802285c:	f7f9 f9c5 	bl	801bbea <lwip_htonl>
 8022860:	4604      	mov	r4, r0
 8022862:	6a3b      	ldr	r3, [r7, #32]
 8022864:	68db      	ldr	r3, [r3, #12]
 8022866:	685b      	ldr	r3, [r3, #4]
 8022868:	4618      	mov	r0, r3
 802286a:	f7f9 f9be 	bl	801bbea <lwip_htonl>
 802286e:	4603      	mov	r3, r0
 8022870:	1ae3      	subs	r3, r4, r3
 8022872:	2b00      	cmp	r3, #0
 8022874:	da24      	bge.n	80228c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	3370      	adds	r3, #112	@ 0x70
 802287a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802287c:	e002      	b.n	8022884 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 802287e:	69fb      	ldr	r3, [r7, #28]
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8022884:	69fb      	ldr	r3, [r7, #28]
 8022886:	681b      	ldr	r3, [r3, #0]
 8022888:	2b00      	cmp	r3, #0
 802288a:	d011      	beq.n	80228b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802288c:	69fb      	ldr	r3, [r7, #28]
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	68db      	ldr	r3, [r3, #12]
 8022892:	685b      	ldr	r3, [r3, #4]
 8022894:	4618      	mov	r0, r3
 8022896:	f7f9 f9a8 	bl	801bbea <lwip_htonl>
 802289a:	4604      	mov	r4, r0
 802289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802289e:	68db      	ldr	r3, [r3, #12]
 80228a0:	685b      	ldr	r3, [r3, #4]
 80228a2:	4618      	mov	r0, r3
 80228a4:	f7f9 f9a1 	bl	801bbea <lwip_htonl>
 80228a8:	4603      	mov	r3, r0
 80228aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	dbe6      	blt.n	802287e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80228b0:	69fb      	ldr	r3, [r7, #28]
 80228b2:	681a      	ldr	r2, [r3, #0]
 80228b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80228b8:	69fb      	ldr	r3, [r7, #28]
 80228ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80228bc:	601a      	str	r2, [r3, #0]
 80228be:	e009      	b.n	80228d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80228c0:	6a3b      	ldr	r3, [r7, #32]
 80228c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80228c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80228c6:	6a3b      	ldr	r3, [r7, #32]
 80228c8:	681b      	ldr	r3, [r3, #0]
 80228ca:	623b      	str	r3, [r7, #32]
 80228cc:	e002      	b.n	80228d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80228ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80228d0:	f7fc fc45 	bl	801f15e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80228d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80228da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d012      	beq.n	8022906 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80228e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228e2:	68db      	ldr	r3, [r3, #12]
 80228e4:	685b      	ldr	r3, [r3, #4]
 80228e6:	4618      	mov	r0, r3
 80228e8:	f7f9 f97f 	bl	801bbea <lwip_htonl>
 80228ec:	4602      	mov	r2, r0
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80228f2:	1ad3      	subs	r3, r2, r3
 80228f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80228f6:	8912      	ldrh	r2, [r2, #8]
 80228f8:	4413      	add	r3, r2
  while (seg != NULL &&
 80228fa:	69ba      	ldr	r2, [r7, #24]
 80228fc:	429a      	cmp	r2, r3
 80228fe:	f4bf aed9 	bcs.w	80226b4 <tcp_output+0x160>
 8022902:	e000      	b.n	8022906 <tcp_output+0x3b2>
      break;
 8022904:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802290a:	2b00      	cmp	r3, #0
 802290c:	d108      	bne.n	8022920 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	2200      	movs	r2, #0
 8022912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8022916:	e004      	b.n	8022922 <tcp_output+0x3ce>
    goto output_done;
 8022918:	bf00      	nop
 802291a:	e002      	b.n	8022922 <tcp_output+0x3ce>
    goto output_done;
 802291c:	bf00      	nop
 802291e:	e000      	b.n	8022922 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8022920:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	8b5b      	ldrh	r3, [r3, #26]
 8022926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802292a:	b29a      	uxth	r2, r3
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8022930:	2300      	movs	r3, #0
}
 8022932:	4618      	mov	r0, r3
 8022934:	3728      	adds	r7, #40	@ 0x28
 8022936:	46bd      	mov	sp, r7
 8022938:	bdb0      	pop	{r4, r5, r7, pc}
 802293a:	bf00      	nop

0802293c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 802293c:	b580      	push	{r7, lr}
 802293e:	b082      	sub	sp, #8
 8022940:	af00      	add	r7, sp, #0
 8022942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	2b00      	cmp	r3, #0
 8022948:	d106      	bne.n	8022958 <tcp_output_segment_busy+0x1c>
 802294a:	4b09      	ldr	r3, [pc, #36]	@ (8022970 <tcp_output_segment_busy+0x34>)
 802294c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8022950:	4908      	ldr	r1, [pc, #32]	@ (8022974 <tcp_output_segment_busy+0x38>)
 8022952:	4809      	ldr	r0, [pc, #36]	@ (8022978 <tcp_output_segment_busy+0x3c>)
 8022954:	f006 fd08 	bl	8029368 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	685b      	ldr	r3, [r3, #4]
 802295c:	7b9b      	ldrb	r3, [r3, #14]
 802295e:	2b01      	cmp	r3, #1
 8022960:	d001      	beq.n	8022966 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8022962:	2301      	movs	r3, #1
 8022964:	e000      	b.n	8022968 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8022966:	2300      	movs	r3, #0
}
 8022968:	4618      	mov	r0, r3
 802296a:	3708      	adds	r7, #8
 802296c:	46bd      	mov	sp, r7
 802296e:	bd80      	pop	{r7, pc}
 8022970:	0802f1f8 	.word	0x0802f1f8
 8022974:	0802f794 	.word	0x0802f794
 8022978:	0802f24c 	.word	0x0802f24c

0802297c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 802297c:	b5b0      	push	{r4, r5, r7, lr}
 802297e:	b08c      	sub	sp, #48	@ 0x30
 8022980:	af04      	add	r7, sp, #16
 8022982:	60f8      	str	r0, [r7, #12]
 8022984:	60b9      	str	r1, [r7, #8]
 8022986:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	2b00      	cmp	r3, #0
 802298c:	d106      	bne.n	802299c <tcp_output_segment+0x20>
 802298e:	4b64      	ldr	r3, [pc, #400]	@ (8022b20 <tcp_output_segment+0x1a4>)
 8022990:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8022994:	4963      	ldr	r1, [pc, #396]	@ (8022b24 <tcp_output_segment+0x1a8>)
 8022996:	4864      	ldr	r0, [pc, #400]	@ (8022b28 <tcp_output_segment+0x1ac>)
 8022998:	f006 fce6 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 802299c:	68bb      	ldr	r3, [r7, #8]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d106      	bne.n	80229b0 <tcp_output_segment+0x34>
 80229a2:	4b5f      	ldr	r3, [pc, #380]	@ (8022b20 <tcp_output_segment+0x1a4>)
 80229a4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80229a8:	4960      	ldr	r1, [pc, #384]	@ (8022b2c <tcp_output_segment+0x1b0>)
 80229aa:	485f      	ldr	r0, [pc, #380]	@ (8022b28 <tcp_output_segment+0x1ac>)
 80229ac:	f006 fcdc 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d106      	bne.n	80229c4 <tcp_output_segment+0x48>
 80229b6:	4b5a      	ldr	r3, [pc, #360]	@ (8022b20 <tcp_output_segment+0x1a4>)
 80229b8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80229bc:	495c      	ldr	r1, [pc, #368]	@ (8022b30 <tcp_output_segment+0x1b4>)
 80229be:	485a      	ldr	r0, [pc, #360]	@ (8022b28 <tcp_output_segment+0x1ac>)
 80229c0:	f006 fcd2 	bl	8029368 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80229c4:	68f8      	ldr	r0, [r7, #12]
 80229c6:	f7ff ffb9 	bl	802293c <tcp_output_segment_busy>
 80229ca:	4603      	mov	r3, r0
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d001      	beq.n	80229d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80229d0:	2300      	movs	r3, #0
 80229d2:	e0a1      	b.n	8022b18 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80229d4:	68bb      	ldr	r3, [r7, #8]
 80229d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	68dc      	ldr	r4, [r3, #12]
 80229dc:	4610      	mov	r0, r2
 80229de:	f7f9 f904 	bl	801bbea <lwip_htonl>
 80229e2:	4603      	mov	r3, r0
 80229e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80229e6:	68bb      	ldr	r3, [r7, #8]
 80229e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80229ea:	68fb      	ldr	r3, [r7, #12]
 80229ec:	68dc      	ldr	r4, [r3, #12]
 80229ee:	4610      	mov	r0, r2
 80229f0:	f7f9 f8e6 	bl	801bbc0 <lwip_htons>
 80229f4:	4603      	mov	r3, r0
 80229f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80229f8:	68bb      	ldr	r3, [r7, #8]
 80229fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80229fc:	68ba      	ldr	r2, [r7, #8]
 80229fe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8022a00:	441a      	add	r2, r3
 8022a02:	68bb      	ldr	r3, [r7, #8]
 8022a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	68db      	ldr	r3, [r3, #12]
 8022a0a:	3314      	adds	r3, #20
 8022a0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8022a0e:	68fb      	ldr	r3, [r7, #12]
 8022a10:	7a9b      	ldrb	r3, [r3, #10]
 8022a12:	f003 0301 	and.w	r3, r3, #1
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	d015      	beq.n	8022a46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8022a1a:	68bb      	ldr	r3, [r7, #8]
 8022a1c:	3304      	adds	r3, #4
 8022a1e:	461a      	mov	r2, r3
 8022a20:	6879      	ldr	r1, [r7, #4]
 8022a22:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8022a26:	f7fc fe91 	bl	801f74c <tcp_eff_send_mss_netif>
 8022a2a:	4603      	mov	r3, r0
 8022a2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8022a2e:	8b7b      	ldrh	r3, [r7, #26]
 8022a30:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8022a34:	4618      	mov	r0, r3
 8022a36:	f7f9 f8d8 	bl	801bbea <lwip_htonl>
 8022a3a:	4602      	mov	r2, r0
 8022a3c:	69fb      	ldr	r3, [r7, #28]
 8022a3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8022a40:	69fb      	ldr	r3, [r7, #28]
 8022a42:	3304      	adds	r3, #4
 8022a44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8022a46:	68bb      	ldr	r3, [r7, #8]
 8022a48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	da02      	bge.n	8022a56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8022a50:	68bb      	ldr	r3, [r7, #8]
 8022a52:	2200      	movs	r2, #0
 8022a54:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8022a56:	68bb      	ldr	r3, [r7, #8]
 8022a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d10c      	bne.n	8022a78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8022a5e:	4b35      	ldr	r3, [pc, #212]	@ (8022b34 <tcp_output_segment+0x1b8>)
 8022a60:	681a      	ldr	r2, [r3, #0]
 8022a62:	68bb      	ldr	r3, [r7, #8]
 8022a64:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8022a66:	68fb      	ldr	r3, [r7, #12]
 8022a68:	68db      	ldr	r3, [r3, #12]
 8022a6a:	685b      	ldr	r3, [r3, #4]
 8022a6c:	4618      	mov	r0, r3
 8022a6e:	f7f9 f8bc 	bl	801bbea <lwip_htonl>
 8022a72:	4602      	mov	r2, r0
 8022a74:	68bb      	ldr	r3, [r7, #8]
 8022a76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	68da      	ldr	r2, [r3, #12]
 8022a7c:	68fb      	ldr	r3, [r7, #12]
 8022a7e:	685b      	ldr	r3, [r3, #4]
 8022a80:	685b      	ldr	r3, [r3, #4]
 8022a82:	1ad3      	subs	r3, r2, r3
 8022a84:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8022a86:	68fb      	ldr	r3, [r7, #12]
 8022a88:	685b      	ldr	r3, [r3, #4]
 8022a8a:	8959      	ldrh	r1, [r3, #10]
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	685b      	ldr	r3, [r3, #4]
 8022a90:	8b3a      	ldrh	r2, [r7, #24]
 8022a92:	1a8a      	subs	r2, r1, r2
 8022a94:	b292      	uxth	r2, r2
 8022a96:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8022a98:	68fb      	ldr	r3, [r7, #12]
 8022a9a:	685b      	ldr	r3, [r3, #4]
 8022a9c:	8919      	ldrh	r1, [r3, #8]
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	685b      	ldr	r3, [r3, #4]
 8022aa2:	8b3a      	ldrh	r2, [r7, #24]
 8022aa4:	1a8a      	subs	r2, r1, r2
 8022aa6:	b292      	uxth	r2, r2
 8022aa8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8022aaa:	68fb      	ldr	r3, [r7, #12]
 8022aac:	685b      	ldr	r3, [r3, #4]
 8022aae:	68fa      	ldr	r2, [r7, #12]
 8022ab0:	68d2      	ldr	r2, [r2, #12]
 8022ab2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8022ab4:	68fb      	ldr	r3, [r7, #12]
 8022ab6:	68db      	ldr	r3, [r3, #12]
 8022ab8:	2200      	movs	r2, #0
 8022aba:	741a      	strb	r2, [r3, #16]
 8022abc:	2200      	movs	r2, #0
 8022abe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8022ac0:	68fb      	ldr	r3, [r7, #12]
 8022ac2:	68da      	ldr	r2, [r3, #12]
 8022ac4:	68fb      	ldr	r3, [r7, #12]
 8022ac6:	7a9b      	ldrb	r3, [r3, #10]
 8022ac8:	f003 0301 	and.w	r3, r3, #1
 8022acc:	2b00      	cmp	r3, #0
 8022ace:	d001      	beq.n	8022ad4 <tcp_output_segment+0x158>
 8022ad0:	2318      	movs	r3, #24
 8022ad2:	e000      	b.n	8022ad6 <tcp_output_segment+0x15a>
 8022ad4:	2314      	movs	r3, #20
 8022ad6:	4413      	add	r3, r2
 8022ad8:	69fa      	ldr	r2, [r7, #28]
 8022ada:	429a      	cmp	r2, r3
 8022adc:	d006      	beq.n	8022aec <tcp_output_segment+0x170>
 8022ade:	4b10      	ldr	r3, [pc, #64]	@ (8022b20 <tcp_output_segment+0x1a4>)
 8022ae0:	f240 621c 	movw	r2, #1564	@ 0x61c
 8022ae4:	4914      	ldr	r1, [pc, #80]	@ (8022b38 <tcp_output_segment+0x1bc>)
 8022ae6:	4810      	ldr	r0, [pc, #64]	@ (8022b28 <tcp_output_segment+0x1ac>)
 8022ae8:	f006 fc3e 	bl	8029368 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8022aec:	68fb      	ldr	r3, [r7, #12]
 8022aee:	6858      	ldr	r0, [r3, #4]
 8022af0:	68b9      	ldr	r1, [r7, #8]
 8022af2:	68bb      	ldr	r3, [r7, #8]
 8022af4:	1d1c      	adds	r4, r3, #4
 8022af6:	68bb      	ldr	r3, [r7, #8]
 8022af8:	7add      	ldrb	r5, [r3, #11]
 8022afa:	68bb      	ldr	r3, [r7, #8]
 8022afc:	7a9b      	ldrb	r3, [r3, #10]
 8022afe:	687a      	ldr	r2, [r7, #4]
 8022b00:	9202      	str	r2, [sp, #8]
 8022b02:	2206      	movs	r2, #6
 8022b04:	9201      	str	r2, [sp, #4]
 8022b06:	9300      	str	r3, [sp, #0]
 8022b08:	462b      	mov	r3, r5
 8022b0a:	4622      	mov	r2, r4
 8022b0c:	f004 fc76 	bl	80273fc <ip4_output_if>
 8022b10:	4603      	mov	r3, r0
 8022b12:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8022b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022b18:	4618      	mov	r0, r3
 8022b1a:	3720      	adds	r7, #32
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8022b20:	0802f1f8 	.word	0x0802f1f8
 8022b24:	0802f7bc 	.word	0x0802f7bc
 8022b28:	0802f24c 	.word	0x0802f24c
 8022b2c:	0802f7dc 	.word	0x0802f7dc
 8022b30:	0802f7fc 	.word	0x0802f7fc
 8022b34:	2400b48c 	.word	0x2400b48c
 8022b38:	0802f820 	.word	0x0802f820

08022b3c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8022b3c:	b5b0      	push	{r4, r5, r7, lr}
 8022b3e:	b084      	sub	sp, #16
 8022b40:	af00      	add	r7, sp, #0
 8022b42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d106      	bne.n	8022b58 <tcp_rexmit_rto_prepare+0x1c>
 8022b4a:	4b31      	ldr	r3, [pc, #196]	@ (8022c10 <tcp_rexmit_rto_prepare+0xd4>)
 8022b4c:	f240 6263 	movw	r2, #1635	@ 0x663
 8022b50:	4930      	ldr	r1, [pc, #192]	@ (8022c14 <tcp_rexmit_rto_prepare+0xd8>)
 8022b52:	4831      	ldr	r0, [pc, #196]	@ (8022c18 <tcp_rexmit_rto_prepare+0xdc>)
 8022b54:	f006 fc08 	bl	8029368 <iprintf>

  if (pcb->unacked == NULL) {
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d102      	bne.n	8022b66 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8022b60:	f06f 0305 	mvn.w	r3, #5
 8022b64:	e050      	b.n	8022c08 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022b6a:	60fb      	str	r3, [r7, #12]
 8022b6c:	e00b      	b.n	8022b86 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8022b6e:	68f8      	ldr	r0, [r7, #12]
 8022b70:	f7ff fee4 	bl	802293c <tcp_output_segment_busy>
 8022b74:	4603      	mov	r3, r0
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d002      	beq.n	8022b80 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8022b7a:	f06f 0305 	mvn.w	r3, #5
 8022b7e:	e043      	b.n	8022c08 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8022b80:	68fb      	ldr	r3, [r7, #12]
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	60fb      	str	r3, [r7, #12]
 8022b86:	68fb      	ldr	r3, [r7, #12]
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d1ef      	bne.n	8022b6e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8022b8e:	68f8      	ldr	r0, [r7, #12]
 8022b90:	f7ff fed4 	bl	802293c <tcp_output_segment_busy>
 8022b94:	4603      	mov	r3, r0
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	d002      	beq.n	8022ba0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8022b9a:	f06f 0305 	mvn.w	r3, #5
 8022b9e:	e033      	b.n	8022c08 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8022ba4:	68fb      	ldr	r3, [r7, #12]
 8022ba6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	2200      	movs	r2, #0
 8022bb4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	8b5b      	ldrh	r3, [r3, #26]
 8022bba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8022bbe:	b29a      	uxth	r2, r3
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	68db      	ldr	r3, [r3, #12]
 8022bc8:	685b      	ldr	r3, [r3, #4]
 8022bca:	4618      	mov	r0, r3
 8022bcc:	f7f9 f80d 	bl	801bbea <lwip_htonl>
 8022bd0:	4604      	mov	r4, r0
 8022bd2:	68fb      	ldr	r3, [r7, #12]
 8022bd4:	891b      	ldrh	r3, [r3, #8]
 8022bd6:	461d      	mov	r5, r3
 8022bd8:	68fb      	ldr	r3, [r7, #12]
 8022bda:	68db      	ldr	r3, [r3, #12]
 8022bdc:	899b      	ldrh	r3, [r3, #12]
 8022bde:	b29b      	uxth	r3, r3
 8022be0:	4618      	mov	r0, r3
 8022be2:	f7f8 ffed 	bl	801bbc0 <lwip_htons>
 8022be6:	4603      	mov	r3, r0
 8022be8:	b2db      	uxtb	r3, r3
 8022bea:	f003 0303 	and.w	r3, r3, #3
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d001      	beq.n	8022bf6 <tcp_rexmit_rto_prepare+0xba>
 8022bf2:	2301      	movs	r3, #1
 8022bf4:	e000      	b.n	8022bf8 <tcp_rexmit_rto_prepare+0xbc>
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	442b      	add	r3, r5
 8022bfa:	18e2      	adds	r2, r4, r3
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	2200      	movs	r2, #0
 8022c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8022c06:	2300      	movs	r3, #0
}
 8022c08:	4618      	mov	r0, r3
 8022c0a:	3710      	adds	r7, #16
 8022c0c:	46bd      	mov	sp, r7
 8022c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8022c10:	0802f1f8 	.word	0x0802f1f8
 8022c14:	0802f834 	.word	0x0802f834
 8022c18:	0802f24c 	.word	0x0802f24c

08022c1c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8022c1c:	b580      	push	{r7, lr}
 8022c1e:	b082      	sub	sp, #8
 8022c20:	af00      	add	r7, sp, #0
 8022c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d106      	bne.n	8022c38 <tcp_rexmit_rto_commit+0x1c>
 8022c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8022c60 <tcp_rexmit_rto_commit+0x44>)
 8022c2c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8022c30:	490c      	ldr	r1, [pc, #48]	@ (8022c64 <tcp_rexmit_rto_commit+0x48>)
 8022c32:	480d      	ldr	r0, [pc, #52]	@ (8022c68 <tcp_rexmit_rto_commit+0x4c>)
 8022c34:	f006 fb98 	bl	8029368 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022c3e:	2bff      	cmp	r3, #255	@ 0xff
 8022c40:	d007      	beq.n	8022c52 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022c48:	3301      	adds	r3, #1
 8022c4a:	b2da      	uxtb	r2, r3
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8022c52:	6878      	ldr	r0, [r7, #4]
 8022c54:	f7ff fc7e 	bl	8022554 <tcp_output>
}
 8022c58:	bf00      	nop
 8022c5a:	3708      	adds	r7, #8
 8022c5c:	46bd      	mov	sp, r7
 8022c5e:	bd80      	pop	{r7, pc}
 8022c60:	0802f1f8 	.word	0x0802f1f8
 8022c64:	0802f858 	.word	0x0802f858
 8022c68:	0802f24c 	.word	0x0802f24c

08022c6c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b082      	sub	sp, #8
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	d106      	bne.n	8022c88 <tcp_rexmit_rto+0x1c>
 8022c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8022ca4 <tcp_rexmit_rto+0x38>)
 8022c7c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8022c80:	4909      	ldr	r1, [pc, #36]	@ (8022ca8 <tcp_rexmit_rto+0x3c>)
 8022c82:	480a      	ldr	r0, [pc, #40]	@ (8022cac <tcp_rexmit_rto+0x40>)
 8022c84:	f006 fb70 	bl	8029368 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8022c88:	6878      	ldr	r0, [r7, #4]
 8022c8a:	f7ff ff57 	bl	8022b3c <tcp_rexmit_rto_prepare>
 8022c8e:	4603      	mov	r3, r0
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d102      	bne.n	8022c9a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8022c94:	6878      	ldr	r0, [r7, #4]
 8022c96:	f7ff ffc1 	bl	8022c1c <tcp_rexmit_rto_commit>
  }
}
 8022c9a:	bf00      	nop
 8022c9c:	3708      	adds	r7, #8
 8022c9e:	46bd      	mov	sp, r7
 8022ca0:	bd80      	pop	{r7, pc}
 8022ca2:	bf00      	nop
 8022ca4:	0802f1f8 	.word	0x0802f1f8
 8022ca8:	0802f87c 	.word	0x0802f87c
 8022cac:	0802f24c 	.word	0x0802f24c

08022cb0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8022cb0:	b590      	push	{r4, r7, lr}
 8022cb2:	b085      	sub	sp, #20
 8022cb4:	af00      	add	r7, sp, #0
 8022cb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d106      	bne.n	8022ccc <tcp_rexmit+0x1c>
 8022cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8022d7c <tcp_rexmit+0xcc>)
 8022cc0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8022cc4:	492e      	ldr	r1, [pc, #184]	@ (8022d80 <tcp_rexmit+0xd0>)
 8022cc6:	482f      	ldr	r0, [pc, #188]	@ (8022d84 <tcp_rexmit+0xd4>)
 8022cc8:	f006 fb4e 	bl	8029368 <iprintf>

  if (pcb->unacked == NULL) {
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	d102      	bne.n	8022cda <tcp_rexmit+0x2a>
    return ERR_VAL;
 8022cd4:	f06f 0305 	mvn.w	r3, #5
 8022cd8:	e04c      	b.n	8022d74 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022cde:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8022ce0:	68b8      	ldr	r0, [r7, #8]
 8022ce2:	f7ff fe2b 	bl	802293c <tcp_output_segment_busy>
 8022ce6:	4603      	mov	r3, r0
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d002      	beq.n	8022cf2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8022cec:	f06f 0305 	mvn.w	r3, #5
 8022cf0:	e040      	b.n	8022d74 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8022cf2:	68bb      	ldr	r3, [r7, #8]
 8022cf4:	681a      	ldr	r2, [r3, #0]
 8022cf6:	687b      	ldr	r3, [r7, #4]
 8022cf8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	336c      	adds	r3, #108	@ 0x6c
 8022cfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022d00:	e002      	b.n	8022d08 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022d08:	68fb      	ldr	r3, [r7, #12]
 8022d0a:	681b      	ldr	r3, [r3, #0]
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	d011      	beq.n	8022d34 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8022d10:	68fb      	ldr	r3, [r7, #12]
 8022d12:	681b      	ldr	r3, [r3, #0]
 8022d14:	68db      	ldr	r3, [r3, #12]
 8022d16:	685b      	ldr	r3, [r3, #4]
 8022d18:	4618      	mov	r0, r3
 8022d1a:	f7f8 ff66 	bl	801bbea <lwip_htonl>
 8022d1e:	4604      	mov	r4, r0
 8022d20:	68bb      	ldr	r3, [r7, #8]
 8022d22:	68db      	ldr	r3, [r3, #12]
 8022d24:	685b      	ldr	r3, [r3, #4]
 8022d26:	4618      	mov	r0, r3
 8022d28:	f7f8 ff5f 	bl	801bbea <lwip_htonl>
 8022d2c:	4603      	mov	r3, r0
 8022d2e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	dbe6      	blt.n	8022d02 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	681a      	ldr	r2, [r3, #0]
 8022d38:	68bb      	ldr	r3, [r7, #8]
 8022d3a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8022d3c:	68fb      	ldr	r3, [r7, #12]
 8022d3e:	68ba      	ldr	r2, [r7, #8]
 8022d40:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8022d42:	68bb      	ldr	r3, [r7, #8]
 8022d44:	681b      	ldr	r3, [r3, #0]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d103      	bne.n	8022d52 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	2200      	movs	r2, #0
 8022d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022d58:	2bff      	cmp	r3, #255	@ 0xff
 8022d5a:	d007      	beq.n	8022d6c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8022d62:	3301      	adds	r3, #1
 8022d64:	b2da      	uxtb	r2, r3
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	2200      	movs	r2, #0
 8022d70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8022d72:	2300      	movs	r3, #0
}
 8022d74:	4618      	mov	r0, r3
 8022d76:	3714      	adds	r7, #20
 8022d78:	46bd      	mov	sp, r7
 8022d7a:	bd90      	pop	{r4, r7, pc}
 8022d7c:	0802f1f8 	.word	0x0802f1f8
 8022d80:	0802f898 	.word	0x0802f898
 8022d84:	0802f24c 	.word	0x0802f24c

08022d88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8022d88:	b580      	push	{r7, lr}
 8022d8a:	b082      	sub	sp, #8
 8022d8c:	af00      	add	r7, sp, #0
 8022d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d106      	bne.n	8022da4 <tcp_rexmit_fast+0x1c>
 8022d96:	4b2a      	ldr	r3, [pc, #168]	@ (8022e40 <tcp_rexmit_fast+0xb8>)
 8022d98:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8022d9c:	4929      	ldr	r1, [pc, #164]	@ (8022e44 <tcp_rexmit_fast+0xbc>)
 8022d9e:	482a      	ldr	r0, [pc, #168]	@ (8022e48 <tcp_rexmit_fast+0xc0>)
 8022da0:	f006 fae2 	bl	8029368 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	d045      	beq.n	8022e38 <tcp_rexmit_fast+0xb0>
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	8b5b      	ldrh	r3, [r3, #26]
 8022db0:	f003 0304 	and.w	r3, r3, #4
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	d13f      	bne.n	8022e38 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8022db8:	6878      	ldr	r0, [r7, #4]
 8022dba:	f7ff ff79 	bl	8022cb0 <tcp_rexmit>
 8022dbe:	4603      	mov	r3, r0
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d139      	bne.n	8022e38 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8022dca:	687b      	ldr	r3, [r7, #4]
 8022dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8022dd0:	4293      	cmp	r3, r2
 8022dd2:	bf28      	it	cs
 8022dd4:	4613      	movcs	r3, r2
 8022dd6:	b29b      	uxth	r3, r3
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	da00      	bge.n	8022dde <tcp_rexmit_fast+0x56>
 8022ddc:	3301      	adds	r3, #1
 8022dde:	105b      	asrs	r3, r3, #1
 8022de0:	b29a      	uxth	r2, r3
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8022dee:	461a      	mov	r2, r3
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8022df4:	005b      	lsls	r3, r3, #1
 8022df6:	429a      	cmp	r2, r3
 8022df8:	d206      	bcs.n	8022e08 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8022dfe:	005b      	lsls	r3, r3, #1
 8022e00:	b29a      	uxth	r2, r3
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8022e12:	4619      	mov	r1, r3
 8022e14:	0049      	lsls	r1, r1, #1
 8022e16:	440b      	add	r3, r1
 8022e18:	b29b      	uxth	r3, r3
 8022e1a:	4413      	add	r3, r2
 8022e1c:	b29a      	uxth	r2, r3
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	8b5b      	ldrh	r3, [r3, #26]
 8022e28:	f043 0304 	orr.w	r3, r3, #4
 8022e2c:	b29a      	uxth	r2, r3
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8022e32:	687b      	ldr	r3, [r7, #4]
 8022e34:	2200      	movs	r2, #0
 8022e36:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8022e38:	bf00      	nop
 8022e3a:	3708      	adds	r7, #8
 8022e3c:	46bd      	mov	sp, r7
 8022e3e:	bd80      	pop	{r7, pc}
 8022e40:	0802f1f8 	.word	0x0802f1f8
 8022e44:	0802f8b0 	.word	0x0802f8b0
 8022e48:	0802f24c 	.word	0x0802f24c

08022e4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b086      	sub	sp, #24
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	60f8      	str	r0, [r7, #12]
 8022e54:	607b      	str	r3, [r7, #4]
 8022e56:	460b      	mov	r3, r1
 8022e58:	817b      	strh	r3, [r7, #10]
 8022e5a:	4613      	mov	r3, r2
 8022e5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8022e5e:	897a      	ldrh	r2, [r7, #10]
 8022e60:	893b      	ldrh	r3, [r7, #8]
 8022e62:	4413      	add	r3, r2
 8022e64:	b29b      	uxth	r3, r3
 8022e66:	3314      	adds	r3, #20
 8022e68:	b29b      	uxth	r3, r3
 8022e6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022e6e:	4619      	mov	r1, r3
 8022e70:	2022      	movs	r0, #34	@ 0x22
 8022e72:	f7fa fab1 	bl	801d3d8 <pbuf_alloc>
 8022e76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8022e78:	697b      	ldr	r3, [r7, #20]
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	d04d      	beq.n	8022f1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8022e7e:	897b      	ldrh	r3, [r7, #10]
 8022e80:	3313      	adds	r3, #19
 8022e82:	697a      	ldr	r2, [r7, #20]
 8022e84:	8952      	ldrh	r2, [r2, #10]
 8022e86:	4293      	cmp	r3, r2
 8022e88:	db06      	blt.n	8022e98 <tcp_output_alloc_header_common+0x4c>
 8022e8a:	4b26      	ldr	r3, [pc, #152]	@ (8022f24 <tcp_output_alloc_header_common+0xd8>)
 8022e8c:	f240 7223 	movw	r2, #1827	@ 0x723
 8022e90:	4925      	ldr	r1, [pc, #148]	@ (8022f28 <tcp_output_alloc_header_common+0xdc>)
 8022e92:	4826      	ldr	r0, [pc, #152]	@ (8022f2c <tcp_output_alloc_header_common+0xe0>)
 8022e94:	f006 fa68 	bl	8029368 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8022e98:	697b      	ldr	r3, [r7, #20]
 8022e9a:	685b      	ldr	r3, [r3, #4]
 8022e9c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8022e9e:	8c3b      	ldrh	r3, [r7, #32]
 8022ea0:	4618      	mov	r0, r3
 8022ea2:	f7f8 fe8d 	bl	801bbc0 <lwip_htons>
 8022ea6:	4603      	mov	r3, r0
 8022ea8:	461a      	mov	r2, r3
 8022eaa:	693b      	ldr	r3, [r7, #16]
 8022eac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8022eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	f7f8 fe85 	bl	801bbc0 <lwip_htons>
 8022eb6:	4603      	mov	r3, r0
 8022eb8:	461a      	mov	r2, r3
 8022eba:	693b      	ldr	r3, [r7, #16]
 8022ebc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8022ebe:	693b      	ldr	r3, [r7, #16]
 8022ec0:	687a      	ldr	r2, [r7, #4]
 8022ec2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8022ec4:	68f8      	ldr	r0, [r7, #12]
 8022ec6:	f7f8 fe90 	bl	801bbea <lwip_htonl>
 8022eca:	4602      	mov	r2, r0
 8022ecc:	693b      	ldr	r3, [r7, #16]
 8022ece:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8022ed0:	897b      	ldrh	r3, [r7, #10]
 8022ed2:	089b      	lsrs	r3, r3, #2
 8022ed4:	b29b      	uxth	r3, r3
 8022ed6:	3305      	adds	r3, #5
 8022ed8:	b29b      	uxth	r3, r3
 8022eda:	031b      	lsls	r3, r3, #12
 8022edc:	b29a      	uxth	r2, r3
 8022ede:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8022ee2:	b29b      	uxth	r3, r3
 8022ee4:	4313      	orrs	r3, r2
 8022ee6:	b29b      	uxth	r3, r3
 8022ee8:	4618      	mov	r0, r3
 8022eea:	f7f8 fe69 	bl	801bbc0 <lwip_htons>
 8022eee:	4603      	mov	r3, r0
 8022ef0:	461a      	mov	r2, r3
 8022ef2:	693b      	ldr	r3, [r7, #16]
 8022ef4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8022ef6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8022ef8:	4618      	mov	r0, r3
 8022efa:	f7f8 fe61 	bl	801bbc0 <lwip_htons>
 8022efe:	4603      	mov	r3, r0
 8022f00:	461a      	mov	r2, r3
 8022f02:	693b      	ldr	r3, [r7, #16]
 8022f04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8022f06:	693b      	ldr	r3, [r7, #16]
 8022f08:	2200      	movs	r2, #0
 8022f0a:	741a      	strb	r2, [r3, #16]
 8022f0c:	2200      	movs	r2, #0
 8022f0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8022f10:	693b      	ldr	r3, [r7, #16]
 8022f12:	2200      	movs	r2, #0
 8022f14:	749a      	strb	r2, [r3, #18]
 8022f16:	2200      	movs	r2, #0
 8022f18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8022f1a:	697b      	ldr	r3, [r7, #20]
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	3718      	adds	r7, #24
 8022f20:	46bd      	mov	sp, r7
 8022f22:	bd80      	pop	{r7, pc}
 8022f24:	0802f1f8 	.word	0x0802f1f8
 8022f28:	0802f8d0 	.word	0x0802f8d0
 8022f2c:	0802f24c 	.word	0x0802f24c

08022f30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8022f30:	b5b0      	push	{r4, r5, r7, lr}
 8022f32:	b08a      	sub	sp, #40	@ 0x28
 8022f34:	af04      	add	r7, sp, #16
 8022f36:	60f8      	str	r0, [r7, #12]
 8022f38:	607b      	str	r3, [r7, #4]
 8022f3a:	460b      	mov	r3, r1
 8022f3c:	817b      	strh	r3, [r7, #10]
 8022f3e:	4613      	mov	r3, r2
 8022f40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	d106      	bne.n	8022f56 <tcp_output_alloc_header+0x26>
 8022f48:	4b15      	ldr	r3, [pc, #84]	@ (8022fa0 <tcp_output_alloc_header+0x70>)
 8022f4a:	f240 7242 	movw	r2, #1858	@ 0x742
 8022f4e:	4915      	ldr	r1, [pc, #84]	@ (8022fa4 <tcp_output_alloc_header+0x74>)
 8022f50:	4815      	ldr	r0, [pc, #84]	@ (8022fa8 <tcp_output_alloc_header+0x78>)
 8022f52:	f006 fa09 	bl	8029368 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8022f56:	68fb      	ldr	r3, [r7, #12]
 8022f58:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8022f5a:	68fb      	ldr	r3, [r7, #12]
 8022f5c:	8adb      	ldrh	r3, [r3, #22]
 8022f5e:	68fa      	ldr	r2, [r7, #12]
 8022f60:	8b12      	ldrh	r2, [r2, #24]
 8022f62:	68f9      	ldr	r1, [r7, #12]
 8022f64:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8022f66:	893d      	ldrh	r5, [r7, #8]
 8022f68:	897c      	ldrh	r4, [r7, #10]
 8022f6a:	9103      	str	r1, [sp, #12]
 8022f6c:	2110      	movs	r1, #16
 8022f6e:	9102      	str	r1, [sp, #8]
 8022f70:	9201      	str	r2, [sp, #4]
 8022f72:	9300      	str	r3, [sp, #0]
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	462a      	mov	r2, r5
 8022f78:	4621      	mov	r1, r4
 8022f7a:	f7ff ff67 	bl	8022e4c <tcp_output_alloc_header_common>
 8022f7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8022f80:	697b      	ldr	r3, [r7, #20]
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d006      	beq.n	8022f94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8022f86:	68fb      	ldr	r3, [r7, #12]
 8022f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022f8a:	68fa      	ldr	r2, [r7, #12]
 8022f8c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8022f8e:	441a      	add	r2, r3
 8022f90:	68fb      	ldr	r3, [r7, #12]
 8022f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8022f94:	697b      	ldr	r3, [r7, #20]
}
 8022f96:	4618      	mov	r0, r3
 8022f98:	3718      	adds	r7, #24
 8022f9a:	46bd      	mov	sp, r7
 8022f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8022f9e:	bf00      	nop
 8022fa0:	0802f1f8 	.word	0x0802f1f8
 8022fa4:	0802f900 	.word	0x0802f900
 8022fa8:	0802f24c 	.word	0x0802f24c

08022fac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b088      	sub	sp, #32
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	60f8      	str	r0, [r7, #12]
 8022fb4:	60b9      	str	r1, [r7, #8]
 8022fb6:	4611      	mov	r1, r2
 8022fb8:	461a      	mov	r2, r3
 8022fba:	460b      	mov	r3, r1
 8022fbc:	71fb      	strb	r3, [r7, #7]
 8022fbe:	4613      	mov	r3, r2
 8022fc0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8022fc2:	2300      	movs	r3, #0
 8022fc4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8022fc6:	68bb      	ldr	r3, [r7, #8]
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	d106      	bne.n	8022fda <tcp_output_fill_options+0x2e>
 8022fcc:	4b12      	ldr	r3, [pc, #72]	@ (8023018 <tcp_output_fill_options+0x6c>)
 8022fce:	f240 7256 	movw	r2, #1878	@ 0x756
 8022fd2:	4912      	ldr	r1, [pc, #72]	@ (802301c <tcp_output_fill_options+0x70>)
 8022fd4:	4812      	ldr	r0, [pc, #72]	@ (8023020 <tcp_output_fill_options+0x74>)
 8022fd6:	f006 f9c7 	bl	8029368 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8022fda:	68bb      	ldr	r3, [r7, #8]
 8022fdc:	685b      	ldr	r3, [r3, #4]
 8022fde:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8022fe0:	69bb      	ldr	r3, [r7, #24]
 8022fe2:	3314      	adds	r3, #20
 8022fe4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8022fe6:	8bfb      	ldrh	r3, [r7, #30]
 8022fe8:	009b      	lsls	r3, r3, #2
 8022fea:	461a      	mov	r2, r3
 8022fec:	79fb      	ldrb	r3, [r7, #7]
 8022fee:	009b      	lsls	r3, r3, #2
 8022ff0:	f003 0304 	and.w	r3, r3, #4
 8022ff4:	4413      	add	r3, r2
 8022ff6:	3314      	adds	r3, #20
 8022ff8:	69ba      	ldr	r2, [r7, #24]
 8022ffa:	4413      	add	r3, r2
 8022ffc:	697a      	ldr	r2, [r7, #20]
 8022ffe:	429a      	cmp	r2, r3
 8023000:	d006      	beq.n	8023010 <tcp_output_fill_options+0x64>
 8023002:	4b05      	ldr	r3, [pc, #20]	@ (8023018 <tcp_output_fill_options+0x6c>)
 8023004:	f240 7275 	movw	r2, #1909	@ 0x775
 8023008:	4906      	ldr	r1, [pc, #24]	@ (8023024 <tcp_output_fill_options+0x78>)
 802300a:	4805      	ldr	r0, [pc, #20]	@ (8023020 <tcp_output_fill_options+0x74>)
 802300c:	f006 f9ac 	bl	8029368 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8023010:	bf00      	nop
 8023012:	3720      	adds	r7, #32
 8023014:	46bd      	mov	sp, r7
 8023016:	bd80      	pop	{r7, pc}
 8023018:	0802f1f8 	.word	0x0802f1f8
 802301c:	0802f928 	.word	0x0802f928
 8023020:	0802f24c 	.word	0x0802f24c
 8023024:	0802f820 	.word	0x0802f820

08023028 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8023028:	b580      	push	{r7, lr}
 802302a:	b08a      	sub	sp, #40	@ 0x28
 802302c:	af04      	add	r7, sp, #16
 802302e:	60f8      	str	r0, [r7, #12]
 8023030:	60b9      	str	r1, [r7, #8]
 8023032:	607a      	str	r2, [r7, #4]
 8023034:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8023036:	68bb      	ldr	r3, [r7, #8]
 8023038:	2b00      	cmp	r3, #0
 802303a:	d106      	bne.n	802304a <tcp_output_control_segment+0x22>
 802303c:	4b1c      	ldr	r3, [pc, #112]	@ (80230b0 <tcp_output_control_segment+0x88>)
 802303e:	f240 7287 	movw	r2, #1927	@ 0x787
 8023042:	491c      	ldr	r1, [pc, #112]	@ (80230b4 <tcp_output_control_segment+0x8c>)
 8023044:	481c      	ldr	r0, [pc, #112]	@ (80230b8 <tcp_output_control_segment+0x90>)
 8023046:	f006 f98f 	bl	8029368 <iprintf>

  netif = tcp_route(pcb, src, dst);
 802304a:	683a      	ldr	r2, [r7, #0]
 802304c:	6879      	ldr	r1, [r7, #4]
 802304e:	68f8      	ldr	r0, [r7, #12]
 8023050:	f7fe ff42 	bl	8021ed8 <tcp_route>
 8023054:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8023056:	693b      	ldr	r3, [r7, #16]
 8023058:	2b00      	cmp	r3, #0
 802305a:	d102      	bne.n	8023062 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 802305c:	23fc      	movs	r3, #252	@ 0xfc
 802305e:	75fb      	strb	r3, [r7, #23]
 8023060:	e01c      	b.n	802309c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8023062:	68fb      	ldr	r3, [r7, #12]
 8023064:	2b00      	cmp	r3, #0
 8023066:	d006      	beq.n	8023076 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8023068:	68fb      	ldr	r3, [r7, #12]
 802306a:	7adb      	ldrb	r3, [r3, #11]
 802306c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 802306e:	68fb      	ldr	r3, [r7, #12]
 8023070:	7a9b      	ldrb	r3, [r3, #10]
 8023072:	757b      	strb	r3, [r7, #21]
 8023074:	e003      	b.n	802307e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8023076:	23ff      	movs	r3, #255	@ 0xff
 8023078:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 802307a:	2300      	movs	r3, #0
 802307c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 802307e:	7dba      	ldrb	r2, [r7, #22]
 8023080:	693b      	ldr	r3, [r7, #16]
 8023082:	9302      	str	r3, [sp, #8]
 8023084:	2306      	movs	r3, #6
 8023086:	9301      	str	r3, [sp, #4]
 8023088:	7d7b      	ldrb	r3, [r7, #21]
 802308a:	9300      	str	r3, [sp, #0]
 802308c:	4613      	mov	r3, r2
 802308e:	683a      	ldr	r2, [r7, #0]
 8023090:	6879      	ldr	r1, [r7, #4]
 8023092:	68b8      	ldr	r0, [r7, #8]
 8023094:	f004 f9b2 	bl	80273fc <ip4_output_if>
 8023098:	4603      	mov	r3, r0
 802309a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 802309c:	68b8      	ldr	r0, [r7, #8]
 802309e:	f7fa fc7f 	bl	801d9a0 <pbuf_free>
  return err;
 80230a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80230a6:	4618      	mov	r0, r3
 80230a8:	3718      	adds	r7, #24
 80230aa:	46bd      	mov	sp, r7
 80230ac:	bd80      	pop	{r7, pc}
 80230ae:	bf00      	nop
 80230b0:	0802f1f8 	.word	0x0802f1f8
 80230b4:	0802f950 	.word	0x0802f950
 80230b8:	0802f24c 	.word	0x0802f24c

080230bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80230bc:	b590      	push	{r4, r7, lr}
 80230be:	b08b      	sub	sp, #44	@ 0x2c
 80230c0:	af04      	add	r7, sp, #16
 80230c2:	60f8      	str	r0, [r7, #12]
 80230c4:	60b9      	str	r1, [r7, #8]
 80230c6:	607a      	str	r2, [r7, #4]
 80230c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80230ca:	683b      	ldr	r3, [r7, #0]
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	d106      	bne.n	80230de <tcp_rst+0x22>
 80230d0:	4b1f      	ldr	r3, [pc, #124]	@ (8023150 <tcp_rst+0x94>)
 80230d2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80230d6:	491f      	ldr	r1, [pc, #124]	@ (8023154 <tcp_rst+0x98>)
 80230d8:	481f      	ldr	r0, [pc, #124]	@ (8023158 <tcp_rst+0x9c>)
 80230da:	f006 f945 	bl	8029368 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80230de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	d106      	bne.n	80230f2 <tcp_rst+0x36>
 80230e4:	4b1a      	ldr	r3, [pc, #104]	@ (8023150 <tcp_rst+0x94>)
 80230e6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80230ea:	491c      	ldr	r1, [pc, #112]	@ (802315c <tcp_rst+0xa0>)
 80230ec:	481a      	ldr	r0, [pc, #104]	@ (8023158 <tcp_rst+0x9c>)
 80230ee:	f006 f93b 	bl	8029368 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80230f2:	2300      	movs	r3, #0
 80230f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80230f6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80230fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80230fc:	7dfb      	ldrb	r3, [r7, #23]
 80230fe:	b29c      	uxth	r4, r3
 8023100:	68b8      	ldr	r0, [r7, #8]
 8023102:	f7f8 fd72 	bl	801bbea <lwip_htonl>
 8023106:	4602      	mov	r2, r0
 8023108:	8abb      	ldrh	r3, [r7, #20]
 802310a:	9303      	str	r3, [sp, #12]
 802310c:	2314      	movs	r3, #20
 802310e:	9302      	str	r3, [sp, #8]
 8023110:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8023112:	9301      	str	r3, [sp, #4]
 8023114:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8023116:	9300      	str	r3, [sp, #0]
 8023118:	4613      	mov	r3, r2
 802311a:	2200      	movs	r2, #0
 802311c:	4621      	mov	r1, r4
 802311e:	6878      	ldr	r0, [r7, #4]
 8023120:	f7ff fe94 	bl	8022e4c <tcp_output_alloc_header_common>
 8023124:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8023126:	693b      	ldr	r3, [r7, #16]
 8023128:	2b00      	cmp	r3, #0
 802312a:	d00c      	beq.n	8023146 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802312c:	7dfb      	ldrb	r3, [r7, #23]
 802312e:	2200      	movs	r2, #0
 8023130:	6939      	ldr	r1, [r7, #16]
 8023132:	68f8      	ldr	r0, [r7, #12]
 8023134:	f7ff ff3a 	bl	8022fac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8023138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802313a:	683a      	ldr	r2, [r7, #0]
 802313c:	6939      	ldr	r1, [r7, #16]
 802313e:	68f8      	ldr	r0, [r7, #12]
 8023140:	f7ff ff72 	bl	8023028 <tcp_output_control_segment>
 8023144:	e000      	b.n	8023148 <tcp_rst+0x8c>
    return;
 8023146:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8023148:	371c      	adds	r7, #28
 802314a:	46bd      	mov	sp, r7
 802314c:	bd90      	pop	{r4, r7, pc}
 802314e:	bf00      	nop
 8023150:	0802f1f8 	.word	0x0802f1f8
 8023154:	0802f97c 	.word	0x0802f97c
 8023158:	0802f24c 	.word	0x0802f24c
 802315c:	0802f998 	.word	0x0802f998

08023160 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8023160:	b590      	push	{r4, r7, lr}
 8023162:	b087      	sub	sp, #28
 8023164:	af00      	add	r7, sp, #0
 8023166:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8023168:	2300      	movs	r3, #0
 802316a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 802316c:	2300      	movs	r3, #0
 802316e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	2b00      	cmp	r3, #0
 8023174:	d106      	bne.n	8023184 <tcp_send_empty_ack+0x24>
 8023176:	4b28      	ldr	r3, [pc, #160]	@ (8023218 <tcp_send_empty_ack+0xb8>)
 8023178:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 802317c:	4927      	ldr	r1, [pc, #156]	@ (802321c <tcp_send_empty_ack+0xbc>)
 802317e:	4828      	ldr	r0, [pc, #160]	@ (8023220 <tcp_send_empty_ack+0xc0>)
 8023180:	f006 f8f2 	bl	8029368 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8023184:	7dfb      	ldrb	r3, [r7, #23]
 8023186:	009b      	lsls	r3, r3, #2
 8023188:	b2db      	uxtb	r3, r3
 802318a:	f003 0304 	and.w	r3, r3, #4
 802318e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8023190:	7d7b      	ldrb	r3, [r7, #21]
 8023192:	b29c      	uxth	r4, r3
 8023194:	687b      	ldr	r3, [r7, #4]
 8023196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023198:	4618      	mov	r0, r3
 802319a:	f7f8 fd26 	bl	801bbea <lwip_htonl>
 802319e:	4603      	mov	r3, r0
 80231a0:	2200      	movs	r2, #0
 80231a2:	4621      	mov	r1, r4
 80231a4:	6878      	ldr	r0, [r7, #4]
 80231a6:	f7ff fec3 	bl	8022f30 <tcp_output_alloc_header>
 80231aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80231ac:	693b      	ldr	r3, [r7, #16]
 80231ae:	2b00      	cmp	r3, #0
 80231b0:	d109      	bne.n	80231c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	8b5b      	ldrh	r3, [r3, #26]
 80231b6:	f043 0303 	orr.w	r3, r3, #3
 80231ba:	b29a      	uxth	r2, r3
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80231c0:	f06f 0301 	mvn.w	r3, #1
 80231c4:	e023      	b.n	802320e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80231c6:	7dbb      	ldrb	r3, [r7, #22]
 80231c8:	7dfa      	ldrb	r2, [r7, #23]
 80231ca:	6939      	ldr	r1, [r7, #16]
 80231cc:	6878      	ldr	r0, [r7, #4]
 80231ce:	f7ff feed 	bl	8022fac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80231d2:	687a      	ldr	r2, [r7, #4]
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	3304      	adds	r3, #4
 80231d8:	6939      	ldr	r1, [r7, #16]
 80231da:	6878      	ldr	r0, [r7, #4]
 80231dc:	f7ff ff24 	bl	8023028 <tcp_output_control_segment>
 80231e0:	4603      	mov	r3, r0
 80231e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80231e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d007      	beq.n	80231fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	8b5b      	ldrh	r3, [r3, #26]
 80231f0:	f043 0303 	orr.w	r3, r3, #3
 80231f4:	b29a      	uxth	r2, r3
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	835a      	strh	r2, [r3, #26]
 80231fa:	e006      	b.n	802320a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	8b5b      	ldrh	r3, [r3, #26]
 8023200:	f023 0303 	bic.w	r3, r3, #3
 8023204:	b29a      	uxth	r2, r3
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	835a      	strh	r2, [r3, #26]
  }

  return err;
 802320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802320e:	4618      	mov	r0, r3
 8023210:	371c      	adds	r7, #28
 8023212:	46bd      	mov	sp, r7
 8023214:	bd90      	pop	{r4, r7, pc}
 8023216:	bf00      	nop
 8023218:	0802f1f8 	.word	0x0802f1f8
 802321c:	0802f9b4 	.word	0x0802f9b4
 8023220:	0802f24c 	.word	0x0802f24c

08023224 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8023224:	b590      	push	{r4, r7, lr}
 8023226:	b087      	sub	sp, #28
 8023228:	af00      	add	r7, sp, #0
 802322a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802322c:	2300      	movs	r3, #0
 802322e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8023230:	687b      	ldr	r3, [r7, #4]
 8023232:	2b00      	cmp	r3, #0
 8023234:	d106      	bne.n	8023244 <tcp_keepalive+0x20>
 8023236:	4b18      	ldr	r3, [pc, #96]	@ (8023298 <tcp_keepalive+0x74>)
 8023238:	f640 0224 	movw	r2, #2084	@ 0x824
 802323c:	4917      	ldr	r1, [pc, #92]	@ (802329c <tcp_keepalive+0x78>)
 802323e:	4818      	ldr	r0, [pc, #96]	@ (80232a0 <tcp_keepalive+0x7c>)
 8023240:	f006 f892 	bl	8029368 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8023244:	7dfb      	ldrb	r3, [r7, #23]
 8023246:	b29c      	uxth	r4, r3
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802324c:	3b01      	subs	r3, #1
 802324e:	4618      	mov	r0, r3
 8023250:	f7f8 fccb 	bl	801bbea <lwip_htonl>
 8023254:	4603      	mov	r3, r0
 8023256:	2200      	movs	r2, #0
 8023258:	4621      	mov	r1, r4
 802325a:	6878      	ldr	r0, [r7, #4]
 802325c:	f7ff fe68 	bl	8022f30 <tcp_output_alloc_header>
 8023260:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8023262:	693b      	ldr	r3, [r7, #16]
 8023264:	2b00      	cmp	r3, #0
 8023266:	d102      	bne.n	802326e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8023268:	f04f 33ff 	mov.w	r3, #4294967295
 802326c:	e010      	b.n	8023290 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802326e:	7dfb      	ldrb	r3, [r7, #23]
 8023270:	2200      	movs	r2, #0
 8023272:	6939      	ldr	r1, [r7, #16]
 8023274:	6878      	ldr	r0, [r7, #4]
 8023276:	f7ff fe99 	bl	8022fac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802327a:	687a      	ldr	r2, [r7, #4]
 802327c:	687b      	ldr	r3, [r7, #4]
 802327e:	3304      	adds	r3, #4
 8023280:	6939      	ldr	r1, [r7, #16]
 8023282:	6878      	ldr	r0, [r7, #4]
 8023284:	f7ff fed0 	bl	8023028 <tcp_output_control_segment>
 8023288:	4603      	mov	r3, r0
 802328a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802328c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8023290:	4618      	mov	r0, r3
 8023292:	371c      	adds	r7, #28
 8023294:	46bd      	mov	sp, r7
 8023296:	bd90      	pop	{r4, r7, pc}
 8023298:	0802f1f8 	.word	0x0802f1f8
 802329c:	0802f9d4 	.word	0x0802f9d4
 80232a0:	0802f24c 	.word	0x0802f24c

080232a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80232a4:	b590      	push	{r4, r7, lr}
 80232a6:	b08b      	sub	sp, #44	@ 0x2c
 80232a8:	af00      	add	r7, sp, #0
 80232aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80232ac:	2300      	movs	r3, #0
 80232ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d106      	bne.n	80232c6 <tcp_zero_window_probe+0x22>
 80232b8:	4b4c      	ldr	r3, [pc, #304]	@ (80233ec <tcp_zero_window_probe+0x148>)
 80232ba:	f640 024f 	movw	r2, #2127	@ 0x84f
 80232be:	494c      	ldr	r1, [pc, #304]	@ (80233f0 <tcp_zero_window_probe+0x14c>)
 80232c0:	484c      	ldr	r0, [pc, #304]	@ (80233f4 <tcp_zero_window_probe+0x150>)
 80232c2:	f006 f851 	bl	8029368 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80232ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80232cc:	6a3b      	ldr	r3, [r7, #32]
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d101      	bne.n	80232d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80232d2:	2300      	movs	r3, #0
 80232d4:	e086      	b.n	80233e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80232dc:	2bff      	cmp	r3, #255	@ 0xff
 80232de:	d007      	beq.n	80232f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80232e6:	3301      	adds	r3, #1
 80232e8:	b2da      	uxtb	r2, r3
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80232f0:	6a3b      	ldr	r3, [r7, #32]
 80232f2:	68db      	ldr	r3, [r3, #12]
 80232f4:	899b      	ldrh	r3, [r3, #12]
 80232f6:	b29b      	uxth	r3, r3
 80232f8:	4618      	mov	r0, r3
 80232fa:	f7f8 fc61 	bl	801bbc0 <lwip_htons>
 80232fe:	4603      	mov	r3, r0
 8023300:	b2db      	uxtb	r3, r3
 8023302:	f003 0301 	and.w	r3, r3, #1
 8023306:	2b00      	cmp	r3, #0
 8023308:	d005      	beq.n	8023316 <tcp_zero_window_probe+0x72>
 802330a:	6a3b      	ldr	r3, [r7, #32]
 802330c:	891b      	ldrh	r3, [r3, #8]
 802330e:	2b00      	cmp	r3, #0
 8023310:	d101      	bne.n	8023316 <tcp_zero_window_probe+0x72>
 8023312:	2301      	movs	r3, #1
 8023314:	e000      	b.n	8023318 <tcp_zero_window_probe+0x74>
 8023316:	2300      	movs	r3, #0
 8023318:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802331a:	7ffb      	ldrb	r3, [r7, #31]
 802331c:	2b00      	cmp	r3, #0
 802331e:	bf0c      	ite	eq
 8023320:	2301      	moveq	r3, #1
 8023322:	2300      	movne	r3, #0
 8023324:	b2db      	uxtb	r3, r3
 8023326:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8023328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802332c:	b299      	uxth	r1, r3
 802332e:	6a3b      	ldr	r3, [r7, #32]
 8023330:	68db      	ldr	r3, [r3, #12]
 8023332:	685b      	ldr	r3, [r3, #4]
 8023334:	8bba      	ldrh	r2, [r7, #28]
 8023336:	6878      	ldr	r0, [r7, #4]
 8023338:	f7ff fdfa 	bl	8022f30 <tcp_output_alloc_header>
 802333c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802333e:	69bb      	ldr	r3, [r7, #24]
 8023340:	2b00      	cmp	r3, #0
 8023342:	d102      	bne.n	802334a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8023344:	f04f 33ff 	mov.w	r3, #4294967295
 8023348:	e04c      	b.n	80233e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 802334a:	69bb      	ldr	r3, [r7, #24]
 802334c:	685b      	ldr	r3, [r3, #4]
 802334e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8023350:	7ffb      	ldrb	r3, [r7, #31]
 8023352:	2b00      	cmp	r3, #0
 8023354:	d011      	beq.n	802337a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8023356:	697b      	ldr	r3, [r7, #20]
 8023358:	899b      	ldrh	r3, [r3, #12]
 802335a:	b29b      	uxth	r3, r3
 802335c:	b21b      	sxth	r3, r3
 802335e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8023362:	b21c      	sxth	r4, r3
 8023364:	2011      	movs	r0, #17
 8023366:	f7f8 fc2b 	bl	801bbc0 <lwip_htons>
 802336a:	4603      	mov	r3, r0
 802336c:	b21b      	sxth	r3, r3
 802336e:	4323      	orrs	r3, r4
 8023370:	b21b      	sxth	r3, r3
 8023372:	b29a      	uxth	r2, r3
 8023374:	697b      	ldr	r3, [r7, #20]
 8023376:	819a      	strh	r2, [r3, #12]
 8023378:	e010      	b.n	802339c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 802337a:	69bb      	ldr	r3, [r7, #24]
 802337c:	685b      	ldr	r3, [r3, #4]
 802337e:	3314      	adds	r3, #20
 8023380:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8023382:	6a3b      	ldr	r3, [r7, #32]
 8023384:	6858      	ldr	r0, [r3, #4]
 8023386:	6a3b      	ldr	r3, [r7, #32]
 8023388:	685b      	ldr	r3, [r3, #4]
 802338a:	891a      	ldrh	r2, [r3, #8]
 802338c:	6a3b      	ldr	r3, [r7, #32]
 802338e:	891b      	ldrh	r3, [r3, #8]
 8023390:	1ad3      	subs	r3, r2, r3
 8023392:	b29b      	uxth	r3, r3
 8023394:	2201      	movs	r2, #1
 8023396:	6939      	ldr	r1, [r7, #16]
 8023398:	f7fa fcfc 	bl	801dd94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 802339c:	6a3b      	ldr	r3, [r7, #32]
 802339e:	68db      	ldr	r3, [r3, #12]
 80233a0:	685b      	ldr	r3, [r3, #4]
 80233a2:	4618      	mov	r0, r3
 80233a4:	f7f8 fc21 	bl	801bbea <lwip_htonl>
 80233a8:	4603      	mov	r3, r0
 80233aa:	3301      	adds	r3, #1
 80233ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80233b2:	68fb      	ldr	r3, [r7, #12]
 80233b4:	1ad3      	subs	r3, r2, r3
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	da02      	bge.n	80233c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	68fa      	ldr	r2, [r7, #12]
 80233be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80233c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80233c4:	2200      	movs	r2, #0
 80233c6:	69b9      	ldr	r1, [r7, #24]
 80233c8:	6878      	ldr	r0, [r7, #4]
 80233ca:	f7ff fdef 	bl	8022fac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80233ce:	687a      	ldr	r2, [r7, #4]
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	3304      	adds	r3, #4
 80233d4:	69b9      	ldr	r1, [r7, #24]
 80233d6:	6878      	ldr	r0, [r7, #4]
 80233d8:	f7ff fe26 	bl	8023028 <tcp_output_control_segment>
 80233dc:	4603      	mov	r3, r0
 80233de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80233e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80233e4:	4618      	mov	r0, r3
 80233e6:	372c      	adds	r7, #44	@ 0x2c
 80233e8:	46bd      	mov	sp, r7
 80233ea:	bd90      	pop	{r4, r7, pc}
 80233ec:	0802f1f8 	.word	0x0802f1f8
 80233f0:	0802f9f0 	.word	0x0802f9f0
 80233f4:	0802f24c 	.word	0x0802f24c

080233f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80233f8:	b580      	push	{r7, lr}
 80233fa:	b082      	sub	sp, #8
 80233fc:	af00      	add	r7, sp, #0
 80233fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8023400:	f7fa ff10 	bl	801e224 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8023404:	4b0a      	ldr	r3, [pc, #40]	@ (8023430 <tcpip_tcp_timer+0x38>)
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	2b00      	cmp	r3, #0
 802340a:	d103      	bne.n	8023414 <tcpip_tcp_timer+0x1c>
 802340c:	4b09      	ldr	r3, [pc, #36]	@ (8023434 <tcpip_tcp_timer+0x3c>)
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	2b00      	cmp	r3, #0
 8023412:	d005      	beq.n	8023420 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8023414:	2200      	movs	r2, #0
 8023416:	4908      	ldr	r1, [pc, #32]	@ (8023438 <tcpip_tcp_timer+0x40>)
 8023418:	20fa      	movs	r0, #250	@ 0xfa
 802341a:	f000 f8f3 	bl	8023604 <sys_timeout>
 802341e:	e003      	b.n	8023428 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8023420:	4b06      	ldr	r3, [pc, #24]	@ (802343c <tcpip_tcp_timer+0x44>)
 8023422:	2200      	movs	r2, #0
 8023424:	601a      	str	r2, [r3, #0]
  }
}
 8023426:	bf00      	nop
 8023428:	bf00      	nop
 802342a:	3708      	adds	r7, #8
 802342c:	46bd      	mov	sp, r7
 802342e:	bd80      	pop	{r7, pc}
 8023430:	2400b498 	.word	0x2400b498
 8023434:	2400b49c 	.word	0x2400b49c
 8023438:	080233f9 	.word	0x080233f9
 802343c:	2400b4e4 	.word	0x2400b4e4

08023440 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8023440:	b580      	push	{r7, lr}
 8023442:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8023444:	4b0a      	ldr	r3, [pc, #40]	@ (8023470 <tcp_timer_needed+0x30>)
 8023446:	681b      	ldr	r3, [r3, #0]
 8023448:	2b00      	cmp	r3, #0
 802344a:	d10f      	bne.n	802346c <tcp_timer_needed+0x2c>
 802344c:	4b09      	ldr	r3, [pc, #36]	@ (8023474 <tcp_timer_needed+0x34>)
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d103      	bne.n	802345c <tcp_timer_needed+0x1c>
 8023454:	4b08      	ldr	r3, [pc, #32]	@ (8023478 <tcp_timer_needed+0x38>)
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	2b00      	cmp	r3, #0
 802345a:	d007      	beq.n	802346c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 802345c:	4b04      	ldr	r3, [pc, #16]	@ (8023470 <tcp_timer_needed+0x30>)
 802345e:	2201      	movs	r2, #1
 8023460:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8023462:	2200      	movs	r2, #0
 8023464:	4905      	ldr	r1, [pc, #20]	@ (802347c <tcp_timer_needed+0x3c>)
 8023466:	20fa      	movs	r0, #250	@ 0xfa
 8023468:	f000 f8cc 	bl	8023604 <sys_timeout>
  }
}
 802346c:	bf00      	nop
 802346e:	bd80      	pop	{r7, pc}
 8023470:	2400b4e4 	.word	0x2400b4e4
 8023474:	2400b498 	.word	0x2400b498
 8023478:	2400b49c 	.word	0x2400b49c
 802347c:	080233f9 	.word	0x080233f9

08023480 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8023480:	b580      	push	{r7, lr}
 8023482:	b086      	sub	sp, #24
 8023484:	af00      	add	r7, sp, #0
 8023486:	60f8      	str	r0, [r7, #12]
 8023488:	60b9      	str	r1, [r7, #8]
 802348a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 802348c:	2006      	movs	r0, #6
 802348e:	f7f9 fbb5 	bl	801cbfc <memp_malloc>
 8023492:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8023494:	693b      	ldr	r3, [r7, #16]
 8023496:	2b00      	cmp	r3, #0
 8023498:	d109      	bne.n	80234ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802349a:	693b      	ldr	r3, [r7, #16]
 802349c:	2b00      	cmp	r3, #0
 802349e:	d151      	bne.n	8023544 <sys_timeout_abs+0xc4>
 80234a0:	4b2a      	ldr	r3, [pc, #168]	@ (802354c <sys_timeout_abs+0xcc>)
 80234a2:	22be      	movs	r2, #190	@ 0xbe
 80234a4:	492a      	ldr	r1, [pc, #168]	@ (8023550 <sys_timeout_abs+0xd0>)
 80234a6:	482b      	ldr	r0, [pc, #172]	@ (8023554 <sys_timeout_abs+0xd4>)
 80234a8:	f005 ff5e 	bl	8029368 <iprintf>
    return;
 80234ac:	e04a      	b.n	8023544 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80234ae:	693b      	ldr	r3, [r7, #16]
 80234b0:	2200      	movs	r2, #0
 80234b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80234b4:	693b      	ldr	r3, [r7, #16]
 80234b6:	68ba      	ldr	r2, [r7, #8]
 80234b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80234ba:	693b      	ldr	r3, [r7, #16]
 80234bc:	687a      	ldr	r2, [r7, #4]
 80234be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80234c0:	693b      	ldr	r3, [r7, #16]
 80234c2:	68fa      	ldr	r2, [r7, #12]
 80234c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80234c6:	4b24      	ldr	r3, [pc, #144]	@ (8023558 <sys_timeout_abs+0xd8>)
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d103      	bne.n	80234d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80234ce:	4a22      	ldr	r2, [pc, #136]	@ (8023558 <sys_timeout_abs+0xd8>)
 80234d0:	693b      	ldr	r3, [r7, #16]
 80234d2:	6013      	str	r3, [r2, #0]
    return;
 80234d4:	e037      	b.n	8023546 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80234d6:	693b      	ldr	r3, [r7, #16]
 80234d8:	685a      	ldr	r2, [r3, #4]
 80234da:	4b1f      	ldr	r3, [pc, #124]	@ (8023558 <sys_timeout_abs+0xd8>)
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	685b      	ldr	r3, [r3, #4]
 80234e0:	1ad3      	subs	r3, r2, r3
 80234e2:	0fdb      	lsrs	r3, r3, #31
 80234e4:	f003 0301 	and.w	r3, r3, #1
 80234e8:	b2db      	uxtb	r3, r3
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d007      	beq.n	80234fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80234ee:	4b1a      	ldr	r3, [pc, #104]	@ (8023558 <sys_timeout_abs+0xd8>)
 80234f0:	681a      	ldr	r2, [r3, #0]
 80234f2:	693b      	ldr	r3, [r7, #16]
 80234f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80234f6:	4a18      	ldr	r2, [pc, #96]	@ (8023558 <sys_timeout_abs+0xd8>)
 80234f8:	693b      	ldr	r3, [r7, #16]
 80234fa:	6013      	str	r3, [r2, #0]
 80234fc:	e023      	b.n	8023546 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80234fe:	4b16      	ldr	r3, [pc, #88]	@ (8023558 <sys_timeout_abs+0xd8>)
 8023500:	681b      	ldr	r3, [r3, #0]
 8023502:	617b      	str	r3, [r7, #20]
 8023504:	e01a      	b.n	802353c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8023506:	697b      	ldr	r3, [r7, #20]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	2b00      	cmp	r3, #0
 802350c:	d00b      	beq.n	8023526 <sys_timeout_abs+0xa6>
 802350e:	693b      	ldr	r3, [r7, #16]
 8023510:	685a      	ldr	r2, [r3, #4]
 8023512:	697b      	ldr	r3, [r7, #20]
 8023514:	681b      	ldr	r3, [r3, #0]
 8023516:	685b      	ldr	r3, [r3, #4]
 8023518:	1ad3      	subs	r3, r2, r3
 802351a:	0fdb      	lsrs	r3, r3, #31
 802351c:	f003 0301 	and.w	r3, r3, #1
 8023520:	b2db      	uxtb	r3, r3
 8023522:	2b00      	cmp	r3, #0
 8023524:	d007      	beq.n	8023536 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8023526:	697b      	ldr	r3, [r7, #20]
 8023528:	681a      	ldr	r2, [r3, #0]
 802352a:	693b      	ldr	r3, [r7, #16]
 802352c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802352e:	697b      	ldr	r3, [r7, #20]
 8023530:	693a      	ldr	r2, [r7, #16]
 8023532:	601a      	str	r2, [r3, #0]
        break;
 8023534:	e007      	b.n	8023546 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8023536:	697b      	ldr	r3, [r7, #20]
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	617b      	str	r3, [r7, #20]
 802353c:	697b      	ldr	r3, [r7, #20]
 802353e:	2b00      	cmp	r3, #0
 8023540:	d1e1      	bne.n	8023506 <sys_timeout_abs+0x86>
 8023542:	e000      	b.n	8023546 <sys_timeout_abs+0xc6>
    return;
 8023544:	bf00      	nop
      }
    }
  }
}
 8023546:	3718      	adds	r7, #24
 8023548:	46bd      	mov	sp, r7
 802354a:	bd80      	pop	{r7, pc}
 802354c:	0802fa14 	.word	0x0802fa14
 8023550:	0802fa48 	.word	0x0802fa48
 8023554:	0802fa88 	.word	0x0802fa88
 8023558:	2400b4dc 	.word	0x2400b4dc

0802355c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 802355c:	b580      	push	{r7, lr}
 802355e:	b086      	sub	sp, #24
 8023560:	af00      	add	r7, sp, #0
 8023562:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8023568:	697b      	ldr	r3, [r7, #20]
 802356a:	685b      	ldr	r3, [r3, #4]
 802356c:	4798      	blx	r3

  now = sys_now();
 802356e:	f7f8 f959 	bl	801b824 <sys_now>
 8023572:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8023574:	697b      	ldr	r3, [r7, #20]
 8023576:	681a      	ldr	r2, [r3, #0]
 8023578:	4b0f      	ldr	r3, [pc, #60]	@ (80235b8 <lwip_cyclic_timer+0x5c>)
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	4413      	add	r3, r2
 802357e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8023580:	68fa      	ldr	r2, [r7, #12]
 8023582:	693b      	ldr	r3, [r7, #16]
 8023584:	1ad3      	subs	r3, r2, r3
 8023586:	0fdb      	lsrs	r3, r3, #31
 8023588:	f003 0301 	and.w	r3, r3, #1
 802358c:	b2db      	uxtb	r3, r3
 802358e:	2b00      	cmp	r3, #0
 8023590:	d009      	beq.n	80235a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8023592:	697b      	ldr	r3, [r7, #20]
 8023594:	681a      	ldr	r2, [r3, #0]
 8023596:	693b      	ldr	r3, [r7, #16]
 8023598:	4413      	add	r3, r2
 802359a:	687a      	ldr	r2, [r7, #4]
 802359c:	4907      	ldr	r1, [pc, #28]	@ (80235bc <lwip_cyclic_timer+0x60>)
 802359e:	4618      	mov	r0, r3
 80235a0:	f7ff ff6e 	bl	8023480 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80235a4:	e004      	b.n	80235b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80235a6:	687a      	ldr	r2, [r7, #4]
 80235a8:	4904      	ldr	r1, [pc, #16]	@ (80235bc <lwip_cyclic_timer+0x60>)
 80235aa:	68f8      	ldr	r0, [r7, #12]
 80235ac:	f7ff ff68 	bl	8023480 <sys_timeout_abs>
}
 80235b0:	bf00      	nop
 80235b2:	3718      	adds	r7, #24
 80235b4:	46bd      	mov	sp, r7
 80235b6:	bd80      	pop	{r7, pc}
 80235b8:	2400b4e0 	.word	0x2400b4e0
 80235bc:	0802355d 	.word	0x0802355d

080235c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80235c0:	b580      	push	{r7, lr}
 80235c2:	b082      	sub	sp, #8
 80235c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80235c6:	2301      	movs	r3, #1
 80235c8:	607b      	str	r3, [r7, #4]
 80235ca:	e00e      	b.n	80235ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80235cc:	4a0b      	ldr	r2, [pc, #44]	@ (80235fc <sys_timeouts_init+0x3c>)
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80235d4:	687b      	ldr	r3, [r7, #4]
 80235d6:	00db      	lsls	r3, r3, #3
 80235d8:	4a08      	ldr	r2, [pc, #32]	@ (80235fc <sys_timeouts_init+0x3c>)
 80235da:	4413      	add	r3, r2
 80235dc:	461a      	mov	r2, r3
 80235de:	4908      	ldr	r1, [pc, #32]	@ (8023600 <sys_timeouts_init+0x40>)
 80235e0:	f000 f810 	bl	8023604 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80235e4:	687b      	ldr	r3, [r7, #4]
 80235e6:	3301      	adds	r3, #1
 80235e8:	607b      	str	r3, [r7, #4]
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	2b05      	cmp	r3, #5
 80235ee:	d9ed      	bls.n	80235cc <sys_timeouts_init+0xc>
  }
}
 80235f0:	bf00      	nop
 80235f2:	bf00      	nop
 80235f4:	3708      	adds	r7, #8
 80235f6:	46bd      	mov	sp, r7
 80235f8:	bd80      	pop	{r7, pc}
 80235fa:	bf00      	nop
 80235fc:	08030ec4 	.word	0x08030ec4
 8023600:	0802355d 	.word	0x0802355d

08023604 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8023604:	b580      	push	{r7, lr}
 8023606:	b086      	sub	sp, #24
 8023608:	af00      	add	r7, sp, #0
 802360a:	60f8      	str	r0, [r7, #12]
 802360c:	60b9      	str	r1, [r7, #8]
 802360e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8023610:	68fb      	ldr	r3, [r7, #12]
 8023612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023616:	d306      	bcc.n	8023626 <sys_timeout+0x22>
 8023618:	4b0a      	ldr	r3, [pc, #40]	@ (8023644 <sys_timeout+0x40>)
 802361a:	f240 1229 	movw	r2, #297	@ 0x129
 802361e:	490a      	ldr	r1, [pc, #40]	@ (8023648 <sys_timeout+0x44>)
 8023620:	480a      	ldr	r0, [pc, #40]	@ (802364c <sys_timeout+0x48>)
 8023622:	f005 fea1 	bl	8029368 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8023626:	f7f8 f8fd 	bl	801b824 <sys_now>
 802362a:	4602      	mov	r2, r0
 802362c:	68fb      	ldr	r3, [r7, #12]
 802362e:	4413      	add	r3, r2
 8023630:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8023632:	687a      	ldr	r2, [r7, #4]
 8023634:	68b9      	ldr	r1, [r7, #8]
 8023636:	6978      	ldr	r0, [r7, #20]
 8023638:	f7ff ff22 	bl	8023480 <sys_timeout_abs>
#endif
}
 802363c:	bf00      	nop
 802363e:	3718      	adds	r7, #24
 8023640:	46bd      	mov	sp, r7
 8023642:	bd80      	pop	{r7, pc}
 8023644:	0802fa14 	.word	0x0802fa14
 8023648:	0802fab0 	.word	0x0802fab0
 802364c:	0802fa88 	.word	0x0802fa88

08023650 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8023650:	b580      	push	{r7, lr}
 8023652:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8023654:	f005 f8ba 	bl	80287cc <rand>
 8023658:	4603      	mov	r3, r0
 802365a:	b29b      	uxth	r3, r3
 802365c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023660:	b29b      	uxth	r3, r3
 8023662:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8023666:	b29a      	uxth	r2, r3
 8023668:	4b01      	ldr	r3, [pc, #4]	@ (8023670 <udp_init+0x20>)
 802366a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 802366c:	bf00      	nop
 802366e:	bd80      	pop	{r7, pc}
 8023670:	24000068 	.word	0x24000068

08023674 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8023674:	b480      	push	{r7}
 8023676:	b083      	sub	sp, #12
 8023678:	af00      	add	r7, sp, #0
  u16_t n = 0;
 802367a:	2300      	movs	r3, #0
 802367c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802367e:	4b17      	ldr	r3, [pc, #92]	@ (80236dc <udp_new_port+0x68>)
 8023680:	881b      	ldrh	r3, [r3, #0]
 8023682:	1c5a      	adds	r2, r3, #1
 8023684:	b291      	uxth	r1, r2
 8023686:	4a15      	ldr	r2, [pc, #84]	@ (80236dc <udp_new_port+0x68>)
 8023688:	8011      	strh	r1, [r2, #0]
 802368a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802368e:	4293      	cmp	r3, r2
 8023690:	d103      	bne.n	802369a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8023692:	4b12      	ldr	r3, [pc, #72]	@ (80236dc <udp_new_port+0x68>)
 8023694:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8023698:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802369a:	4b11      	ldr	r3, [pc, #68]	@ (80236e0 <udp_new_port+0x6c>)
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	603b      	str	r3, [r7, #0]
 80236a0:	e011      	b.n	80236c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80236a2:	683b      	ldr	r3, [r7, #0]
 80236a4:	8a5a      	ldrh	r2, [r3, #18]
 80236a6:	4b0d      	ldr	r3, [pc, #52]	@ (80236dc <udp_new_port+0x68>)
 80236a8:	881b      	ldrh	r3, [r3, #0]
 80236aa:	429a      	cmp	r2, r3
 80236ac:	d108      	bne.n	80236c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80236ae:	88fb      	ldrh	r3, [r7, #6]
 80236b0:	3301      	adds	r3, #1
 80236b2:	80fb      	strh	r3, [r7, #6]
 80236b4:	88fb      	ldrh	r3, [r7, #6]
 80236b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80236ba:	d3e0      	bcc.n	802367e <udp_new_port+0xa>
        return 0;
 80236bc:	2300      	movs	r3, #0
 80236be:	e007      	b.n	80236d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80236c0:	683b      	ldr	r3, [r7, #0]
 80236c2:	68db      	ldr	r3, [r3, #12]
 80236c4:	603b      	str	r3, [r7, #0]
 80236c6:	683b      	ldr	r3, [r7, #0]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	d1ea      	bne.n	80236a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80236cc:	4b03      	ldr	r3, [pc, #12]	@ (80236dc <udp_new_port+0x68>)
 80236ce:	881b      	ldrh	r3, [r3, #0]
}
 80236d0:	4618      	mov	r0, r3
 80236d2:	370c      	adds	r7, #12
 80236d4:	46bd      	mov	sp, r7
 80236d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236da:	4770      	bx	lr
 80236dc:	24000068 	.word	0x24000068
 80236e0:	2400b4e8 	.word	0x2400b4e8

080236e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80236e4:	b580      	push	{r7, lr}
 80236e6:	b084      	sub	sp, #16
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	60f8      	str	r0, [r7, #12]
 80236ec:	60b9      	str	r1, [r7, #8]
 80236ee:	4613      	mov	r3, r2
 80236f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80236f2:	68fb      	ldr	r3, [r7, #12]
 80236f4:	2b00      	cmp	r3, #0
 80236f6:	d105      	bne.n	8023704 <udp_input_local_match+0x20>
 80236f8:	4b27      	ldr	r3, [pc, #156]	@ (8023798 <udp_input_local_match+0xb4>)
 80236fa:	2287      	movs	r2, #135	@ 0x87
 80236fc:	4927      	ldr	r1, [pc, #156]	@ (802379c <udp_input_local_match+0xb8>)
 80236fe:	4828      	ldr	r0, [pc, #160]	@ (80237a0 <udp_input_local_match+0xbc>)
 8023700:	f005 fe32 	bl	8029368 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8023704:	68bb      	ldr	r3, [r7, #8]
 8023706:	2b00      	cmp	r3, #0
 8023708:	d105      	bne.n	8023716 <udp_input_local_match+0x32>
 802370a:	4b23      	ldr	r3, [pc, #140]	@ (8023798 <udp_input_local_match+0xb4>)
 802370c:	2288      	movs	r2, #136	@ 0x88
 802370e:	4925      	ldr	r1, [pc, #148]	@ (80237a4 <udp_input_local_match+0xc0>)
 8023710:	4823      	ldr	r0, [pc, #140]	@ (80237a0 <udp_input_local_match+0xbc>)
 8023712:	f005 fe29 	bl	8029368 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8023716:	68fb      	ldr	r3, [r7, #12]
 8023718:	7a1b      	ldrb	r3, [r3, #8]
 802371a:	2b00      	cmp	r3, #0
 802371c:	d00b      	beq.n	8023736 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	7a1a      	ldrb	r2, [r3, #8]
 8023722:	4b21      	ldr	r3, [pc, #132]	@ (80237a8 <udp_input_local_match+0xc4>)
 8023724:	685b      	ldr	r3, [r3, #4]
 8023726:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802372a:	3301      	adds	r3, #1
 802372c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802372e:	429a      	cmp	r2, r3
 8023730:	d001      	beq.n	8023736 <udp_input_local_match+0x52>
    return 0;
 8023732:	2300      	movs	r3, #0
 8023734:	e02b      	b.n	802378e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8023736:	79fb      	ldrb	r3, [r7, #7]
 8023738:	2b00      	cmp	r3, #0
 802373a:	d018      	beq.n	802376e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802373c:	68fb      	ldr	r3, [r7, #12]
 802373e:	2b00      	cmp	r3, #0
 8023740:	d013      	beq.n	802376a <udp_input_local_match+0x86>
 8023742:	68fb      	ldr	r3, [r7, #12]
 8023744:	681b      	ldr	r3, [r3, #0]
 8023746:	2b00      	cmp	r3, #0
 8023748:	d00f      	beq.n	802376a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802374a:	4b17      	ldr	r3, [pc, #92]	@ (80237a8 <udp_input_local_match+0xc4>)
 802374c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023752:	d00a      	beq.n	802376a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8023754:	68fb      	ldr	r3, [r7, #12]
 8023756:	681a      	ldr	r2, [r3, #0]
 8023758:	4b13      	ldr	r3, [pc, #76]	@ (80237a8 <udp_input_local_match+0xc4>)
 802375a:	695b      	ldr	r3, [r3, #20]
 802375c:	405a      	eors	r2, r3
 802375e:	68bb      	ldr	r3, [r7, #8]
 8023760:	3308      	adds	r3, #8
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8023766:	2b00      	cmp	r3, #0
 8023768:	d110      	bne.n	802378c <udp_input_local_match+0xa8>
          return 1;
 802376a:	2301      	movs	r3, #1
 802376c:	e00f      	b.n	802378e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802376e:	68fb      	ldr	r3, [r7, #12]
 8023770:	2b00      	cmp	r3, #0
 8023772:	d009      	beq.n	8023788 <udp_input_local_match+0xa4>
 8023774:	68fb      	ldr	r3, [r7, #12]
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	2b00      	cmp	r3, #0
 802377a:	d005      	beq.n	8023788 <udp_input_local_match+0xa4>
 802377c:	68fb      	ldr	r3, [r7, #12]
 802377e:	681a      	ldr	r2, [r3, #0]
 8023780:	4b09      	ldr	r3, [pc, #36]	@ (80237a8 <udp_input_local_match+0xc4>)
 8023782:	695b      	ldr	r3, [r3, #20]
 8023784:	429a      	cmp	r2, r3
 8023786:	d101      	bne.n	802378c <udp_input_local_match+0xa8>
        return 1;
 8023788:	2301      	movs	r3, #1
 802378a:	e000      	b.n	802378e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 802378c:	2300      	movs	r3, #0
}
 802378e:	4618      	mov	r0, r3
 8023790:	3710      	adds	r7, #16
 8023792:	46bd      	mov	sp, r7
 8023794:	bd80      	pop	{r7, pc}
 8023796:	bf00      	nop
 8023798:	0802fafc 	.word	0x0802fafc
 802379c:	0802fb2c 	.word	0x0802fb2c
 80237a0:	0802fb50 	.word	0x0802fb50
 80237a4:	0802fb78 	.word	0x0802fb78
 80237a8:	24008540 	.word	0x24008540

080237ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80237ac:	b590      	push	{r4, r7, lr}
 80237ae:	b08d      	sub	sp, #52	@ 0x34
 80237b0:	af02      	add	r7, sp, #8
 80237b2:	6078      	str	r0, [r7, #4]
 80237b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80237b6:	2300      	movs	r3, #0
 80237b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d105      	bne.n	80237cc <udp_input+0x20>
 80237c0:	4b7c      	ldr	r3, [pc, #496]	@ (80239b4 <udp_input+0x208>)
 80237c2:	22cf      	movs	r2, #207	@ 0xcf
 80237c4:	497c      	ldr	r1, [pc, #496]	@ (80239b8 <udp_input+0x20c>)
 80237c6:	487d      	ldr	r0, [pc, #500]	@ (80239bc <udp_input+0x210>)
 80237c8:	f005 fdce 	bl	8029368 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80237cc:	683b      	ldr	r3, [r7, #0]
 80237ce:	2b00      	cmp	r3, #0
 80237d0:	d105      	bne.n	80237de <udp_input+0x32>
 80237d2:	4b78      	ldr	r3, [pc, #480]	@ (80239b4 <udp_input+0x208>)
 80237d4:	22d0      	movs	r2, #208	@ 0xd0
 80237d6:	497a      	ldr	r1, [pc, #488]	@ (80239c0 <udp_input+0x214>)
 80237d8:	4878      	ldr	r0, [pc, #480]	@ (80239bc <udp_input+0x210>)
 80237da:	f005 fdc5 	bl	8029368 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80237de:	687b      	ldr	r3, [r7, #4]
 80237e0:	895b      	ldrh	r3, [r3, #10]
 80237e2:	2b07      	cmp	r3, #7
 80237e4:	d803      	bhi.n	80237ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80237e6:	6878      	ldr	r0, [r7, #4]
 80237e8:	f7fa f8da 	bl	801d9a0 <pbuf_free>
    goto end;
 80237ec:	e0de      	b.n	80239ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	685b      	ldr	r3, [r3, #4]
 80237f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80237f4:	4b73      	ldr	r3, [pc, #460]	@ (80239c4 <udp_input+0x218>)
 80237f6:	695b      	ldr	r3, [r3, #20]
 80237f8:	4a72      	ldr	r2, [pc, #456]	@ (80239c4 <udp_input+0x218>)
 80237fa:	6812      	ldr	r2, [r2, #0]
 80237fc:	4611      	mov	r1, r2
 80237fe:	4618      	mov	r0, r3
 8023800:	f003 fed4 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8023804:	4603      	mov	r3, r0
 8023806:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8023808:	697b      	ldr	r3, [r7, #20]
 802380a:	881b      	ldrh	r3, [r3, #0]
 802380c:	b29b      	uxth	r3, r3
 802380e:	4618      	mov	r0, r3
 8023810:	f7f8 f9d6 	bl	801bbc0 <lwip_htons>
 8023814:	4603      	mov	r3, r0
 8023816:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8023818:	697b      	ldr	r3, [r7, #20]
 802381a:	885b      	ldrh	r3, [r3, #2]
 802381c:	b29b      	uxth	r3, r3
 802381e:	4618      	mov	r0, r3
 8023820:	f7f8 f9ce 	bl	801bbc0 <lwip_htons>
 8023824:	4603      	mov	r3, r0
 8023826:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8023828:	2300      	movs	r3, #0
 802382a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 802382c:	2300      	movs	r3, #0
 802382e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8023830:	2300      	movs	r3, #0
 8023832:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023834:	4b64      	ldr	r3, [pc, #400]	@ (80239c8 <udp_input+0x21c>)
 8023836:	681b      	ldr	r3, [r3, #0]
 8023838:	627b      	str	r3, [r7, #36]	@ 0x24
 802383a:	e054      	b.n	80238e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802383e:	8a5b      	ldrh	r3, [r3, #18]
 8023840:	89fa      	ldrh	r2, [r7, #14]
 8023842:	429a      	cmp	r2, r3
 8023844:	d14a      	bne.n	80238dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8023846:	7cfb      	ldrb	r3, [r7, #19]
 8023848:	461a      	mov	r2, r3
 802384a:	6839      	ldr	r1, [r7, #0]
 802384c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802384e:	f7ff ff49 	bl	80236e4 <udp_input_local_match>
 8023852:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8023854:	2b00      	cmp	r3, #0
 8023856:	d041      	beq.n	80238dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8023858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802385a:	7c1b      	ldrb	r3, [r3, #16]
 802385c:	f003 0304 	and.w	r3, r3, #4
 8023860:	2b00      	cmp	r3, #0
 8023862:	d11d      	bne.n	80238a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8023864:	69fb      	ldr	r3, [r7, #28]
 8023866:	2b00      	cmp	r3, #0
 8023868:	d102      	bne.n	8023870 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 802386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802386c:	61fb      	str	r3, [r7, #28]
 802386e:	e017      	b.n	80238a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8023870:	7cfb      	ldrb	r3, [r7, #19]
 8023872:	2b00      	cmp	r3, #0
 8023874:	d014      	beq.n	80238a0 <udp_input+0xf4>
 8023876:	4b53      	ldr	r3, [pc, #332]	@ (80239c4 <udp_input+0x218>)
 8023878:	695b      	ldr	r3, [r3, #20]
 802387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802387e:	d10f      	bne.n	80238a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8023880:	69fb      	ldr	r3, [r7, #28]
 8023882:	681a      	ldr	r2, [r3, #0]
 8023884:	683b      	ldr	r3, [r7, #0]
 8023886:	3304      	adds	r3, #4
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	429a      	cmp	r2, r3
 802388c:	d008      	beq.n	80238a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 802388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023890:	681a      	ldr	r2, [r3, #0]
 8023892:	683b      	ldr	r3, [r7, #0]
 8023894:	3304      	adds	r3, #4
 8023896:	681b      	ldr	r3, [r3, #0]
 8023898:	429a      	cmp	r2, r3
 802389a:	d101      	bne.n	80238a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 802389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802389e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80238a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238a2:	8a9b      	ldrh	r3, [r3, #20]
 80238a4:	8a3a      	ldrh	r2, [r7, #16]
 80238a6:	429a      	cmp	r2, r3
 80238a8:	d118      	bne.n	80238dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80238aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80238ae:	2b00      	cmp	r3, #0
 80238b0:	d005      	beq.n	80238be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80238b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238b4:	685a      	ldr	r2, [r3, #4]
 80238b6:	4b43      	ldr	r3, [pc, #268]	@ (80239c4 <udp_input+0x218>)
 80238b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80238ba:	429a      	cmp	r2, r3
 80238bc:	d10e      	bne.n	80238dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80238be:	6a3b      	ldr	r3, [r7, #32]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d014      	beq.n	80238ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80238c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238c6:	68da      	ldr	r2, [r3, #12]
 80238c8:	6a3b      	ldr	r3, [r7, #32]
 80238ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80238cc:	4b3e      	ldr	r3, [pc, #248]	@ (80239c8 <udp_input+0x21c>)
 80238ce:	681a      	ldr	r2, [r3, #0]
 80238d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80238d4:	4a3c      	ldr	r2, [pc, #240]	@ (80239c8 <udp_input+0x21c>)
 80238d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80238da:	e008      	b.n	80238ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80238dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80238e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238e2:	68db      	ldr	r3, [r3, #12]
 80238e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80238e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238e8:	2b00      	cmp	r3, #0
 80238ea:	d1a7      	bne.n	802383c <udp_input+0x90>
 80238ec:	e000      	b.n	80238f0 <udp_input+0x144>
        break;
 80238ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80238f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d101      	bne.n	80238fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80238f6:	69fb      	ldr	r3, [r7, #28]
 80238f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80238fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	d002      	beq.n	8023906 <udp_input+0x15a>
    for_us = 1;
 8023900:	2301      	movs	r3, #1
 8023902:	76fb      	strb	r3, [r7, #27]
 8023904:	e00a      	b.n	802391c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8023906:	683b      	ldr	r3, [r7, #0]
 8023908:	3304      	adds	r3, #4
 802390a:	681a      	ldr	r2, [r3, #0]
 802390c:	4b2d      	ldr	r3, [pc, #180]	@ (80239c4 <udp_input+0x218>)
 802390e:	695b      	ldr	r3, [r3, #20]
 8023910:	429a      	cmp	r2, r3
 8023912:	bf0c      	ite	eq
 8023914:	2301      	moveq	r3, #1
 8023916:	2300      	movne	r3, #0
 8023918:	b2db      	uxtb	r3, r3
 802391a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 802391c:	7efb      	ldrb	r3, [r7, #27]
 802391e:	2b00      	cmp	r3, #0
 8023920:	d041      	beq.n	80239a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8023922:	2108      	movs	r1, #8
 8023924:	6878      	ldr	r0, [r7, #4]
 8023926:	f7f9 ffb5 	bl	801d894 <pbuf_remove_header>
 802392a:	4603      	mov	r3, r0
 802392c:	2b00      	cmp	r3, #0
 802392e:	d00a      	beq.n	8023946 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8023930:	4b20      	ldr	r3, [pc, #128]	@ (80239b4 <udp_input+0x208>)
 8023932:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8023936:	4925      	ldr	r1, [pc, #148]	@ (80239cc <udp_input+0x220>)
 8023938:	4820      	ldr	r0, [pc, #128]	@ (80239bc <udp_input+0x210>)
 802393a:	f005 fd15 	bl	8029368 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802393e:	6878      	ldr	r0, [r7, #4]
 8023940:	f7fa f82e 	bl	801d9a0 <pbuf_free>
      goto end;
 8023944:	e032      	b.n	80239ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8023946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023948:	2b00      	cmp	r3, #0
 802394a:	d012      	beq.n	8023972 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802394e:	699b      	ldr	r3, [r3, #24]
 8023950:	2b00      	cmp	r3, #0
 8023952:	d00a      	beq.n	802396a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8023954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023956:	699c      	ldr	r4, [r3, #24]
 8023958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802395a:	69d8      	ldr	r0, [r3, #28]
 802395c:	8a3b      	ldrh	r3, [r7, #16]
 802395e:	9300      	str	r3, [sp, #0]
 8023960:	4b1b      	ldr	r3, [pc, #108]	@ (80239d0 <udp_input+0x224>)
 8023962:	687a      	ldr	r2, [r7, #4]
 8023964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023966:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023968:	e021      	b.n	80239ae <udp_input+0x202>
        pbuf_free(p);
 802396a:	6878      	ldr	r0, [r7, #4]
 802396c:	f7fa f818 	bl	801d9a0 <pbuf_free>
        goto end;
 8023970:	e01c      	b.n	80239ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8023972:	7cfb      	ldrb	r3, [r7, #19]
 8023974:	2b00      	cmp	r3, #0
 8023976:	d112      	bne.n	802399e <udp_input+0x1f2>
 8023978:	4b12      	ldr	r3, [pc, #72]	@ (80239c4 <udp_input+0x218>)
 802397a:	695b      	ldr	r3, [r3, #20]
 802397c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8023980:	2be0      	cmp	r3, #224	@ 0xe0
 8023982:	d00c      	beq.n	802399e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8023984:	4b0f      	ldr	r3, [pc, #60]	@ (80239c4 <udp_input+0x218>)
 8023986:	899b      	ldrh	r3, [r3, #12]
 8023988:	3308      	adds	r3, #8
 802398a:	b29b      	uxth	r3, r3
 802398c:	b21b      	sxth	r3, r3
 802398e:	4619      	mov	r1, r3
 8023990:	6878      	ldr	r0, [r7, #4]
 8023992:	f7f9 fff2 	bl	801d97a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8023996:	2103      	movs	r1, #3
 8023998:	6878      	ldr	r0, [r7, #4]
 802399a:	f003 fabf 	bl	8026f1c <icmp_dest_unreach>
      pbuf_free(p);
 802399e:	6878      	ldr	r0, [r7, #4]
 80239a0:	f7f9 fffe 	bl	801d9a0 <pbuf_free>
  return;
 80239a4:	e003      	b.n	80239ae <udp_input+0x202>
    pbuf_free(p);
 80239a6:	6878      	ldr	r0, [r7, #4]
 80239a8:	f7f9 fffa 	bl	801d9a0 <pbuf_free>
  return;
 80239ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80239ae:	372c      	adds	r7, #44	@ 0x2c
 80239b0:	46bd      	mov	sp, r7
 80239b2:	bd90      	pop	{r4, r7, pc}
 80239b4:	0802fafc 	.word	0x0802fafc
 80239b8:	0802fba0 	.word	0x0802fba0
 80239bc:	0802fb50 	.word	0x0802fb50
 80239c0:	0802fbb8 	.word	0x0802fbb8
 80239c4:	24008540 	.word	0x24008540
 80239c8:	2400b4e8 	.word	0x2400b4e8
 80239cc:	0802fbd4 	.word	0x0802fbd4
 80239d0:	24008550 	.word	0x24008550

080239d4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80239d4:	b580      	push	{r7, lr}
 80239d6:	b088      	sub	sp, #32
 80239d8:	af02      	add	r7, sp, #8
 80239da:	60f8      	str	r0, [r7, #12]
 80239dc:	60b9      	str	r1, [r7, #8]
 80239de:	607a      	str	r2, [r7, #4]
 80239e0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d109      	bne.n	80239fc <udp_sendto+0x28>
 80239e8:	4b23      	ldr	r3, [pc, #140]	@ (8023a78 <udp_sendto+0xa4>)
 80239ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80239ee:	4923      	ldr	r1, [pc, #140]	@ (8023a7c <udp_sendto+0xa8>)
 80239f0:	4823      	ldr	r0, [pc, #140]	@ (8023a80 <udp_sendto+0xac>)
 80239f2:	f005 fcb9 	bl	8029368 <iprintf>
 80239f6:	f06f 030f 	mvn.w	r3, #15
 80239fa:	e038      	b.n	8023a6e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80239fc:	68bb      	ldr	r3, [r7, #8]
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d109      	bne.n	8023a16 <udp_sendto+0x42>
 8023a02:	4b1d      	ldr	r3, [pc, #116]	@ (8023a78 <udp_sendto+0xa4>)
 8023a04:	f240 2219 	movw	r2, #537	@ 0x219
 8023a08:	491e      	ldr	r1, [pc, #120]	@ (8023a84 <udp_sendto+0xb0>)
 8023a0a:	481d      	ldr	r0, [pc, #116]	@ (8023a80 <udp_sendto+0xac>)
 8023a0c:	f005 fcac 	bl	8029368 <iprintf>
 8023a10:	f06f 030f 	mvn.w	r3, #15
 8023a14:	e02b      	b.n	8023a6e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d109      	bne.n	8023a30 <udp_sendto+0x5c>
 8023a1c:	4b16      	ldr	r3, [pc, #88]	@ (8023a78 <udp_sendto+0xa4>)
 8023a1e:	f240 221a 	movw	r2, #538	@ 0x21a
 8023a22:	4919      	ldr	r1, [pc, #100]	@ (8023a88 <udp_sendto+0xb4>)
 8023a24:	4816      	ldr	r0, [pc, #88]	@ (8023a80 <udp_sendto+0xac>)
 8023a26:	f005 fc9f 	bl	8029368 <iprintf>
 8023a2a:	f06f 030f 	mvn.w	r3, #15
 8023a2e:	e01e      	b.n	8023a6e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8023a30:	68fb      	ldr	r3, [r7, #12]
 8023a32:	7a1b      	ldrb	r3, [r3, #8]
 8023a34:	2b00      	cmp	r3, #0
 8023a36:	d006      	beq.n	8023a46 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8023a38:	68fb      	ldr	r3, [r7, #12]
 8023a3a:	7a1b      	ldrb	r3, [r3, #8]
 8023a3c:	4618      	mov	r0, r3
 8023a3e:	f7f9 fc6f 	bl	801d320 <netif_get_by_index>
 8023a42:	6178      	str	r0, [r7, #20]
 8023a44:	e003      	b.n	8023a4e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8023a46:	6878      	ldr	r0, [r7, #4]
 8023a48:	f003 fafc 	bl	8027044 <ip4_route>
 8023a4c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8023a4e:	697b      	ldr	r3, [r7, #20]
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d102      	bne.n	8023a5a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8023a54:	f06f 0303 	mvn.w	r3, #3
 8023a58:	e009      	b.n	8023a6e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8023a5a:	887a      	ldrh	r2, [r7, #2]
 8023a5c:	697b      	ldr	r3, [r7, #20]
 8023a5e:	9300      	str	r3, [sp, #0]
 8023a60:	4613      	mov	r3, r2
 8023a62:	687a      	ldr	r2, [r7, #4]
 8023a64:	68b9      	ldr	r1, [r7, #8]
 8023a66:	68f8      	ldr	r0, [r7, #12]
 8023a68:	f000 f810 	bl	8023a8c <udp_sendto_if>
 8023a6c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023a6e:	4618      	mov	r0, r3
 8023a70:	3718      	adds	r7, #24
 8023a72:	46bd      	mov	sp, r7
 8023a74:	bd80      	pop	{r7, pc}
 8023a76:	bf00      	nop
 8023a78:	0802fafc 	.word	0x0802fafc
 8023a7c:	0802fc20 	.word	0x0802fc20
 8023a80:	0802fb50 	.word	0x0802fb50
 8023a84:	0802fc38 	.word	0x0802fc38
 8023a88:	0802fc54 	.word	0x0802fc54

08023a8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8023a8c:	b580      	push	{r7, lr}
 8023a8e:	b088      	sub	sp, #32
 8023a90:	af02      	add	r7, sp, #8
 8023a92:	60f8      	str	r0, [r7, #12]
 8023a94:	60b9      	str	r1, [r7, #8]
 8023a96:	607a      	str	r2, [r7, #4]
 8023a98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d109      	bne.n	8023ab4 <udp_sendto_if+0x28>
 8023aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8023b5c <udp_sendto_if+0xd0>)
 8023aa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023aa6:	492e      	ldr	r1, [pc, #184]	@ (8023b60 <udp_sendto_if+0xd4>)
 8023aa8:	482e      	ldr	r0, [pc, #184]	@ (8023b64 <udp_sendto_if+0xd8>)
 8023aaa:	f005 fc5d 	bl	8029368 <iprintf>
 8023aae:	f06f 030f 	mvn.w	r3, #15
 8023ab2:	e04f      	b.n	8023b54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8023ab4:	68bb      	ldr	r3, [r7, #8]
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d109      	bne.n	8023ace <udp_sendto_if+0x42>
 8023aba:	4b28      	ldr	r3, [pc, #160]	@ (8023b5c <udp_sendto_if+0xd0>)
 8023abc:	f240 2281 	movw	r2, #641	@ 0x281
 8023ac0:	4929      	ldr	r1, [pc, #164]	@ (8023b68 <udp_sendto_if+0xdc>)
 8023ac2:	4828      	ldr	r0, [pc, #160]	@ (8023b64 <udp_sendto_if+0xd8>)
 8023ac4:	f005 fc50 	bl	8029368 <iprintf>
 8023ac8:	f06f 030f 	mvn.w	r3, #15
 8023acc:	e042      	b.n	8023b54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	d109      	bne.n	8023ae8 <udp_sendto_if+0x5c>
 8023ad4:	4b21      	ldr	r3, [pc, #132]	@ (8023b5c <udp_sendto_if+0xd0>)
 8023ad6:	f240 2282 	movw	r2, #642	@ 0x282
 8023ada:	4924      	ldr	r1, [pc, #144]	@ (8023b6c <udp_sendto_if+0xe0>)
 8023adc:	4821      	ldr	r0, [pc, #132]	@ (8023b64 <udp_sendto_if+0xd8>)
 8023ade:	f005 fc43 	bl	8029368 <iprintf>
 8023ae2:	f06f 030f 	mvn.w	r3, #15
 8023ae6:	e035      	b.n	8023b54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8023ae8:	6a3b      	ldr	r3, [r7, #32]
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d109      	bne.n	8023b02 <udp_sendto_if+0x76>
 8023aee:	4b1b      	ldr	r3, [pc, #108]	@ (8023b5c <udp_sendto_if+0xd0>)
 8023af0:	f240 2283 	movw	r2, #643	@ 0x283
 8023af4:	491e      	ldr	r1, [pc, #120]	@ (8023b70 <udp_sendto_if+0xe4>)
 8023af6:	481b      	ldr	r0, [pc, #108]	@ (8023b64 <udp_sendto_if+0xd8>)
 8023af8:	f005 fc36 	bl	8029368 <iprintf>
 8023afc:	f06f 030f 	mvn.w	r3, #15
 8023b00:	e028      	b.n	8023b54 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023b02:	68fb      	ldr	r3, [r7, #12]
 8023b04:	2b00      	cmp	r3, #0
 8023b06:	d009      	beq.n	8023b1c <udp_sendto_if+0x90>
 8023b08:	68fb      	ldr	r3, [r7, #12]
 8023b0a:	681b      	ldr	r3, [r3, #0]
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	d005      	beq.n	8023b1c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8023b10:	68fb      	ldr	r3, [r7, #12]
 8023b12:	681b      	ldr	r3, [r3, #0]
 8023b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023b18:	2be0      	cmp	r3, #224	@ 0xe0
 8023b1a:	d103      	bne.n	8023b24 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8023b1c:	6a3b      	ldr	r3, [r7, #32]
 8023b1e:	3304      	adds	r3, #4
 8023b20:	617b      	str	r3, [r7, #20]
 8023b22:	e00b      	b.n	8023b3c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8023b24:	68fb      	ldr	r3, [r7, #12]
 8023b26:	681a      	ldr	r2, [r3, #0]
 8023b28:	6a3b      	ldr	r3, [r7, #32]
 8023b2a:	3304      	adds	r3, #4
 8023b2c:	681b      	ldr	r3, [r3, #0]
 8023b2e:	429a      	cmp	r2, r3
 8023b30:	d002      	beq.n	8023b38 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8023b32:	f06f 0303 	mvn.w	r3, #3
 8023b36:	e00d      	b.n	8023b54 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8023b38:	68fb      	ldr	r3, [r7, #12]
 8023b3a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8023b3c:	887a      	ldrh	r2, [r7, #2]
 8023b3e:	697b      	ldr	r3, [r7, #20]
 8023b40:	9301      	str	r3, [sp, #4]
 8023b42:	6a3b      	ldr	r3, [r7, #32]
 8023b44:	9300      	str	r3, [sp, #0]
 8023b46:	4613      	mov	r3, r2
 8023b48:	687a      	ldr	r2, [r7, #4]
 8023b4a:	68b9      	ldr	r1, [r7, #8]
 8023b4c:	68f8      	ldr	r0, [r7, #12]
 8023b4e:	f000 f811 	bl	8023b74 <udp_sendto_if_src>
 8023b52:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023b54:	4618      	mov	r0, r3
 8023b56:	3718      	adds	r7, #24
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	bd80      	pop	{r7, pc}
 8023b5c:	0802fafc 	.word	0x0802fafc
 8023b60:	0802fc70 	.word	0x0802fc70
 8023b64:	0802fb50 	.word	0x0802fb50
 8023b68:	0802fc8c 	.word	0x0802fc8c
 8023b6c:	0802fca8 	.word	0x0802fca8
 8023b70:	0802fcc8 	.word	0x0802fcc8

08023b74 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8023b74:	b580      	push	{r7, lr}
 8023b76:	b08c      	sub	sp, #48	@ 0x30
 8023b78:	af04      	add	r7, sp, #16
 8023b7a:	60f8      	str	r0, [r7, #12]
 8023b7c:	60b9      	str	r1, [r7, #8]
 8023b7e:	607a      	str	r2, [r7, #4]
 8023b80:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8023b82:	68fb      	ldr	r3, [r7, #12]
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d109      	bne.n	8023b9c <udp_sendto_if_src+0x28>
 8023b88:	4b65      	ldr	r3, [pc, #404]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023b8a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8023b8e:	4965      	ldr	r1, [pc, #404]	@ (8023d24 <udp_sendto_if_src+0x1b0>)
 8023b90:	4865      	ldr	r0, [pc, #404]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023b92:	f005 fbe9 	bl	8029368 <iprintf>
 8023b96:	f06f 030f 	mvn.w	r3, #15
 8023b9a:	e0bc      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8023b9c:	68bb      	ldr	r3, [r7, #8]
 8023b9e:	2b00      	cmp	r3, #0
 8023ba0:	d109      	bne.n	8023bb6 <udp_sendto_if_src+0x42>
 8023ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023ba4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8023ba8:	4960      	ldr	r1, [pc, #384]	@ (8023d2c <udp_sendto_if_src+0x1b8>)
 8023baa:	485f      	ldr	r0, [pc, #380]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023bac:	f005 fbdc 	bl	8029368 <iprintf>
 8023bb0:	f06f 030f 	mvn.w	r3, #15
 8023bb4:	e0af      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	2b00      	cmp	r3, #0
 8023bba:	d109      	bne.n	8023bd0 <udp_sendto_if_src+0x5c>
 8023bbc:	4b58      	ldr	r3, [pc, #352]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023bbe:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8023bc2:	495b      	ldr	r1, [pc, #364]	@ (8023d30 <udp_sendto_if_src+0x1bc>)
 8023bc4:	4858      	ldr	r0, [pc, #352]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023bc6:	f005 fbcf 	bl	8029368 <iprintf>
 8023bca:	f06f 030f 	mvn.w	r3, #15
 8023bce:	e0a2      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8023bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	d109      	bne.n	8023bea <udp_sendto_if_src+0x76>
 8023bd6:	4b52      	ldr	r3, [pc, #328]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023bd8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8023bdc:	4955      	ldr	r1, [pc, #340]	@ (8023d34 <udp_sendto_if_src+0x1c0>)
 8023bde:	4852      	ldr	r0, [pc, #328]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023be0:	f005 fbc2 	bl	8029368 <iprintf>
 8023be4:	f06f 030f 	mvn.w	r3, #15
 8023be8:	e095      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8023bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	d109      	bne.n	8023c04 <udp_sendto_if_src+0x90>
 8023bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023bf2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8023bf6:	4950      	ldr	r1, [pc, #320]	@ (8023d38 <udp_sendto_if_src+0x1c4>)
 8023bf8:	484b      	ldr	r0, [pc, #300]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023bfa:	f005 fbb5 	bl	8029368 <iprintf>
 8023bfe:	f06f 030f 	mvn.w	r3, #15
 8023c02:	e088      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	8a5b      	ldrh	r3, [r3, #18]
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	d10f      	bne.n	8023c2c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8023c0c:	68f9      	ldr	r1, [r7, #12]
 8023c0e:	68fb      	ldr	r3, [r7, #12]
 8023c10:	8a5b      	ldrh	r3, [r3, #18]
 8023c12:	461a      	mov	r2, r3
 8023c14:	68f8      	ldr	r0, [r7, #12]
 8023c16:	f000 f893 	bl	8023d40 <udp_bind>
 8023c1a:	4603      	mov	r3, r0
 8023c1c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8023c1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d002      	beq.n	8023c2c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8023c26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023c2a:	e074      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8023c2c:	68bb      	ldr	r3, [r7, #8]
 8023c2e:	891b      	ldrh	r3, [r3, #8]
 8023c30:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8023c34:	4293      	cmp	r3, r2
 8023c36:	d902      	bls.n	8023c3e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8023c38:	f04f 33ff 	mov.w	r3, #4294967295
 8023c3c:	e06b      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8023c3e:	2108      	movs	r1, #8
 8023c40:	68b8      	ldr	r0, [r7, #8]
 8023c42:	f7f9 fe17 	bl	801d874 <pbuf_add_header>
 8023c46:	4603      	mov	r3, r0
 8023c48:	2b00      	cmp	r3, #0
 8023c4a:	d015      	beq.n	8023c78 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8023c4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023c50:	2108      	movs	r1, #8
 8023c52:	2022      	movs	r0, #34	@ 0x22
 8023c54:	f7f9 fbc0 	bl	801d3d8 <pbuf_alloc>
 8023c58:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8023c5a:	69fb      	ldr	r3, [r7, #28]
 8023c5c:	2b00      	cmp	r3, #0
 8023c5e:	d102      	bne.n	8023c66 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8023c60:	f04f 33ff 	mov.w	r3, #4294967295
 8023c64:	e057      	b.n	8023d16 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8023c66:	68bb      	ldr	r3, [r7, #8]
 8023c68:	891b      	ldrh	r3, [r3, #8]
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	d006      	beq.n	8023c7c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8023c6e:	68b9      	ldr	r1, [r7, #8]
 8023c70:	69f8      	ldr	r0, [r7, #28]
 8023c72:	f7f9 ffad 	bl	801dbd0 <pbuf_chain>
 8023c76:	e001      	b.n	8023c7c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023c78:	68bb      	ldr	r3, [r7, #8]
 8023c7a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8023c7c:	69fb      	ldr	r3, [r7, #28]
 8023c7e:	895b      	ldrh	r3, [r3, #10]
 8023c80:	2b07      	cmp	r3, #7
 8023c82:	d806      	bhi.n	8023c92 <udp_sendto_if_src+0x11e>
 8023c84:	4b26      	ldr	r3, [pc, #152]	@ (8023d20 <udp_sendto_if_src+0x1ac>)
 8023c86:	f240 320d 	movw	r2, #781	@ 0x30d
 8023c8a:	492c      	ldr	r1, [pc, #176]	@ (8023d3c <udp_sendto_if_src+0x1c8>)
 8023c8c:	4826      	ldr	r0, [pc, #152]	@ (8023d28 <udp_sendto_if_src+0x1b4>)
 8023c8e:	f005 fb6b 	bl	8029368 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8023c92:	69fb      	ldr	r3, [r7, #28]
 8023c94:	685b      	ldr	r3, [r3, #4]
 8023c96:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	8a5b      	ldrh	r3, [r3, #18]
 8023c9c:	4618      	mov	r0, r3
 8023c9e:	f7f7 ff8f 	bl	801bbc0 <lwip_htons>
 8023ca2:	4603      	mov	r3, r0
 8023ca4:	461a      	mov	r2, r3
 8023ca6:	697b      	ldr	r3, [r7, #20]
 8023ca8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8023caa:	887b      	ldrh	r3, [r7, #2]
 8023cac:	4618      	mov	r0, r3
 8023cae:	f7f7 ff87 	bl	801bbc0 <lwip_htons>
 8023cb2:	4603      	mov	r3, r0
 8023cb4:	461a      	mov	r2, r3
 8023cb6:	697b      	ldr	r3, [r7, #20]
 8023cb8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8023cba:	697b      	ldr	r3, [r7, #20]
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	719a      	strb	r2, [r3, #6]
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8023cc4:	69fb      	ldr	r3, [r7, #28]
 8023cc6:	891b      	ldrh	r3, [r3, #8]
 8023cc8:	4618      	mov	r0, r3
 8023cca:	f7f7 ff79 	bl	801bbc0 <lwip_htons>
 8023cce:	4603      	mov	r3, r0
 8023cd0:	461a      	mov	r2, r3
 8023cd2:	697b      	ldr	r3, [r7, #20]
 8023cd4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8023cd6:	2311      	movs	r3, #17
 8023cd8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8023cda:	68fb      	ldr	r3, [r7, #12]
 8023cdc:	7adb      	ldrb	r3, [r3, #11]
 8023cde:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	7a9b      	ldrb	r3, [r3, #10]
 8023ce4:	7cb9      	ldrb	r1, [r7, #18]
 8023ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023ce8:	9202      	str	r2, [sp, #8]
 8023cea:	7cfa      	ldrb	r2, [r7, #19]
 8023cec:	9201      	str	r2, [sp, #4]
 8023cee:	9300      	str	r3, [sp, #0]
 8023cf0:	460b      	mov	r3, r1
 8023cf2:	687a      	ldr	r2, [r7, #4]
 8023cf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023cf6:	69f8      	ldr	r0, [r7, #28]
 8023cf8:	f003 fbaa 	bl	8027450 <ip4_output_if_src>
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8023d00:	69fa      	ldr	r2, [r7, #28]
 8023d02:	68bb      	ldr	r3, [r7, #8]
 8023d04:	429a      	cmp	r2, r3
 8023d06:	d004      	beq.n	8023d12 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8023d08:	69f8      	ldr	r0, [r7, #28]
 8023d0a:	f7f9 fe49 	bl	801d9a0 <pbuf_free>
    q = NULL;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8023d12:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8023d16:	4618      	mov	r0, r3
 8023d18:	3720      	adds	r7, #32
 8023d1a:	46bd      	mov	sp, r7
 8023d1c:	bd80      	pop	{r7, pc}
 8023d1e:	bf00      	nop
 8023d20:	0802fafc 	.word	0x0802fafc
 8023d24:	0802fce8 	.word	0x0802fce8
 8023d28:	0802fb50 	.word	0x0802fb50
 8023d2c:	0802fd08 	.word	0x0802fd08
 8023d30:	0802fd28 	.word	0x0802fd28
 8023d34:	0802fd4c 	.word	0x0802fd4c
 8023d38:	0802fd70 	.word	0x0802fd70
 8023d3c:	0802fd94 	.word	0x0802fd94

08023d40 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8023d40:	b580      	push	{r7, lr}
 8023d42:	b086      	sub	sp, #24
 8023d44:	af00      	add	r7, sp, #0
 8023d46:	60f8      	str	r0, [r7, #12]
 8023d48:	60b9      	str	r1, [r7, #8]
 8023d4a:	4613      	mov	r3, r2
 8023d4c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8023d4e:	68bb      	ldr	r3, [r7, #8]
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	d101      	bne.n	8023d58 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8023d54:	4b39      	ldr	r3, [pc, #228]	@ (8023e3c <udp_bind+0xfc>)
 8023d56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d109      	bne.n	8023d72 <udp_bind+0x32>
 8023d5e:	4b38      	ldr	r3, [pc, #224]	@ (8023e40 <udp_bind+0x100>)
 8023d60:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8023d64:	4937      	ldr	r1, [pc, #220]	@ (8023e44 <udp_bind+0x104>)
 8023d66:	4838      	ldr	r0, [pc, #224]	@ (8023e48 <udp_bind+0x108>)
 8023d68:	f005 fafe 	bl	8029368 <iprintf>
 8023d6c:	f06f 030f 	mvn.w	r3, #15
 8023d70:	e060      	b.n	8023e34 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8023d72:	2300      	movs	r3, #0
 8023d74:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023d76:	4b35      	ldr	r3, [pc, #212]	@ (8023e4c <udp_bind+0x10c>)
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	617b      	str	r3, [r7, #20]
 8023d7c:	e009      	b.n	8023d92 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8023d7e:	68fa      	ldr	r2, [r7, #12]
 8023d80:	697b      	ldr	r3, [r7, #20]
 8023d82:	429a      	cmp	r2, r3
 8023d84:	d102      	bne.n	8023d8c <udp_bind+0x4c>
      rebind = 1;
 8023d86:	2301      	movs	r3, #1
 8023d88:	74fb      	strb	r3, [r7, #19]
      break;
 8023d8a:	e005      	b.n	8023d98 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023d8c:	697b      	ldr	r3, [r7, #20]
 8023d8e:	68db      	ldr	r3, [r3, #12]
 8023d90:	617b      	str	r3, [r7, #20]
 8023d92:	697b      	ldr	r3, [r7, #20]
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	d1f2      	bne.n	8023d7e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8023d98:	88fb      	ldrh	r3, [r7, #6]
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	d109      	bne.n	8023db2 <udp_bind+0x72>
    port = udp_new_port();
 8023d9e:	f7ff fc69 	bl	8023674 <udp_new_port>
 8023da2:	4603      	mov	r3, r0
 8023da4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8023da6:	88fb      	ldrh	r3, [r7, #6]
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	d12c      	bne.n	8023e06 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8023dac:	f06f 0307 	mvn.w	r3, #7
 8023db0:	e040      	b.n	8023e34 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023db2:	4b26      	ldr	r3, [pc, #152]	@ (8023e4c <udp_bind+0x10c>)
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	617b      	str	r3, [r7, #20]
 8023db8:	e022      	b.n	8023e00 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8023dba:	68fa      	ldr	r2, [r7, #12]
 8023dbc:	697b      	ldr	r3, [r7, #20]
 8023dbe:	429a      	cmp	r2, r3
 8023dc0:	d01b      	beq.n	8023dfa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8023dc2:	697b      	ldr	r3, [r7, #20]
 8023dc4:	8a5b      	ldrh	r3, [r3, #18]
 8023dc6:	88fa      	ldrh	r2, [r7, #6]
 8023dc8:	429a      	cmp	r2, r3
 8023dca:	d116      	bne.n	8023dfa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023dcc:	697b      	ldr	r3, [r7, #20]
 8023dce:	681a      	ldr	r2, [r3, #0]
 8023dd0:	68bb      	ldr	r3, [r7, #8]
 8023dd2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8023dd4:	429a      	cmp	r2, r3
 8023dd6:	d00d      	beq.n	8023df4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023dd8:	68bb      	ldr	r3, [r7, #8]
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d00a      	beq.n	8023df4 <udp_bind+0xb4>
 8023dde:	68bb      	ldr	r3, [r7, #8]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d006      	beq.n	8023df4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023de6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	d003      	beq.n	8023df4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023dec:	697b      	ldr	r3, [r7, #20]
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d102      	bne.n	8023dfa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8023df4:	f06f 0307 	mvn.w	r3, #7
 8023df8:	e01c      	b.n	8023e34 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023dfa:	697b      	ldr	r3, [r7, #20]
 8023dfc:	68db      	ldr	r3, [r3, #12]
 8023dfe:	617b      	str	r3, [r7, #20]
 8023e00:	697b      	ldr	r3, [r7, #20]
 8023e02:	2b00      	cmp	r3, #0
 8023e04:	d1d9      	bne.n	8023dba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8023e06:	68bb      	ldr	r3, [r7, #8]
 8023e08:	2b00      	cmp	r3, #0
 8023e0a:	d002      	beq.n	8023e12 <udp_bind+0xd2>
 8023e0c:	68bb      	ldr	r3, [r7, #8]
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	e000      	b.n	8023e14 <udp_bind+0xd4>
 8023e12:	2300      	movs	r3, #0
 8023e14:	68fa      	ldr	r2, [r7, #12]
 8023e16:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8023e18:	68fb      	ldr	r3, [r7, #12]
 8023e1a:	88fa      	ldrh	r2, [r7, #6]
 8023e1c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8023e1e:	7cfb      	ldrb	r3, [r7, #19]
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	d106      	bne.n	8023e32 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8023e24:	4b09      	ldr	r3, [pc, #36]	@ (8023e4c <udp_bind+0x10c>)
 8023e26:	681a      	ldr	r2, [r3, #0]
 8023e28:	68fb      	ldr	r3, [r7, #12]
 8023e2a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8023e2c:	4a07      	ldr	r2, [pc, #28]	@ (8023e4c <udp_bind+0x10c>)
 8023e2e:	68fb      	ldr	r3, [r7, #12]
 8023e30:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8023e32:	2300      	movs	r3, #0
}
 8023e34:	4618      	mov	r0, r3
 8023e36:	3718      	adds	r7, #24
 8023e38:	46bd      	mov	sp, r7
 8023e3a:	bd80      	pop	{r7, pc}
 8023e3c:	08030ef4 	.word	0x08030ef4
 8023e40:	0802fafc 	.word	0x0802fafc
 8023e44:	0802fdc4 	.word	0x0802fdc4
 8023e48:	0802fb50 	.word	0x0802fb50
 8023e4c:	2400b4e8 	.word	0x2400b4e8

08023e50 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8023e50:	b580      	push	{r7, lr}
 8023e52:	b086      	sub	sp, #24
 8023e54:	af00      	add	r7, sp, #0
 8023e56:	60f8      	str	r0, [r7, #12]
 8023e58:	60b9      	str	r1, [r7, #8]
 8023e5a:	4613      	mov	r3, r2
 8023e5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8023e5e:	68fb      	ldr	r3, [r7, #12]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d109      	bne.n	8023e78 <udp_connect+0x28>
 8023e64:	4b2c      	ldr	r3, [pc, #176]	@ (8023f18 <udp_connect+0xc8>)
 8023e66:	f240 4235 	movw	r2, #1077	@ 0x435
 8023e6a:	492c      	ldr	r1, [pc, #176]	@ (8023f1c <udp_connect+0xcc>)
 8023e6c:	482c      	ldr	r0, [pc, #176]	@ (8023f20 <udp_connect+0xd0>)
 8023e6e:	f005 fa7b 	bl	8029368 <iprintf>
 8023e72:	f06f 030f 	mvn.w	r3, #15
 8023e76:	e04b      	b.n	8023f10 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8023e78:	68bb      	ldr	r3, [r7, #8]
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d109      	bne.n	8023e92 <udp_connect+0x42>
 8023e7e:	4b26      	ldr	r3, [pc, #152]	@ (8023f18 <udp_connect+0xc8>)
 8023e80:	f240 4236 	movw	r2, #1078	@ 0x436
 8023e84:	4927      	ldr	r1, [pc, #156]	@ (8023f24 <udp_connect+0xd4>)
 8023e86:	4826      	ldr	r0, [pc, #152]	@ (8023f20 <udp_connect+0xd0>)
 8023e88:	f005 fa6e 	bl	8029368 <iprintf>
 8023e8c:	f06f 030f 	mvn.w	r3, #15
 8023e90:	e03e      	b.n	8023f10 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8023e92:	68fb      	ldr	r3, [r7, #12]
 8023e94:	8a5b      	ldrh	r3, [r3, #18]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d10f      	bne.n	8023eba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8023e9a:	68f9      	ldr	r1, [r7, #12]
 8023e9c:	68fb      	ldr	r3, [r7, #12]
 8023e9e:	8a5b      	ldrh	r3, [r3, #18]
 8023ea0:	461a      	mov	r2, r3
 8023ea2:	68f8      	ldr	r0, [r7, #12]
 8023ea4:	f7ff ff4c 	bl	8023d40 <udp_bind>
 8023ea8:	4603      	mov	r3, r0
 8023eaa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8023eac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d002      	beq.n	8023eba <udp_connect+0x6a>
      return err;
 8023eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8023eb8:	e02a      	b.n	8023f10 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8023eba:	68bb      	ldr	r3, [r7, #8]
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d002      	beq.n	8023ec6 <udp_connect+0x76>
 8023ec0:	68bb      	ldr	r3, [r7, #8]
 8023ec2:	681b      	ldr	r3, [r3, #0]
 8023ec4:	e000      	b.n	8023ec8 <udp_connect+0x78>
 8023ec6:	2300      	movs	r3, #0
 8023ec8:	68fa      	ldr	r2, [r7, #12]
 8023eca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	88fa      	ldrh	r2, [r7, #6]
 8023ed0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8023ed2:	68fb      	ldr	r3, [r7, #12]
 8023ed4:	7c1b      	ldrb	r3, [r3, #16]
 8023ed6:	f043 0304 	orr.w	r3, r3, #4
 8023eda:	b2da      	uxtb	r2, r3
 8023edc:	68fb      	ldr	r3, [r7, #12]
 8023ede:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023ee0:	4b11      	ldr	r3, [pc, #68]	@ (8023f28 <udp_connect+0xd8>)
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	617b      	str	r3, [r7, #20]
 8023ee6:	e008      	b.n	8023efa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8023ee8:	68fa      	ldr	r2, [r7, #12]
 8023eea:	697b      	ldr	r3, [r7, #20]
 8023eec:	429a      	cmp	r2, r3
 8023eee:	d101      	bne.n	8023ef4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8023ef0:	2300      	movs	r3, #0
 8023ef2:	e00d      	b.n	8023f10 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023ef4:	697b      	ldr	r3, [r7, #20]
 8023ef6:	68db      	ldr	r3, [r3, #12]
 8023ef8:	617b      	str	r3, [r7, #20]
 8023efa:	697b      	ldr	r3, [r7, #20]
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	d1f3      	bne.n	8023ee8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8023f00:	4b09      	ldr	r3, [pc, #36]	@ (8023f28 <udp_connect+0xd8>)
 8023f02:	681a      	ldr	r2, [r3, #0]
 8023f04:	68fb      	ldr	r3, [r7, #12]
 8023f06:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8023f08:	4a07      	ldr	r2, [pc, #28]	@ (8023f28 <udp_connect+0xd8>)
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8023f0e:	2300      	movs	r3, #0
}
 8023f10:	4618      	mov	r0, r3
 8023f12:	3718      	adds	r7, #24
 8023f14:	46bd      	mov	sp, r7
 8023f16:	bd80      	pop	{r7, pc}
 8023f18:	0802fafc 	.word	0x0802fafc
 8023f1c:	0802fddc 	.word	0x0802fddc
 8023f20:	0802fb50 	.word	0x0802fb50
 8023f24:	0802fdf8 	.word	0x0802fdf8
 8023f28:	2400b4e8 	.word	0x2400b4e8

08023f2c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8023f2c:	b580      	push	{r7, lr}
 8023f2e:	b084      	sub	sp, #16
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	60f8      	str	r0, [r7, #12]
 8023f34:	60b9      	str	r1, [r7, #8]
 8023f36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8023f38:	68fb      	ldr	r3, [r7, #12]
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d107      	bne.n	8023f4e <udp_recv+0x22>
 8023f3e:	4b08      	ldr	r3, [pc, #32]	@ (8023f60 <udp_recv+0x34>)
 8023f40:	f240 428a 	movw	r2, #1162	@ 0x48a
 8023f44:	4907      	ldr	r1, [pc, #28]	@ (8023f64 <udp_recv+0x38>)
 8023f46:	4808      	ldr	r0, [pc, #32]	@ (8023f68 <udp_recv+0x3c>)
 8023f48:	f005 fa0e 	bl	8029368 <iprintf>
 8023f4c:	e005      	b.n	8023f5a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8023f4e:	68fb      	ldr	r3, [r7, #12]
 8023f50:	68ba      	ldr	r2, [r7, #8]
 8023f52:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8023f54:	68fb      	ldr	r3, [r7, #12]
 8023f56:	687a      	ldr	r2, [r7, #4]
 8023f58:	61da      	str	r2, [r3, #28]
}
 8023f5a:	3710      	adds	r7, #16
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	bd80      	pop	{r7, pc}
 8023f60:	0802fafc 	.word	0x0802fafc
 8023f64:	0802fe30 	.word	0x0802fe30
 8023f68:	0802fb50 	.word	0x0802fb50

08023f6c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8023f6c:	b580      	push	{r7, lr}
 8023f6e:	b084      	sub	sp, #16
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8023f74:	687b      	ldr	r3, [r7, #4]
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	d107      	bne.n	8023f8a <udp_remove+0x1e>
 8023f7a:	4b19      	ldr	r3, [pc, #100]	@ (8023fe0 <udp_remove+0x74>)
 8023f7c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8023f80:	4918      	ldr	r1, [pc, #96]	@ (8023fe4 <udp_remove+0x78>)
 8023f82:	4819      	ldr	r0, [pc, #100]	@ (8023fe8 <udp_remove+0x7c>)
 8023f84:	f005 f9f0 	bl	8029368 <iprintf>
 8023f88:	e026      	b.n	8023fd8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8023f8a:	4b18      	ldr	r3, [pc, #96]	@ (8023fec <udp_remove+0x80>)
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	687a      	ldr	r2, [r7, #4]
 8023f90:	429a      	cmp	r2, r3
 8023f92:	d105      	bne.n	8023fa0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8023f94:	4b15      	ldr	r3, [pc, #84]	@ (8023fec <udp_remove+0x80>)
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	68db      	ldr	r3, [r3, #12]
 8023f9a:	4a14      	ldr	r2, [pc, #80]	@ (8023fec <udp_remove+0x80>)
 8023f9c:	6013      	str	r3, [r2, #0]
 8023f9e:	e017      	b.n	8023fd0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023fa0:	4b12      	ldr	r3, [pc, #72]	@ (8023fec <udp_remove+0x80>)
 8023fa2:	681b      	ldr	r3, [r3, #0]
 8023fa4:	60fb      	str	r3, [r7, #12]
 8023fa6:	e010      	b.n	8023fca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8023fa8:	68fb      	ldr	r3, [r7, #12]
 8023faa:	68db      	ldr	r3, [r3, #12]
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d009      	beq.n	8023fc4 <udp_remove+0x58>
 8023fb0:	68fb      	ldr	r3, [r7, #12]
 8023fb2:	68db      	ldr	r3, [r3, #12]
 8023fb4:	687a      	ldr	r2, [r7, #4]
 8023fb6:	429a      	cmp	r2, r3
 8023fb8:	d104      	bne.n	8023fc4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	68da      	ldr	r2, [r3, #12]
 8023fbe:	68fb      	ldr	r3, [r7, #12]
 8023fc0:	60da      	str	r2, [r3, #12]
        break;
 8023fc2:	e005      	b.n	8023fd0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	68db      	ldr	r3, [r3, #12]
 8023fc8:	60fb      	str	r3, [r7, #12]
 8023fca:	68fb      	ldr	r3, [r7, #12]
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d1eb      	bne.n	8023fa8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8023fd0:	6879      	ldr	r1, [r7, #4]
 8023fd2:	2000      	movs	r0, #0
 8023fd4:	f7f8 fe82 	bl	801ccdc <memp_free>
}
 8023fd8:	3710      	adds	r7, #16
 8023fda:	46bd      	mov	sp, r7
 8023fdc:	bd80      	pop	{r7, pc}
 8023fde:	bf00      	nop
 8023fe0:	0802fafc 	.word	0x0802fafc
 8023fe4:	0802fe48 	.word	0x0802fe48
 8023fe8:	0802fb50 	.word	0x0802fb50
 8023fec:	2400b4e8 	.word	0x2400b4e8

08023ff0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8023ff0:	b580      	push	{r7, lr}
 8023ff2:	b082      	sub	sp, #8
 8023ff4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8023ff6:	2000      	movs	r0, #0
 8023ff8:	f7f8 fe00 	bl	801cbfc <memp_malloc>
 8023ffc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	2b00      	cmp	r3, #0
 8024002:	d007      	beq.n	8024014 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8024004:	2220      	movs	r2, #32
 8024006:	2100      	movs	r1, #0
 8024008:	6878      	ldr	r0, [r7, #4]
 802400a:	f005 fb5b 	bl	80296c4 <memset>
    pcb->ttl = UDP_TTL;
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	22ff      	movs	r2, #255	@ 0xff
 8024012:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8024014:	687b      	ldr	r3, [r7, #4]
}
 8024016:	4618      	mov	r0, r3
 8024018:	3708      	adds	r7, #8
 802401a:	46bd      	mov	sp, r7
 802401c:	bd80      	pop	{r7, pc}
	...

08024020 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8024020:	b480      	push	{r7}
 8024022:	b085      	sub	sp, #20
 8024024:	af00      	add	r7, sp, #0
 8024026:	6078      	str	r0, [r7, #4]
 8024028:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	2b00      	cmp	r3, #0
 802402e:	d01e      	beq.n	802406e <udp_netif_ip_addr_changed+0x4e>
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	2b00      	cmp	r3, #0
 8024036:	d01a      	beq.n	802406e <udp_netif_ip_addr_changed+0x4e>
 8024038:	683b      	ldr	r3, [r7, #0]
 802403a:	2b00      	cmp	r3, #0
 802403c:	d017      	beq.n	802406e <udp_netif_ip_addr_changed+0x4e>
 802403e:	683b      	ldr	r3, [r7, #0]
 8024040:	681b      	ldr	r3, [r3, #0]
 8024042:	2b00      	cmp	r3, #0
 8024044:	d013      	beq.n	802406e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8024046:	4b0d      	ldr	r3, [pc, #52]	@ (802407c <udp_netif_ip_addr_changed+0x5c>)
 8024048:	681b      	ldr	r3, [r3, #0]
 802404a:	60fb      	str	r3, [r7, #12]
 802404c:	e00c      	b.n	8024068 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802404e:	68fb      	ldr	r3, [r7, #12]
 8024050:	681a      	ldr	r2, [r3, #0]
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	681b      	ldr	r3, [r3, #0]
 8024056:	429a      	cmp	r2, r3
 8024058:	d103      	bne.n	8024062 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802405a:	683b      	ldr	r3, [r7, #0]
 802405c:	681a      	ldr	r2, [r3, #0]
 802405e:	68fb      	ldr	r3, [r7, #12]
 8024060:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8024062:	68fb      	ldr	r3, [r7, #12]
 8024064:	68db      	ldr	r3, [r3, #12]
 8024066:	60fb      	str	r3, [r7, #12]
 8024068:	68fb      	ldr	r3, [r7, #12]
 802406a:	2b00      	cmp	r3, #0
 802406c:	d1ef      	bne.n	802404e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802406e:	bf00      	nop
 8024070:	3714      	adds	r7, #20
 8024072:	46bd      	mov	sp, r7
 8024074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024078:	4770      	bx	lr
 802407a:	bf00      	nop
 802407c:	2400b4e8 	.word	0x2400b4e8

08024080 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8024080:	b580      	push	{r7, lr}
 8024082:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8024084:	4b20      	ldr	r3, [pc, #128]	@ (8024108 <dhcp_inc_pcb_refcount+0x88>)
 8024086:	781b      	ldrb	r3, [r3, #0]
 8024088:	2b00      	cmp	r3, #0
 802408a:	d133      	bne.n	80240f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 802408c:	4b1f      	ldr	r3, [pc, #124]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	2b00      	cmp	r3, #0
 8024092:	d005      	beq.n	80240a0 <dhcp_inc_pcb_refcount+0x20>
 8024094:	4b1e      	ldr	r3, [pc, #120]	@ (8024110 <dhcp_inc_pcb_refcount+0x90>)
 8024096:	22e5      	movs	r2, #229	@ 0xe5
 8024098:	491e      	ldr	r1, [pc, #120]	@ (8024114 <dhcp_inc_pcb_refcount+0x94>)
 802409a:	481f      	ldr	r0, [pc, #124]	@ (8024118 <dhcp_inc_pcb_refcount+0x98>)
 802409c:	f005 f964 	bl	8029368 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80240a0:	f7ff ffa6 	bl	8023ff0 <udp_new>
 80240a4:	4603      	mov	r3, r0
 80240a6:	4a19      	ldr	r2, [pc, #100]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240a8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80240aa:	4b18      	ldr	r3, [pc, #96]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d102      	bne.n	80240b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80240b2:	f04f 33ff 	mov.w	r3, #4294967295
 80240b6:	e024      	b.n	8024102 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80240b8:	4b14      	ldr	r3, [pc, #80]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	7a5a      	ldrb	r2, [r3, #9]
 80240be:	4b13      	ldr	r3, [pc, #76]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	f042 0220 	orr.w	r2, r2, #32
 80240c6:	b2d2      	uxtb	r2, r2
 80240c8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80240ca:	4b10      	ldr	r3, [pc, #64]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	2244      	movs	r2, #68	@ 0x44
 80240d0:	4912      	ldr	r1, [pc, #72]	@ (802411c <dhcp_inc_pcb_refcount+0x9c>)
 80240d2:	4618      	mov	r0, r3
 80240d4:	f7ff fe34 	bl	8023d40 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80240d8:	4b0c      	ldr	r3, [pc, #48]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	2243      	movs	r2, #67	@ 0x43
 80240de:	490f      	ldr	r1, [pc, #60]	@ (802411c <dhcp_inc_pcb_refcount+0x9c>)
 80240e0:	4618      	mov	r0, r3
 80240e2:	f7ff feb5 	bl	8023e50 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80240e6:	4b09      	ldr	r3, [pc, #36]	@ (802410c <dhcp_inc_pcb_refcount+0x8c>)
 80240e8:	681b      	ldr	r3, [r3, #0]
 80240ea:	2200      	movs	r2, #0
 80240ec:	490c      	ldr	r1, [pc, #48]	@ (8024120 <dhcp_inc_pcb_refcount+0xa0>)
 80240ee:	4618      	mov	r0, r3
 80240f0:	f7ff ff1c 	bl	8023f2c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80240f4:	4b04      	ldr	r3, [pc, #16]	@ (8024108 <dhcp_inc_pcb_refcount+0x88>)
 80240f6:	781b      	ldrb	r3, [r3, #0]
 80240f8:	3301      	adds	r3, #1
 80240fa:	b2da      	uxtb	r2, r3
 80240fc:	4b02      	ldr	r3, [pc, #8]	@ (8024108 <dhcp_inc_pcb_refcount+0x88>)
 80240fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8024100:	2300      	movs	r3, #0
}
 8024102:	4618      	mov	r0, r3
 8024104:	bd80      	pop	{r7, pc}
 8024106:	bf00      	nop
 8024108:	2400b524 	.word	0x2400b524
 802410c:	2400b520 	.word	0x2400b520
 8024110:	0802fe60 	.word	0x0802fe60
 8024114:	0802fe98 	.word	0x0802fe98
 8024118:	0802fec0 	.word	0x0802fec0
 802411c:	08030ef4 	.word	0x08030ef4
 8024120:	08025a4d 	.word	0x08025a4d

08024124 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8024124:	b580      	push	{r7, lr}
 8024126:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8024128:	4b0e      	ldr	r3, [pc, #56]	@ (8024164 <dhcp_dec_pcb_refcount+0x40>)
 802412a:	781b      	ldrb	r3, [r3, #0]
 802412c:	2b00      	cmp	r3, #0
 802412e:	d105      	bne.n	802413c <dhcp_dec_pcb_refcount+0x18>
 8024130:	4b0d      	ldr	r3, [pc, #52]	@ (8024168 <dhcp_dec_pcb_refcount+0x44>)
 8024132:	22ff      	movs	r2, #255	@ 0xff
 8024134:	490d      	ldr	r1, [pc, #52]	@ (802416c <dhcp_dec_pcb_refcount+0x48>)
 8024136:	480e      	ldr	r0, [pc, #56]	@ (8024170 <dhcp_dec_pcb_refcount+0x4c>)
 8024138:	f005 f916 	bl	8029368 <iprintf>
  dhcp_pcb_refcount--;
 802413c:	4b09      	ldr	r3, [pc, #36]	@ (8024164 <dhcp_dec_pcb_refcount+0x40>)
 802413e:	781b      	ldrb	r3, [r3, #0]
 8024140:	3b01      	subs	r3, #1
 8024142:	b2da      	uxtb	r2, r3
 8024144:	4b07      	ldr	r3, [pc, #28]	@ (8024164 <dhcp_dec_pcb_refcount+0x40>)
 8024146:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8024148:	4b06      	ldr	r3, [pc, #24]	@ (8024164 <dhcp_dec_pcb_refcount+0x40>)
 802414a:	781b      	ldrb	r3, [r3, #0]
 802414c:	2b00      	cmp	r3, #0
 802414e:	d107      	bne.n	8024160 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8024150:	4b08      	ldr	r3, [pc, #32]	@ (8024174 <dhcp_dec_pcb_refcount+0x50>)
 8024152:	681b      	ldr	r3, [r3, #0]
 8024154:	4618      	mov	r0, r3
 8024156:	f7ff ff09 	bl	8023f6c <udp_remove>
    dhcp_pcb = NULL;
 802415a:	4b06      	ldr	r3, [pc, #24]	@ (8024174 <dhcp_dec_pcb_refcount+0x50>)
 802415c:	2200      	movs	r2, #0
 802415e:	601a      	str	r2, [r3, #0]
  }
}
 8024160:	bf00      	nop
 8024162:	bd80      	pop	{r7, pc}
 8024164:	2400b524 	.word	0x2400b524
 8024168:	0802fe60 	.word	0x0802fe60
 802416c:	0802fee8 	.word	0x0802fee8
 8024170:	0802fec0 	.word	0x0802fec0
 8024174:	2400b520 	.word	0x2400b520

08024178 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8024178:	b580      	push	{r7, lr}
 802417a:	b084      	sub	sp, #16
 802417c:	af00      	add	r7, sp, #0
 802417e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024180:	687b      	ldr	r3, [r7, #4]
 8024182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024184:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8024186:	210c      	movs	r1, #12
 8024188:	68f8      	ldr	r0, [r7, #12]
 802418a:	f001 f871 	bl	8025270 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 802418e:	4b06      	ldr	r3, [pc, #24]	@ (80241a8 <dhcp_handle_nak+0x30>)
 8024190:	4a05      	ldr	r2, [pc, #20]	@ (80241a8 <dhcp_handle_nak+0x30>)
 8024192:	4905      	ldr	r1, [pc, #20]	@ (80241a8 <dhcp_handle_nak+0x30>)
 8024194:	6878      	ldr	r0, [r7, #4]
 8024196:	f7f8 ff43 	bl	801d020 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 802419a:	6878      	ldr	r0, [r7, #4]
 802419c:	f000 fc6a 	bl	8024a74 <dhcp_discover>
}
 80241a0:	bf00      	nop
 80241a2:	3710      	adds	r7, #16
 80241a4:	46bd      	mov	sp, r7
 80241a6:	bd80      	pop	{r7, pc}
 80241a8:	08030ef4 	.word	0x08030ef4

080241ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80241ac:	b580      	push	{r7, lr}
 80241ae:	b084      	sub	sp, #16
 80241b0:	af00      	add	r7, sp, #0
 80241b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80241b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80241ba:	2108      	movs	r1, #8
 80241bc:	68f8      	ldr	r0, [r7, #12]
 80241be:	f001 f857 	bl	8025270 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80241c2:	68fb      	ldr	r3, [r7, #12]
 80241c4:	331c      	adds	r3, #28
 80241c6:	2200      	movs	r2, #0
 80241c8:	4619      	mov	r1, r3
 80241ca:	6878      	ldr	r0, [r7, #4]
 80241cc:	f002 fb88 	bl	80268e0 <etharp_query>
 80241d0:	4603      	mov	r3, r0
 80241d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80241d4:	68fb      	ldr	r3, [r7, #12]
 80241d6:	799b      	ldrb	r3, [r3, #6]
 80241d8:	2bff      	cmp	r3, #255	@ 0xff
 80241da:	d005      	beq.n	80241e8 <dhcp_check+0x3c>
    dhcp->tries++;
 80241dc:	68fb      	ldr	r3, [r7, #12]
 80241de:	799b      	ldrb	r3, [r3, #6]
 80241e0:	3301      	adds	r3, #1
 80241e2:	b2da      	uxtb	r2, r3
 80241e4:	68fb      	ldr	r3, [r7, #12]
 80241e6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80241e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80241ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80241ee:	893b      	ldrh	r3, [r7, #8]
 80241f0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80241f4:	4a06      	ldr	r2, [pc, #24]	@ (8024210 <dhcp_check+0x64>)
 80241f6:	fb82 1203 	smull	r1, r2, r2, r3
 80241fa:	1152      	asrs	r2, r2, #5
 80241fc:	17db      	asrs	r3, r3, #31
 80241fe:	1ad3      	subs	r3, r2, r3
 8024200:	b29a      	uxth	r2, r3
 8024202:	68fb      	ldr	r3, [r7, #12]
 8024204:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8024206:	bf00      	nop
 8024208:	3710      	adds	r7, #16
 802420a:	46bd      	mov	sp, r7
 802420c:	bd80      	pop	{r7, pc}
 802420e:	bf00      	nop
 8024210:	10624dd3 	.word	0x10624dd3

08024214 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8024214:	b580      	push	{r7, lr}
 8024216:	b084      	sub	sp, #16
 8024218:	af00      	add	r7, sp, #0
 802421a:	6078      	str	r0, [r7, #4]
 802421c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024222:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8024224:	4b0c      	ldr	r3, [pc, #48]	@ (8024258 <dhcp_handle_offer+0x44>)
 8024226:	789b      	ldrb	r3, [r3, #2]
 8024228:	2b00      	cmp	r3, #0
 802422a:	d011      	beq.n	8024250 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 802422c:	68fb      	ldr	r3, [r7, #12]
 802422e:	2200      	movs	r2, #0
 8024230:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8024232:	4b0a      	ldr	r3, [pc, #40]	@ (802425c <dhcp_handle_offer+0x48>)
 8024234:	689b      	ldr	r3, [r3, #8]
 8024236:	4618      	mov	r0, r3
 8024238:	f7f7 fcd7 	bl	801bbea <lwip_htonl>
 802423c:	4602      	mov	r2, r0
 802423e:	68fb      	ldr	r3, [r7, #12]
 8024240:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8024242:	683b      	ldr	r3, [r7, #0]
 8024244:	691a      	ldr	r2, [r3, #16]
 8024246:	68fb      	ldr	r3, [r7, #12]
 8024248:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 802424a:	6878      	ldr	r0, [r7, #4]
 802424c:	f000 f808 	bl	8024260 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8024250:	bf00      	nop
 8024252:	3710      	adds	r7, #16
 8024254:	46bd      	mov	sp, r7
 8024256:	bd80      	pop	{r7, pc}
 8024258:	2400b514 	.word	0x2400b514
 802425c:	2400b4ec 	.word	0x2400b4ec

08024260 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8024260:	b5b0      	push	{r4, r5, r7, lr}
 8024262:	b08a      	sub	sp, #40	@ 0x28
 8024264:	af02      	add	r7, sp, #8
 8024266:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	2b00      	cmp	r3, #0
 802426c:	d109      	bne.n	8024282 <dhcp_select+0x22>
 802426e:	4b71      	ldr	r3, [pc, #452]	@ (8024434 <dhcp_select+0x1d4>)
 8024270:	f240 1277 	movw	r2, #375	@ 0x177
 8024274:	4970      	ldr	r1, [pc, #448]	@ (8024438 <dhcp_select+0x1d8>)
 8024276:	4871      	ldr	r0, [pc, #452]	@ (802443c <dhcp_select+0x1dc>)
 8024278:	f005 f876 	bl	8029368 <iprintf>
 802427c:	f06f 030f 	mvn.w	r3, #15
 8024280:	e0d3      	b.n	802442a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8024282:	687b      	ldr	r3, [r7, #4]
 8024284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024286:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8024288:	69bb      	ldr	r3, [r7, #24]
 802428a:	2b00      	cmp	r3, #0
 802428c:	d109      	bne.n	80242a2 <dhcp_select+0x42>
 802428e:	4b69      	ldr	r3, [pc, #420]	@ (8024434 <dhcp_select+0x1d4>)
 8024290:	f240 1279 	movw	r2, #377	@ 0x179
 8024294:	496a      	ldr	r1, [pc, #424]	@ (8024440 <dhcp_select+0x1e0>)
 8024296:	4869      	ldr	r0, [pc, #420]	@ (802443c <dhcp_select+0x1dc>)
 8024298:	f005 f866 	bl	8029368 <iprintf>
 802429c:	f06f 0305 	mvn.w	r3, #5
 80242a0:	e0c3      	b.n	802442a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80242a2:	2101      	movs	r1, #1
 80242a4:	69b8      	ldr	r0, [r7, #24]
 80242a6:	f000 ffe3 	bl	8025270 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80242aa:	f107 030c 	add.w	r3, r7, #12
 80242ae:	2203      	movs	r2, #3
 80242b0:	69b9      	ldr	r1, [r7, #24]
 80242b2:	6878      	ldr	r0, [r7, #4]
 80242b4:	f001 fc98 	bl	8025be8 <dhcp_create_msg>
 80242b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80242ba:	697b      	ldr	r3, [r7, #20]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	f000 8085 	beq.w	80243cc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80242c2:	697b      	ldr	r3, [r7, #20]
 80242c4:	685b      	ldr	r3, [r3, #4]
 80242c6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80242c8:	89b8      	ldrh	r0, [r7, #12]
 80242ca:	693b      	ldr	r3, [r7, #16]
 80242cc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80242d0:	2302      	movs	r3, #2
 80242d2:	2239      	movs	r2, #57	@ 0x39
 80242d4:	f000 ffe6 	bl	80252a4 <dhcp_option>
 80242d8:	4603      	mov	r3, r0
 80242da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80242dc:	89b8      	ldrh	r0, [r7, #12]
 80242de:	693b      	ldr	r3, [r7, #16]
 80242e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80242e8:	461a      	mov	r2, r3
 80242ea:	f001 f835 	bl	8025358 <dhcp_option_short>
 80242ee:	4603      	mov	r3, r0
 80242f0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80242f2:	89b8      	ldrh	r0, [r7, #12]
 80242f4:	693b      	ldr	r3, [r7, #16]
 80242f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80242fa:	2304      	movs	r3, #4
 80242fc:	2232      	movs	r2, #50	@ 0x32
 80242fe:	f000 ffd1 	bl	80252a4 <dhcp_option>
 8024302:	4603      	mov	r3, r0
 8024304:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8024306:	89bc      	ldrh	r4, [r7, #12]
 8024308:	693b      	ldr	r3, [r7, #16]
 802430a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 802430e:	69bb      	ldr	r3, [r7, #24]
 8024310:	69db      	ldr	r3, [r3, #28]
 8024312:	4618      	mov	r0, r3
 8024314:	f7f7 fc69 	bl	801bbea <lwip_htonl>
 8024318:	4603      	mov	r3, r0
 802431a:	461a      	mov	r2, r3
 802431c:	4629      	mov	r1, r5
 802431e:	4620      	mov	r0, r4
 8024320:	f001 f84c 	bl	80253bc <dhcp_option_long>
 8024324:	4603      	mov	r3, r0
 8024326:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8024328:	89b8      	ldrh	r0, [r7, #12]
 802432a:	693b      	ldr	r3, [r7, #16]
 802432c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024330:	2304      	movs	r3, #4
 8024332:	2236      	movs	r2, #54	@ 0x36
 8024334:	f000 ffb6 	bl	80252a4 <dhcp_option>
 8024338:	4603      	mov	r3, r0
 802433a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802433c:	89bc      	ldrh	r4, [r7, #12]
 802433e:	693b      	ldr	r3, [r7, #16]
 8024340:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8024344:	69bb      	ldr	r3, [r7, #24]
 8024346:	699b      	ldr	r3, [r3, #24]
 8024348:	4618      	mov	r0, r3
 802434a:	f7f7 fc4e 	bl	801bbea <lwip_htonl>
 802434e:	4603      	mov	r3, r0
 8024350:	461a      	mov	r2, r3
 8024352:	4629      	mov	r1, r5
 8024354:	4620      	mov	r0, r4
 8024356:	f001 f831 	bl	80253bc <dhcp_option_long>
 802435a:	4603      	mov	r3, r0
 802435c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802435e:	89b8      	ldrh	r0, [r7, #12]
 8024360:	693b      	ldr	r3, [r7, #16]
 8024362:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024366:	2304      	movs	r3, #4
 8024368:	2237      	movs	r2, #55	@ 0x37
 802436a:	f000 ff9b 	bl	80252a4 <dhcp_option>
 802436e:	4603      	mov	r3, r0
 8024370:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024372:	2300      	movs	r3, #0
 8024374:	77bb      	strb	r3, [r7, #30]
 8024376:	e00e      	b.n	8024396 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8024378:	89b8      	ldrh	r0, [r7, #12]
 802437a:	693b      	ldr	r3, [r7, #16]
 802437c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024380:	7fbb      	ldrb	r3, [r7, #30]
 8024382:	4a30      	ldr	r2, [pc, #192]	@ (8024444 <dhcp_select+0x1e4>)
 8024384:	5cd3      	ldrb	r3, [r2, r3]
 8024386:	461a      	mov	r2, r3
 8024388:	f000 ffc0 	bl	802530c <dhcp_option_byte>
 802438c:	4603      	mov	r3, r0
 802438e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024390:	7fbb      	ldrb	r3, [r7, #30]
 8024392:	3301      	adds	r3, #1
 8024394:	77bb      	strb	r3, [r7, #30]
 8024396:	7fbb      	ldrb	r3, [r7, #30]
 8024398:	2b03      	cmp	r3, #3
 802439a:	d9ed      	bls.n	8024378 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802439c:	89b8      	ldrh	r0, [r7, #12]
 802439e:	693b      	ldr	r3, [r7, #16]
 80243a0:	33f0      	adds	r3, #240	@ 0xf0
 80243a2:	697a      	ldr	r2, [r7, #20]
 80243a4:	4619      	mov	r1, r3
 80243a6:	f001 fcf5 	bl	8025d94 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80243aa:	4b27      	ldr	r3, [pc, #156]	@ (8024448 <dhcp_select+0x1e8>)
 80243ac:	6818      	ldr	r0, [r3, #0]
 80243ae:	4b27      	ldr	r3, [pc, #156]	@ (802444c <dhcp_select+0x1ec>)
 80243b0:	9301      	str	r3, [sp, #4]
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	9300      	str	r3, [sp, #0]
 80243b6:	2343      	movs	r3, #67	@ 0x43
 80243b8:	4a25      	ldr	r2, [pc, #148]	@ (8024450 <dhcp_select+0x1f0>)
 80243ba:	6979      	ldr	r1, [r7, #20]
 80243bc:	f7ff fbda 	bl	8023b74 <udp_sendto_if_src>
 80243c0:	4603      	mov	r3, r0
 80243c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80243c4:	6978      	ldr	r0, [r7, #20]
 80243c6:	f7f9 faeb 	bl	801d9a0 <pbuf_free>
 80243ca:	e001      	b.n	80243d0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80243cc:	23ff      	movs	r3, #255	@ 0xff
 80243ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80243d0:	69bb      	ldr	r3, [r7, #24]
 80243d2:	799b      	ldrb	r3, [r3, #6]
 80243d4:	2bff      	cmp	r3, #255	@ 0xff
 80243d6:	d005      	beq.n	80243e4 <dhcp_select+0x184>
    dhcp->tries++;
 80243d8:	69bb      	ldr	r3, [r7, #24]
 80243da:	799b      	ldrb	r3, [r3, #6]
 80243dc:	3301      	adds	r3, #1
 80243de:	b2da      	uxtb	r2, r3
 80243e0:	69bb      	ldr	r3, [r7, #24]
 80243e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80243e4:	69bb      	ldr	r3, [r7, #24]
 80243e6:	799b      	ldrb	r3, [r3, #6]
 80243e8:	2b05      	cmp	r3, #5
 80243ea:	d80d      	bhi.n	8024408 <dhcp_select+0x1a8>
 80243ec:	69bb      	ldr	r3, [r7, #24]
 80243ee:	799b      	ldrb	r3, [r3, #6]
 80243f0:	461a      	mov	r2, r3
 80243f2:	2301      	movs	r3, #1
 80243f4:	4093      	lsls	r3, r2
 80243f6:	b29b      	uxth	r3, r3
 80243f8:	461a      	mov	r2, r3
 80243fa:	0152      	lsls	r2, r2, #5
 80243fc:	1ad2      	subs	r2, r2, r3
 80243fe:	0092      	lsls	r2, r2, #2
 8024400:	4413      	add	r3, r2
 8024402:	00db      	lsls	r3, r3, #3
 8024404:	b29b      	uxth	r3, r3
 8024406:	e001      	b.n	802440c <dhcp_select+0x1ac>
 8024408:	f64e 2360 	movw	r3, #60000	@ 0xea60
 802440c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802440e:	89fb      	ldrh	r3, [r7, #14]
 8024410:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8024414:	4a0f      	ldr	r2, [pc, #60]	@ (8024454 <dhcp_select+0x1f4>)
 8024416:	fb82 1203 	smull	r1, r2, r2, r3
 802441a:	1152      	asrs	r2, r2, #5
 802441c:	17db      	asrs	r3, r3, #31
 802441e:	1ad3      	subs	r3, r2, r3
 8024420:	b29a      	uxth	r2, r3
 8024422:	69bb      	ldr	r3, [r7, #24]
 8024424:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8024426:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802442a:	4618      	mov	r0, r3
 802442c:	3720      	adds	r7, #32
 802442e:	46bd      	mov	sp, r7
 8024430:	bdb0      	pop	{r4, r5, r7, pc}
 8024432:	bf00      	nop
 8024434:	0802fe60 	.word	0x0802fe60
 8024438:	0802ff0c 	.word	0x0802ff0c
 802443c:	0802fec0 	.word	0x0802fec0
 8024440:	0802ff28 	.word	0x0802ff28
 8024444:	2400006c 	.word	0x2400006c
 8024448:	2400b520 	.word	0x2400b520
 802444c:	08030ef4 	.word	0x08030ef4
 8024450:	08030ef8 	.word	0x08030ef8
 8024454:	10624dd3 	.word	0x10624dd3

08024458 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8024458:	b580      	push	{r7, lr}
 802445a:	b082      	sub	sp, #8
 802445c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 802445e:	4b27      	ldr	r3, [pc, #156]	@ (80244fc <dhcp_coarse_tmr+0xa4>)
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	607b      	str	r3, [r7, #4]
 8024464:	e042      	b.n	80244ec <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802446a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 802446c:	683b      	ldr	r3, [r7, #0]
 802446e:	2b00      	cmp	r3, #0
 8024470:	d039      	beq.n	80244e6 <dhcp_coarse_tmr+0x8e>
 8024472:	683b      	ldr	r3, [r7, #0]
 8024474:	795b      	ldrb	r3, [r3, #5]
 8024476:	2b00      	cmp	r3, #0
 8024478:	d035      	beq.n	80244e6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 802447a:	683b      	ldr	r3, [r7, #0]
 802447c:	8a9b      	ldrh	r3, [r3, #20]
 802447e:	2b00      	cmp	r3, #0
 8024480:	d012      	beq.n	80244a8 <dhcp_coarse_tmr+0x50>
 8024482:	683b      	ldr	r3, [r7, #0]
 8024484:	8a5b      	ldrh	r3, [r3, #18]
 8024486:	3301      	adds	r3, #1
 8024488:	b29a      	uxth	r2, r3
 802448a:	683b      	ldr	r3, [r7, #0]
 802448c:	825a      	strh	r2, [r3, #18]
 802448e:	683b      	ldr	r3, [r7, #0]
 8024490:	8a5a      	ldrh	r2, [r3, #18]
 8024492:	683b      	ldr	r3, [r7, #0]
 8024494:	8a9b      	ldrh	r3, [r3, #20]
 8024496:	429a      	cmp	r2, r3
 8024498:	d106      	bne.n	80244a8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 802449a:	6878      	ldr	r0, [r7, #4]
 802449c:	f000 fe4e 	bl	802513c <dhcp_release_and_stop>
        dhcp_start(netif);
 80244a0:	6878      	ldr	r0, [r7, #4]
 80244a2:	f000 f98b 	bl	80247bc <dhcp_start>
 80244a6:	e01e      	b.n	80244e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80244a8:	683b      	ldr	r3, [r7, #0]
 80244aa:	8a1b      	ldrh	r3, [r3, #16]
 80244ac:	2b00      	cmp	r3, #0
 80244ae:	d00b      	beq.n	80244c8 <dhcp_coarse_tmr+0x70>
 80244b0:	683b      	ldr	r3, [r7, #0]
 80244b2:	8a1b      	ldrh	r3, [r3, #16]
 80244b4:	1e5a      	subs	r2, r3, #1
 80244b6:	b291      	uxth	r1, r2
 80244b8:	683a      	ldr	r2, [r7, #0]
 80244ba:	8211      	strh	r1, [r2, #16]
 80244bc:	2b01      	cmp	r3, #1
 80244be:	d103      	bne.n	80244c8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80244c0:	6878      	ldr	r0, [r7, #4]
 80244c2:	f000 f8c7 	bl	8024654 <dhcp_t2_timeout>
 80244c6:	e00e      	b.n	80244e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80244c8:	683b      	ldr	r3, [r7, #0]
 80244ca:	89db      	ldrh	r3, [r3, #14]
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	d00a      	beq.n	80244e6 <dhcp_coarse_tmr+0x8e>
 80244d0:	683b      	ldr	r3, [r7, #0]
 80244d2:	89db      	ldrh	r3, [r3, #14]
 80244d4:	1e5a      	subs	r2, r3, #1
 80244d6:	b291      	uxth	r1, r2
 80244d8:	683a      	ldr	r2, [r7, #0]
 80244da:	81d1      	strh	r1, [r2, #14]
 80244dc:	2b01      	cmp	r3, #1
 80244de:	d102      	bne.n	80244e6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80244e0:	6878      	ldr	r0, [r7, #4]
 80244e2:	f000 f888 	bl	80245f6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	607b      	str	r3, [r7, #4]
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d1b9      	bne.n	8024466 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80244f2:	bf00      	nop
 80244f4:	bf00      	nop
 80244f6:	3708      	adds	r7, #8
 80244f8:	46bd      	mov	sp, r7
 80244fa:	bd80      	pop	{r7, pc}
 80244fc:	2400b480 	.word	0x2400b480

08024500 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8024500:	b580      	push	{r7, lr}
 8024502:	b082      	sub	sp, #8
 8024504:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8024506:	4b16      	ldr	r3, [pc, #88]	@ (8024560 <dhcp_fine_tmr+0x60>)
 8024508:	681b      	ldr	r3, [r3, #0]
 802450a:	607b      	str	r3, [r7, #4]
 802450c:	e020      	b.n	8024550 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024512:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8024514:	683b      	ldr	r3, [r7, #0]
 8024516:	2b00      	cmp	r3, #0
 8024518:	d017      	beq.n	802454a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 802451a:	683b      	ldr	r3, [r7, #0]
 802451c:	891b      	ldrh	r3, [r3, #8]
 802451e:	2b01      	cmp	r3, #1
 8024520:	d906      	bls.n	8024530 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8024522:	683b      	ldr	r3, [r7, #0]
 8024524:	891b      	ldrh	r3, [r3, #8]
 8024526:	3b01      	subs	r3, #1
 8024528:	b29a      	uxth	r2, r3
 802452a:	683b      	ldr	r3, [r7, #0]
 802452c:	811a      	strh	r2, [r3, #8]
 802452e:	e00c      	b.n	802454a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8024530:	683b      	ldr	r3, [r7, #0]
 8024532:	891b      	ldrh	r3, [r3, #8]
 8024534:	2b01      	cmp	r3, #1
 8024536:	d108      	bne.n	802454a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8024538:	683b      	ldr	r3, [r7, #0]
 802453a:	891b      	ldrh	r3, [r3, #8]
 802453c:	3b01      	subs	r3, #1
 802453e:	b29a      	uxth	r2, r3
 8024540:	683b      	ldr	r3, [r7, #0]
 8024542:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8024544:	6878      	ldr	r0, [r7, #4]
 8024546:	f000 f80d 	bl	8024564 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	607b      	str	r3, [r7, #4]
 8024550:	687b      	ldr	r3, [r7, #4]
 8024552:	2b00      	cmp	r3, #0
 8024554:	d1db      	bne.n	802450e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8024556:	bf00      	nop
 8024558:	bf00      	nop
 802455a:	3708      	adds	r7, #8
 802455c:	46bd      	mov	sp, r7
 802455e:	bd80      	pop	{r7, pc}
 8024560:	2400b480 	.word	0x2400b480

08024564 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8024564:	b580      	push	{r7, lr}
 8024566:	b084      	sub	sp, #16
 8024568:	af00      	add	r7, sp, #0
 802456a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024570:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8024572:	68fb      	ldr	r3, [r7, #12]
 8024574:	795b      	ldrb	r3, [r3, #5]
 8024576:	2b0c      	cmp	r3, #12
 8024578:	d003      	beq.n	8024582 <dhcp_timeout+0x1e>
 802457a:	68fb      	ldr	r3, [r7, #12]
 802457c:	795b      	ldrb	r3, [r3, #5]
 802457e:	2b06      	cmp	r3, #6
 8024580:	d103      	bne.n	802458a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8024582:	6878      	ldr	r0, [r7, #4]
 8024584:	f000 fa76 	bl	8024a74 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8024588:	e031      	b.n	80245ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 802458a:	68fb      	ldr	r3, [r7, #12]
 802458c:	795b      	ldrb	r3, [r3, #5]
 802458e:	2b01      	cmp	r3, #1
 8024590:	d10e      	bne.n	80245b0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8024592:	68fb      	ldr	r3, [r7, #12]
 8024594:	799b      	ldrb	r3, [r3, #6]
 8024596:	2b05      	cmp	r3, #5
 8024598:	d803      	bhi.n	80245a2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 802459a:	6878      	ldr	r0, [r7, #4]
 802459c:	f7ff fe60 	bl	8024260 <dhcp_select>
}
 80245a0:	e025      	b.n	80245ee <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80245a2:	6878      	ldr	r0, [r7, #4]
 80245a4:	f000 fdca 	bl	802513c <dhcp_release_and_stop>
      dhcp_start(netif);
 80245a8:	6878      	ldr	r0, [r7, #4]
 80245aa:	f000 f907 	bl	80247bc <dhcp_start>
}
 80245ae:	e01e      	b.n	80245ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80245b0:	68fb      	ldr	r3, [r7, #12]
 80245b2:	795b      	ldrb	r3, [r3, #5]
 80245b4:	2b08      	cmp	r3, #8
 80245b6:	d10b      	bne.n	80245d0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80245b8:	68fb      	ldr	r3, [r7, #12]
 80245ba:	799b      	ldrb	r3, [r3, #6]
 80245bc:	2b01      	cmp	r3, #1
 80245be:	d803      	bhi.n	80245c8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80245c0:	6878      	ldr	r0, [r7, #4]
 80245c2:	f7ff fdf3 	bl	80241ac <dhcp_check>
}
 80245c6:	e012      	b.n	80245ee <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80245c8:	6878      	ldr	r0, [r7, #4]
 80245ca:	f000 faf5 	bl	8024bb8 <dhcp_bind>
}
 80245ce:	e00e      	b.n	80245ee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80245d0:	68fb      	ldr	r3, [r7, #12]
 80245d2:	795b      	ldrb	r3, [r3, #5]
 80245d4:	2b03      	cmp	r3, #3
 80245d6:	d10a      	bne.n	80245ee <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80245d8:	68fb      	ldr	r3, [r7, #12]
 80245da:	799b      	ldrb	r3, [r3, #6]
 80245dc:	2b01      	cmp	r3, #1
 80245de:	d803      	bhi.n	80245e8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80245e0:	6878      	ldr	r0, [r7, #4]
 80245e2:	f000 fcf7 	bl	8024fd4 <dhcp_reboot>
}
 80245e6:	e002      	b.n	80245ee <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80245e8:	6878      	ldr	r0, [r7, #4]
 80245ea:	f000 fa43 	bl	8024a74 <dhcp_discover>
}
 80245ee:	bf00      	nop
 80245f0:	3710      	adds	r7, #16
 80245f2:	46bd      	mov	sp, r7
 80245f4:	bd80      	pop	{r7, pc}

080245f6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80245f6:	b580      	push	{r7, lr}
 80245f8:	b084      	sub	sp, #16
 80245fa:	af00      	add	r7, sp, #0
 80245fc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024602:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8024604:	68fb      	ldr	r3, [r7, #12]
 8024606:	795b      	ldrb	r3, [r3, #5]
 8024608:	2b01      	cmp	r3, #1
 802460a:	d007      	beq.n	802461c <dhcp_t1_timeout+0x26>
 802460c:	68fb      	ldr	r3, [r7, #12]
 802460e:	795b      	ldrb	r3, [r3, #5]
 8024610:	2b0a      	cmp	r3, #10
 8024612:	d003      	beq.n	802461c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8024614:	68fb      	ldr	r3, [r7, #12]
 8024616:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8024618:	2b05      	cmp	r3, #5
 802461a:	d117      	bne.n	802464c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 802461c:	6878      	ldr	r0, [r7, #4]
 802461e:	f000 fba5 	bl	8024d6c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8024622:	68fb      	ldr	r3, [r7, #12]
 8024624:	899b      	ldrh	r3, [r3, #12]
 8024626:	461a      	mov	r2, r3
 8024628:	68fb      	ldr	r3, [r7, #12]
 802462a:	8a5b      	ldrh	r3, [r3, #18]
 802462c:	1ad3      	subs	r3, r2, r3
 802462e:	2b01      	cmp	r3, #1
 8024630:	dd0c      	ble.n	802464c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8024632:	68fb      	ldr	r3, [r7, #12]
 8024634:	899b      	ldrh	r3, [r3, #12]
 8024636:	461a      	mov	r2, r3
 8024638:	68fb      	ldr	r3, [r7, #12]
 802463a:	8a5b      	ldrh	r3, [r3, #18]
 802463c:	1ad3      	subs	r3, r2, r3
 802463e:	2b00      	cmp	r3, #0
 8024640:	da00      	bge.n	8024644 <dhcp_t1_timeout+0x4e>
 8024642:	3301      	adds	r3, #1
 8024644:	105b      	asrs	r3, r3, #1
 8024646:	b29a      	uxth	r2, r3
 8024648:	68fb      	ldr	r3, [r7, #12]
 802464a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 802464c:	bf00      	nop
 802464e:	3710      	adds	r7, #16
 8024650:	46bd      	mov	sp, r7
 8024652:	bd80      	pop	{r7, pc}

08024654 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8024654:	b580      	push	{r7, lr}
 8024656:	b084      	sub	sp, #16
 8024658:	af00      	add	r7, sp, #0
 802465a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024660:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8024662:	68fb      	ldr	r3, [r7, #12]
 8024664:	795b      	ldrb	r3, [r3, #5]
 8024666:	2b01      	cmp	r3, #1
 8024668:	d00b      	beq.n	8024682 <dhcp_t2_timeout+0x2e>
 802466a:	68fb      	ldr	r3, [r7, #12]
 802466c:	795b      	ldrb	r3, [r3, #5]
 802466e:	2b0a      	cmp	r3, #10
 8024670:	d007      	beq.n	8024682 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8024672:	68fb      	ldr	r3, [r7, #12]
 8024674:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8024676:	2b05      	cmp	r3, #5
 8024678:	d003      	beq.n	8024682 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802467a:	68fb      	ldr	r3, [r7, #12]
 802467c:	795b      	ldrb	r3, [r3, #5]
 802467e:	2b04      	cmp	r3, #4
 8024680:	d117      	bne.n	80246b2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8024682:	6878      	ldr	r0, [r7, #4]
 8024684:	f000 fc0c 	bl	8024ea0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8024688:	68fb      	ldr	r3, [r7, #12]
 802468a:	8a9b      	ldrh	r3, [r3, #20]
 802468c:	461a      	mov	r2, r3
 802468e:	68fb      	ldr	r3, [r7, #12]
 8024690:	8a5b      	ldrh	r3, [r3, #18]
 8024692:	1ad3      	subs	r3, r2, r3
 8024694:	2b01      	cmp	r3, #1
 8024696:	dd0c      	ble.n	80246b2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8024698:	68fb      	ldr	r3, [r7, #12]
 802469a:	8a9b      	ldrh	r3, [r3, #20]
 802469c:	461a      	mov	r2, r3
 802469e:	68fb      	ldr	r3, [r7, #12]
 80246a0:	8a5b      	ldrh	r3, [r3, #18]
 80246a2:	1ad3      	subs	r3, r2, r3
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	da00      	bge.n	80246aa <dhcp_t2_timeout+0x56>
 80246a8:	3301      	adds	r3, #1
 80246aa:	105b      	asrs	r3, r3, #1
 80246ac:	b29a      	uxth	r2, r3
 80246ae:	68fb      	ldr	r3, [r7, #12]
 80246b0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80246b2:	bf00      	nop
 80246b4:	3710      	adds	r7, #16
 80246b6:	46bd      	mov	sp, r7
 80246b8:	bd80      	pop	{r7, pc}
	...

080246bc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80246bc:	b580      	push	{r7, lr}
 80246be:	b086      	sub	sp, #24
 80246c0:	af00      	add	r7, sp, #0
 80246c2:	6078      	str	r0, [r7, #4]
 80246c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80246ca:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80246cc:	693b      	ldr	r3, [r7, #16]
 80246ce:	2200      	movs	r2, #0
 80246d0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80246d2:	693b      	ldr	r3, [r7, #16]
 80246d4:	2200      	movs	r2, #0
 80246d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80246d8:	4b36      	ldr	r3, [pc, #216]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 80246da:	78db      	ldrb	r3, [r3, #3]
 80246dc:	2b00      	cmp	r3, #0
 80246de:	d003      	beq.n	80246e8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80246e0:	4b35      	ldr	r3, [pc, #212]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 80246e2:	68da      	ldr	r2, [r3, #12]
 80246e4:	693b      	ldr	r3, [r7, #16]
 80246e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80246e8:	4b32      	ldr	r3, [pc, #200]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 80246ea:	791b      	ldrb	r3, [r3, #4]
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	d004      	beq.n	80246fa <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80246f0:	4b31      	ldr	r3, [pc, #196]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 80246f2:	691a      	ldr	r2, [r3, #16]
 80246f4:	693b      	ldr	r3, [r7, #16]
 80246f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80246f8:	e004      	b.n	8024704 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80246fa:	693b      	ldr	r3, [r7, #16]
 80246fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80246fe:	085a      	lsrs	r2, r3, #1
 8024700:	693b      	ldr	r3, [r7, #16]
 8024702:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8024704:	4b2b      	ldr	r3, [pc, #172]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 8024706:	795b      	ldrb	r3, [r3, #5]
 8024708:	2b00      	cmp	r3, #0
 802470a:	d004      	beq.n	8024716 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 802470c:	4b2a      	ldr	r3, [pc, #168]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 802470e:	695a      	ldr	r2, [r3, #20]
 8024710:	693b      	ldr	r3, [r7, #16]
 8024712:	631a      	str	r2, [r3, #48]	@ 0x30
 8024714:	e007      	b.n	8024726 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8024716:	693b      	ldr	r3, [r7, #16]
 8024718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802471a:	4613      	mov	r3, r2
 802471c:	00db      	lsls	r3, r3, #3
 802471e:	1a9b      	subs	r3, r3, r2
 8024720:	08da      	lsrs	r2, r3, #3
 8024722:	693b      	ldr	r3, [r7, #16]
 8024724:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8024726:	683b      	ldr	r3, [r7, #0]
 8024728:	691a      	ldr	r2, [r3, #16]
 802472a:	693b      	ldr	r3, [r7, #16]
 802472c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 802472e:	4b21      	ldr	r3, [pc, #132]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 8024730:	799b      	ldrb	r3, [r3, #6]
 8024732:	2b00      	cmp	r3, #0
 8024734:	d00b      	beq.n	802474e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8024736:	4b20      	ldr	r3, [pc, #128]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 8024738:	699b      	ldr	r3, [r3, #24]
 802473a:	4618      	mov	r0, r3
 802473c:	f7f7 fa55 	bl	801bbea <lwip_htonl>
 8024740:	4602      	mov	r2, r0
 8024742:	693b      	ldr	r3, [r7, #16]
 8024744:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8024746:	693b      	ldr	r3, [r7, #16]
 8024748:	2201      	movs	r2, #1
 802474a:	71da      	strb	r2, [r3, #7]
 802474c:	e002      	b.n	8024754 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 802474e:	693b      	ldr	r3, [r7, #16]
 8024750:	2200      	movs	r2, #0
 8024752:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8024754:	4b17      	ldr	r3, [pc, #92]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 8024756:	79db      	ldrb	r3, [r3, #7]
 8024758:	2b00      	cmp	r3, #0
 802475a:	d007      	beq.n	802476c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 802475c:	4b16      	ldr	r3, [pc, #88]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 802475e:	69db      	ldr	r3, [r3, #28]
 8024760:	4618      	mov	r0, r3
 8024762:	f7f7 fa42 	bl	801bbea <lwip_htonl>
 8024766:	4602      	mov	r2, r0
 8024768:	693b      	ldr	r3, [r7, #16]
 802476a:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 802476c:	2300      	movs	r3, #0
 802476e:	75fb      	strb	r3, [r7, #23]
 8024770:	e013      	b.n	802479a <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8024772:	7dfb      	ldrb	r3, [r7, #23]
 8024774:	3308      	adds	r3, #8
 8024776:	4a10      	ldr	r2, [pc, #64]	@ (80247b8 <dhcp_handle_ack+0xfc>)
 8024778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802477c:	4618      	mov	r0, r3
 802477e:	f7f7 fa34 	bl	801bbea <lwip_htonl>
 8024782:	4603      	mov	r3, r0
 8024784:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8024786:	f107 020c 	add.w	r2, r7, #12
 802478a:	7dfb      	ldrb	r3, [r7, #23]
 802478c:	4611      	mov	r1, r2
 802478e:	4618      	mov	r0, r3
 8024790:	f7f7 fa4c 	bl	801bc2c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8024794:	7dfb      	ldrb	r3, [r7, #23]
 8024796:	3301      	adds	r3, #1
 8024798:	75fb      	strb	r3, [r7, #23]
 802479a:	7dfb      	ldrb	r3, [r7, #23]
 802479c:	2b01      	cmp	r3, #1
 802479e:	d805      	bhi.n	80247ac <dhcp_handle_ack+0xf0>
 80247a0:	7dfb      	ldrb	r3, [r7, #23]
 80247a2:	3308      	adds	r3, #8
 80247a4:	4a03      	ldr	r2, [pc, #12]	@ (80247b4 <dhcp_handle_ack+0xf8>)
 80247a6:	5cd3      	ldrb	r3, [r2, r3]
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	d1e2      	bne.n	8024772 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80247ac:	bf00      	nop
 80247ae:	3718      	adds	r7, #24
 80247b0:	46bd      	mov	sp, r7
 80247b2:	bd80      	pop	{r7, pc}
 80247b4:	2400b514 	.word	0x2400b514
 80247b8:	2400b4ec 	.word	0x2400b4ec

080247bc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80247bc:	b580      	push	{r7, lr}
 80247be:	b084      	sub	sp, #16
 80247c0:	af00      	add	r7, sp, #0
 80247c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	d109      	bne.n	80247de <dhcp_start+0x22>
 80247ca:	4b37      	ldr	r3, [pc, #220]	@ (80248a8 <dhcp_start+0xec>)
 80247cc:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80247d0:	4936      	ldr	r1, [pc, #216]	@ (80248ac <dhcp_start+0xf0>)
 80247d2:	4837      	ldr	r0, [pc, #220]	@ (80248b0 <dhcp_start+0xf4>)
 80247d4:	f004 fdc8 	bl	8029368 <iprintf>
 80247d8:	f06f 030f 	mvn.w	r3, #15
 80247dc:	e060      	b.n	80248a0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80247e4:	f003 0301 	and.w	r3, r3, #1
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d109      	bne.n	8024800 <dhcp_start+0x44>
 80247ec:	4b2e      	ldr	r3, [pc, #184]	@ (80248a8 <dhcp_start+0xec>)
 80247ee:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80247f2:	4930      	ldr	r1, [pc, #192]	@ (80248b4 <dhcp_start+0xf8>)
 80247f4:	482e      	ldr	r0, [pc, #184]	@ (80248b0 <dhcp_start+0xf4>)
 80247f6:	f004 fdb7 	bl	8029368 <iprintf>
 80247fa:	f06f 030f 	mvn.w	r3, #15
 80247fe:	e04f      	b.n	80248a0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024804:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802480a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 802480e:	d202      	bcs.n	8024816 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8024810:	f04f 33ff 	mov.w	r3, #4294967295
 8024814:	e044      	b.n	80248a0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	2b00      	cmp	r3, #0
 802481a:	d10d      	bne.n	8024838 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 802481c:	2034      	movs	r0, #52	@ 0x34
 802481e:	f7f8 f85d 	bl	801c8dc <mem_malloc>
 8024822:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8024824:	68fb      	ldr	r3, [r7, #12]
 8024826:	2b00      	cmp	r3, #0
 8024828:	d102      	bne.n	8024830 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 802482a:	f04f 33ff 	mov.w	r3, #4294967295
 802482e:	e037      	b.n	80248a0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	68fa      	ldr	r2, [r7, #12]
 8024834:	625a      	str	r2, [r3, #36]	@ 0x24
 8024836:	e005      	b.n	8024844 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8024838:	68fb      	ldr	r3, [r7, #12]
 802483a:	791b      	ldrb	r3, [r3, #4]
 802483c:	2b00      	cmp	r3, #0
 802483e:	d001      	beq.n	8024844 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8024840:	f7ff fc70 	bl	8024124 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8024844:	2234      	movs	r2, #52	@ 0x34
 8024846:	2100      	movs	r1, #0
 8024848:	68f8      	ldr	r0, [r7, #12]
 802484a:	f004 ff3b 	bl	80296c4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 802484e:	f7ff fc17 	bl	8024080 <dhcp_inc_pcb_refcount>
 8024852:	4603      	mov	r3, r0
 8024854:	2b00      	cmp	r3, #0
 8024856:	d002      	beq.n	802485e <dhcp_start+0xa2>
    return ERR_MEM;
 8024858:	f04f 33ff 	mov.w	r3, #4294967295
 802485c:	e020      	b.n	80248a0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 802485e:	68fb      	ldr	r3, [r7, #12]
 8024860:	2201      	movs	r2, #1
 8024862:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802486a:	f003 0304 	and.w	r3, r3, #4
 802486e:	2b00      	cmp	r3, #0
 8024870:	d105      	bne.n	802487e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8024872:	2102      	movs	r1, #2
 8024874:	68f8      	ldr	r0, [r7, #12]
 8024876:	f000 fcfb 	bl	8025270 <dhcp_set_state>
    return ERR_OK;
 802487a:	2300      	movs	r3, #0
 802487c:	e010      	b.n	80248a0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 802487e:	6878      	ldr	r0, [r7, #4]
 8024880:	f000 f8f8 	bl	8024a74 <dhcp_discover>
 8024884:	4603      	mov	r3, r0
 8024886:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8024888:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802488c:	2b00      	cmp	r3, #0
 802488e:	d005      	beq.n	802489c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8024890:	6878      	ldr	r0, [r7, #4]
 8024892:	f000 fc53 	bl	802513c <dhcp_release_and_stop>
    return ERR_MEM;
 8024896:	f04f 33ff 	mov.w	r3, #4294967295
 802489a:	e001      	b.n	80248a0 <dhcp_start+0xe4>
  }
  return result;
 802489c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80248a0:	4618      	mov	r0, r3
 80248a2:	3710      	adds	r7, #16
 80248a4:	46bd      	mov	sp, r7
 80248a6:	bd80      	pop	{r7, pc}
 80248a8:	0802fe60 	.word	0x0802fe60
 80248ac:	0802ff44 	.word	0x0802ff44
 80248b0:	0802fec0 	.word	0x0802fec0
 80248b4:	0802ff88 	.word	0x0802ff88

080248b8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80248b8:	b580      	push	{r7, lr}
 80248ba:	b084      	sub	sp, #16
 80248bc:	af00      	add	r7, sp, #0
 80248be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80248c4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d025      	beq.n	8024918 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	795b      	ldrb	r3, [r3, #5]
 80248d0:	2b0a      	cmp	r3, #10
 80248d2:	d008      	beq.n	80248e6 <dhcp_network_changed+0x2e>
 80248d4:	2b0a      	cmp	r3, #10
 80248d6:	dc0d      	bgt.n	80248f4 <dhcp_network_changed+0x3c>
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d01f      	beq.n	802491c <dhcp_network_changed+0x64>
 80248dc:	2b00      	cmp	r3, #0
 80248de:	db09      	blt.n	80248f4 <dhcp_network_changed+0x3c>
 80248e0:	3b03      	subs	r3, #3
 80248e2:	2b02      	cmp	r3, #2
 80248e4:	d806      	bhi.n	80248f4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80248e6:	68fb      	ldr	r3, [r7, #12]
 80248e8:	2200      	movs	r2, #0
 80248ea:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80248ec:	6878      	ldr	r0, [r7, #4]
 80248ee:	f000 fb71 	bl	8024fd4 <dhcp_reboot>
      break;
 80248f2:	e014      	b.n	802491e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80248f4:	68fb      	ldr	r3, [r7, #12]
 80248f6:	795b      	ldrb	r3, [r3, #5]
 80248f8:	2b0c      	cmp	r3, #12
 80248fa:	d906      	bls.n	802490a <dhcp_network_changed+0x52>
 80248fc:	4b09      	ldr	r3, [pc, #36]	@ (8024924 <dhcp_network_changed+0x6c>)
 80248fe:	f240 326d 	movw	r2, #877	@ 0x36d
 8024902:	4909      	ldr	r1, [pc, #36]	@ (8024928 <dhcp_network_changed+0x70>)
 8024904:	4809      	ldr	r0, [pc, #36]	@ (802492c <dhcp_network_changed+0x74>)
 8024906:	f004 fd2f 	bl	8029368 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 802490a:	68fb      	ldr	r3, [r7, #12]
 802490c:	2200      	movs	r2, #0
 802490e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8024910:	6878      	ldr	r0, [r7, #4]
 8024912:	f000 f8af 	bl	8024a74 <dhcp_discover>
      break;
 8024916:	e002      	b.n	802491e <dhcp_network_changed+0x66>
    return;
 8024918:	bf00      	nop
 802491a:	e000      	b.n	802491e <dhcp_network_changed+0x66>
      break;
 802491c:	bf00      	nop
  }
}
 802491e:	3710      	adds	r7, #16
 8024920:	46bd      	mov	sp, r7
 8024922:	bd80      	pop	{r7, pc}
 8024924:	0802fe60 	.word	0x0802fe60
 8024928:	0802ffac 	.word	0x0802ffac
 802492c:	0802fec0 	.word	0x0802fec0

08024930 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8024930:	b580      	push	{r7, lr}
 8024932:	b084      	sub	sp, #16
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
 8024938:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802493a:	687b      	ldr	r3, [r7, #4]
 802493c:	2b00      	cmp	r3, #0
 802493e:	d107      	bne.n	8024950 <dhcp_arp_reply+0x20>
 8024940:	4b0e      	ldr	r3, [pc, #56]	@ (802497c <dhcp_arp_reply+0x4c>)
 8024942:	f240 328b 	movw	r2, #907	@ 0x38b
 8024946:	490e      	ldr	r1, [pc, #56]	@ (8024980 <dhcp_arp_reply+0x50>)
 8024948:	480e      	ldr	r0, [pc, #56]	@ (8024984 <dhcp_arp_reply+0x54>)
 802494a:	f004 fd0d 	bl	8029368 <iprintf>
 802494e:	e012      	b.n	8024976 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8024950:	687b      	ldr	r3, [r7, #4]
 8024952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024954:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	2b00      	cmp	r3, #0
 802495a:	d00c      	beq.n	8024976 <dhcp_arp_reply+0x46>
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	795b      	ldrb	r3, [r3, #5]
 8024960:	2b08      	cmp	r3, #8
 8024962:	d108      	bne.n	8024976 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8024964:	683b      	ldr	r3, [r7, #0]
 8024966:	681a      	ldr	r2, [r3, #0]
 8024968:	68fb      	ldr	r3, [r7, #12]
 802496a:	69db      	ldr	r3, [r3, #28]
 802496c:	429a      	cmp	r2, r3
 802496e:	d102      	bne.n	8024976 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8024970:	6878      	ldr	r0, [r7, #4]
 8024972:	f000 f809 	bl	8024988 <dhcp_decline>
    }
  }
}
 8024976:	3710      	adds	r7, #16
 8024978:	46bd      	mov	sp, r7
 802497a:	bd80      	pop	{r7, pc}
 802497c:	0802fe60 	.word	0x0802fe60
 8024980:	0802ff44 	.word	0x0802ff44
 8024984:	0802fec0 	.word	0x0802fec0

08024988 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8024988:	b5b0      	push	{r4, r5, r7, lr}
 802498a:	b08a      	sub	sp, #40	@ 0x28
 802498c:	af02      	add	r7, sp, #8
 802498e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024994:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8024996:	210c      	movs	r1, #12
 8024998:	69b8      	ldr	r0, [r7, #24]
 802499a:	f000 fc69 	bl	8025270 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 802499e:	f107 030c 	add.w	r3, r7, #12
 80249a2:	2204      	movs	r2, #4
 80249a4:	69b9      	ldr	r1, [r7, #24]
 80249a6:	6878      	ldr	r0, [r7, #4]
 80249a8:	f001 f91e 	bl	8025be8 <dhcp_create_msg>
 80249ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80249ae:	697b      	ldr	r3, [r7, #20]
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d035      	beq.n	8024a20 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80249b4:	697b      	ldr	r3, [r7, #20]
 80249b6:	685b      	ldr	r3, [r3, #4]
 80249b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80249ba:	89b8      	ldrh	r0, [r7, #12]
 80249bc:	693b      	ldr	r3, [r7, #16]
 80249be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80249c2:	2304      	movs	r3, #4
 80249c4:	2232      	movs	r2, #50	@ 0x32
 80249c6:	f000 fc6d 	bl	80252a4 <dhcp_option>
 80249ca:	4603      	mov	r3, r0
 80249cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80249ce:	89bc      	ldrh	r4, [r7, #12]
 80249d0:	693b      	ldr	r3, [r7, #16]
 80249d2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80249d6:	69bb      	ldr	r3, [r7, #24]
 80249d8:	69db      	ldr	r3, [r3, #28]
 80249da:	4618      	mov	r0, r3
 80249dc:	f7f7 f905 	bl	801bbea <lwip_htonl>
 80249e0:	4603      	mov	r3, r0
 80249e2:	461a      	mov	r2, r3
 80249e4:	4629      	mov	r1, r5
 80249e6:	4620      	mov	r0, r4
 80249e8:	f000 fce8 	bl	80253bc <dhcp_option_long>
 80249ec:	4603      	mov	r3, r0
 80249ee:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80249f0:	89b8      	ldrh	r0, [r7, #12]
 80249f2:	693b      	ldr	r3, [r7, #16]
 80249f4:	33f0      	adds	r3, #240	@ 0xf0
 80249f6:	697a      	ldr	r2, [r7, #20]
 80249f8:	4619      	mov	r1, r3
 80249fa:	f001 f9cb 	bl	8025d94 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80249fe:	4b19      	ldr	r3, [pc, #100]	@ (8024a64 <dhcp_decline+0xdc>)
 8024a00:	6818      	ldr	r0, [r3, #0]
 8024a02:	4b19      	ldr	r3, [pc, #100]	@ (8024a68 <dhcp_decline+0xe0>)
 8024a04:	9301      	str	r3, [sp, #4]
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	9300      	str	r3, [sp, #0]
 8024a0a:	2343      	movs	r3, #67	@ 0x43
 8024a0c:	4a17      	ldr	r2, [pc, #92]	@ (8024a6c <dhcp_decline+0xe4>)
 8024a0e:	6979      	ldr	r1, [r7, #20]
 8024a10:	f7ff f8b0 	bl	8023b74 <udp_sendto_if_src>
 8024a14:	4603      	mov	r3, r0
 8024a16:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8024a18:	6978      	ldr	r0, [r7, #20]
 8024a1a:	f7f8 ffc1 	bl	801d9a0 <pbuf_free>
 8024a1e:	e001      	b.n	8024a24 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8024a20:	23ff      	movs	r3, #255	@ 0xff
 8024a22:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8024a24:	69bb      	ldr	r3, [r7, #24]
 8024a26:	799b      	ldrb	r3, [r3, #6]
 8024a28:	2bff      	cmp	r3, #255	@ 0xff
 8024a2a:	d005      	beq.n	8024a38 <dhcp_decline+0xb0>
    dhcp->tries++;
 8024a2c:	69bb      	ldr	r3, [r7, #24]
 8024a2e:	799b      	ldrb	r3, [r3, #6]
 8024a30:	3301      	adds	r3, #1
 8024a32:	b2da      	uxtb	r2, r3
 8024a34:	69bb      	ldr	r3, [r7, #24]
 8024a36:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8024a38:	f242 7310 	movw	r3, #10000	@ 0x2710
 8024a3c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8024a3e:	89fb      	ldrh	r3, [r7, #14]
 8024a40:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8024a44:	4a0a      	ldr	r2, [pc, #40]	@ (8024a70 <dhcp_decline+0xe8>)
 8024a46:	fb82 1203 	smull	r1, r2, r2, r3
 8024a4a:	1152      	asrs	r2, r2, #5
 8024a4c:	17db      	asrs	r3, r3, #31
 8024a4e:	1ad3      	subs	r3, r2, r3
 8024a50:	b29a      	uxth	r2, r3
 8024a52:	69bb      	ldr	r3, [r7, #24]
 8024a54:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8024a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024a5a:	4618      	mov	r0, r3
 8024a5c:	3720      	adds	r7, #32
 8024a5e:	46bd      	mov	sp, r7
 8024a60:	bdb0      	pop	{r4, r5, r7, pc}
 8024a62:	bf00      	nop
 8024a64:	2400b520 	.word	0x2400b520
 8024a68:	08030ef4 	.word	0x08030ef4
 8024a6c:	08030ef8 	.word	0x08030ef8
 8024a70:	10624dd3 	.word	0x10624dd3

08024a74 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8024a74:	b580      	push	{r7, lr}
 8024a76:	b08a      	sub	sp, #40	@ 0x28
 8024a78:	af02      	add	r7, sp, #8
 8024a7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024a7c:	687b      	ldr	r3, [r7, #4]
 8024a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024a80:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8024a82:	2300      	movs	r3, #0
 8024a84:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8024a86:	69bb      	ldr	r3, [r7, #24]
 8024a88:	2200      	movs	r2, #0
 8024a8a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8024a8c:	2106      	movs	r1, #6
 8024a8e:	69b8      	ldr	r0, [r7, #24]
 8024a90:	f000 fbee 	bl	8025270 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8024a94:	f107 0308 	add.w	r3, r7, #8
 8024a98:	2201      	movs	r2, #1
 8024a9a:	69b9      	ldr	r1, [r7, #24]
 8024a9c:	6878      	ldr	r0, [r7, #4]
 8024a9e:	f001 f8a3 	bl	8025be8 <dhcp_create_msg>
 8024aa2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8024aa4:	693b      	ldr	r3, [r7, #16]
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d04b      	beq.n	8024b42 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8024aaa:	693b      	ldr	r3, [r7, #16]
 8024aac:	685b      	ldr	r3, [r3, #4]
 8024aae:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8024ab0:	8938      	ldrh	r0, [r7, #8]
 8024ab2:	68fb      	ldr	r3, [r7, #12]
 8024ab4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024ab8:	2302      	movs	r3, #2
 8024aba:	2239      	movs	r2, #57	@ 0x39
 8024abc:	f000 fbf2 	bl	80252a4 <dhcp_option>
 8024ac0:	4603      	mov	r3, r0
 8024ac2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8024ac4:	8938      	ldrh	r0, [r7, #8]
 8024ac6:	68fb      	ldr	r3, [r7, #12]
 8024ac8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8024ad0:	461a      	mov	r2, r3
 8024ad2:	f000 fc41 	bl	8025358 <dhcp_option_short>
 8024ad6:	4603      	mov	r3, r0
 8024ad8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8024ada:	8938      	ldrh	r0, [r7, #8]
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024ae2:	2304      	movs	r3, #4
 8024ae4:	2237      	movs	r2, #55	@ 0x37
 8024ae6:	f000 fbdd 	bl	80252a4 <dhcp_option>
 8024aea:	4603      	mov	r3, r0
 8024aec:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024aee:	2300      	movs	r3, #0
 8024af0:	77fb      	strb	r3, [r7, #31]
 8024af2:	e00e      	b.n	8024b12 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8024af4:	8938      	ldrh	r0, [r7, #8]
 8024af6:	68fb      	ldr	r3, [r7, #12]
 8024af8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024afc:	7ffb      	ldrb	r3, [r7, #31]
 8024afe:	4a29      	ldr	r2, [pc, #164]	@ (8024ba4 <dhcp_discover+0x130>)
 8024b00:	5cd3      	ldrb	r3, [r2, r3]
 8024b02:	461a      	mov	r2, r3
 8024b04:	f000 fc02 	bl	802530c <dhcp_option_byte>
 8024b08:	4603      	mov	r3, r0
 8024b0a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024b0c:	7ffb      	ldrb	r3, [r7, #31]
 8024b0e:	3301      	adds	r3, #1
 8024b10:	77fb      	strb	r3, [r7, #31]
 8024b12:	7ffb      	ldrb	r3, [r7, #31]
 8024b14:	2b03      	cmp	r3, #3
 8024b16:	d9ed      	bls.n	8024af4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8024b18:	8938      	ldrh	r0, [r7, #8]
 8024b1a:	68fb      	ldr	r3, [r7, #12]
 8024b1c:	33f0      	adds	r3, #240	@ 0xf0
 8024b1e:	693a      	ldr	r2, [r7, #16]
 8024b20:	4619      	mov	r1, r3
 8024b22:	f001 f937 	bl	8025d94 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8024b26:	4b20      	ldr	r3, [pc, #128]	@ (8024ba8 <dhcp_discover+0x134>)
 8024b28:	6818      	ldr	r0, [r3, #0]
 8024b2a:	4b20      	ldr	r3, [pc, #128]	@ (8024bac <dhcp_discover+0x138>)
 8024b2c:	9301      	str	r3, [sp, #4]
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	9300      	str	r3, [sp, #0]
 8024b32:	2343      	movs	r3, #67	@ 0x43
 8024b34:	4a1e      	ldr	r2, [pc, #120]	@ (8024bb0 <dhcp_discover+0x13c>)
 8024b36:	6939      	ldr	r1, [r7, #16]
 8024b38:	f7ff f81c 	bl	8023b74 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8024b3c:	6938      	ldr	r0, [r7, #16]
 8024b3e:	f7f8 ff2f 	bl	801d9a0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8024b42:	69bb      	ldr	r3, [r7, #24]
 8024b44:	799b      	ldrb	r3, [r3, #6]
 8024b46:	2bff      	cmp	r3, #255	@ 0xff
 8024b48:	d005      	beq.n	8024b56 <dhcp_discover+0xe2>
    dhcp->tries++;
 8024b4a:	69bb      	ldr	r3, [r7, #24]
 8024b4c:	799b      	ldrb	r3, [r3, #6]
 8024b4e:	3301      	adds	r3, #1
 8024b50:	b2da      	uxtb	r2, r3
 8024b52:	69bb      	ldr	r3, [r7, #24]
 8024b54:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8024b56:	69bb      	ldr	r3, [r7, #24]
 8024b58:	799b      	ldrb	r3, [r3, #6]
 8024b5a:	2b05      	cmp	r3, #5
 8024b5c:	d80d      	bhi.n	8024b7a <dhcp_discover+0x106>
 8024b5e:	69bb      	ldr	r3, [r7, #24]
 8024b60:	799b      	ldrb	r3, [r3, #6]
 8024b62:	461a      	mov	r2, r3
 8024b64:	2301      	movs	r3, #1
 8024b66:	4093      	lsls	r3, r2
 8024b68:	b29b      	uxth	r3, r3
 8024b6a:	461a      	mov	r2, r3
 8024b6c:	0152      	lsls	r2, r2, #5
 8024b6e:	1ad2      	subs	r2, r2, r3
 8024b70:	0092      	lsls	r2, r2, #2
 8024b72:	4413      	add	r3, r2
 8024b74:	00db      	lsls	r3, r3, #3
 8024b76:	b29b      	uxth	r3, r3
 8024b78:	e001      	b.n	8024b7e <dhcp_discover+0x10a>
 8024b7a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8024b7e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8024b80:	897b      	ldrh	r3, [r7, #10]
 8024b82:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8024b86:	4a0b      	ldr	r2, [pc, #44]	@ (8024bb4 <dhcp_discover+0x140>)
 8024b88:	fb82 1203 	smull	r1, r2, r2, r3
 8024b8c:	1152      	asrs	r2, r2, #5
 8024b8e:	17db      	asrs	r3, r3, #31
 8024b90:	1ad3      	subs	r3, r2, r3
 8024b92:	b29a      	uxth	r2, r3
 8024b94:	69bb      	ldr	r3, [r7, #24]
 8024b96:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8024b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8024b9c:	4618      	mov	r0, r3
 8024b9e:	3720      	adds	r7, #32
 8024ba0:	46bd      	mov	sp, r7
 8024ba2:	bd80      	pop	{r7, pc}
 8024ba4:	2400006c 	.word	0x2400006c
 8024ba8:	2400b520 	.word	0x2400b520
 8024bac:	08030ef4 	.word	0x08030ef4
 8024bb0:	08030ef8 	.word	0x08030ef8
 8024bb4:	10624dd3 	.word	0x10624dd3

08024bb8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8024bb8:	b580      	push	{r7, lr}
 8024bba:	b088      	sub	sp, #32
 8024bbc:	af00      	add	r7, sp, #0
 8024bbe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d107      	bne.n	8024bd6 <dhcp_bind+0x1e>
 8024bc6:	4b64      	ldr	r3, [pc, #400]	@ (8024d58 <dhcp_bind+0x1a0>)
 8024bc8:	f240 4215 	movw	r2, #1045	@ 0x415
 8024bcc:	4963      	ldr	r1, [pc, #396]	@ (8024d5c <dhcp_bind+0x1a4>)
 8024bce:	4864      	ldr	r0, [pc, #400]	@ (8024d60 <dhcp_bind+0x1a8>)
 8024bd0:	f004 fbca 	bl	8029368 <iprintf>
 8024bd4:	e0bc      	b.n	8024d50 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024bda:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8024bdc:	69bb      	ldr	r3, [r7, #24]
 8024bde:	2b00      	cmp	r3, #0
 8024be0:	d107      	bne.n	8024bf2 <dhcp_bind+0x3a>
 8024be2:	4b5d      	ldr	r3, [pc, #372]	@ (8024d58 <dhcp_bind+0x1a0>)
 8024be4:	f240 4217 	movw	r2, #1047	@ 0x417
 8024be8:	495e      	ldr	r1, [pc, #376]	@ (8024d64 <dhcp_bind+0x1ac>)
 8024bea:	485d      	ldr	r0, [pc, #372]	@ (8024d60 <dhcp_bind+0x1a8>)
 8024bec:	f004 fbbc 	bl	8029368 <iprintf>
 8024bf0:	e0ae      	b.n	8024d50 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8024bf2:	69bb      	ldr	r3, [r7, #24]
 8024bf4:	2200      	movs	r2, #0
 8024bf6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8024bf8:	69bb      	ldr	r3, [r7, #24]
 8024bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c00:	d019      	beq.n	8024c36 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8024c02:	69bb      	ldr	r3, [r7, #24]
 8024c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c06:	331e      	adds	r3, #30
 8024c08:	4a57      	ldr	r2, [pc, #348]	@ (8024d68 <dhcp_bind+0x1b0>)
 8024c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8024c0e:	095b      	lsrs	r3, r3, #5
 8024c10:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8024c12:	69fb      	ldr	r3, [r7, #28]
 8024c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024c18:	d302      	bcc.n	8024c20 <dhcp_bind+0x68>
      timeout = 0xffff;
 8024c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024c1e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8024c20:	69fb      	ldr	r3, [r7, #28]
 8024c22:	b29a      	uxth	r2, r3
 8024c24:	69bb      	ldr	r3, [r7, #24]
 8024c26:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8024c28:	69bb      	ldr	r3, [r7, #24]
 8024c2a:	8a9b      	ldrh	r3, [r3, #20]
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	d102      	bne.n	8024c36 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8024c30:	69bb      	ldr	r3, [r7, #24]
 8024c32:	2201      	movs	r2, #1
 8024c34:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8024c36:	69bb      	ldr	r3, [r7, #24]
 8024c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c3e:	d01d      	beq.n	8024c7c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8024c40:	69bb      	ldr	r3, [r7, #24]
 8024c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024c44:	331e      	adds	r3, #30
 8024c46:	4a48      	ldr	r2, [pc, #288]	@ (8024d68 <dhcp_bind+0x1b0>)
 8024c48:	fba2 2303 	umull	r2, r3, r2, r3
 8024c4c:	095b      	lsrs	r3, r3, #5
 8024c4e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8024c50:	69fb      	ldr	r3, [r7, #28]
 8024c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024c56:	d302      	bcc.n	8024c5e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8024c58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024c5c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8024c5e:	69fb      	ldr	r3, [r7, #28]
 8024c60:	b29a      	uxth	r2, r3
 8024c62:	69bb      	ldr	r3, [r7, #24]
 8024c64:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8024c66:	69bb      	ldr	r3, [r7, #24]
 8024c68:	895b      	ldrh	r3, [r3, #10]
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	d102      	bne.n	8024c74 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8024c6e:	69bb      	ldr	r3, [r7, #24]
 8024c70:	2201      	movs	r2, #1
 8024c72:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8024c74:	69bb      	ldr	r3, [r7, #24]
 8024c76:	895a      	ldrh	r2, [r3, #10]
 8024c78:	69bb      	ldr	r3, [r7, #24]
 8024c7a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8024c7c:	69bb      	ldr	r3, [r7, #24]
 8024c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c84:	d01d      	beq.n	8024cc2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8024c86:	69bb      	ldr	r3, [r7, #24]
 8024c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024c8a:	331e      	adds	r3, #30
 8024c8c:	4a36      	ldr	r2, [pc, #216]	@ (8024d68 <dhcp_bind+0x1b0>)
 8024c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8024c92:	095b      	lsrs	r3, r3, #5
 8024c94:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8024c96:	69fb      	ldr	r3, [r7, #28]
 8024c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024c9c:	d302      	bcc.n	8024ca4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8024c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024ca2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8024ca4:	69fb      	ldr	r3, [r7, #28]
 8024ca6:	b29a      	uxth	r2, r3
 8024ca8:	69bb      	ldr	r3, [r7, #24]
 8024caa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8024cac:	69bb      	ldr	r3, [r7, #24]
 8024cae:	899b      	ldrh	r3, [r3, #12]
 8024cb0:	2b00      	cmp	r3, #0
 8024cb2:	d102      	bne.n	8024cba <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8024cb4:	69bb      	ldr	r3, [r7, #24]
 8024cb6:	2201      	movs	r2, #1
 8024cb8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8024cba:	69bb      	ldr	r3, [r7, #24]
 8024cbc:	899a      	ldrh	r2, [r3, #12]
 8024cbe:	69bb      	ldr	r3, [r7, #24]
 8024cc0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8024cc2:	69bb      	ldr	r3, [r7, #24]
 8024cc4:	895a      	ldrh	r2, [r3, #10]
 8024cc6:	69bb      	ldr	r3, [r7, #24]
 8024cc8:	899b      	ldrh	r3, [r3, #12]
 8024cca:	429a      	cmp	r2, r3
 8024ccc:	d306      	bcc.n	8024cdc <dhcp_bind+0x124>
 8024cce:	69bb      	ldr	r3, [r7, #24]
 8024cd0:	899b      	ldrh	r3, [r3, #12]
 8024cd2:	2b00      	cmp	r3, #0
 8024cd4:	d002      	beq.n	8024cdc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8024cd6:	69bb      	ldr	r3, [r7, #24]
 8024cd8:	2200      	movs	r2, #0
 8024cda:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8024cdc:	69bb      	ldr	r3, [r7, #24]
 8024cde:	79db      	ldrb	r3, [r3, #7]
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d003      	beq.n	8024cec <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8024ce4:	69bb      	ldr	r3, [r7, #24]
 8024ce6:	6a1b      	ldr	r3, [r3, #32]
 8024ce8:	613b      	str	r3, [r7, #16]
 8024cea:	e014      	b.n	8024d16 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8024cec:	69bb      	ldr	r3, [r7, #24]
 8024cee:	331c      	adds	r3, #28
 8024cf0:	781b      	ldrb	r3, [r3, #0]
 8024cf2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8024cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8024cf8:	2b00      	cmp	r3, #0
 8024cfa:	db02      	blt.n	8024d02 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8024cfc:	23ff      	movs	r3, #255	@ 0xff
 8024cfe:	613b      	str	r3, [r7, #16]
 8024d00:	e009      	b.n	8024d16 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8024d02:	7dfb      	ldrb	r3, [r7, #23]
 8024d04:	2bbf      	cmp	r3, #191	@ 0xbf
 8024d06:	d903      	bls.n	8024d10 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8024d08:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8024d0c:	613b      	str	r3, [r7, #16]
 8024d0e:	e002      	b.n	8024d16 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8024d10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024d14:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8024d16:	69bb      	ldr	r3, [r7, #24]
 8024d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024d1a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8024d1c:	68fb      	ldr	r3, [r7, #12]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d108      	bne.n	8024d34 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8024d22:	69bb      	ldr	r3, [r7, #24]
 8024d24:	69da      	ldr	r2, [r3, #28]
 8024d26:	693b      	ldr	r3, [r7, #16]
 8024d28:	4013      	ands	r3, r2
 8024d2a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8024d2c:	68fb      	ldr	r3, [r7, #12]
 8024d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8024d32:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8024d34:	210a      	movs	r1, #10
 8024d36:	69b8      	ldr	r0, [r7, #24]
 8024d38:	f000 fa9a 	bl	8025270 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8024d3c:	69bb      	ldr	r3, [r7, #24]
 8024d3e:	f103 011c 	add.w	r1, r3, #28
 8024d42:	f107 030c 	add.w	r3, r7, #12
 8024d46:	f107 0210 	add.w	r2, r7, #16
 8024d4a:	6878      	ldr	r0, [r7, #4]
 8024d4c:	f7f8 f968 	bl	801d020 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8024d50:	3720      	adds	r7, #32
 8024d52:	46bd      	mov	sp, r7
 8024d54:	bd80      	pop	{r7, pc}
 8024d56:	bf00      	nop
 8024d58:	0802fe60 	.word	0x0802fe60
 8024d5c:	0802ffc0 	.word	0x0802ffc0
 8024d60:	0802fec0 	.word	0x0802fec0
 8024d64:	0802ffdc 	.word	0x0802ffdc
 8024d68:	88888889 	.word	0x88888889

08024d6c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8024d6c:	b580      	push	{r7, lr}
 8024d6e:	b08a      	sub	sp, #40	@ 0x28
 8024d70:	af02      	add	r7, sp, #8
 8024d72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024d78:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8024d7a:	2105      	movs	r1, #5
 8024d7c:	69b8      	ldr	r0, [r7, #24]
 8024d7e:	f000 fa77 	bl	8025270 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8024d82:	f107 030c 	add.w	r3, r7, #12
 8024d86:	2203      	movs	r2, #3
 8024d88:	69b9      	ldr	r1, [r7, #24]
 8024d8a:	6878      	ldr	r0, [r7, #4]
 8024d8c:	f000 ff2c 	bl	8025be8 <dhcp_create_msg>
 8024d90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8024d92:	697b      	ldr	r3, [r7, #20]
 8024d94:	2b00      	cmp	r3, #0
 8024d96:	d04e      	beq.n	8024e36 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8024d98:	697b      	ldr	r3, [r7, #20]
 8024d9a:	685b      	ldr	r3, [r3, #4]
 8024d9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8024d9e:	89b8      	ldrh	r0, [r7, #12]
 8024da0:	693b      	ldr	r3, [r7, #16]
 8024da2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024da6:	2302      	movs	r3, #2
 8024da8:	2239      	movs	r2, #57	@ 0x39
 8024daa:	f000 fa7b 	bl	80252a4 <dhcp_option>
 8024dae:	4603      	mov	r3, r0
 8024db0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8024db2:	89b8      	ldrh	r0, [r7, #12]
 8024db4:	693b      	ldr	r3, [r7, #16]
 8024db6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024dba:	687b      	ldr	r3, [r7, #4]
 8024dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8024dbe:	461a      	mov	r2, r3
 8024dc0:	f000 faca 	bl	8025358 <dhcp_option_short>
 8024dc4:	4603      	mov	r3, r0
 8024dc6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8024dc8:	89b8      	ldrh	r0, [r7, #12]
 8024dca:	693b      	ldr	r3, [r7, #16]
 8024dcc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024dd0:	2304      	movs	r3, #4
 8024dd2:	2237      	movs	r2, #55	@ 0x37
 8024dd4:	f000 fa66 	bl	80252a4 <dhcp_option>
 8024dd8:	4603      	mov	r3, r0
 8024dda:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024ddc:	2300      	movs	r3, #0
 8024dde:	77bb      	strb	r3, [r7, #30]
 8024de0:	e00e      	b.n	8024e00 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8024de2:	89b8      	ldrh	r0, [r7, #12]
 8024de4:	693b      	ldr	r3, [r7, #16]
 8024de6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024dea:	7fbb      	ldrb	r3, [r7, #30]
 8024dec:	4a29      	ldr	r2, [pc, #164]	@ (8024e94 <dhcp_renew+0x128>)
 8024dee:	5cd3      	ldrb	r3, [r2, r3]
 8024df0:	461a      	mov	r2, r3
 8024df2:	f000 fa8b 	bl	802530c <dhcp_option_byte>
 8024df6:	4603      	mov	r3, r0
 8024df8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024dfa:	7fbb      	ldrb	r3, [r7, #30]
 8024dfc:	3301      	adds	r3, #1
 8024dfe:	77bb      	strb	r3, [r7, #30]
 8024e00:	7fbb      	ldrb	r3, [r7, #30]
 8024e02:	2b03      	cmp	r3, #3
 8024e04:	d9ed      	bls.n	8024de2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8024e06:	89b8      	ldrh	r0, [r7, #12]
 8024e08:	693b      	ldr	r3, [r7, #16]
 8024e0a:	33f0      	adds	r3, #240	@ 0xf0
 8024e0c:	697a      	ldr	r2, [r7, #20]
 8024e0e:	4619      	mov	r1, r3
 8024e10:	f000 ffc0 	bl	8025d94 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8024e14:	4b20      	ldr	r3, [pc, #128]	@ (8024e98 <dhcp_renew+0x12c>)
 8024e16:	6818      	ldr	r0, [r3, #0]
 8024e18:	69bb      	ldr	r3, [r7, #24]
 8024e1a:	f103 0218 	add.w	r2, r3, #24
 8024e1e:	687b      	ldr	r3, [r7, #4]
 8024e20:	9300      	str	r3, [sp, #0]
 8024e22:	2343      	movs	r3, #67	@ 0x43
 8024e24:	6979      	ldr	r1, [r7, #20]
 8024e26:	f7fe fe31 	bl	8023a8c <udp_sendto_if>
 8024e2a:	4603      	mov	r3, r0
 8024e2c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8024e2e:	6978      	ldr	r0, [r7, #20]
 8024e30:	f7f8 fdb6 	bl	801d9a0 <pbuf_free>
 8024e34:	e001      	b.n	8024e3a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8024e36:	23ff      	movs	r3, #255	@ 0xff
 8024e38:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8024e3a:	69bb      	ldr	r3, [r7, #24]
 8024e3c:	799b      	ldrb	r3, [r3, #6]
 8024e3e:	2bff      	cmp	r3, #255	@ 0xff
 8024e40:	d005      	beq.n	8024e4e <dhcp_renew+0xe2>
    dhcp->tries++;
 8024e42:	69bb      	ldr	r3, [r7, #24]
 8024e44:	799b      	ldrb	r3, [r3, #6]
 8024e46:	3301      	adds	r3, #1
 8024e48:	b2da      	uxtb	r2, r3
 8024e4a:	69bb      	ldr	r3, [r7, #24]
 8024e4c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8024e4e:	69bb      	ldr	r3, [r7, #24]
 8024e50:	799b      	ldrb	r3, [r3, #6]
 8024e52:	2b09      	cmp	r3, #9
 8024e54:	d809      	bhi.n	8024e6a <dhcp_renew+0xfe>
 8024e56:	69bb      	ldr	r3, [r7, #24]
 8024e58:	799b      	ldrb	r3, [r3, #6]
 8024e5a:	461a      	mov	r2, r3
 8024e5c:	0152      	lsls	r2, r2, #5
 8024e5e:	1ad2      	subs	r2, r2, r3
 8024e60:	0092      	lsls	r2, r2, #2
 8024e62:	4413      	add	r3, r2
 8024e64:	011b      	lsls	r3, r3, #4
 8024e66:	b29b      	uxth	r3, r3
 8024e68:	e001      	b.n	8024e6e <dhcp_renew+0x102>
 8024e6a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8024e6e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8024e70:	89fb      	ldrh	r3, [r7, #14]
 8024e72:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8024e76:	4a09      	ldr	r2, [pc, #36]	@ (8024e9c <dhcp_renew+0x130>)
 8024e78:	fb82 1203 	smull	r1, r2, r2, r3
 8024e7c:	1152      	asrs	r2, r2, #5
 8024e7e:	17db      	asrs	r3, r3, #31
 8024e80:	1ad3      	subs	r3, r2, r3
 8024e82:	b29a      	uxth	r2, r3
 8024e84:	69bb      	ldr	r3, [r7, #24]
 8024e86:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8024e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024e8c:	4618      	mov	r0, r3
 8024e8e:	3720      	adds	r7, #32
 8024e90:	46bd      	mov	sp, r7
 8024e92:	bd80      	pop	{r7, pc}
 8024e94:	2400006c 	.word	0x2400006c
 8024e98:	2400b520 	.word	0x2400b520
 8024e9c:	10624dd3 	.word	0x10624dd3

08024ea0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8024ea0:	b580      	push	{r7, lr}
 8024ea2:	b08a      	sub	sp, #40	@ 0x28
 8024ea4:	af02      	add	r7, sp, #8
 8024ea6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024eac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8024eae:	2104      	movs	r1, #4
 8024eb0:	69b8      	ldr	r0, [r7, #24]
 8024eb2:	f000 f9dd 	bl	8025270 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8024eb6:	f107 030c 	add.w	r3, r7, #12
 8024eba:	2203      	movs	r2, #3
 8024ebc:	69b9      	ldr	r1, [r7, #24]
 8024ebe:	6878      	ldr	r0, [r7, #4]
 8024ec0:	f000 fe92 	bl	8025be8 <dhcp_create_msg>
 8024ec4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8024ec6:	697b      	ldr	r3, [r7, #20]
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	d04c      	beq.n	8024f66 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8024ecc:	697b      	ldr	r3, [r7, #20]
 8024ece:	685b      	ldr	r3, [r3, #4]
 8024ed0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8024ed2:	89b8      	ldrh	r0, [r7, #12]
 8024ed4:	693b      	ldr	r3, [r7, #16]
 8024ed6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024eda:	2302      	movs	r3, #2
 8024edc:	2239      	movs	r2, #57	@ 0x39
 8024ede:	f000 f9e1 	bl	80252a4 <dhcp_option>
 8024ee2:	4603      	mov	r3, r0
 8024ee4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8024ee6:	89b8      	ldrh	r0, [r7, #12]
 8024ee8:	693b      	ldr	r3, [r7, #16]
 8024eea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8024ef2:	461a      	mov	r2, r3
 8024ef4:	f000 fa30 	bl	8025358 <dhcp_option_short>
 8024ef8:	4603      	mov	r3, r0
 8024efa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8024efc:	89b8      	ldrh	r0, [r7, #12]
 8024efe:	693b      	ldr	r3, [r7, #16]
 8024f00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024f04:	2304      	movs	r3, #4
 8024f06:	2237      	movs	r2, #55	@ 0x37
 8024f08:	f000 f9cc 	bl	80252a4 <dhcp_option>
 8024f0c:	4603      	mov	r3, r0
 8024f0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024f10:	2300      	movs	r3, #0
 8024f12:	77bb      	strb	r3, [r7, #30]
 8024f14:	e00e      	b.n	8024f34 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8024f16:	89b8      	ldrh	r0, [r7, #12]
 8024f18:	693b      	ldr	r3, [r7, #16]
 8024f1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024f1e:	7fbb      	ldrb	r3, [r7, #30]
 8024f20:	4a28      	ldr	r2, [pc, #160]	@ (8024fc4 <dhcp_rebind+0x124>)
 8024f22:	5cd3      	ldrb	r3, [r2, r3]
 8024f24:	461a      	mov	r2, r3
 8024f26:	f000 f9f1 	bl	802530c <dhcp_option_byte>
 8024f2a:	4603      	mov	r3, r0
 8024f2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8024f2e:	7fbb      	ldrb	r3, [r7, #30]
 8024f30:	3301      	adds	r3, #1
 8024f32:	77bb      	strb	r3, [r7, #30]
 8024f34:	7fbb      	ldrb	r3, [r7, #30]
 8024f36:	2b03      	cmp	r3, #3
 8024f38:	d9ed      	bls.n	8024f16 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8024f3a:	89b8      	ldrh	r0, [r7, #12]
 8024f3c:	693b      	ldr	r3, [r7, #16]
 8024f3e:	33f0      	adds	r3, #240	@ 0xf0
 8024f40:	697a      	ldr	r2, [r7, #20]
 8024f42:	4619      	mov	r1, r3
 8024f44:	f000 ff26 	bl	8025d94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8024f48:	4b1f      	ldr	r3, [pc, #124]	@ (8024fc8 <dhcp_rebind+0x128>)
 8024f4a:	6818      	ldr	r0, [r3, #0]
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	9300      	str	r3, [sp, #0]
 8024f50:	2343      	movs	r3, #67	@ 0x43
 8024f52:	4a1e      	ldr	r2, [pc, #120]	@ (8024fcc <dhcp_rebind+0x12c>)
 8024f54:	6979      	ldr	r1, [r7, #20]
 8024f56:	f7fe fd99 	bl	8023a8c <udp_sendto_if>
 8024f5a:	4603      	mov	r3, r0
 8024f5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8024f5e:	6978      	ldr	r0, [r7, #20]
 8024f60:	f7f8 fd1e 	bl	801d9a0 <pbuf_free>
 8024f64:	e001      	b.n	8024f6a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8024f66:	23ff      	movs	r3, #255	@ 0xff
 8024f68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8024f6a:	69bb      	ldr	r3, [r7, #24]
 8024f6c:	799b      	ldrb	r3, [r3, #6]
 8024f6e:	2bff      	cmp	r3, #255	@ 0xff
 8024f70:	d005      	beq.n	8024f7e <dhcp_rebind+0xde>
    dhcp->tries++;
 8024f72:	69bb      	ldr	r3, [r7, #24]
 8024f74:	799b      	ldrb	r3, [r3, #6]
 8024f76:	3301      	adds	r3, #1
 8024f78:	b2da      	uxtb	r2, r3
 8024f7a:	69bb      	ldr	r3, [r7, #24]
 8024f7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8024f7e:	69bb      	ldr	r3, [r7, #24]
 8024f80:	799b      	ldrb	r3, [r3, #6]
 8024f82:	2b09      	cmp	r3, #9
 8024f84:	d809      	bhi.n	8024f9a <dhcp_rebind+0xfa>
 8024f86:	69bb      	ldr	r3, [r7, #24]
 8024f88:	799b      	ldrb	r3, [r3, #6]
 8024f8a:	461a      	mov	r2, r3
 8024f8c:	0152      	lsls	r2, r2, #5
 8024f8e:	1ad2      	subs	r2, r2, r3
 8024f90:	0092      	lsls	r2, r2, #2
 8024f92:	4413      	add	r3, r2
 8024f94:	00db      	lsls	r3, r3, #3
 8024f96:	b29b      	uxth	r3, r3
 8024f98:	e001      	b.n	8024f9e <dhcp_rebind+0xfe>
 8024f9a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8024f9e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8024fa0:	89fb      	ldrh	r3, [r7, #14]
 8024fa2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8024fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8024fd0 <dhcp_rebind+0x130>)
 8024fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8024fac:	1152      	asrs	r2, r2, #5
 8024fae:	17db      	asrs	r3, r3, #31
 8024fb0:	1ad3      	subs	r3, r2, r3
 8024fb2:	b29a      	uxth	r2, r3
 8024fb4:	69bb      	ldr	r3, [r7, #24]
 8024fb6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8024fb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024fbc:	4618      	mov	r0, r3
 8024fbe:	3720      	adds	r7, #32
 8024fc0:	46bd      	mov	sp, r7
 8024fc2:	bd80      	pop	{r7, pc}
 8024fc4:	2400006c 	.word	0x2400006c
 8024fc8:	2400b520 	.word	0x2400b520
 8024fcc:	08030ef8 	.word	0x08030ef8
 8024fd0:	10624dd3 	.word	0x10624dd3

08024fd4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8024fd4:	b5b0      	push	{r4, r5, r7, lr}
 8024fd6:	b08a      	sub	sp, #40	@ 0x28
 8024fd8:	af02      	add	r7, sp, #8
 8024fda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024fe0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8024fe2:	2103      	movs	r1, #3
 8024fe4:	69b8      	ldr	r0, [r7, #24]
 8024fe6:	f000 f943 	bl	8025270 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8024fea:	f107 030c 	add.w	r3, r7, #12
 8024fee:	2203      	movs	r2, #3
 8024ff0:	69b9      	ldr	r1, [r7, #24]
 8024ff2:	6878      	ldr	r0, [r7, #4]
 8024ff4:	f000 fdf8 	bl	8025be8 <dhcp_create_msg>
 8024ff8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8024ffa:	697b      	ldr	r3, [r7, #20]
 8024ffc:	2b00      	cmp	r3, #0
 8024ffe:	d066      	beq.n	80250ce <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8025000:	697b      	ldr	r3, [r7, #20]
 8025002:	685b      	ldr	r3, [r3, #4]
 8025004:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8025006:	89b8      	ldrh	r0, [r7, #12]
 8025008:	693b      	ldr	r3, [r7, #16]
 802500a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802500e:	2302      	movs	r3, #2
 8025010:	2239      	movs	r2, #57	@ 0x39
 8025012:	f000 f947 	bl	80252a4 <dhcp_option>
 8025016:	4603      	mov	r3, r0
 8025018:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 802501a:	89b8      	ldrh	r0, [r7, #12]
 802501c:	693b      	ldr	r3, [r7, #16]
 802501e:	33f0      	adds	r3, #240	@ 0xf0
 8025020:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8025024:	4619      	mov	r1, r3
 8025026:	f000 f997 	bl	8025358 <dhcp_option_short>
 802502a:	4603      	mov	r3, r0
 802502c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802502e:	89b8      	ldrh	r0, [r7, #12]
 8025030:	693b      	ldr	r3, [r7, #16]
 8025032:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8025036:	2304      	movs	r3, #4
 8025038:	2232      	movs	r2, #50	@ 0x32
 802503a:	f000 f933 	bl	80252a4 <dhcp_option>
 802503e:	4603      	mov	r3, r0
 8025040:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8025042:	89bc      	ldrh	r4, [r7, #12]
 8025044:	693b      	ldr	r3, [r7, #16]
 8025046:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 802504a:	69bb      	ldr	r3, [r7, #24]
 802504c:	69db      	ldr	r3, [r3, #28]
 802504e:	4618      	mov	r0, r3
 8025050:	f7f6 fdcb 	bl	801bbea <lwip_htonl>
 8025054:	4603      	mov	r3, r0
 8025056:	461a      	mov	r2, r3
 8025058:	4629      	mov	r1, r5
 802505a:	4620      	mov	r0, r4
 802505c:	f000 f9ae 	bl	80253bc <dhcp_option_long>
 8025060:	4603      	mov	r3, r0
 8025062:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8025064:	89b8      	ldrh	r0, [r7, #12]
 8025066:	693b      	ldr	r3, [r7, #16]
 8025068:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802506c:	2304      	movs	r3, #4
 802506e:	2237      	movs	r2, #55	@ 0x37
 8025070:	f000 f918 	bl	80252a4 <dhcp_option>
 8025074:	4603      	mov	r3, r0
 8025076:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8025078:	2300      	movs	r3, #0
 802507a:	77bb      	strb	r3, [r7, #30]
 802507c:	e00e      	b.n	802509c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802507e:	89b8      	ldrh	r0, [r7, #12]
 8025080:	693b      	ldr	r3, [r7, #16]
 8025082:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8025086:	7fbb      	ldrb	r3, [r7, #30]
 8025088:	4a28      	ldr	r2, [pc, #160]	@ (802512c <dhcp_reboot+0x158>)
 802508a:	5cd3      	ldrb	r3, [r2, r3]
 802508c:	461a      	mov	r2, r3
 802508e:	f000 f93d 	bl	802530c <dhcp_option_byte>
 8025092:	4603      	mov	r3, r0
 8025094:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8025096:	7fbb      	ldrb	r3, [r7, #30]
 8025098:	3301      	adds	r3, #1
 802509a:	77bb      	strb	r3, [r7, #30]
 802509c:	7fbb      	ldrb	r3, [r7, #30]
 802509e:	2b03      	cmp	r3, #3
 80250a0:	d9ed      	bls.n	802507e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80250a2:	89b8      	ldrh	r0, [r7, #12]
 80250a4:	693b      	ldr	r3, [r7, #16]
 80250a6:	33f0      	adds	r3, #240	@ 0xf0
 80250a8:	697a      	ldr	r2, [r7, #20]
 80250aa:	4619      	mov	r1, r3
 80250ac:	f000 fe72 	bl	8025d94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80250b0:	4b1f      	ldr	r3, [pc, #124]	@ (8025130 <dhcp_reboot+0x15c>)
 80250b2:	6818      	ldr	r0, [r3, #0]
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	9300      	str	r3, [sp, #0]
 80250b8:	2343      	movs	r3, #67	@ 0x43
 80250ba:	4a1e      	ldr	r2, [pc, #120]	@ (8025134 <dhcp_reboot+0x160>)
 80250bc:	6979      	ldr	r1, [r7, #20]
 80250be:	f7fe fce5 	bl	8023a8c <udp_sendto_if>
 80250c2:	4603      	mov	r3, r0
 80250c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80250c6:	6978      	ldr	r0, [r7, #20]
 80250c8:	f7f8 fc6a 	bl	801d9a0 <pbuf_free>
 80250cc:	e001      	b.n	80250d2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80250ce:	23ff      	movs	r3, #255	@ 0xff
 80250d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80250d2:	69bb      	ldr	r3, [r7, #24]
 80250d4:	799b      	ldrb	r3, [r3, #6]
 80250d6:	2bff      	cmp	r3, #255	@ 0xff
 80250d8:	d005      	beq.n	80250e6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80250da:	69bb      	ldr	r3, [r7, #24]
 80250dc:	799b      	ldrb	r3, [r3, #6]
 80250de:	3301      	adds	r3, #1
 80250e0:	b2da      	uxtb	r2, r3
 80250e2:	69bb      	ldr	r3, [r7, #24]
 80250e4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80250e6:	69bb      	ldr	r3, [r7, #24]
 80250e8:	799b      	ldrb	r3, [r3, #6]
 80250ea:	2b09      	cmp	r3, #9
 80250ec:	d809      	bhi.n	8025102 <dhcp_reboot+0x12e>
 80250ee:	69bb      	ldr	r3, [r7, #24]
 80250f0:	799b      	ldrb	r3, [r3, #6]
 80250f2:	461a      	mov	r2, r3
 80250f4:	0152      	lsls	r2, r2, #5
 80250f6:	1ad2      	subs	r2, r2, r3
 80250f8:	0092      	lsls	r2, r2, #2
 80250fa:	4413      	add	r3, r2
 80250fc:	00db      	lsls	r3, r3, #3
 80250fe:	b29b      	uxth	r3, r3
 8025100:	e001      	b.n	8025106 <dhcp_reboot+0x132>
 8025102:	f242 7310 	movw	r3, #10000	@ 0x2710
 8025106:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8025108:	89fb      	ldrh	r3, [r7, #14]
 802510a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 802510e:	4a0a      	ldr	r2, [pc, #40]	@ (8025138 <dhcp_reboot+0x164>)
 8025110:	fb82 1203 	smull	r1, r2, r2, r3
 8025114:	1152      	asrs	r2, r2, #5
 8025116:	17db      	asrs	r3, r3, #31
 8025118:	1ad3      	subs	r3, r2, r3
 802511a:	b29a      	uxth	r2, r3
 802511c:	69bb      	ldr	r3, [r7, #24]
 802511e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8025120:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8025124:	4618      	mov	r0, r3
 8025126:	3720      	adds	r7, #32
 8025128:	46bd      	mov	sp, r7
 802512a:	bdb0      	pop	{r4, r5, r7, pc}
 802512c:	2400006c 	.word	0x2400006c
 8025130:	2400b520 	.word	0x2400b520
 8025134:	08030ef8 	.word	0x08030ef8
 8025138:	10624dd3 	.word	0x10624dd3

0802513c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 802513c:	b5b0      	push	{r4, r5, r7, lr}
 802513e:	b08a      	sub	sp, #40	@ 0x28
 8025140:	af02      	add	r7, sp, #8
 8025142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8025144:	687b      	ldr	r3, [r7, #4]
 8025146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025148:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 802514a:	69fb      	ldr	r3, [r7, #28]
 802514c:	2b00      	cmp	r3, #0
 802514e:	f000 8084 	beq.w	802525a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8025152:	69fb      	ldr	r3, [r7, #28]
 8025154:	795b      	ldrb	r3, [r3, #5]
 8025156:	2b00      	cmp	r3, #0
 8025158:	f000 8081 	beq.w	802525e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 802515c:	69fb      	ldr	r3, [r7, #28]
 802515e:	699b      	ldr	r3, [r3, #24]
 8025160:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8025162:	69fb      	ldr	r3, [r7, #28]
 8025164:	2200      	movs	r2, #0
 8025166:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8025168:	69fb      	ldr	r3, [r7, #28]
 802516a:	2200      	movs	r2, #0
 802516c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802516e:	69fb      	ldr	r3, [r7, #28]
 8025170:	2200      	movs	r2, #0
 8025172:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8025174:	69fb      	ldr	r3, [r7, #28]
 8025176:	2200      	movs	r2, #0
 8025178:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802517a:	69fb      	ldr	r3, [r7, #28]
 802517c:	2200      	movs	r2, #0
 802517e:	631a      	str	r2, [r3, #48]	@ 0x30
 8025180:	69fb      	ldr	r3, [r7, #28]
 8025182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8025184:	69fb      	ldr	r3, [r7, #28]
 8025186:	62da      	str	r2, [r3, #44]	@ 0x2c
 8025188:	69fb      	ldr	r3, [r7, #28]
 802518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802518c:	69fb      	ldr	r3, [r7, #28]
 802518e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8025190:	69fb      	ldr	r3, [r7, #28]
 8025192:	2200      	movs	r2, #0
 8025194:	829a      	strh	r2, [r3, #20]
 8025196:	69fb      	ldr	r3, [r7, #28]
 8025198:	8a9a      	ldrh	r2, [r3, #20]
 802519a:	69fb      	ldr	r3, [r7, #28]
 802519c:	825a      	strh	r2, [r3, #18]
 802519e:	69fb      	ldr	r3, [r7, #28]
 80251a0:	8a5a      	ldrh	r2, [r3, #18]
 80251a2:	69fb      	ldr	r3, [r7, #28]
 80251a4:	821a      	strh	r2, [r3, #16]
 80251a6:	69fb      	ldr	r3, [r7, #28]
 80251a8:	8a1a      	ldrh	r2, [r3, #16]
 80251aa:	69fb      	ldr	r3, [r7, #28]
 80251ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80251ae:	6878      	ldr	r0, [r7, #4]
 80251b0:	f000 fe1e 	bl	8025df0 <dhcp_supplied_address>
 80251b4:	4603      	mov	r3, r0
 80251b6:	2b00      	cmp	r3, #0
 80251b8:	d03b      	beq.n	8025232 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80251ba:	f107 030e 	add.w	r3, r7, #14
 80251be:	2207      	movs	r2, #7
 80251c0:	69f9      	ldr	r1, [r7, #28]
 80251c2:	6878      	ldr	r0, [r7, #4]
 80251c4:	f000 fd10 	bl	8025be8 <dhcp_create_msg>
 80251c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80251ca:	69bb      	ldr	r3, [r7, #24]
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	d030      	beq.n	8025232 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80251d0:	69bb      	ldr	r3, [r7, #24]
 80251d2:	685b      	ldr	r3, [r3, #4]
 80251d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80251d6:	89f8      	ldrh	r0, [r7, #14]
 80251d8:	697b      	ldr	r3, [r7, #20]
 80251da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80251de:	2304      	movs	r3, #4
 80251e0:	2236      	movs	r2, #54	@ 0x36
 80251e2:	f000 f85f 	bl	80252a4 <dhcp_option>
 80251e6:	4603      	mov	r3, r0
 80251e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80251ea:	89fc      	ldrh	r4, [r7, #14]
 80251ec:	697b      	ldr	r3, [r7, #20]
 80251ee:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80251f2:	693b      	ldr	r3, [r7, #16]
 80251f4:	4618      	mov	r0, r3
 80251f6:	f7f6 fcf8 	bl	801bbea <lwip_htonl>
 80251fa:	4603      	mov	r3, r0
 80251fc:	461a      	mov	r2, r3
 80251fe:	4629      	mov	r1, r5
 8025200:	4620      	mov	r0, r4
 8025202:	f000 f8db 	bl	80253bc <dhcp_option_long>
 8025206:	4603      	mov	r3, r0
 8025208:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802520a:	89f8      	ldrh	r0, [r7, #14]
 802520c:	697b      	ldr	r3, [r7, #20]
 802520e:	33f0      	adds	r3, #240	@ 0xf0
 8025210:	69ba      	ldr	r2, [r7, #24]
 8025212:	4619      	mov	r1, r3
 8025214:	f000 fdbe 	bl	8025d94 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8025218:	4b13      	ldr	r3, [pc, #76]	@ (8025268 <dhcp_release_and_stop+0x12c>)
 802521a:	6818      	ldr	r0, [r3, #0]
 802521c:	f107 0210 	add.w	r2, r7, #16
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	9300      	str	r3, [sp, #0]
 8025224:	2343      	movs	r3, #67	@ 0x43
 8025226:	69b9      	ldr	r1, [r7, #24]
 8025228:	f7fe fc30 	bl	8023a8c <udp_sendto_if>
      pbuf_free(p_out);
 802522c:	69b8      	ldr	r0, [r7, #24]
 802522e:	f7f8 fbb7 	bl	801d9a0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8025232:	4b0e      	ldr	r3, [pc, #56]	@ (802526c <dhcp_release_and_stop+0x130>)
 8025234:	4a0d      	ldr	r2, [pc, #52]	@ (802526c <dhcp_release_and_stop+0x130>)
 8025236:	490d      	ldr	r1, [pc, #52]	@ (802526c <dhcp_release_and_stop+0x130>)
 8025238:	6878      	ldr	r0, [r7, #4]
 802523a:	f7f7 fef1 	bl	801d020 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 802523e:	2100      	movs	r1, #0
 8025240:	69f8      	ldr	r0, [r7, #28]
 8025242:	f000 f815 	bl	8025270 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8025246:	69fb      	ldr	r3, [r7, #28]
 8025248:	791b      	ldrb	r3, [r3, #4]
 802524a:	2b00      	cmp	r3, #0
 802524c:	d008      	beq.n	8025260 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 802524e:	f7fe ff69 	bl	8024124 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8025252:	69fb      	ldr	r3, [r7, #28]
 8025254:	2200      	movs	r2, #0
 8025256:	711a      	strb	r2, [r3, #4]
 8025258:	e002      	b.n	8025260 <dhcp_release_and_stop+0x124>
    return;
 802525a:	bf00      	nop
 802525c:	e000      	b.n	8025260 <dhcp_release_and_stop+0x124>
    return;
 802525e:	bf00      	nop
  }
}
 8025260:	3720      	adds	r7, #32
 8025262:	46bd      	mov	sp, r7
 8025264:	bdb0      	pop	{r4, r5, r7, pc}
 8025266:	bf00      	nop
 8025268:	2400b520 	.word	0x2400b520
 802526c:	08030ef4 	.word	0x08030ef4

08025270 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8025270:	b480      	push	{r7}
 8025272:	b083      	sub	sp, #12
 8025274:	af00      	add	r7, sp, #0
 8025276:	6078      	str	r0, [r7, #4]
 8025278:	460b      	mov	r3, r1
 802527a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	795b      	ldrb	r3, [r3, #5]
 8025280:	78fa      	ldrb	r2, [r7, #3]
 8025282:	429a      	cmp	r2, r3
 8025284:	d008      	beq.n	8025298 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	78fa      	ldrb	r2, [r7, #3]
 802528a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	2200      	movs	r2, #0
 8025290:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	2200      	movs	r2, #0
 8025296:	811a      	strh	r2, [r3, #8]
  }
}
 8025298:	bf00      	nop
 802529a:	370c      	adds	r7, #12
 802529c:	46bd      	mov	sp, r7
 802529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a2:	4770      	bx	lr

080252a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80252a4:	b580      	push	{r7, lr}
 80252a6:	b082      	sub	sp, #8
 80252a8:	af00      	add	r7, sp, #0
 80252aa:	6039      	str	r1, [r7, #0]
 80252ac:	4611      	mov	r1, r2
 80252ae:	461a      	mov	r2, r3
 80252b0:	4603      	mov	r3, r0
 80252b2:	80fb      	strh	r3, [r7, #6]
 80252b4:	460b      	mov	r3, r1
 80252b6:	717b      	strb	r3, [r7, #5]
 80252b8:	4613      	mov	r3, r2
 80252ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80252bc:	88fa      	ldrh	r2, [r7, #6]
 80252be:	793b      	ldrb	r3, [r7, #4]
 80252c0:	4413      	add	r3, r2
 80252c2:	3302      	adds	r3, #2
 80252c4:	2b44      	cmp	r3, #68	@ 0x44
 80252c6:	d906      	bls.n	80252d6 <dhcp_option+0x32>
 80252c8:	4b0d      	ldr	r3, [pc, #52]	@ (8025300 <dhcp_option+0x5c>)
 80252ca:	f240 529a 	movw	r2, #1434	@ 0x59a
 80252ce:	490d      	ldr	r1, [pc, #52]	@ (8025304 <dhcp_option+0x60>)
 80252d0:	480d      	ldr	r0, [pc, #52]	@ (8025308 <dhcp_option+0x64>)
 80252d2:	f004 f849 	bl	8029368 <iprintf>
  options[options_out_len++] = option_type;
 80252d6:	88fb      	ldrh	r3, [r7, #6]
 80252d8:	1c5a      	adds	r2, r3, #1
 80252da:	80fa      	strh	r2, [r7, #6]
 80252dc:	461a      	mov	r2, r3
 80252de:	683b      	ldr	r3, [r7, #0]
 80252e0:	4413      	add	r3, r2
 80252e2:	797a      	ldrb	r2, [r7, #5]
 80252e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80252e6:	88fb      	ldrh	r3, [r7, #6]
 80252e8:	1c5a      	adds	r2, r3, #1
 80252ea:	80fa      	strh	r2, [r7, #6]
 80252ec:	461a      	mov	r2, r3
 80252ee:	683b      	ldr	r3, [r7, #0]
 80252f0:	4413      	add	r3, r2
 80252f2:	793a      	ldrb	r2, [r7, #4]
 80252f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80252f6:	88fb      	ldrh	r3, [r7, #6]
}
 80252f8:	4618      	mov	r0, r3
 80252fa:	3708      	adds	r7, #8
 80252fc:	46bd      	mov	sp, r7
 80252fe:	bd80      	pop	{r7, pc}
 8025300:	0802fe60 	.word	0x0802fe60
 8025304:	0802fff4 	.word	0x0802fff4
 8025308:	0802fec0 	.word	0x0802fec0

0802530c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 802530c:	b580      	push	{r7, lr}
 802530e:	b082      	sub	sp, #8
 8025310:	af00      	add	r7, sp, #0
 8025312:	4603      	mov	r3, r0
 8025314:	6039      	str	r1, [r7, #0]
 8025316:	80fb      	strh	r3, [r7, #6]
 8025318:	4613      	mov	r3, r2
 802531a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802531c:	88fb      	ldrh	r3, [r7, #6]
 802531e:	2b43      	cmp	r3, #67	@ 0x43
 8025320:	d906      	bls.n	8025330 <dhcp_option_byte+0x24>
 8025322:	4b0a      	ldr	r3, [pc, #40]	@ (802534c <dhcp_option_byte+0x40>)
 8025324:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8025328:	4909      	ldr	r1, [pc, #36]	@ (8025350 <dhcp_option_byte+0x44>)
 802532a:	480a      	ldr	r0, [pc, #40]	@ (8025354 <dhcp_option_byte+0x48>)
 802532c:	f004 f81c 	bl	8029368 <iprintf>
  options[options_out_len++] = value;
 8025330:	88fb      	ldrh	r3, [r7, #6]
 8025332:	1c5a      	adds	r2, r3, #1
 8025334:	80fa      	strh	r2, [r7, #6]
 8025336:	461a      	mov	r2, r3
 8025338:	683b      	ldr	r3, [r7, #0]
 802533a:	4413      	add	r3, r2
 802533c:	797a      	ldrb	r2, [r7, #5]
 802533e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8025340:	88fb      	ldrh	r3, [r7, #6]
}
 8025342:	4618      	mov	r0, r3
 8025344:	3708      	adds	r7, #8
 8025346:	46bd      	mov	sp, r7
 8025348:	bd80      	pop	{r7, pc}
 802534a:	bf00      	nop
 802534c:	0802fe60 	.word	0x0802fe60
 8025350:	08030038 	.word	0x08030038
 8025354:	0802fec0 	.word	0x0802fec0

08025358 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8025358:	b580      	push	{r7, lr}
 802535a:	b082      	sub	sp, #8
 802535c:	af00      	add	r7, sp, #0
 802535e:	4603      	mov	r3, r0
 8025360:	6039      	str	r1, [r7, #0]
 8025362:	80fb      	strh	r3, [r7, #6]
 8025364:	4613      	mov	r3, r2
 8025366:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8025368:	88fb      	ldrh	r3, [r7, #6]
 802536a:	3302      	adds	r3, #2
 802536c:	2b44      	cmp	r3, #68	@ 0x44
 802536e:	d906      	bls.n	802537e <dhcp_option_short+0x26>
 8025370:	4b0f      	ldr	r3, [pc, #60]	@ (80253b0 <dhcp_option_short+0x58>)
 8025372:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8025376:	490f      	ldr	r1, [pc, #60]	@ (80253b4 <dhcp_option_short+0x5c>)
 8025378:	480f      	ldr	r0, [pc, #60]	@ (80253b8 <dhcp_option_short+0x60>)
 802537a:	f003 fff5 	bl	8029368 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802537e:	88bb      	ldrh	r3, [r7, #4]
 8025380:	0a1b      	lsrs	r3, r3, #8
 8025382:	b29a      	uxth	r2, r3
 8025384:	88fb      	ldrh	r3, [r7, #6]
 8025386:	1c59      	adds	r1, r3, #1
 8025388:	80f9      	strh	r1, [r7, #6]
 802538a:	4619      	mov	r1, r3
 802538c:	683b      	ldr	r3, [r7, #0]
 802538e:	440b      	add	r3, r1
 8025390:	b2d2      	uxtb	r2, r2
 8025392:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8025394:	88fb      	ldrh	r3, [r7, #6]
 8025396:	1c5a      	adds	r2, r3, #1
 8025398:	80fa      	strh	r2, [r7, #6]
 802539a:	461a      	mov	r2, r3
 802539c:	683b      	ldr	r3, [r7, #0]
 802539e:	4413      	add	r3, r2
 80253a0:	88ba      	ldrh	r2, [r7, #4]
 80253a2:	b2d2      	uxtb	r2, r2
 80253a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80253a6:	88fb      	ldrh	r3, [r7, #6]
}
 80253a8:	4618      	mov	r0, r3
 80253aa:	3708      	adds	r7, #8
 80253ac:	46bd      	mov	sp, r7
 80253ae:	bd80      	pop	{r7, pc}
 80253b0:	0802fe60 	.word	0x0802fe60
 80253b4:	08030070 	.word	0x08030070
 80253b8:	0802fec0 	.word	0x0802fec0

080253bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80253bc:	b580      	push	{r7, lr}
 80253be:	b084      	sub	sp, #16
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	4603      	mov	r3, r0
 80253c4:	60b9      	str	r1, [r7, #8]
 80253c6:	607a      	str	r2, [r7, #4]
 80253c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80253ca:	89fb      	ldrh	r3, [r7, #14]
 80253cc:	3304      	adds	r3, #4
 80253ce:	2b44      	cmp	r3, #68	@ 0x44
 80253d0:	d906      	bls.n	80253e0 <dhcp_option_long+0x24>
 80253d2:	4b19      	ldr	r3, [pc, #100]	@ (8025438 <dhcp_option_long+0x7c>)
 80253d4:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80253d8:	4918      	ldr	r1, [pc, #96]	@ (802543c <dhcp_option_long+0x80>)
 80253da:	4819      	ldr	r0, [pc, #100]	@ (8025440 <dhcp_option_long+0x84>)
 80253dc:	f003 ffc4 	bl	8029368 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80253e0:	687b      	ldr	r3, [r7, #4]
 80253e2:	0e1a      	lsrs	r2, r3, #24
 80253e4:	89fb      	ldrh	r3, [r7, #14]
 80253e6:	1c59      	adds	r1, r3, #1
 80253e8:	81f9      	strh	r1, [r7, #14]
 80253ea:	4619      	mov	r1, r3
 80253ec:	68bb      	ldr	r3, [r7, #8]
 80253ee:	440b      	add	r3, r1
 80253f0:	b2d2      	uxtb	r2, r2
 80253f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	0c1a      	lsrs	r2, r3, #16
 80253f8:	89fb      	ldrh	r3, [r7, #14]
 80253fa:	1c59      	adds	r1, r3, #1
 80253fc:	81f9      	strh	r1, [r7, #14]
 80253fe:	4619      	mov	r1, r3
 8025400:	68bb      	ldr	r3, [r7, #8]
 8025402:	440b      	add	r3, r1
 8025404:	b2d2      	uxtb	r2, r2
 8025406:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	0a1a      	lsrs	r2, r3, #8
 802540c:	89fb      	ldrh	r3, [r7, #14]
 802540e:	1c59      	adds	r1, r3, #1
 8025410:	81f9      	strh	r1, [r7, #14]
 8025412:	4619      	mov	r1, r3
 8025414:	68bb      	ldr	r3, [r7, #8]
 8025416:	440b      	add	r3, r1
 8025418:	b2d2      	uxtb	r2, r2
 802541a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 802541c:	89fb      	ldrh	r3, [r7, #14]
 802541e:	1c5a      	adds	r2, r3, #1
 8025420:	81fa      	strh	r2, [r7, #14]
 8025422:	461a      	mov	r2, r3
 8025424:	68bb      	ldr	r3, [r7, #8]
 8025426:	4413      	add	r3, r2
 8025428:	687a      	ldr	r2, [r7, #4]
 802542a:	b2d2      	uxtb	r2, r2
 802542c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 802542e:	89fb      	ldrh	r3, [r7, #14]
}
 8025430:	4618      	mov	r0, r3
 8025432:	3710      	adds	r7, #16
 8025434:	46bd      	mov	sp, r7
 8025436:	bd80      	pop	{r7, pc}
 8025438:	0802fe60 	.word	0x0802fe60
 802543c:	080300ac 	.word	0x080300ac
 8025440:	0802fec0 	.word	0x0802fec0

08025444 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8025444:	b580      	push	{r7, lr}
 8025446:	b090      	sub	sp, #64	@ 0x40
 8025448:	af00      	add	r7, sp, #0
 802544a:	6078      	str	r0, [r7, #4]
 802544c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 802544e:	2300      	movs	r3, #0
 8025450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8025452:	2300      	movs	r3, #0
 8025454:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8025456:	220a      	movs	r2, #10
 8025458:	2100      	movs	r1, #0
 802545a:	48ba      	ldr	r0, [pc, #744]	@ (8025744 <dhcp_parse_reply+0x300>)
 802545c:	f004 f932 	bl	80296c4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	895b      	ldrh	r3, [r3, #10]
 8025464:	2b2b      	cmp	r3, #43	@ 0x2b
 8025466:	d802      	bhi.n	802546e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8025468:	f06f 0301 	mvn.w	r3, #1
 802546c:	e2ea      	b.n	8025a44 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 802546e:	687b      	ldr	r3, [r7, #4]
 8025470:	685b      	ldr	r3, [r3, #4]
 8025472:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8025474:	23f0      	movs	r3, #240	@ 0xf0
 8025476:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	891b      	ldrh	r3, [r3, #8]
 802547c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8025482:	e00c      	b.n	802549e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8025484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025486:	895b      	ldrh	r3, [r3, #10]
 8025488:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 802548a:	1ad3      	subs	r3, r2, r3
 802548c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025490:	895b      	ldrh	r3, [r3, #10]
 8025492:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8025494:	1ad3      	subs	r3, r2, r3
 8025496:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8025498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802549a:	681b      	ldr	r3, [r3, #0]
 802549c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 802549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d004      	beq.n	80254ae <dhcp_parse_reply+0x6a>
 80254a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80254a6:	895b      	ldrh	r3, [r3, #10]
 80254a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80254aa:	429a      	cmp	r2, r3
 80254ac:	d2ea      	bcs.n	8025484 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80254ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80254b0:	2b00      	cmp	r3, #0
 80254b2:	d102      	bne.n	80254ba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80254b4:	f06f 0301 	mvn.w	r3, #1
 80254b8:	e2c4      	b.n	8025a44 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 80254ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80254bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80254be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80254c0:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80254c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80254c4:	685b      	ldr	r3, [r3, #4]
 80254c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80254c8:	e267      	b.n	802599a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 80254ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80254cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80254ce:	4413      	add	r3, r2
 80254d0:	781b      	ldrb	r3, [r3, #0]
 80254d2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80254d4:	2300      	movs	r3, #0
 80254d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80254da:	f04f 33ff 	mov.w	r3, #4294967295
 80254de:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80254e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80254e2:	3302      	adds	r3, #2
 80254e4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80254e6:	8bfa      	ldrh	r2, [r7, #30]
 80254e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80254ea:	429a      	cmp	r2, r3
 80254ec:	d202      	bcs.n	80254f4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80254ee:	f06f 0301 	mvn.w	r3, #1
 80254f2:	e2a7      	b.n	8025a44 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80254f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80254f6:	3301      	adds	r3, #1
 80254f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80254fa:	8952      	ldrh	r2, [r2, #10]
 80254fc:	4293      	cmp	r3, r2
 80254fe:	da07      	bge.n	8025510 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8025500:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8025502:	3301      	adds	r3, #1
 8025504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8025506:	4413      	add	r3, r2
 8025508:	781b      	ldrb	r3, [r3, #0]
 802550a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802550e:	e00b      	b.n	8025528 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8025510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	2b00      	cmp	r3, #0
 8025516:	d004      	beq.n	8025522 <dhcp_parse_reply+0xde>
 8025518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802551a:	681b      	ldr	r3, [r3, #0]
 802551c:	685b      	ldr	r3, [r3, #4]
 802551e:	781b      	ldrb	r3, [r3, #0]
 8025520:	e000      	b.n	8025524 <dhcp_parse_reply+0xe0>
 8025522:	2300      	movs	r3, #0
 8025524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8025528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802552c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8025530:	7dfb      	ldrb	r3, [r7, #23]
 8025532:	2b3b      	cmp	r3, #59	@ 0x3b
 8025534:	f200 815a 	bhi.w	80257ec <dhcp_parse_reply+0x3a8>
 8025538:	a201      	add	r2, pc, #4	@ (adr r2, 8025540 <dhcp_parse_reply+0xfc>)
 802553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802553e:	bf00      	nop
 8025540:	08025631 	.word	0x08025631
 8025544:	08025641 	.word	0x08025641
 8025548:	080257ed 	.word	0x080257ed
 802554c:	08025663 	.word	0x08025663
 8025550:	080257ed 	.word	0x080257ed
 8025554:	080257ed 	.word	0x080257ed
 8025558:	0802568f 	.word	0x0802568f
 802555c:	080257ed 	.word	0x080257ed
 8025560:	080257ed 	.word	0x080257ed
 8025564:	080257ed 	.word	0x080257ed
 8025568:	080257ed 	.word	0x080257ed
 802556c:	080257ed 	.word	0x080257ed
 8025570:	080257ed 	.word	0x080257ed
 8025574:	080257ed 	.word	0x080257ed
 8025578:	080257ed 	.word	0x080257ed
 802557c:	080257ed 	.word	0x080257ed
 8025580:	080257ed 	.word	0x080257ed
 8025584:	080257ed 	.word	0x080257ed
 8025588:	080257ed 	.word	0x080257ed
 802558c:	080257ed 	.word	0x080257ed
 8025590:	080257ed 	.word	0x080257ed
 8025594:	080257ed 	.word	0x080257ed
 8025598:	080257ed 	.word	0x080257ed
 802559c:	080257ed 	.word	0x080257ed
 80255a0:	080257ed 	.word	0x080257ed
 80255a4:	080257ed 	.word	0x080257ed
 80255a8:	080257ed 	.word	0x080257ed
 80255ac:	080257ed 	.word	0x080257ed
 80255b0:	080257ed 	.word	0x080257ed
 80255b4:	080257ed 	.word	0x080257ed
 80255b8:	080257ed 	.word	0x080257ed
 80255bc:	080257ed 	.word	0x080257ed
 80255c0:	080257ed 	.word	0x080257ed
 80255c4:	080257ed 	.word	0x080257ed
 80255c8:	080257ed 	.word	0x080257ed
 80255cc:	080257ed 	.word	0x080257ed
 80255d0:	080257ed 	.word	0x080257ed
 80255d4:	080257ed 	.word	0x080257ed
 80255d8:	080257ed 	.word	0x080257ed
 80255dc:	080257ed 	.word	0x080257ed
 80255e0:	080257ed 	.word	0x080257ed
 80255e4:	080257ed 	.word	0x080257ed
 80255e8:	080257ed 	.word	0x080257ed
 80255ec:	080257ed 	.word	0x080257ed
 80255f0:	080257ed 	.word	0x080257ed
 80255f4:	080257ed 	.word	0x080257ed
 80255f8:	080257ed 	.word	0x080257ed
 80255fc:	080257ed 	.word	0x080257ed
 8025600:	080257ed 	.word	0x080257ed
 8025604:	080257ed 	.word	0x080257ed
 8025608:	080257ed 	.word	0x080257ed
 802560c:	080256e5 	.word	0x080256e5
 8025610:	08025707 	.word	0x08025707
 8025614:	08025765 	.word	0x08025765
 8025618:	08025787 	.word	0x08025787
 802561c:	080257ed 	.word	0x080257ed
 8025620:	080257ed 	.word	0x080257ed
 8025624:	080257ed 	.word	0x080257ed
 8025628:	080257a9 	.word	0x080257a9
 802562c:	080257cb 	.word	0x080257cb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8025630:	2300      	movs	r3, #0
 8025632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8025636:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802563a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 802563e:	e0d9      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8025640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025644:	2b04      	cmp	r3, #4
 8025646:	d009      	beq.n	802565c <dhcp_parse_reply+0x218>
 8025648:	4b3f      	ldr	r3, [pc, #252]	@ (8025748 <dhcp_parse_reply+0x304>)
 802564a:	f240 622e 	movw	r2, #1582	@ 0x62e
 802564e:	493f      	ldr	r1, [pc, #252]	@ (802574c <dhcp_parse_reply+0x308>)
 8025650:	483f      	ldr	r0, [pc, #252]	@ (8025750 <dhcp_parse_reply+0x30c>)
 8025652:	f003 fe89 	bl	8029368 <iprintf>
 8025656:	f06f 0305 	mvn.w	r3, #5
 802565a:	e1f3      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 802565c:	2306      	movs	r3, #6
 802565e:	623b      	str	r3, [r7, #32]
        break;
 8025660:	e0c8      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8025662:	2304      	movs	r3, #4
 8025664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8025668:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 802566c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8025670:	429a      	cmp	r2, r3
 8025672:	d209      	bcs.n	8025688 <dhcp_parse_reply+0x244>
 8025674:	4b34      	ldr	r3, [pc, #208]	@ (8025748 <dhcp_parse_reply+0x304>)
 8025676:	f240 6233 	movw	r2, #1587	@ 0x633
 802567a:	4936      	ldr	r1, [pc, #216]	@ (8025754 <dhcp_parse_reply+0x310>)
 802567c:	4834      	ldr	r0, [pc, #208]	@ (8025750 <dhcp_parse_reply+0x30c>)
 802567e:	f003 fe73 	bl	8029368 <iprintf>
 8025682:	f06f 0305 	mvn.w	r3, #5
 8025686:	e1dd      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8025688:	2307      	movs	r3, #7
 802568a:	623b      	str	r3, [r7, #32]
        break;
 802568c:	e0b2      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802568e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025692:	f003 0303 	and.w	r3, r3, #3
 8025696:	b2db      	uxtb	r3, r3
 8025698:	2b00      	cmp	r3, #0
 802569a:	d009      	beq.n	80256b0 <dhcp_parse_reply+0x26c>
 802569c:	4b2a      	ldr	r3, [pc, #168]	@ (8025748 <dhcp_parse_reply+0x304>)
 802569e:	f240 6239 	movw	r2, #1593	@ 0x639
 80256a2:	492d      	ldr	r1, [pc, #180]	@ (8025758 <dhcp_parse_reply+0x314>)
 80256a4:	482a      	ldr	r0, [pc, #168]	@ (8025750 <dhcp_parse_reply+0x30c>)
 80256a6:	f003 fe5f 	bl	8029368 <iprintf>
 80256aa:	f06f 0305 	mvn.w	r3, #5
 80256ae:	e1c9      	b.n	8025a44 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80256b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80256b4:	2b08      	cmp	r3, #8
 80256b6:	bf28      	it	cs
 80256b8:	2308      	movcs	r3, #8
 80256ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80256be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80256c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80256c6:	429a      	cmp	r2, r3
 80256c8:	d209      	bcs.n	80256de <dhcp_parse_reply+0x29a>
 80256ca:	4b1f      	ldr	r3, [pc, #124]	@ (8025748 <dhcp_parse_reply+0x304>)
 80256cc:	f240 623c 	movw	r2, #1596	@ 0x63c
 80256d0:	4920      	ldr	r1, [pc, #128]	@ (8025754 <dhcp_parse_reply+0x310>)
 80256d2:	481f      	ldr	r0, [pc, #124]	@ (8025750 <dhcp_parse_reply+0x30c>)
 80256d4:	f003 fe48 	bl	8029368 <iprintf>
 80256d8:	f06f 0305 	mvn.w	r3, #5
 80256dc:	e1b2      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80256de:	2308      	movs	r3, #8
 80256e0:	623b      	str	r3, [r7, #32]
        break;
 80256e2:	e087      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80256e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80256e8:	2b04      	cmp	r3, #4
 80256ea:	d009      	beq.n	8025700 <dhcp_parse_reply+0x2bc>
 80256ec:	4b16      	ldr	r3, [pc, #88]	@ (8025748 <dhcp_parse_reply+0x304>)
 80256ee:	f240 6241 	movw	r2, #1601	@ 0x641
 80256f2:	4916      	ldr	r1, [pc, #88]	@ (802574c <dhcp_parse_reply+0x308>)
 80256f4:	4816      	ldr	r0, [pc, #88]	@ (8025750 <dhcp_parse_reply+0x30c>)
 80256f6:	f003 fe37 	bl	8029368 <iprintf>
 80256fa:	f06f 0305 	mvn.w	r3, #5
 80256fe:	e1a1      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8025700:	2303      	movs	r3, #3
 8025702:	623b      	str	r3, [r7, #32]
        break;
 8025704:	e076      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8025706:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802570a:	2b01      	cmp	r3, #1
 802570c:	d009      	beq.n	8025722 <dhcp_parse_reply+0x2de>
 802570e:	4b0e      	ldr	r3, [pc, #56]	@ (8025748 <dhcp_parse_reply+0x304>)
 8025710:	f240 624f 	movw	r2, #1615	@ 0x64f
 8025714:	4911      	ldr	r1, [pc, #68]	@ (802575c <dhcp_parse_reply+0x318>)
 8025716:	480e      	ldr	r0, [pc, #56]	@ (8025750 <dhcp_parse_reply+0x30c>)
 8025718:	f003 fe26 	bl	8029368 <iprintf>
 802571c:	f06f 0305 	mvn.w	r3, #5
 8025720:	e190      	b.n	8025a44 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8025722:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8025724:	2bf0      	cmp	r3, #240	@ 0xf0
 8025726:	d009      	beq.n	802573c <dhcp_parse_reply+0x2f8>
 8025728:	4b07      	ldr	r3, [pc, #28]	@ (8025748 <dhcp_parse_reply+0x304>)
 802572a:	f240 6251 	movw	r2, #1617	@ 0x651
 802572e:	490c      	ldr	r1, [pc, #48]	@ (8025760 <dhcp_parse_reply+0x31c>)
 8025730:	4807      	ldr	r0, [pc, #28]	@ (8025750 <dhcp_parse_reply+0x30c>)
 8025732:	f003 fe19 	bl	8029368 <iprintf>
 8025736:	f06f 0305 	mvn.w	r3, #5
 802573a:	e183      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 802573c:	2300      	movs	r3, #0
 802573e:	623b      	str	r3, [r7, #32]
        break;
 8025740:	e058      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
 8025742:	bf00      	nop
 8025744:	2400b514 	.word	0x2400b514
 8025748:	0802fe60 	.word	0x0802fe60
 802574c:	080300e8 	.word	0x080300e8
 8025750:	0802fec0 	.word	0x0802fec0
 8025754:	080300f4 	.word	0x080300f4
 8025758:	08030108 	.word	0x08030108
 802575c:	08030118 	.word	0x08030118
 8025760:	08030124 	.word	0x08030124
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8025764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025768:	2b01      	cmp	r3, #1
 802576a:	d009      	beq.n	8025780 <dhcp_parse_reply+0x33c>
 802576c:	4b9d      	ldr	r3, [pc, #628]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 802576e:	f240 6255 	movw	r2, #1621	@ 0x655
 8025772:	499d      	ldr	r1, [pc, #628]	@ (80259e8 <dhcp_parse_reply+0x5a4>)
 8025774:	489d      	ldr	r0, [pc, #628]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 8025776:	f003 fdf7 	bl	8029368 <iprintf>
 802577a:	f06f 0305 	mvn.w	r3, #5
 802577e:	e161      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8025780:	2301      	movs	r3, #1
 8025782:	623b      	str	r3, [r7, #32]
        break;
 8025784:	e036      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8025786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802578a:	2b04      	cmp	r3, #4
 802578c:	d009      	beq.n	80257a2 <dhcp_parse_reply+0x35e>
 802578e:	4b95      	ldr	r3, [pc, #596]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 8025790:	f240 6259 	movw	r2, #1625	@ 0x659
 8025794:	4996      	ldr	r1, [pc, #600]	@ (80259f0 <dhcp_parse_reply+0x5ac>)
 8025796:	4895      	ldr	r0, [pc, #596]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 8025798:	f003 fde6 	bl	8029368 <iprintf>
 802579c:	f06f 0305 	mvn.w	r3, #5
 80257a0:	e150      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80257a2:	2302      	movs	r3, #2
 80257a4:	623b      	str	r3, [r7, #32]
        break;
 80257a6:	e025      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80257a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80257ac:	2b04      	cmp	r3, #4
 80257ae:	d009      	beq.n	80257c4 <dhcp_parse_reply+0x380>
 80257b0:	4b8c      	ldr	r3, [pc, #560]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 80257b2:	f240 625d 	movw	r2, #1629	@ 0x65d
 80257b6:	498e      	ldr	r1, [pc, #568]	@ (80259f0 <dhcp_parse_reply+0x5ac>)
 80257b8:	488c      	ldr	r0, [pc, #560]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 80257ba:	f003 fdd5 	bl	8029368 <iprintf>
 80257be:	f06f 0305 	mvn.w	r3, #5
 80257c2:	e13f      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 80257c4:	2304      	movs	r3, #4
 80257c6:	623b      	str	r3, [r7, #32]
        break;
 80257c8:	e014      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80257ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80257ce:	2b04      	cmp	r3, #4
 80257d0:	d009      	beq.n	80257e6 <dhcp_parse_reply+0x3a2>
 80257d2:	4b84      	ldr	r3, [pc, #528]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 80257d4:	f240 6261 	movw	r2, #1633	@ 0x661
 80257d8:	4985      	ldr	r1, [pc, #532]	@ (80259f0 <dhcp_parse_reply+0x5ac>)
 80257da:	4884      	ldr	r0, [pc, #528]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 80257dc:	f003 fdc4 	bl	8029368 <iprintf>
 80257e0:	f06f 0305 	mvn.w	r3, #5
 80257e4:	e12e      	b.n	8025a44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 80257e6:	2305      	movs	r3, #5
 80257e8:	623b      	str	r3, [r7, #32]
        break;
 80257ea:	e003      	b.n	80257f4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 80257ec:	2300      	movs	r3, #0
 80257ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80257f2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80257f4:	7dfb      	ldrb	r3, [r7, #23]
 80257f6:	2b00      	cmp	r3, #0
 80257f8:	d103      	bne.n	8025802 <dhcp_parse_reply+0x3be>
      offset++;
 80257fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80257fc:	3301      	adds	r3, #1
 80257fe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8025800:	e0a1      	b.n	8025946 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8025802:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8025804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025808:	4413      	add	r3, r2
 802580a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802580e:	4293      	cmp	r3, r2
 8025810:	dd02      	ble.n	8025818 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8025812:	f06f 0301 	mvn.w	r3, #1
 8025816:	e115      	b.n	8025a44 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8025818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802581c:	b29a      	uxth	r2, r3
 802581e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8025820:	4413      	add	r3, r2
 8025822:	b29b      	uxth	r3, r3
 8025824:	3302      	adds	r3, #2
 8025826:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8025828:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 802582c:	2b00      	cmp	r3, #0
 802582e:	f000 808a 	beq.w	8025946 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8025832:	2300      	movs	r3, #0
 8025834:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8025836:	6a3b      	ldr	r3, [r7, #32]
 8025838:	2b00      	cmp	r3, #0
 802583a:	db02      	blt.n	8025842 <dhcp_parse_reply+0x3fe>
 802583c:	6a3b      	ldr	r3, [r7, #32]
 802583e:	2b09      	cmp	r3, #9
 8025840:	dd06      	ble.n	8025850 <dhcp_parse_reply+0x40c>
 8025842:	4b68      	ldr	r3, [pc, #416]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 8025844:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8025848:	496a      	ldr	r1, [pc, #424]	@ (80259f4 <dhcp_parse_reply+0x5b0>)
 802584a:	4868      	ldr	r0, [pc, #416]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 802584c:	f003 fd8c 	bl	8029368 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8025850:	4a69      	ldr	r2, [pc, #420]	@ (80259f8 <dhcp_parse_reply+0x5b4>)
 8025852:	6a3b      	ldr	r3, [r7, #32]
 8025854:	4413      	add	r3, r2
 8025856:	781b      	ldrb	r3, [r3, #0]
 8025858:	2b00      	cmp	r3, #0
 802585a:	d174      	bne.n	8025946 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 802585c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8025860:	2b04      	cmp	r3, #4
 8025862:	bf28      	it	cs
 8025864:	2304      	movcs	r3, #4
 8025866:	b2db      	uxtb	r3, r3
 8025868:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802586a:	8bfb      	ldrh	r3, [r7, #30]
 802586c:	8aba      	ldrh	r2, [r7, #20]
 802586e:	f107 0108 	add.w	r1, r7, #8
 8025872:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8025874:	f7f8 fa8e 	bl	801dd94 <pbuf_copy_partial>
 8025878:	4603      	mov	r3, r0
 802587a:	461a      	mov	r2, r3
 802587c:	8abb      	ldrh	r3, [r7, #20]
 802587e:	4293      	cmp	r3, r2
 8025880:	d002      	beq.n	8025888 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8025882:	f06f 0301 	mvn.w	r3, #1
 8025886:	e0dd      	b.n	8025a44 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8025888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 802588c:	2b04      	cmp	r3, #4
 802588e:	d933      	bls.n	80258f8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8025890:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8025894:	f003 0303 	and.w	r3, r3, #3
 8025898:	b2db      	uxtb	r3, r3
 802589a:	2b00      	cmp	r3, #0
 802589c:	d009      	beq.n	80258b2 <dhcp_parse_reply+0x46e>
 802589e:	4b51      	ldr	r3, [pc, #324]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 80258a0:	f240 6281 	movw	r2, #1665	@ 0x681
 80258a4:	4955      	ldr	r1, [pc, #340]	@ (80259fc <dhcp_parse_reply+0x5b8>)
 80258a6:	4851      	ldr	r0, [pc, #324]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 80258a8:	f003 fd5e 	bl	8029368 <iprintf>
 80258ac:	f06f 0305 	mvn.w	r3, #5
 80258b0:	e0c8      	b.n	8025a44 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 80258b2:	4a51      	ldr	r2, [pc, #324]	@ (80259f8 <dhcp_parse_reply+0x5b4>)
 80258b4:	6a3b      	ldr	r3, [r7, #32]
 80258b6:	4413      	add	r3, r2
 80258b8:	2201      	movs	r2, #1
 80258ba:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80258bc:	68bb      	ldr	r3, [r7, #8]
 80258be:	4618      	mov	r0, r3
 80258c0:	f7f6 f993 	bl	801bbea <lwip_htonl>
 80258c4:	4602      	mov	r2, r0
 80258c6:	494e      	ldr	r1, [pc, #312]	@ (8025a00 <dhcp_parse_reply+0x5bc>)
 80258c8:	6a3b      	ldr	r3, [r7, #32]
 80258ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80258ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80258d2:	3b04      	subs	r3, #4
 80258d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80258d8:	8bfb      	ldrh	r3, [r7, #30]
 80258da:	3304      	adds	r3, #4
 80258dc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80258de:	8a7a      	ldrh	r2, [r7, #18]
 80258e0:	8bfb      	ldrh	r3, [r7, #30]
 80258e2:	429a      	cmp	r2, r3
 80258e4:	d202      	bcs.n	80258ec <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 80258e6:	f06f 0301 	mvn.w	r3, #1
 80258ea:	e0ab      	b.n	8025a44 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 80258ec:	8a7b      	ldrh	r3, [r7, #18]
 80258ee:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80258f0:	6a3b      	ldr	r3, [r7, #32]
 80258f2:	3301      	adds	r3, #1
 80258f4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80258f6:	e79e      	b.n	8025836 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 80258f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80258fc:	2b04      	cmp	r3, #4
 80258fe:	d106      	bne.n	802590e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8025900:	68bb      	ldr	r3, [r7, #8]
 8025902:	4618      	mov	r0, r3
 8025904:	f7f6 f971 	bl	801bbea <lwip_htonl>
 8025908:	4603      	mov	r3, r0
 802590a:	60bb      	str	r3, [r7, #8]
 802590c:	e011      	b.n	8025932 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802590e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8025912:	2b01      	cmp	r3, #1
 8025914:	d009      	beq.n	802592a <dhcp_parse_reply+0x4e6>
 8025916:	4b33      	ldr	r3, [pc, #204]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 8025918:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 802591c:	4939      	ldr	r1, [pc, #228]	@ (8025a04 <dhcp_parse_reply+0x5c0>)
 802591e:	4833      	ldr	r0, [pc, #204]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 8025920:	f003 fd22 	bl	8029368 <iprintf>
 8025924:	f06f 0305 	mvn.w	r3, #5
 8025928:	e08c      	b.n	8025a44 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 802592a:	f107 0308 	add.w	r3, r7, #8
 802592e:	781b      	ldrb	r3, [r3, #0]
 8025930:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8025932:	4a31      	ldr	r2, [pc, #196]	@ (80259f8 <dhcp_parse_reply+0x5b4>)
 8025934:	6a3b      	ldr	r3, [r7, #32]
 8025936:	4413      	add	r3, r2
 8025938:	2201      	movs	r2, #1
 802593a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802593c:	68ba      	ldr	r2, [r7, #8]
 802593e:	4930      	ldr	r1, [pc, #192]	@ (8025a00 <dhcp_parse_reply+0x5bc>)
 8025940:	6a3b      	ldr	r3, [r7, #32]
 8025942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8025946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025948:	895b      	ldrh	r3, [r3, #10]
 802594a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 802594c:	429a      	cmp	r2, r3
 802594e:	d324      	bcc.n	802599a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8025950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025952:	895b      	ldrh	r3, [r3, #10]
 8025954:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8025956:	1ad3      	subs	r3, r2, r3
 8025958:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 802595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802595c:	895b      	ldrh	r3, [r3, #10]
 802595e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8025960:	1ad3      	subs	r3, r2, r3
 8025962:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8025964:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8025966:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8025968:	429a      	cmp	r2, r3
 802596a:	d213      	bcs.n	8025994 <dhcp_parse_reply+0x550>
        q = q->next;
 802596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802596e:	681b      	ldr	r3, [r3, #0]
 8025970:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8025972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025974:	2b00      	cmp	r3, #0
 8025976:	d109      	bne.n	802598c <dhcp_parse_reply+0x548>
 8025978:	4b1a      	ldr	r3, [pc, #104]	@ (80259e4 <dhcp_parse_reply+0x5a0>)
 802597a:	f240 629d 	movw	r2, #1693	@ 0x69d
 802597e:	4922      	ldr	r1, [pc, #136]	@ (8025a08 <dhcp_parse_reply+0x5c4>)
 8025980:	481a      	ldr	r0, [pc, #104]	@ (80259ec <dhcp_parse_reply+0x5a8>)
 8025982:	f003 fcf1 	bl	8029368 <iprintf>
 8025986:	f06f 0305 	mvn.w	r3, #5
 802598a:	e05b      	b.n	8025a44 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 802598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802598e:	685b      	ldr	r3, [r3, #4]
 8025990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8025992:	e002      	b.n	802599a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8025994:	f06f 0301 	mvn.w	r3, #1
 8025998:	e054      	b.n	8025a44 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802599c:	2b00      	cmp	r3, #0
 802599e:	d00a      	beq.n	80259b6 <dhcp_parse_reply+0x572>
 80259a0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80259a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80259a4:	429a      	cmp	r2, r3
 80259a6:	d206      	bcs.n	80259b6 <dhcp_parse_reply+0x572>
 80259a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80259aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80259ac:	4413      	add	r3, r2
 80259ae:	781b      	ldrb	r3, [r3, #0]
 80259b0:	2bff      	cmp	r3, #255	@ 0xff
 80259b2:	f47f ad8a 	bne.w	80254ca <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80259b6:	4b10      	ldr	r3, [pc, #64]	@ (80259f8 <dhcp_parse_reply+0x5b4>)
 80259b8:	781b      	ldrb	r3, [r3, #0]
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d02d      	beq.n	8025a1a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80259be:	4b10      	ldr	r3, [pc, #64]	@ (8025a00 <dhcp_parse_reply+0x5bc>)
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80259c4:	4b0c      	ldr	r3, [pc, #48]	@ (80259f8 <dhcp_parse_reply+0x5b4>)
 80259c6:	2200      	movs	r2, #0
 80259c8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80259ca:	68fb      	ldr	r3, [r7, #12]
 80259cc:	2b01      	cmp	r3, #1
 80259ce:	d102      	bne.n	80259d6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 80259d0:	2301      	movs	r3, #1
 80259d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80259d4:	e021      	b.n	8025a1a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80259d6:	68fb      	ldr	r3, [r7, #12]
 80259d8:	2b02      	cmp	r3, #2
 80259da:	d117      	bne.n	8025a0c <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 80259dc:	2301      	movs	r3, #1
 80259de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80259e0:	e01b      	b.n	8025a1a <dhcp_parse_reply+0x5d6>
 80259e2:	bf00      	nop
 80259e4:	0802fe60 	.word	0x0802fe60
 80259e8:	08030118 	.word	0x08030118
 80259ec:	0802fec0 	.word	0x0802fec0
 80259f0:	080300e8 	.word	0x080300e8
 80259f4:	0803013c 	.word	0x0803013c
 80259f8:	2400b514 	.word	0x2400b514
 80259fc:	08030150 	.word	0x08030150
 8025a00:	2400b4ec 	.word	0x2400b4ec
 8025a04:	08030168 	.word	0x08030168
 8025a08:	0803017c 	.word	0x0803017c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8025a0c:	68fb      	ldr	r3, [r7, #12]
 8025a0e:	2b03      	cmp	r3, #3
 8025a10:	d103      	bne.n	8025a1a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8025a12:	2301      	movs	r3, #1
 8025a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8025a16:	2301      	movs	r3, #1
 8025a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8025a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	d006      	beq.n	8025a2e <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8025a20:	2300      	movs	r3, #0
 8025a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8025a24:	236c      	movs	r3, #108	@ 0x6c
 8025a26:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8025a28:	23ec      	movs	r3, #236	@ 0xec
 8025a2a:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8025a2c:	e527      	b.n	802547e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8025a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025a30:	2b00      	cmp	r3, #0
 8025a32:	d006      	beq.n	8025a42 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8025a34:	2300      	movs	r3, #0
 8025a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8025a38:	232c      	movs	r3, #44	@ 0x2c
 8025a3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8025a3c:	236c      	movs	r3, #108	@ 0x6c
 8025a3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8025a40:	e51d      	b.n	802547e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8025a42:	2300      	movs	r3, #0
}
 8025a44:	4618      	mov	r0, r3
 8025a46:	3740      	adds	r7, #64	@ 0x40
 8025a48:	46bd      	mov	sp, r7
 8025a4a:	bd80      	pop	{r7, pc}

08025a4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8025a4c:	b580      	push	{r7, lr}
 8025a4e:	b08a      	sub	sp, #40	@ 0x28
 8025a50:	af00      	add	r7, sp, #0
 8025a52:	60f8      	str	r0, [r7, #12]
 8025a54:	60b9      	str	r1, [r7, #8]
 8025a56:	607a      	str	r2, [r7, #4]
 8025a58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8025a5a:	4b60      	ldr	r3, [pc, #384]	@ (8025bdc <dhcp_recv+0x190>)
 8025a5c:	685b      	ldr	r3, [r3, #4]
 8025a5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8025a60:	6a3b      	ldr	r3, [r7, #32]
 8025a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025a64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8025a66:	687b      	ldr	r3, [r7, #4]
 8025a68:	685b      	ldr	r3, [r3, #4]
 8025a6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8025a6c:	69fb      	ldr	r3, [r7, #28]
 8025a6e:	2b00      	cmp	r3, #0
 8025a70:	f000 809d 	beq.w	8025bae <dhcp_recv+0x162>
 8025a74:	69fb      	ldr	r3, [r7, #28]
 8025a76:	791b      	ldrb	r3, [r3, #4]
 8025a78:	2b00      	cmp	r3, #0
 8025a7a:	f000 8098 	beq.w	8025bae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8025a7e:	687b      	ldr	r3, [r7, #4]
 8025a80:	895b      	ldrh	r3, [r3, #10]
 8025a82:	2b2b      	cmp	r3, #43	@ 0x2b
 8025a84:	f240 8095 	bls.w	8025bb2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8025a88:	69bb      	ldr	r3, [r7, #24]
 8025a8a:	781b      	ldrb	r3, [r3, #0]
 8025a8c:	2b02      	cmp	r3, #2
 8025a8e:	f040 8092 	bne.w	8025bb6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8025a92:	2300      	movs	r3, #0
 8025a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8025a98:	e012      	b.n	8025ac0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8025a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025a9e:	6a3a      	ldr	r2, [r7, #32]
 8025aa0:	4413      	add	r3, r2
 8025aa2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8025aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025aaa:	69b9      	ldr	r1, [r7, #24]
 8025aac:	440b      	add	r3, r1
 8025aae:	7f1b      	ldrb	r3, [r3, #28]
 8025ab0:	429a      	cmp	r2, r3
 8025ab2:	f040 8082 	bne.w	8025bba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8025ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025aba:	3301      	adds	r3, #1
 8025abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8025ac0:	6a3b      	ldr	r3, [r7, #32]
 8025ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8025ac6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8025aca:	429a      	cmp	r2, r3
 8025acc:	d203      	bcs.n	8025ad6 <dhcp_recv+0x8a>
 8025ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025ad2:	2b05      	cmp	r3, #5
 8025ad4:	d9e1      	bls.n	8025a9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8025ad6:	69bb      	ldr	r3, [r7, #24]
 8025ad8:	685b      	ldr	r3, [r3, #4]
 8025ada:	4618      	mov	r0, r3
 8025adc:	f7f6 f885 	bl	801bbea <lwip_htonl>
 8025ae0:	4602      	mov	r2, r0
 8025ae2:	69fb      	ldr	r3, [r7, #28]
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	429a      	cmp	r2, r3
 8025ae8:	d169      	bne.n	8025bbe <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8025aea:	69f9      	ldr	r1, [r7, #28]
 8025aec:	6878      	ldr	r0, [r7, #4]
 8025aee:	f7ff fca9 	bl	8025444 <dhcp_parse_reply>
 8025af2:	4603      	mov	r3, r0
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d164      	bne.n	8025bc2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8025af8:	4b39      	ldr	r3, [pc, #228]	@ (8025be0 <dhcp_recv+0x194>)
 8025afa:	785b      	ldrb	r3, [r3, #1]
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	d062      	beq.n	8025bc6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	685b      	ldr	r3, [r3, #4]
 8025b04:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8025b06:	4b37      	ldr	r3, [pc, #220]	@ (8025be4 <dhcp_recv+0x198>)
 8025b08:	685b      	ldr	r3, [r3, #4]
 8025b0a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8025b0c:	7cfb      	ldrb	r3, [r7, #19]
 8025b0e:	2b05      	cmp	r3, #5
 8025b10:	d12a      	bne.n	8025b68 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8025b12:	69fb      	ldr	r3, [r7, #28]
 8025b14:	795b      	ldrb	r3, [r3, #5]
 8025b16:	2b01      	cmp	r3, #1
 8025b18:	d112      	bne.n	8025b40 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8025b1a:	6979      	ldr	r1, [r7, #20]
 8025b1c:	6a38      	ldr	r0, [r7, #32]
 8025b1e:	f7fe fdcd 	bl	80246bc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8025b22:	6a3b      	ldr	r3, [r7, #32]
 8025b24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8025b28:	f003 0308 	and.w	r3, r3, #8
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	d003      	beq.n	8025b38 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8025b30:	6a38      	ldr	r0, [r7, #32]
 8025b32:	f7fe fb3b 	bl	80241ac <dhcp_check>
 8025b36:	e049      	b.n	8025bcc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8025b38:	6a38      	ldr	r0, [r7, #32]
 8025b3a:	f7ff f83d 	bl	8024bb8 <dhcp_bind>
 8025b3e:	e045      	b.n	8025bcc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8025b40:	69fb      	ldr	r3, [r7, #28]
 8025b42:	795b      	ldrb	r3, [r3, #5]
 8025b44:	2b03      	cmp	r3, #3
 8025b46:	d007      	beq.n	8025b58 <dhcp_recv+0x10c>
 8025b48:	69fb      	ldr	r3, [r7, #28]
 8025b4a:	795b      	ldrb	r3, [r3, #5]
 8025b4c:	2b04      	cmp	r3, #4
 8025b4e:	d003      	beq.n	8025b58 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8025b50:	69fb      	ldr	r3, [r7, #28]
 8025b52:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8025b54:	2b05      	cmp	r3, #5
 8025b56:	d139      	bne.n	8025bcc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8025b58:	6979      	ldr	r1, [r7, #20]
 8025b5a:	6a38      	ldr	r0, [r7, #32]
 8025b5c:	f7fe fdae 	bl	80246bc <dhcp_handle_ack>
      dhcp_bind(netif);
 8025b60:	6a38      	ldr	r0, [r7, #32]
 8025b62:	f7ff f829 	bl	8024bb8 <dhcp_bind>
 8025b66:	e031      	b.n	8025bcc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8025b68:	7cfb      	ldrb	r3, [r7, #19]
 8025b6a:	2b06      	cmp	r3, #6
 8025b6c:	d113      	bne.n	8025b96 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8025b6e:	69fb      	ldr	r3, [r7, #28]
 8025b70:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8025b72:	2b03      	cmp	r3, #3
 8025b74:	d00b      	beq.n	8025b8e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8025b76:	69fb      	ldr	r3, [r7, #28]
 8025b78:	795b      	ldrb	r3, [r3, #5]
 8025b7a:	2b01      	cmp	r3, #1
 8025b7c:	d007      	beq.n	8025b8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8025b7e:	69fb      	ldr	r3, [r7, #28]
 8025b80:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8025b82:	2b04      	cmp	r3, #4
 8025b84:	d003      	beq.n	8025b8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8025b86:	69fb      	ldr	r3, [r7, #28]
 8025b88:	795b      	ldrb	r3, [r3, #5]
 8025b8a:	2b05      	cmp	r3, #5
 8025b8c:	d103      	bne.n	8025b96 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8025b8e:	6a38      	ldr	r0, [r7, #32]
 8025b90:	f7fe faf2 	bl	8024178 <dhcp_handle_nak>
 8025b94:	e01a      	b.n	8025bcc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8025b96:	7cfb      	ldrb	r3, [r7, #19]
 8025b98:	2b02      	cmp	r3, #2
 8025b9a:	d116      	bne.n	8025bca <dhcp_recv+0x17e>
 8025b9c:	69fb      	ldr	r3, [r7, #28]
 8025b9e:	795b      	ldrb	r3, [r3, #5]
 8025ba0:	2b06      	cmp	r3, #6
 8025ba2:	d112      	bne.n	8025bca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8025ba4:	6979      	ldr	r1, [r7, #20]
 8025ba6:	6a38      	ldr	r0, [r7, #32]
 8025ba8:	f7fe fb34 	bl	8024214 <dhcp_handle_offer>
 8025bac:	e00e      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bae:	bf00      	nop
 8025bb0:	e00c      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bb2:	bf00      	nop
 8025bb4:	e00a      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bb6:	bf00      	nop
 8025bb8:	e008      	b.n	8025bcc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8025bba:	bf00      	nop
 8025bbc:	e006      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bbe:	bf00      	nop
 8025bc0:	e004      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bc2:	bf00      	nop
 8025bc4:	e002      	b.n	8025bcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8025bc6:	bf00      	nop
 8025bc8:	e000      	b.n	8025bcc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8025bca:	bf00      	nop
  pbuf_free(p);
 8025bcc:	6878      	ldr	r0, [r7, #4]
 8025bce:	f7f7 fee7 	bl	801d9a0 <pbuf_free>
}
 8025bd2:	bf00      	nop
 8025bd4:	3728      	adds	r7, #40	@ 0x28
 8025bd6:	46bd      	mov	sp, r7
 8025bd8:	bd80      	pop	{r7, pc}
 8025bda:	bf00      	nop
 8025bdc:	24008540 	.word	0x24008540
 8025be0:	2400b514 	.word	0x2400b514
 8025be4:	2400b4ec 	.word	0x2400b4ec

08025be8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8025be8:	b580      	push	{r7, lr}
 8025bea:	b088      	sub	sp, #32
 8025bec:	af00      	add	r7, sp, #0
 8025bee:	60f8      	str	r0, [r7, #12]
 8025bf0:	60b9      	str	r1, [r7, #8]
 8025bf2:	603b      	str	r3, [r7, #0]
 8025bf4:	4613      	mov	r3, r2
 8025bf6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8025bf8:	68fb      	ldr	r3, [r7, #12]
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	d108      	bne.n	8025c10 <dhcp_create_msg+0x28>
 8025bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8025d7c <dhcp_create_msg+0x194>)
 8025c00:	f240 7269 	movw	r2, #1897	@ 0x769
 8025c04:	495e      	ldr	r1, [pc, #376]	@ (8025d80 <dhcp_create_msg+0x198>)
 8025c06:	485f      	ldr	r0, [pc, #380]	@ (8025d84 <dhcp_create_msg+0x19c>)
 8025c08:	f003 fbae 	bl	8029368 <iprintf>
 8025c0c:	2300      	movs	r3, #0
 8025c0e:	e0b1      	b.n	8025d74 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8025c10:	68bb      	ldr	r3, [r7, #8]
 8025c12:	2b00      	cmp	r3, #0
 8025c14:	d108      	bne.n	8025c28 <dhcp_create_msg+0x40>
 8025c16:	4b59      	ldr	r3, [pc, #356]	@ (8025d7c <dhcp_create_msg+0x194>)
 8025c18:	f240 726a 	movw	r2, #1898	@ 0x76a
 8025c1c:	495a      	ldr	r1, [pc, #360]	@ (8025d88 <dhcp_create_msg+0x1a0>)
 8025c1e:	4859      	ldr	r0, [pc, #356]	@ (8025d84 <dhcp_create_msg+0x19c>)
 8025c20:	f003 fba2 	bl	8029368 <iprintf>
 8025c24:	2300      	movs	r3, #0
 8025c26:	e0a5      	b.n	8025d74 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8025c28:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8025c2c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8025c30:	2036      	movs	r0, #54	@ 0x36
 8025c32:	f7f7 fbd1 	bl	801d3d8 <pbuf_alloc>
 8025c36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8025c38:	69bb      	ldr	r3, [r7, #24]
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	d101      	bne.n	8025c42 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8025c3e:	2300      	movs	r3, #0
 8025c40:	e098      	b.n	8025d74 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8025c42:	69bb      	ldr	r3, [r7, #24]
 8025c44:	895b      	ldrh	r3, [r3, #10]
 8025c46:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8025c4a:	d206      	bcs.n	8025c5a <dhcp_create_msg+0x72>
 8025c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8025d7c <dhcp_create_msg+0x194>)
 8025c4e:	f240 7271 	movw	r2, #1905	@ 0x771
 8025c52:	494e      	ldr	r1, [pc, #312]	@ (8025d8c <dhcp_create_msg+0x1a4>)
 8025c54:	484b      	ldr	r0, [pc, #300]	@ (8025d84 <dhcp_create_msg+0x19c>)
 8025c56:	f003 fb87 	bl	8029368 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8025c5a:	79fb      	ldrb	r3, [r7, #7]
 8025c5c:	2b03      	cmp	r3, #3
 8025c5e:	d103      	bne.n	8025c68 <dhcp_create_msg+0x80>
 8025c60:	68bb      	ldr	r3, [r7, #8]
 8025c62:	795b      	ldrb	r3, [r3, #5]
 8025c64:	2b03      	cmp	r3, #3
 8025c66:	d10d      	bne.n	8025c84 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8025c68:	68bb      	ldr	r3, [r7, #8]
 8025c6a:	799b      	ldrb	r3, [r3, #6]
 8025c6c:	2b00      	cmp	r3, #0
 8025c6e:	d105      	bne.n	8025c7c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8025c70:	f002 fdac 	bl	80287cc <rand>
 8025c74:	4603      	mov	r3, r0
 8025c76:	461a      	mov	r2, r3
 8025c78:	4b45      	ldr	r3, [pc, #276]	@ (8025d90 <dhcp_create_msg+0x1a8>)
 8025c7a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8025c7c:	4b44      	ldr	r3, [pc, #272]	@ (8025d90 <dhcp_create_msg+0x1a8>)
 8025c7e:	681a      	ldr	r2, [r3, #0]
 8025c80:	68bb      	ldr	r3, [r7, #8]
 8025c82:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8025c84:	69bb      	ldr	r3, [r7, #24]
 8025c86:	685b      	ldr	r3, [r3, #4]
 8025c88:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8025c8a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8025c8e:	2100      	movs	r1, #0
 8025c90:	6978      	ldr	r0, [r7, #20]
 8025c92:	f003 fd17 	bl	80296c4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8025c96:	697b      	ldr	r3, [r7, #20]
 8025c98:	2201      	movs	r2, #1
 8025c9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8025c9c:	697b      	ldr	r3, [r7, #20]
 8025c9e:	2201      	movs	r2, #1
 8025ca0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8025ca2:	68fb      	ldr	r3, [r7, #12]
 8025ca4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8025ca8:	697b      	ldr	r3, [r7, #20]
 8025caa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8025cac:	68bb      	ldr	r3, [r7, #8]
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	4618      	mov	r0, r3
 8025cb2:	f7f5 ff9a 	bl	801bbea <lwip_htonl>
 8025cb6:	4602      	mov	r2, r0
 8025cb8:	697b      	ldr	r3, [r7, #20]
 8025cba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8025cbc:	79fb      	ldrb	r3, [r7, #7]
 8025cbe:	2b08      	cmp	r3, #8
 8025cc0:	d010      	beq.n	8025ce4 <dhcp_create_msg+0xfc>
 8025cc2:	79fb      	ldrb	r3, [r7, #7]
 8025cc4:	2b04      	cmp	r3, #4
 8025cc6:	d00d      	beq.n	8025ce4 <dhcp_create_msg+0xfc>
 8025cc8:	79fb      	ldrb	r3, [r7, #7]
 8025cca:	2b07      	cmp	r3, #7
 8025ccc:	d00a      	beq.n	8025ce4 <dhcp_create_msg+0xfc>
 8025cce:	79fb      	ldrb	r3, [r7, #7]
 8025cd0:	2b03      	cmp	r3, #3
 8025cd2:	d10c      	bne.n	8025cee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8025cd4:	68bb      	ldr	r3, [r7, #8]
 8025cd6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8025cd8:	2b05      	cmp	r3, #5
 8025cda:	d003      	beq.n	8025ce4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8025cdc:	68bb      	ldr	r3, [r7, #8]
 8025cde:	795b      	ldrb	r3, [r3, #5]
 8025ce0:	2b04      	cmp	r3, #4
 8025ce2:	d104      	bne.n	8025cee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8025ce4:	68fb      	ldr	r3, [r7, #12]
 8025ce6:	3304      	adds	r3, #4
 8025ce8:	681a      	ldr	r2, [r3, #0]
 8025cea:	697b      	ldr	r3, [r7, #20]
 8025cec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8025cee:	2300      	movs	r3, #0
 8025cf0:	83fb      	strh	r3, [r7, #30]
 8025cf2:	e00c      	b.n	8025d0e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8025cf4:	8bfa      	ldrh	r2, [r7, #30]
 8025cf6:	8bfb      	ldrh	r3, [r7, #30]
 8025cf8:	68f9      	ldr	r1, [r7, #12]
 8025cfa:	440a      	add	r2, r1
 8025cfc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8025d00:	697a      	ldr	r2, [r7, #20]
 8025d02:	4413      	add	r3, r2
 8025d04:	460a      	mov	r2, r1
 8025d06:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8025d08:	8bfb      	ldrh	r3, [r7, #30]
 8025d0a:	3301      	adds	r3, #1
 8025d0c:	83fb      	strh	r3, [r7, #30]
 8025d0e:	8bfb      	ldrh	r3, [r7, #30]
 8025d10:	2b05      	cmp	r3, #5
 8025d12:	d9ef      	bls.n	8025cf4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8025d14:	697b      	ldr	r3, [r7, #20]
 8025d16:	2200      	movs	r2, #0
 8025d18:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8025d1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8025d20:	2200      	movs	r2, #0
 8025d22:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8025d26:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8025d2a:	2200      	movs	r2, #0
 8025d2c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8025d30:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8025d34:	2200      	movs	r2, #0
 8025d36:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8025d3a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8025d3e:	697b      	ldr	r3, [r7, #20]
 8025d40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8025d44:	2301      	movs	r3, #1
 8025d46:	2235      	movs	r2, #53	@ 0x35
 8025d48:	2000      	movs	r0, #0
 8025d4a:	f7ff faab 	bl	80252a4 <dhcp_option>
 8025d4e:	4603      	mov	r3, r0
 8025d50:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8025d52:	697b      	ldr	r3, [r7, #20]
 8025d54:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8025d58:	79fa      	ldrb	r2, [r7, #7]
 8025d5a:	8a7b      	ldrh	r3, [r7, #18]
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	f7ff fad5 	bl	802530c <dhcp_option_byte>
 8025d62:	4603      	mov	r3, r0
 8025d64:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8025d66:	683b      	ldr	r3, [r7, #0]
 8025d68:	2b00      	cmp	r3, #0
 8025d6a:	d002      	beq.n	8025d72 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8025d6c:	683b      	ldr	r3, [r7, #0]
 8025d6e:	8a7a      	ldrh	r2, [r7, #18]
 8025d70:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8025d72:	69bb      	ldr	r3, [r7, #24]
}
 8025d74:	4618      	mov	r0, r3
 8025d76:	3720      	adds	r7, #32
 8025d78:	46bd      	mov	sp, r7
 8025d7a:	bd80      	pop	{r7, pc}
 8025d7c:	0802fe60 	.word	0x0802fe60
 8025d80:	08030190 	.word	0x08030190
 8025d84:	0802fec0 	.word	0x0802fec0
 8025d88:	080301b0 	.word	0x080301b0
 8025d8c:	080301d0 	.word	0x080301d0
 8025d90:	2400b528 	.word	0x2400b528

08025d94 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8025d94:	b580      	push	{r7, lr}
 8025d96:	b084      	sub	sp, #16
 8025d98:	af00      	add	r7, sp, #0
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	60b9      	str	r1, [r7, #8]
 8025d9e:	607a      	str	r2, [r7, #4]
 8025da0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8025da2:	89fb      	ldrh	r3, [r7, #14]
 8025da4:	1c5a      	adds	r2, r3, #1
 8025da6:	81fa      	strh	r2, [r7, #14]
 8025da8:	461a      	mov	r2, r3
 8025daa:	68bb      	ldr	r3, [r7, #8]
 8025dac:	4413      	add	r3, r2
 8025dae:	22ff      	movs	r2, #255	@ 0xff
 8025db0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8025db2:	e007      	b.n	8025dc4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8025db4:	89fb      	ldrh	r3, [r7, #14]
 8025db6:	1c5a      	adds	r2, r3, #1
 8025db8:	81fa      	strh	r2, [r7, #14]
 8025dba:	461a      	mov	r2, r3
 8025dbc:	68bb      	ldr	r3, [r7, #8]
 8025dbe:	4413      	add	r3, r2
 8025dc0:	2200      	movs	r2, #0
 8025dc2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8025dc4:	89fb      	ldrh	r3, [r7, #14]
 8025dc6:	2b43      	cmp	r3, #67	@ 0x43
 8025dc8:	d904      	bls.n	8025dd4 <dhcp_option_trailer+0x40>
 8025dca:	89fb      	ldrh	r3, [r7, #14]
 8025dcc:	f003 0303 	and.w	r3, r3, #3
 8025dd0:	2b00      	cmp	r3, #0
 8025dd2:	d002      	beq.n	8025dda <dhcp_option_trailer+0x46>
 8025dd4:	89fb      	ldrh	r3, [r7, #14]
 8025dd6:	2b43      	cmp	r3, #67	@ 0x43
 8025dd8:	d9ec      	bls.n	8025db4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8025dda:	89fb      	ldrh	r3, [r7, #14]
 8025ddc:	33f0      	adds	r3, #240	@ 0xf0
 8025dde:	b29b      	uxth	r3, r3
 8025de0:	4619      	mov	r1, r3
 8025de2:	6878      	ldr	r0, [r7, #4]
 8025de4:	f7f7 fc56 	bl	801d694 <pbuf_realloc>
}
 8025de8:	bf00      	nop
 8025dea:	3710      	adds	r7, #16
 8025dec:	46bd      	mov	sp, r7
 8025dee:	bd80      	pop	{r7, pc}

08025df0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8025df0:	b480      	push	{r7}
 8025df2:	b085      	sub	sp, #20
 8025df4:	af00      	add	r7, sp, #0
 8025df6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8025df8:	687b      	ldr	r3, [r7, #4]
 8025dfa:	2b00      	cmp	r3, #0
 8025dfc:	d017      	beq.n	8025e2e <dhcp_supplied_address+0x3e>
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025e02:	2b00      	cmp	r3, #0
 8025e04:	d013      	beq.n	8025e2e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8025e06:	687b      	ldr	r3, [r7, #4]
 8025e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025e0a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8025e0c:	68fb      	ldr	r3, [r7, #12]
 8025e0e:	795b      	ldrb	r3, [r3, #5]
 8025e10:	2b0a      	cmp	r3, #10
 8025e12:	d007      	beq.n	8025e24 <dhcp_supplied_address+0x34>
 8025e14:	68fb      	ldr	r3, [r7, #12]
 8025e16:	795b      	ldrb	r3, [r3, #5]
 8025e18:	2b05      	cmp	r3, #5
 8025e1a:	d003      	beq.n	8025e24 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8025e1c:	68fb      	ldr	r3, [r7, #12]
 8025e1e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8025e20:	2b04      	cmp	r3, #4
 8025e22:	d101      	bne.n	8025e28 <dhcp_supplied_address+0x38>
 8025e24:	2301      	movs	r3, #1
 8025e26:	e000      	b.n	8025e2a <dhcp_supplied_address+0x3a>
 8025e28:	2300      	movs	r3, #0
 8025e2a:	b2db      	uxtb	r3, r3
 8025e2c:	e000      	b.n	8025e30 <dhcp_supplied_address+0x40>
  }
  return 0;
 8025e2e:	2300      	movs	r3, #0
}
 8025e30:	4618      	mov	r0, r3
 8025e32:	3714      	adds	r7, #20
 8025e34:	46bd      	mov	sp, r7
 8025e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e3a:	4770      	bx	lr

08025e3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8025e3c:	b580      	push	{r7, lr}
 8025e3e:	b082      	sub	sp, #8
 8025e40:	af00      	add	r7, sp, #0
 8025e42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8025e44:	4915      	ldr	r1, [pc, #84]	@ (8025e9c <etharp_free_entry+0x60>)
 8025e46:	687a      	ldr	r2, [r7, #4]
 8025e48:	4613      	mov	r3, r2
 8025e4a:	005b      	lsls	r3, r3, #1
 8025e4c:	4413      	add	r3, r2
 8025e4e:	00db      	lsls	r3, r3, #3
 8025e50:	440b      	add	r3, r1
 8025e52:	681b      	ldr	r3, [r3, #0]
 8025e54:	2b00      	cmp	r3, #0
 8025e56:	d013      	beq.n	8025e80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8025e58:	4910      	ldr	r1, [pc, #64]	@ (8025e9c <etharp_free_entry+0x60>)
 8025e5a:	687a      	ldr	r2, [r7, #4]
 8025e5c:	4613      	mov	r3, r2
 8025e5e:	005b      	lsls	r3, r3, #1
 8025e60:	4413      	add	r3, r2
 8025e62:	00db      	lsls	r3, r3, #3
 8025e64:	440b      	add	r3, r1
 8025e66:	681b      	ldr	r3, [r3, #0]
 8025e68:	4618      	mov	r0, r3
 8025e6a:	f7f7 fd99 	bl	801d9a0 <pbuf_free>
    arp_table[i].q = NULL;
 8025e6e:	490b      	ldr	r1, [pc, #44]	@ (8025e9c <etharp_free_entry+0x60>)
 8025e70:	687a      	ldr	r2, [r7, #4]
 8025e72:	4613      	mov	r3, r2
 8025e74:	005b      	lsls	r3, r3, #1
 8025e76:	4413      	add	r3, r2
 8025e78:	00db      	lsls	r3, r3, #3
 8025e7a:	440b      	add	r3, r1
 8025e7c:	2200      	movs	r2, #0
 8025e7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8025e80:	4906      	ldr	r1, [pc, #24]	@ (8025e9c <etharp_free_entry+0x60>)
 8025e82:	687a      	ldr	r2, [r7, #4]
 8025e84:	4613      	mov	r3, r2
 8025e86:	005b      	lsls	r3, r3, #1
 8025e88:	4413      	add	r3, r2
 8025e8a:	00db      	lsls	r3, r3, #3
 8025e8c:	440b      	add	r3, r1
 8025e8e:	3314      	adds	r3, #20
 8025e90:	2200      	movs	r2, #0
 8025e92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8025e94:	bf00      	nop
 8025e96:	3708      	adds	r7, #8
 8025e98:	46bd      	mov	sp, r7
 8025e9a:	bd80      	pop	{r7, pc}
 8025e9c:	2400b52c 	.word	0x2400b52c

08025ea0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8025ea0:	b580      	push	{r7, lr}
 8025ea2:	b082      	sub	sp, #8
 8025ea4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025ea6:	2300      	movs	r3, #0
 8025ea8:	607b      	str	r3, [r7, #4]
 8025eaa:	e096      	b.n	8025fda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8025eac:	494f      	ldr	r1, [pc, #316]	@ (8025fec <etharp_tmr+0x14c>)
 8025eae:	687a      	ldr	r2, [r7, #4]
 8025eb0:	4613      	mov	r3, r2
 8025eb2:	005b      	lsls	r3, r3, #1
 8025eb4:	4413      	add	r3, r2
 8025eb6:	00db      	lsls	r3, r3, #3
 8025eb8:	440b      	add	r3, r1
 8025eba:	3314      	adds	r3, #20
 8025ebc:	781b      	ldrb	r3, [r3, #0]
 8025ebe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8025ec0:	78fb      	ldrb	r3, [r7, #3]
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	f000 8086 	beq.w	8025fd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8025ec8:	4948      	ldr	r1, [pc, #288]	@ (8025fec <etharp_tmr+0x14c>)
 8025eca:	687a      	ldr	r2, [r7, #4]
 8025ecc:	4613      	mov	r3, r2
 8025ece:	005b      	lsls	r3, r3, #1
 8025ed0:	4413      	add	r3, r2
 8025ed2:	00db      	lsls	r3, r3, #3
 8025ed4:	440b      	add	r3, r1
 8025ed6:	3312      	adds	r3, #18
 8025ed8:	881b      	ldrh	r3, [r3, #0]
 8025eda:	3301      	adds	r3, #1
 8025edc:	b298      	uxth	r0, r3
 8025ede:	4943      	ldr	r1, [pc, #268]	@ (8025fec <etharp_tmr+0x14c>)
 8025ee0:	687a      	ldr	r2, [r7, #4]
 8025ee2:	4613      	mov	r3, r2
 8025ee4:	005b      	lsls	r3, r3, #1
 8025ee6:	4413      	add	r3, r2
 8025ee8:	00db      	lsls	r3, r3, #3
 8025eea:	440b      	add	r3, r1
 8025eec:	3312      	adds	r3, #18
 8025eee:	4602      	mov	r2, r0
 8025ef0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8025ef2:	493e      	ldr	r1, [pc, #248]	@ (8025fec <etharp_tmr+0x14c>)
 8025ef4:	687a      	ldr	r2, [r7, #4]
 8025ef6:	4613      	mov	r3, r2
 8025ef8:	005b      	lsls	r3, r3, #1
 8025efa:	4413      	add	r3, r2
 8025efc:	00db      	lsls	r3, r3, #3
 8025efe:	440b      	add	r3, r1
 8025f00:	3312      	adds	r3, #18
 8025f02:	881b      	ldrh	r3, [r3, #0]
 8025f04:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8025f08:	d215      	bcs.n	8025f36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8025f0a:	4938      	ldr	r1, [pc, #224]	@ (8025fec <etharp_tmr+0x14c>)
 8025f0c:	687a      	ldr	r2, [r7, #4]
 8025f0e:	4613      	mov	r3, r2
 8025f10:	005b      	lsls	r3, r3, #1
 8025f12:	4413      	add	r3, r2
 8025f14:	00db      	lsls	r3, r3, #3
 8025f16:	440b      	add	r3, r1
 8025f18:	3314      	adds	r3, #20
 8025f1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8025f1c:	2b01      	cmp	r3, #1
 8025f1e:	d10e      	bne.n	8025f3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8025f20:	4932      	ldr	r1, [pc, #200]	@ (8025fec <etharp_tmr+0x14c>)
 8025f22:	687a      	ldr	r2, [r7, #4]
 8025f24:	4613      	mov	r3, r2
 8025f26:	005b      	lsls	r3, r3, #1
 8025f28:	4413      	add	r3, r2
 8025f2a:	00db      	lsls	r3, r3, #3
 8025f2c:	440b      	add	r3, r1
 8025f2e:	3312      	adds	r3, #18
 8025f30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8025f32:	2b04      	cmp	r3, #4
 8025f34:	d903      	bls.n	8025f3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8025f36:	6878      	ldr	r0, [r7, #4]
 8025f38:	f7ff ff80 	bl	8025e3c <etharp_free_entry>
 8025f3c:	e04a      	b.n	8025fd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8025f3e:	492b      	ldr	r1, [pc, #172]	@ (8025fec <etharp_tmr+0x14c>)
 8025f40:	687a      	ldr	r2, [r7, #4]
 8025f42:	4613      	mov	r3, r2
 8025f44:	005b      	lsls	r3, r3, #1
 8025f46:	4413      	add	r3, r2
 8025f48:	00db      	lsls	r3, r3, #3
 8025f4a:	440b      	add	r3, r1
 8025f4c:	3314      	adds	r3, #20
 8025f4e:	781b      	ldrb	r3, [r3, #0]
 8025f50:	2b03      	cmp	r3, #3
 8025f52:	d10a      	bne.n	8025f6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8025f54:	4925      	ldr	r1, [pc, #148]	@ (8025fec <etharp_tmr+0x14c>)
 8025f56:	687a      	ldr	r2, [r7, #4]
 8025f58:	4613      	mov	r3, r2
 8025f5a:	005b      	lsls	r3, r3, #1
 8025f5c:	4413      	add	r3, r2
 8025f5e:	00db      	lsls	r3, r3, #3
 8025f60:	440b      	add	r3, r1
 8025f62:	3314      	adds	r3, #20
 8025f64:	2204      	movs	r2, #4
 8025f66:	701a      	strb	r2, [r3, #0]
 8025f68:	e034      	b.n	8025fd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8025f6a:	4920      	ldr	r1, [pc, #128]	@ (8025fec <etharp_tmr+0x14c>)
 8025f6c:	687a      	ldr	r2, [r7, #4]
 8025f6e:	4613      	mov	r3, r2
 8025f70:	005b      	lsls	r3, r3, #1
 8025f72:	4413      	add	r3, r2
 8025f74:	00db      	lsls	r3, r3, #3
 8025f76:	440b      	add	r3, r1
 8025f78:	3314      	adds	r3, #20
 8025f7a:	781b      	ldrb	r3, [r3, #0]
 8025f7c:	2b04      	cmp	r3, #4
 8025f7e:	d10a      	bne.n	8025f96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8025f80:	491a      	ldr	r1, [pc, #104]	@ (8025fec <etharp_tmr+0x14c>)
 8025f82:	687a      	ldr	r2, [r7, #4]
 8025f84:	4613      	mov	r3, r2
 8025f86:	005b      	lsls	r3, r3, #1
 8025f88:	4413      	add	r3, r2
 8025f8a:	00db      	lsls	r3, r3, #3
 8025f8c:	440b      	add	r3, r1
 8025f8e:	3314      	adds	r3, #20
 8025f90:	2202      	movs	r2, #2
 8025f92:	701a      	strb	r2, [r3, #0]
 8025f94:	e01e      	b.n	8025fd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8025f96:	4915      	ldr	r1, [pc, #84]	@ (8025fec <etharp_tmr+0x14c>)
 8025f98:	687a      	ldr	r2, [r7, #4]
 8025f9a:	4613      	mov	r3, r2
 8025f9c:	005b      	lsls	r3, r3, #1
 8025f9e:	4413      	add	r3, r2
 8025fa0:	00db      	lsls	r3, r3, #3
 8025fa2:	440b      	add	r3, r1
 8025fa4:	3314      	adds	r3, #20
 8025fa6:	781b      	ldrb	r3, [r3, #0]
 8025fa8:	2b01      	cmp	r3, #1
 8025faa:	d113      	bne.n	8025fd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8025fac:	490f      	ldr	r1, [pc, #60]	@ (8025fec <etharp_tmr+0x14c>)
 8025fae:	687a      	ldr	r2, [r7, #4]
 8025fb0:	4613      	mov	r3, r2
 8025fb2:	005b      	lsls	r3, r3, #1
 8025fb4:	4413      	add	r3, r2
 8025fb6:	00db      	lsls	r3, r3, #3
 8025fb8:	440b      	add	r3, r1
 8025fba:	3308      	adds	r3, #8
 8025fbc:	6818      	ldr	r0, [r3, #0]
 8025fbe:	687a      	ldr	r2, [r7, #4]
 8025fc0:	4613      	mov	r3, r2
 8025fc2:	005b      	lsls	r3, r3, #1
 8025fc4:	4413      	add	r3, r2
 8025fc6:	00db      	lsls	r3, r3, #3
 8025fc8:	4a08      	ldr	r2, [pc, #32]	@ (8025fec <etharp_tmr+0x14c>)
 8025fca:	4413      	add	r3, r2
 8025fcc:	3304      	adds	r3, #4
 8025fce:	4619      	mov	r1, r3
 8025fd0:	f000 fe72 	bl	8026cb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025fd4:	687b      	ldr	r3, [r7, #4]
 8025fd6:	3301      	adds	r3, #1
 8025fd8:	607b      	str	r3, [r7, #4]
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	2b09      	cmp	r3, #9
 8025fde:	f77f af65 	ble.w	8025eac <etharp_tmr+0xc>
      }
    }
  }
}
 8025fe2:	bf00      	nop
 8025fe4:	bf00      	nop
 8025fe6:	3708      	adds	r7, #8
 8025fe8:	46bd      	mov	sp, r7
 8025fea:	bd80      	pop	{r7, pc}
 8025fec:	2400b52c 	.word	0x2400b52c

08025ff0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8025ff0:	b580      	push	{r7, lr}
 8025ff2:	b08a      	sub	sp, #40	@ 0x28
 8025ff4:	af00      	add	r7, sp, #0
 8025ff6:	60f8      	str	r0, [r7, #12]
 8025ff8:	460b      	mov	r3, r1
 8025ffa:	607a      	str	r2, [r7, #4]
 8025ffc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8025ffe:	230a      	movs	r3, #10
 8026000:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8026002:	230a      	movs	r3, #10
 8026004:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8026006:	230a      	movs	r3, #10
 8026008:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 802600a:	2300      	movs	r3, #0
 802600c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802600e:	230a      	movs	r3, #10
 8026010:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8026012:	2300      	movs	r3, #0
 8026014:	83bb      	strh	r3, [r7, #28]
 8026016:	2300      	movs	r3, #0
 8026018:	837b      	strh	r3, [r7, #26]
 802601a:	2300      	movs	r3, #0
 802601c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802601e:	2300      	movs	r3, #0
 8026020:	843b      	strh	r3, [r7, #32]
 8026022:	e0ae      	b.n	8026182 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8026024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8026028:	49a6      	ldr	r1, [pc, #664]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802602a:	4613      	mov	r3, r2
 802602c:	005b      	lsls	r3, r3, #1
 802602e:	4413      	add	r3, r2
 8026030:	00db      	lsls	r3, r3, #3
 8026032:	440b      	add	r3, r1
 8026034:	3314      	adds	r3, #20
 8026036:	781b      	ldrb	r3, [r3, #0]
 8026038:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802603a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 802603e:	2b0a      	cmp	r3, #10
 8026040:	d105      	bne.n	802604e <etharp_find_entry+0x5e>
 8026042:	7dfb      	ldrb	r3, [r7, #23]
 8026044:	2b00      	cmp	r3, #0
 8026046:	d102      	bne.n	802604e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8026048:	8c3b      	ldrh	r3, [r7, #32]
 802604a:	847b      	strh	r3, [r7, #34]	@ 0x22
 802604c:	e095      	b.n	802617a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802604e:	7dfb      	ldrb	r3, [r7, #23]
 8026050:	2b00      	cmp	r3, #0
 8026052:	f000 8092 	beq.w	802617a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8026056:	7dfb      	ldrb	r3, [r7, #23]
 8026058:	2b01      	cmp	r3, #1
 802605a:	d009      	beq.n	8026070 <etharp_find_entry+0x80>
 802605c:	7dfb      	ldrb	r3, [r7, #23]
 802605e:	2b01      	cmp	r3, #1
 8026060:	d806      	bhi.n	8026070 <etharp_find_entry+0x80>
 8026062:	4b99      	ldr	r3, [pc, #612]	@ (80262c8 <etharp_find_entry+0x2d8>)
 8026064:	f240 1223 	movw	r2, #291	@ 0x123
 8026068:	4998      	ldr	r1, [pc, #608]	@ (80262cc <etharp_find_entry+0x2dc>)
 802606a:	4899      	ldr	r0, [pc, #612]	@ (80262d0 <etharp_find_entry+0x2e0>)
 802606c:	f003 f97c 	bl	8029368 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8026070:	68fb      	ldr	r3, [r7, #12]
 8026072:	2b00      	cmp	r3, #0
 8026074:	d020      	beq.n	80260b8 <etharp_find_entry+0xc8>
 8026076:	68fb      	ldr	r3, [r7, #12]
 8026078:	6819      	ldr	r1, [r3, #0]
 802607a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802607e:	4891      	ldr	r0, [pc, #580]	@ (80262c4 <etharp_find_entry+0x2d4>)
 8026080:	4613      	mov	r3, r2
 8026082:	005b      	lsls	r3, r3, #1
 8026084:	4413      	add	r3, r2
 8026086:	00db      	lsls	r3, r3, #3
 8026088:	4403      	add	r3, r0
 802608a:	3304      	adds	r3, #4
 802608c:	681b      	ldr	r3, [r3, #0]
 802608e:	4299      	cmp	r1, r3
 8026090:	d112      	bne.n	80260b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8026092:	687b      	ldr	r3, [r7, #4]
 8026094:	2b00      	cmp	r3, #0
 8026096:	d00c      	beq.n	80260b2 <etharp_find_entry+0xc2>
 8026098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802609c:	4989      	ldr	r1, [pc, #548]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802609e:	4613      	mov	r3, r2
 80260a0:	005b      	lsls	r3, r3, #1
 80260a2:	4413      	add	r3, r2
 80260a4:	00db      	lsls	r3, r3, #3
 80260a6:	440b      	add	r3, r1
 80260a8:	3308      	adds	r3, #8
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	687a      	ldr	r2, [r7, #4]
 80260ae:	429a      	cmp	r2, r3
 80260b0:	d102      	bne.n	80260b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80260b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80260b6:	e100      	b.n	80262ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80260b8:	7dfb      	ldrb	r3, [r7, #23]
 80260ba:	2b01      	cmp	r3, #1
 80260bc:	d140      	bne.n	8026140 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80260be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80260c2:	4980      	ldr	r1, [pc, #512]	@ (80262c4 <etharp_find_entry+0x2d4>)
 80260c4:	4613      	mov	r3, r2
 80260c6:	005b      	lsls	r3, r3, #1
 80260c8:	4413      	add	r3, r2
 80260ca:	00db      	lsls	r3, r3, #3
 80260cc:	440b      	add	r3, r1
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	2b00      	cmp	r3, #0
 80260d2:	d01a      	beq.n	802610a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80260d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80260d8:	497a      	ldr	r1, [pc, #488]	@ (80262c4 <etharp_find_entry+0x2d4>)
 80260da:	4613      	mov	r3, r2
 80260dc:	005b      	lsls	r3, r3, #1
 80260de:	4413      	add	r3, r2
 80260e0:	00db      	lsls	r3, r3, #3
 80260e2:	440b      	add	r3, r1
 80260e4:	3312      	adds	r3, #18
 80260e6:	881b      	ldrh	r3, [r3, #0]
 80260e8:	8bba      	ldrh	r2, [r7, #28]
 80260ea:	429a      	cmp	r2, r3
 80260ec:	d845      	bhi.n	802617a <etharp_find_entry+0x18a>
            old_queue = i;
 80260ee:	8c3b      	ldrh	r3, [r7, #32]
 80260f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80260f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80260f6:	4973      	ldr	r1, [pc, #460]	@ (80262c4 <etharp_find_entry+0x2d4>)
 80260f8:	4613      	mov	r3, r2
 80260fa:	005b      	lsls	r3, r3, #1
 80260fc:	4413      	add	r3, r2
 80260fe:	00db      	lsls	r3, r3, #3
 8026100:	440b      	add	r3, r1
 8026102:	3312      	adds	r3, #18
 8026104:	881b      	ldrh	r3, [r3, #0]
 8026106:	83bb      	strh	r3, [r7, #28]
 8026108:	e037      	b.n	802617a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802610a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802610e:	496d      	ldr	r1, [pc, #436]	@ (80262c4 <etharp_find_entry+0x2d4>)
 8026110:	4613      	mov	r3, r2
 8026112:	005b      	lsls	r3, r3, #1
 8026114:	4413      	add	r3, r2
 8026116:	00db      	lsls	r3, r3, #3
 8026118:	440b      	add	r3, r1
 802611a:	3312      	adds	r3, #18
 802611c:	881b      	ldrh	r3, [r3, #0]
 802611e:	8b7a      	ldrh	r2, [r7, #26]
 8026120:	429a      	cmp	r2, r3
 8026122:	d82a      	bhi.n	802617a <etharp_find_entry+0x18a>
            old_pending = i;
 8026124:	8c3b      	ldrh	r3, [r7, #32]
 8026126:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8026128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802612c:	4965      	ldr	r1, [pc, #404]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802612e:	4613      	mov	r3, r2
 8026130:	005b      	lsls	r3, r3, #1
 8026132:	4413      	add	r3, r2
 8026134:	00db      	lsls	r3, r3, #3
 8026136:	440b      	add	r3, r1
 8026138:	3312      	adds	r3, #18
 802613a:	881b      	ldrh	r3, [r3, #0]
 802613c:	837b      	strh	r3, [r7, #26]
 802613e:	e01c      	b.n	802617a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8026140:	7dfb      	ldrb	r3, [r7, #23]
 8026142:	2b01      	cmp	r3, #1
 8026144:	d919      	bls.n	802617a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8026146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802614a:	495e      	ldr	r1, [pc, #376]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802614c:	4613      	mov	r3, r2
 802614e:	005b      	lsls	r3, r3, #1
 8026150:	4413      	add	r3, r2
 8026152:	00db      	lsls	r3, r3, #3
 8026154:	440b      	add	r3, r1
 8026156:	3312      	adds	r3, #18
 8026158:	881b      	ldrh	r3, [r3, #0]
 802615a:	8b3a      	ldrh	r2, [r7, #24]
 802615c:	429a      	cmp	r2, r3
 802615e:	d80c      	bhi.n	802617a <etharp_find_entry+0x18a>
            old_stable = i;
 8026160:	8c3b      	ldrh	r3, [r7, #32]
 8026162:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8026164:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8026168:	4956      	ldr	r1, [pc, #344]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802616a:	4613      	mov	r3, r2
 802616c:	005b      	lsls	r3, r3, #1
 802616e:	4413      	add	r3, r2
 8026170:	00db      	lsls	r3, r3, #3
 8026172:	440b      	add	r3, r1
 8026174:	3312      	adds	r3, #18
 8026176:	881b      	ldrh	r3, [r3, #0]
 8026178:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802617a:	8c3b      	ldrh	r3, [r7, #32]
 802617c:	3301      	adds	r3, #1
 802617e:	b29b      	uxth	r3, r3
 8026180:	843b      	strh	r3, [r7, #32]
 8026182:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8026186:	2b09      	cmp	r3, #9
 8026188:	f77f af4c 	ble.w	8026024 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802618c:	7afb      	ldrb	r3, [r7, #11]
 802618e:	f003 0302 	and.w	r3, r3, #2
 8026192:	2b00      	cmp	r3, #0
 8026194:	d108      	bne.n	80261a8 <etharp_find_entry+0x1b8>
 8026196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 802619a:	2b0a      	cmp	r3, #10
 802619c:	d107      	bne.n	80261ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802619e:	7afb      	ldrb	r3, [r7, #11]
 80261a0:	f003 0301 	and.w	r3, r3, #1
 80261a4:	2b00      	cmp	r3, #0
 80261a6:	d102      	bne.n	80261ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80261a8:	f04f 33ff 	mov.w	r3, #4294967295
 80261ac:	e085      	b.n	80262ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80261ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80261b2:	2b09      	cmp	r3, #9
 80261b4:	dc02      	bgt.n	80261bc <etharp_find_entry+0x1cc>
    i = empty;
 80261b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80261b8:	843b      	strh	r3, [r7, #32]
 80261ba:	e039      	b.n	8026230 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80261bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80261c0:	2b09      	cmp	r3, #9
 80261c2:	dc14      	bgt.n	80261ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80261c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80261c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80261c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80261cc:	493d      	ldr	r1, [pc, #244]	@ (80262c4 <etharp_find_entry+0x2d4>)
 80261ce:	4613      	mov	r3, r2
 80261d0:	005b      	lsls	r3, r3, #1
 80261d2:	4413      	add	r3, r2
 80261d4:	00db      	lsls	r3, r3, #3
 80261d6:	440b      	add	r3, r1
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d018      	beq.n	8026210 <etharp_find_entry+0x220>
 80261de:	4b3a      	ldr	r3, [pc, #232]	@ (80262c8 <etharp_find_entry+0x2d8>)
 80261e0:	f240 126d 	movw	r2, #365	@ 0x16d
 80261e4:	493b      	ldr	r1, [pc, #236]	@ (80262d4 <etharp_find_entry+0x2e4>)
 80261e6:	483a      	ldr	r0, [pc, #232]	@ (80262d0 <etharp_find_entry+0x2e0>)
 80261e8:	f003 f8be 	bl	8029368 <iprintf>
 80261ec:	e010      	b.n	8026210 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80261ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80261f2:	2b09      	cmp	r3, #9
 80261f4:	dc02      	bgt.n	80261fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80261f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80261f8:	843b      	strh	r3, [r7, #32]
 80261fa:	e009      	b.n	8026210 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80261fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8026200:	2b09      	cmp	r3, #9
 8026202:	dc02      	bgt.n	802620a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8026204:	8bfb      	ldrh	r3, [r7, #30]
 8026206:	843b      	strh	r3, [r7, #32]
 8026208:	e002      	b.n	8026210 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802620a:	f04f 33ff 	mov.w	r3, #4294967295
 802620e:	e054      	b.n	80262ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8026210:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8026214:	2b09      	cmp	r3, #9
 8026216:	dd06      	ble.n	8026226 <etharp_find_entry+0x236>
 8026218:	4b2b      	ldr	r3, [pc, #172]	@ (80262c8 <etharp_find_entry+0x2d8>)
 802621a:	f240 127f 	movw	r2, #383	@ 0x17f
 802621e:	492e      	ldr	r1, [pc, #184]	@ (80262d8 <etharp_find_entry+0x2e8>)
 8026220:	482b      	ldr	r0, [pc, #172]	@ (80262d0 <etharp_find_entry+0x2e0>)
 8026222:	f003 f8a1 	bl	8029368 <iprintf>
    etharp_free_entry(i);
 8026226:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802622a:	4618      	mov	r0, r3
 802622c:	f7ff fe06 	bl	8025e3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8026230:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8026234:	2b09      	cmp	r3, #9
 8026236:	dd06      	ble.n	8026246 <etharp_find_entry+0x256>
 8026238:	4b23      	ldr	r3, [pc, #140]	@ (80262c8 <etharp_find_entry+0x2d8>)
 802623a:	f240 1283 	movw	r2, #387	@ 0x183
 802623e:	4926      	ldr	r1, [pc, #152]	@ (80262d8 <etharp_find_entry+0x2e8>)
 8026240:	4823      	ldr	r0, [pc, #140]	@ (80262d0 <etharp_find_entry+0x2e0>)
 8026242:	f003 f891 	bl	8029368 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8026246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802624a:	491e      	ldr	r1, [pc, #120]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802624c:	4613      	mov	r3, r2
 802624e:	005b      	lsls	r3, r3, #1
 8026250:	4413      	add	r3, r2
 8026252:	00db      	lsls	r3, r3, #3
 8026254:	440b      	add	r3, r1
 8026256:	3314      	adds	r3, #20
 8026258:	781b      	ldrb	r3, [r3, #0]
 802625a:	2b00      	cmp	r3, #0
 802625c:	d006      	beq.n	802626c <etharp_find_entry+0x27c>
 802625e:	4b1a      	ldr	r3, [pc, #104]	@ (80262c8 <etharp_find_entry+0x2d8>)
 8026260:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8026264:	491d      	ldr	r1, [pc, #116]	@ (80262dc <etharp_find_entry+0x2ec>)
 8026266:	481a      	ldr	r0, [pc, #104]	@ (80262d0 <etharp_find_entry+0x2e0>)
 8026268:	f003 f87e 	bl	8029368 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802626c:	68fb      	ldr	r3, [r7, #12]
 802626e:	2b00      	cmp	r3, #0
 8026270:	d00b      	beq.n	802628a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8026272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8026276:	68fb      	ldr	r3, [r7, #12]
 8026278:	6819      	ldr	r1, [r3, #0]
 802627a:	4812      	ldr	r0, [pc, #72]	@ (80262c4 <etharp_find_entry+0x2d4>)
 802627c:	4613      	mov	r3, r2
 802627e:	005b      	lsls	r3, r3, #1
 8026280:	4413      	add	r3, r2
 8026282:	00db      	lsls	r3, r3, #3
 8026284:	4403      	add	r3, r0
 8026286:	3304      	adds	r3, #4
 8026288:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802628a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802628e:	490d      	ldr	r1, [pc, #52]	@ (80262c4 <etharp_find_entry+0x2d4>)
 8026290:	4613      	mov	r3, r2
 8026292:	005b      	lsls	r3, r3, #1
 8026294:	4413      	add	r3, r2
 8026296:	00db      	lsls	r3, r3, #3
 8026298:	440b      	add	r3, r1
 802629a:	3312      	adds	r3, #18
 802629c:	2200      	movs	r2, #0
 802629e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80262a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80262a4:	4907      	ldr	r1, [pc, #28]	@ (80262c4 <etharp_find_entry+0x2d4>)
 80262a6:	4613      	mov	r3, r2
 80262a8:	005b      	lsls	r3, r3, #1
 80262aa:	4413      	add	r3, r2
 80262ac:	00db      	lsls	r3, r3, #3
 80262ae:	440b      	add	r3, r1
 80262b0:	3308      	adds	r3, #8
 80262b2:	687a      	ldr	r2, [r7, #4]
 80262b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80262b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80262ba:	4618      	mov	r0, r3
 80262bc:	3728      	adds	r7, #40	@ 0x28
 80262be:	46bd      	mov	sp, r7
 80262c0:	bd80      	pop	{r7, pc}
 80262c2:	bf00      	nop
 80262c4:	2400b52c 	.word	0x2400b52c
 80262c8:	08030210 	.word	0x08030210
 80262cc:	08030248 	.word	0x08030248
 80262d0:	08030288 	.word	0x08030288
 80262d4:	080302b0 	.word	0x080302b0
 80262d8:	080302c8 	.word	0x080302c8
 80262dc:	080302dc 	.word	0x080302dc

080262e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80262e0:	b580      	push	{r7, lr}
 80262e2:	b088      	sub	sp, #32
 80262e4:	af02      	add	r7, sp, #8
 80262e6:	60f8      	str	r0, [r7, #12]
 80262e8:	60b9      	str	r1, [r7, #8]
 80262ea:	607a      	str	r2, [r7, #4]
 80262ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80262f4:	2b06      	cmp	r3, #6
 80262f6:	d006      	beq.n	8026306 <etharp_update_arp_entry+0x26>
 80262f8:	4b48      	ldr	r3, [pc, #288]	@ (802641c <etharp_update_arp_entry+0x13c>)
 80262fa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80262fe:	4948      	ldr	r1, [pc, #288]	@ (8026420 <etharp_update_arp_entry+0x140>)
 8026300:	4848      	ldr	r0, [pc, #288]	@ (8026424 <etharp_update_arp_entry+0x144>)
 8026302:	f003 f831 	bl	8029368 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8026306:	68bb      	ldr	r3, [r7, #8]
 8026308:	2b00      	cmp	r3, #0
 802630a:	d012      	beq.n	8026332 <etharp_update_arp_entry+0x52>
 802630c:	68bb      	ldr	r3, [r7, #8]
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	2b00      	cmp	r3, #0
 8026312:	d00e      	beq.n	8026332 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8026314:	68bb      	ldr	r3, [r7, #8]
 8026316:	681b      	ldr	r3, [r3, #0]
 8026318:	68f9      	ldr	r1, [r7, #12]
 802631a:	4618      	mov	r0, r3
 802631c:	f001 f946 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8026320:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8026322:	2b00      	cmp	r3, #0
 8026324:	d105      	bne.n	8026332 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8026326:	68bb      	ldr	r3, [r7, #8]
 8026328:	681b      	ldr	r3, [r3, #0]
 802632a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802632e:	2be0      	cmp	r3, #224	@ 0xe0
 8026330:	d102      	bne.n	8026338 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8026332:	f06f 030f 	mvn.w	r3, #15
 8026336:	e06c      	b.n	8026412 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8026338:	78fb      	ldrb	r3, [r7, #3]
 802633a:	68fa      	ldr	r2, [r7, #12]
 802633c:	4619      	mov	r1, r3
 802633e:	68b8      	ldr	r0, [r7, #8]
 8026340:	f7ff fe56 	bl	8025ff0 <etharp_find_entry>
 8026344:	4603      	mov	r3, r0
 8026346:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8026348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802634c:	2b00      	cmp	r3, #0
 802634e:	da02      	bge.n	8026356 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8026350:	8afb      	ldrh	r3, [r7, #22]
 8026352:	b25b      	sxtb	r3, r3
 8026354:	e05d      	b.n	8026412 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8026356:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802635a:	4933      	ldr	r1, [pc, #204]	@ (8026428 <etharp_update_arp_entry+0x148>)
 802635c:	4613      	mov	r3, r2
 802635e:	005b      	lsls	r3, r3, #1
 8026360:	4413      	add	r3, r2
 8026362:	00db      	lsls	r3, r3, #3
 8026364:	440b      	add	r3, r1
 8026366:	3314      	adds	r3, #20
 8026368:	2202      	movs	r2, #2
 802636a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802636c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8026370:	492d      	ldr	r1, [pc, #180]	@ (8026428 <etharp_update_arp_entry+0x148>)
 8026372:	4613      	mov	r3, r2
 8026374:	005b      	lsls	r3, r3, #1
 8026376:	4413      	add	r3, r2
 8026378:	00db      	lsls	r3, r3, #3
 802637a:	440b      	add	r3, r1
 802637c:	3308      	adds	r3, #8
 802637e:	68fa      	ldr	r2, [r7, #12]
 8026380:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8026382:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8026386:	4613      	mov	r3, r2
 8026388:	005b      	lsls	r3, r3, #1
 802638a:	4413      	add	r3, r2
 802638c:	00db      	lsls	r3, r3, #3
 802638e:	3308      	adds	r3, #8
 8026390:	4a25      	ldr	r2, [pc, #148]	@ (8026428 <etharp_update_arp_entry+0x148>)
 8026392:	4413      	add	r3, r2
 8026394:	3304      	adds	r3, #4
 8026396:	2206      	movs	r2, #6
 8026398:	6879      	ldr	r1, [r7, #4]
 802639a:	4618      	mov	r0, r3
 802639c:	f003 fa57 	bl	802984e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80263a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80263a4:	4920      	ldr	r1, [pc, #128]	@ (8026428 <etharp_update_arp_entry+0x148>)
 80263a6:	4613      	mov	r3, r2
 80263a8:	005b      	lsls	r3, r3, #1
 80263aa:	4413      	add	r3, r2
 80263ac:	00db      	lsls	r3, r3, #3
 80263ae:	440b      	add	r3, r1
 80263b0:	3312      	adds	r3, #18
 80263b2:	2200      	movs	r2, #0
 80263b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80263b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80263ba:	491b      	ldr	r1, [pc, #108]	@ (8026428 <etharp_update_arp_entry+0x148>)
 80263bc:	4613      	mov	r3, r2
 80263be:	005b      	lsls	r3, r3, #1
 80263c0:	4413      	add	r3, r2
 80263c2:	00db      	lsls	r3, r3, #3
 80263c4:	440b      	add	r3, r1
 80263c6:	681b      	ldr	r3, [r3, #0]
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d021      	beq.n	8026410 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80263cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80263d0:	4915      	ldr	r1, [pc, #84]	@ (8026428 <etharp_update_arp_entry+0x148>)
 80263d2:	4613      	mov	r3, r2
 80263d4:	005b      	lsls	r3, r3, #1
 80263d6:	4413      	add	r3, r2
 80263d8:	00db      	lsls	r3, r3, #3
 80263da:	440b      	add	r3, r1
 80263dc:	681b      	ldr	r3, [r3, #0]
 80263de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80263e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80263e4:	4910      	ldr	r1, [pc, #64]	@ (8026428 <etharp_update_arp_entry+0x148>)
 80263e6:	4613      	mov	r3, r2
 80263e8:	005b      	lsls	r3, r3, #1
 80263ea:	4413      	add	r3, r2
 80263ec:	00db      	lsls	r3, r3, #3
 80263ee:	440b      	add	r3, r1
 80263f0:	2200      	movs	r2, #0
 80263f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80263f4:	68fb      	ldr	r3, [r7, #12]
 80263f6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80263fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80263fe:	9300      	str	r3, [sp, #0]
 8026400:	687b      	ldr	r3, [r7, #4]
 8026402:	6939      	ldr	r1, [r7, #16]
 8026404:	68f8      	ldr	r0, [r7, #12]
 8026406:	f002 f86f 	bl	80284e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802640a:	6938      	ldr	r0, [r7, #16]
 802640c:	f7f7 fac8 	bl	801d9a0 <pbuf_free>
  }
  return ERR_OK;
 8026410:	2300      	movs	r3, #0
}
 8026412:	4618      	mov	r0, r3
 8026414:	3718      	adds	r7, #24
 8026416:	46bd      	mov	sp, r7
 8026418:	bd80      	pop	{r7, pc}
 802641a:	bf00      	nop
 802641c:	08030210 	.word	0x08030210
 8026420:	08030308 	.word	0x08030308
 8026424:	08030288 	.word	0x08030288
 8026428:	2400b52c 	.word	0x2400b52c

0802642c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 802642c:	b580      	push	{r7, lr}
 802642e:	b084      	sub	sp, #16
 8026430:	af00      	add	r7, sp, #0
 8026432:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8026434:	2300      	movs	r3, #0
 8026436:	60fb      	str	r3, [r7, #12]
 8026438:	e01e      	b.n	8026478 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802643a:	4913      	ldr	r1, [pc, #76]	@ (8026488 <etharp_cleanup_netif+0x5c>)
 802643c:	68fa      	ldr	r2, [r7, #12]
 802643e:	4613      	mov	r3, r2
 8026440:	005b      	lsls	r3, r3, #1
 8026442:	4413      	add	r3, r2
 8026444:	00db      	lsls	r3, r3, #3
 8026446:	440b      	add	r3, r1
 8026448:	3314      	adds	r3, #20
 802644a:	781b      	ldrb	r3, [r3, #0]
 802644c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802644e:	7afb      	ldrb	r3, [r7, #11]
 8026450:	2b00      	cmp	r3, #0
 8026452:	d00e      	beq.n	8026472 <etharp_cleanup_netif+0x46>
 8026454:	490c      	ldr	r1, [pc, #48]	@ (8026488 <etharp_cleanup_netif+0x5c>)
 8026456:	68fa      	ldr	r2, [r7, #12]
 8026458:	4613      	mov	r3, r2
 802645a:	005b      	lsls	r3, r3, #1
 802645c:	4413      	add	r3, r2
 802645e:	00db      	lsls	r3, r3, #3
 8026460:	440b      	add	r3, r1
 8026462:	3308      	adds	r3, #8
 8026464:	681b      	ldr	r3, [r3, #0]
 8026466:	687a      	ldr	r2, [r7, #4]
 8026468:	429a      	cmp	r2, r3
 802646a:	d102      	bne.n	8026472 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802646c:	68f8      	ldr	r0, [r7, #12]
 802646e:	f7ff fce5 	bl	8025e3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8026472:	68fb      	ldr	r3, [r7, #12]
 8026474:	3301      	adds	r3, #1
 8026476:	60fb      	str	r3, [r7, #12]
 8026478:	68fb      	ldr	r3, [r7, #12]
 802647a:	2b09      	cmp	r3, #9
 802647c:	dddd      	ble.n	802643a <etharp_cleanup_netif+0xe>
    }
  }
}
 802647e:	bf00      	nop
 8026480:	bf00      	nop
 8026482:	3710      	adds	r7, #16
 8026484:	46bd      	mov	sp, r7
 8026486:	bd80      	pop	{r7, pc}
 8026488:	2400b52c 	.word	0x2400b52c

0802648c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802648c:	b5b0      	push	{r4, r5, r7, lr}
 802648e:	b08a      	sub	sp, #40	@ 0x28
 8026490:	af04      	add	r7, sp, #16
 8026492:	6078      	str	r0, [r7, #4]
 8026494:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8026496:	683b      	ldr	r3, [r7, #0]
 8026498:	2b00      	cmp	r3, #0
 802649a:	d107      	bne.n	80264ac <etharp_input+0x20>
 802649c:	4b3f      	ldr	r3, [pc, #252]	@ (802659c <etharp_input+0x110>)
 802649e:	f240 228a 	movw	r2, #650	@ 0x28a
 80264a2:	493f      	ldr	r1, [pc, #252]	@ (80265a0 <etharp_input+0x114>)
 80264a4:	483f      	ldr	r0, [pc, #252]	@ (80265a4 <etharp_input+0x118>)
 80264a6:	f002 ff5f 	bl	8029368 <iprintf>
 80264aa:	e074      	b.n	8026596 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80264ac:	687b      	ldr	r3, [r7, #4]
 80264ae:	685b      	ldr	r3, [r3, #4]
 80264b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80264b2:	693b      	ldr	r3, [r7, #16]
 80264b4:	881b      	ldrh	r3, [r3, #0]
 80264b6:	b29b      	uxth	r3, r3
 80264b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80264bc:	d10c      	bne.n	80264d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80264be:	693b      	ldr	r3, [r7, #16]
 80264c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80264c2:	2b06      	cmp	r3, #6
 80264c4:	d108      	bne.n	80264d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80264c6:	693b      	ldr	r3, [r7, #16]
 80264c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80264ca:	2b04      	cmp	r3, #4
 80264cc:	d104      	bne.n	80264d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80264ce:	693b      	ldr	r3, [r7, #16]
 80264d0:	885b      	ldrh	r3, [r3, #2]
 80264d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80264d4:	2b08      	cmp	r3, #8
 80264d6:	d003      	beq.n	80264e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80264d8:	6878      	ldr	r0, [r7, #4]
 80264da:	f7f7 fa61 	bl	801d9a0 <pbuf_free>
    return;
 80264de:	e05a      	b.n	8026596 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80264e0:	693b      	ldr	r3, [r7, #16]
 80264e2:	330e      	adds	r3, #14
 80264e4:	681b      	ldr	r3, [r3, #0]
 80264e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80264e8:	693b      	ldr	r3, [r7, #16]
 80264ea:	3318      	adds	r3, #24
 80264ec:	681b      	ldr	r3, [r3, #0]
 80264ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80264f0:	683b      	ldr	r3, [r7, #0]
 80264f2:	3304      	adds	r3, #4
 80264f4:	681b      	ldr	r3, [r3, #0]
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	d102      	bne.n	8026500 <etharp_input+0x74>
    for_us = 0;
 80264fa:	2300      	movs	r3, #0
 80264fc:	75fb      	strb	r3, [r7, #23]
 80264fe:	e009      	b.n	8026514 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8026500:	68ba      	ldr	r2, [r7, #8]
 8026502:	683b      	ldr	r3, [r7, #0]
 8026504:	3304      	adds	r3, #4
 8026506:	681b      	ldr	r3, [r3, #0]
 8026508:	429a      	cmp	r2, r3
 802650a:	bf0c      	ite	eq
 802650c:	2301      	moveq	r3, #1
 802650e:	2300      	movne	r3, #0
 8026510:	b2db      	uxtb	r3, r3
 8026512:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8026514:	693b      	ldr	r3, [r7, #16]
 8026516:	f103 0208 	add.w	r2, r3, #8
 802651a:	7dfb      	ldrb	r3, [r7, #23]
 802651c:	2b00      	cmp	r3, #0
 802651e:	d001      	beq.n	8026524 <etharp_input+0x98>
 8026520:	2301      	movs	r3, #1
 8026522:	e000      	b.n	8026526 <etharp_input+0x9a>
 8026524:	2302      	movs	r3, #2
 8026526:	f107 010c 	add.w	r1, r7, #12
 802652a:	6838      	ldr	r0, [r7, #0]
 802652c:	f7ff fed8 	bl	80262e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8026530:	693b      	ldr	r3, [r7, #16]
 8026532:	88db      	ldrh	r3, [r3, #6]
 8026534:	b29b      	uxth	r3, r3
 8026536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802653a:	d003      	beq.n	8026544 <etharp_input+0xb8>
 802653c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026540:	d01e      	beq.n	8026580 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8026542:	e025      	b.n	8026590 <etharp_input+0x104>
      if (for_us) {
 8026544:	7dfb      	ldrb	r3, [r7, #23]
 8026546:	2b00      	cmp	r3, #0
 8026548:	d021      	beq.n	802658e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802654a:	683b      	ldr	r3, [r7, #0]
 802654c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8026550:	693b      	ldr	r3, [r7, #16]
 8026552:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8026556:	683b      	ldr	r3, [r7, #0]
 8026558:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 802655c:	683b      	ldr	r3, [r7, #0]
 802655e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8026560:	693a      	ldr	r2, [r7, #16]
 8026562:	3208      	adds	r2, #8
        etharp_raw(netif,
 8026564:	2102      	movs	r1, #2
 8026566:	9103      	str	r1, [sp, #12]
 8026568:	f107 010c 	add.w	r1, r7, #12
 802656c:	9102      	str	r1, [sp, #8]
 802656e:	9201      	str	r2, [sp, #4]
 8026570:	9300      	str	r3, [sp, #0]
 8026572:	462b      	mov	r3, r5
 8026574:	4622      	mov	r2, r4
 8026576:	4601      	mov	r1, r0
 8026578:	6838      	ldr	r0, [r7, #0]
 802657a:	f000 faef 	bl	8026b5c <etharp_raw>
      break;
 802657e:	e006      	b.n	802658e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8026580:	f107 030c 	add.w	r3, r7, #12
 8026584:	4619      	mov	r1, r3
 8026586:	6838      	ldr	r0, [r7, #0]
 8026588:	f7fe f9d2 	bl	8024930 <dhcp_arp_reply>
      break;
 802658c:	e000      	b.n	8026590 <etharp_input+0x104>
      break;
 802658e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8026590:	6878      	ldr	r0, [r7, #4]
 8026592:	f7f7 fa05 	bl	801d9a0 <pbuf_free>
}
 8026596:	3718      	adds	r7, #24
 8026598:	46bd      	mov	sp, r7
 802659a:	bdb0      	pop	{r4, r5, r7, pc}
 802659c:	08030210 	.word	0x08030210
 80265a0:	08030360 	.word	0x08030360
 80265a4:	08030288 	.word	0x08030288

080265a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80265a8:	b580      	push	{r7, lr}
 80265aa:	b086      	sub	sp, #24
 80265ac:	af02      	add	r7, sp, #8
 80265ae:	60f8      	str	r0, [r7, #12]
 80265b0:	60b9      	str	r1, [r7, #8]
 80265b2:	4613      	mov	r3, r2
 80265b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80265b6:	79fa      	ldrb	r2, [r7, #7]
 80265b8:	4944      	ldr	r1, [pc, #272]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 80265ba:	4613      	mov	r3, r2
 80265bc:	005b      	lsls	r3, r3, #1
 80265be:	4413      	add	r3, r2
 80265c0:	00db      	lsls	r3, r3, #3
 80265c2:	440b      	add	r3, r1
 80265c4:	3314      	adds	r3, #20
 80265c6:	781b      	ldrb	r3, [r3, #0]
 80265c8:	2b01      	cmp	r3, #1
 80265ca:	d806      	bhi.n	80265da <etharp_output_to_arp_index+0x32>
 80265cc:	4b40      	ldr	r3, [pc, #256]	@ (80266d0 <etharp_output_to_arp_index+0x128>)
 80265ce:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80265d2:	4940      	ldr	r1, [pc, #256]	@ (80266d4 <etharp_output_to_arp_index+0x12c>)
 80265d4:	4840      	ldr	r0, [pc, #256]	@ (80266d8 <etharp_output_to_arp_index+0x130>)
 80265d6:	f002 fec7 	bl	8029368 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80265da:	79fa      	ldrb	r2, [r7, #7]
 80265dc:	493b      	ldr	r1, [pc, #236]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 80265de:	4613      	mov	r3, r2
 80265e0:	005b      	lsls	r3, r3, #1
 80265e2:	4413      	add	r3, r2
 80265e4:	00db      	lsls	r3, r3, #3
 80265e6:	440b      	add	r3, r1
 80265e8:	3314      	adds	r3, #20
 80265ea:	781b      	ldrb	r3, [r3, #0]
 80265ec:	2b02      	cmp	r3, #2
 80265ee:	d153      	bne.n	8026698 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80265f0:	79fa      	ldrb	r2, [r7, #7]
 80265f2:	4936      	ldr	r1, [pc, #216]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 80265f4:	4613      	mov	r3, r2
 80265f6:	005b      	lsls	r3, r3, #1
 80265f8:	4413      	add	r3, r2
 80265fa:	00db      	lsls	r3, r3, #3
 80265fc:	440b      	add	r3, r1
 80265fe:	3312      	adds	r3, #18
 8026600:	881b      	ldrh	r3, [r3, #0]
 8026602:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8026606:	d919      	bls.n	802663c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8026608:	79fa      	ldrb	r2, [r7, #7]
 802660a:	4613      	mov	r3, r2
 802660c:	005b      	lsls	r3, r3, #1
 802660e:	4413      	add	r3, r2
 8026610:	00db      	lsls	r3, r3, #3
 8026612:	4a2e      	ldr	r2, [pc, #184]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 8026614:	4413      	add	r3, r2
 8026616:	3304      	adds	r3, #4
 8026618:	4619      	mov	r1, r3
 802661a:	68f8      	ldr	r0, [r7, #12]
 802661c:	f000 fb4c 	bl	8026cb8 <etharp_request>
 8026620:	4603      	mov	r3, r0
 8026622:	2b00      	cmp	r3, #0
 8026624:	d138      	bne.n	8026698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8026626:	79fa      	ldrb	r2, [r7, #7]
 8026628:	4928      	ldr	r1, [pc, #160]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 802662a:	4613      	mov	r3, r2
 802662c:	005b      	lsls	r3, r3, #1
 802662e:	4413      	add	r3, r2
 8026630:	00db      	lsls	r3, r3, #3
 8026632:	440b      	add	r3, r1
 8026634:	3314      	adds	r3, #20
 8026636:	2203      	movs	r2, #3
 8026638:	701a      	strb	r2, [r3, #0]
 802663a:	e02d      	b.n	8026698 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802663c:	79fa      	ldrb	r2, [r7, #7]
 802663e:	4923      	ldr	r1, [pc, #140]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 8026640:	4613      	mov	r3, r2
 8026642:	005b      	lsls	r3, r3, #1
 8026644:	4413      	add	r3, r2
 8026646:	00db      	lsls	r3, r3, #3
 8026648:	440b      	add	r3, r1
 802664a:	3312      	adds	r3, #18
 802664c:	881b      	ldrh	r3, [r3, #0]
 802664e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8026652:	d321      	bcc.n	8026698 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8026654:	79fa      	ldrb	r2, [r7, #7]
 8026656:	4613      	mov	r3, r2
 8026658:	005b      	lsls	r3, r3, #1
 802665a:	4413      	add	r3, r2
 802665c:	00db      	lsls	r3, r3, #3
 802665e:	4a1b      	ldr	r2, [pc, #108]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 8026660:	4413      	add	r3, r2
 8026662:	1d19      	adds	r1, r3, #4
 8026664:	79fa      	ldrb	r2, [r7, #7]
 8026666:	4613      	mov	r3, r2
 8026668:	005b      	lsls	r3, r3, #1
 802666a:	4413      	add	r3, r2
 802666c:	00db      	lsls	r3, r3, #3
 802666e:	3308      	adds	r3, #8
 8026670:	4a16      	ldr	r2, [pc, #88]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 8026672:	4413      	add	r3, r2
 8026674:	3304      	adds	r3, #4
 8026676:	461a      	mov	r2, r3
 8026678:	68f8      	ldr	r0, [r7, #12]
 802667a:	f000 fafb 	bl	8026c74 <etharp_request_dst>
 802667e:	4603      	mov	r3, r0
 8026680:	2b00      	cmp	r3, #0
 8026682:	d109      	bne.n	8026698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8026684:	79fa      	ldrb	r2, [r7, #7]
 8026686:	4911      	ldr	r1, [pc, #68]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 8026688:	4613      	mov	r3, r2
 802668a:	005b      	lsls	r3, r3, #1
 802668c:	4413      	add	r3, r2
 802668e:	00db      	lsls	r3, r3, #3
 8026690:	440b      	add	r3, r1
 8026692:	3314      	adds	r3, #20
 8026694:	2203      	movs	r2, #3
 8026696:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8026698:	68fb      	ldr	r3, [r7, #12]
 802669a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 802669e:	79fa      	ldrb	r2, [r7, #7]
 80266a0:	4613      	mov	r3, r2
 80266a2:	005b      	lsls	r3, r3, #1
 80266a4:	4413      	add	r3, r2
 80266a6:	00db      	lsls	r3, r3, #3
 80266a8:	3308      	adds	r3, #8
 80266aa:	4a08      	ldr	r2, [pc, #32]	@ (80266cc <etharp_output_to_arp_index+0x124>)
 80266ac:	4413      	add	r3, r2
 80266ae:	3304      	adds	r3, #4
 80266b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80266b4:	9200      	str	r2, [sp, #0]
 80266b6:	460a      	mov	r2, r1
 80266b8:	68b9      	ldr	r1, [r7, #8]
 80266ba:	68f8      	ldr	r0, [r7, #12]
 80266bc:	f001 ff14 	bl	80284e8 <ethernet_output>
 80266c0:	4603      	mov	r3, r0
}
 80266c2:	4618      	mov	r0, r3
 80266c4:	3710      	adds	r7, #16
 80266c6:	46bd      	mov	sp, r7
 80266c8:	bd80      	pop	{r7, pc}
 80266ca:	bf00      	nop
 80266cc:	2400b52c 	.word	0x2400b52c
 80266d0:	08030210 	.word	0x08030210
 80266d4:	08030380 	.word	0x08030380
 80266d8:	08030288 	.word	0x08030288

080266dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80266dc:	b580      	push	{r7, lr}
 80266de:	b08a      	sub	sp, #40	@ 0x28
 80266e0:	af02      	add	r7, sp, #8
 80266e2:	60f8      	str	r0, [r7, #12]
 80266e4:	60b9      	str	r1, [r7, #8]
 80266e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80266e8:	687b      	ldr	r3, [r7, #4]
 80266ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80266ec:	68fb      	ldr	r3, [r7, #12]
 80266ee:	2b00      	cmp	r3, #0
 80266f0:	d106      	bne.n	8026700 <etharp_output+0x24>
 80266f2:	4b73      	ldr	r3, [pc, #460]	@ (80268c0 <etharp_output+0x1e4>)
 80266f4:	f240 321e 	movw	r2, #798	@ 0x31e
 80266f8:	4972      	ldr	r1, [pc, #456]	@ (80268c4 <etharp_output+0x1e8>)
 80266fa:	4873      	ldr	r0, [pc, #460]	@ (80268c8 <etharp_output+0x1ec>)
 80266fc:	f002 fe34 	bl	8029368 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8026700:	68bb      	ldr	r3, [r7, #8]
 8026702:	2b00      	cmp	r3, #0
 8026704:	d106      	bne.n	8026714 <etharp_output+0x38>
 8026706:	4b6e      	ldr	r3, [pc, #440]	@ (80268c0 <etharp_output+0x1e4>)
 8026708:	f240 321f 	movw	r2, #799	@ 0x31f
 802670c:	496f      	ldr	r1, [pc, #444]	@ (80268cc <etharp_output+0x1f0>)
 802670e:	486e      	ldr	r0, [pc, #440]	@ (80268c8 <etharp_output+0x1ec>)
 8026710:	f002 fe2a 	bl	8029368 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8026714:	687b      	ldr	r3, [r7, #4]
 8026716:	2b00      	cmp	r3, #0
 8026718:	d106      	bne.n	8026728 <etharp_output+0x4c>
 802671a:	4b69      	ldr	r3, [pc, #420]	@ (80268c0 <etharp_output+0x1e4>)
 802671c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8026720:	496b      	ldr	r1, [pc, #428]	@ (80268d0 <etharp_output+0x1f4>)
 8026722:	4869      	ldr	r0, [pc, #420]	@ (80268c8 <etharp_output+0x1ec>)
 8026724:	f002 fe20 	bl	8029368 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8026728:	687b      	ldr	r3, [r7, #4]
 802672a:	681b      	ldr	r3, [r3, #0]
 802672c:	68f9      	ldr	r1, [r7, #12]
 802672e:	4618      	mov	r0, r3
 8026730:	f000 ff3c 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8026734:	4603      	mov	r3, r0
 8026736:	2b00      	cmp	r3, #0
 8026738:	d002      	beq.n	8026740 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802673a:	4b66      	ldr	r3, [pc, #408]	@ (80268d4 <etharp_output+0x1f8>)
 802673c:	61fb      	str	r3, [r7, #28]
 802673e:	e0af      	b.n	80268a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8026740:	687b      	ldr	r3, [r7, #4]
 8026742:	681b      	ldr	r3, [r3, #0]
 8026744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8026748:	2be0      	cmp	r3, #224	@ 0xe0
 802674a:	d118      	bne.n	802677e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802674c:	2301      	movs	r3, #1
 802674e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8026750:	2300      	movs	r3, #0
 8026752:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8026754:	235e      	movs	r3, #94	@ 0x5e
 8026756:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	3301      	adds	r3, #1
 802675c:	781b      	ldrb	r3, [r3, #0]
 802675e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8026762:	b2db      	uxtb	r3, r3
 8026764:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8026766:	687b      	ldr	r3, [r7, #4]
 8026768:	3302      	adds	r3, #2
 802676a:	781b      	ldrb	r3, [r3, #0]
 802676c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	3303      	adds	r3, #3
 8026772:	781b      	ldrb	r3, [r3, #0]
 8026774:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8026776:	f107 0310 	add.w	r3, r7, #16
 802677a:	61fb      	str	r3, [r7, #28]
 802677c:	e090      	b.n	80268a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	681a      	ldr	r2, [r3, #0]
 8026782:	68fb      	ldr	r3, [r7, #12]
 8026784:	3304      	adds	r3, #4
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	405a      	eors	r2, r3
 802678a:	68fb      	ldr	r3, [r7, #12]
 802678c:	3308      	adds	r3, #8
 802678e:	681b      	ldr	r3, [r3, #0]
 8026790:	4013      	ands	r3, r2
 8026792:	2b00      	cmp	r3, #0
 8026794:	d012      	beq.n	80267bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8026796:	687b      	ldr	r3, [r7, #4]
 8026798:	681b      	ldr	r3, [r3, #0]
 802679a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802679c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80267a0:	4293      	cmp	r3, r2
 80267a2:	d00b      	beq.n	80267bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80267a4:	68fb      	ldr	r3, [r7, #12]
 80267a6:	330c      	adds	r3, #12
 80267a8:	681b      	ldr	r3, [r3, #0]
 80267aa:	2b00      	cmp	r3, #0
 80267ac:	d003      	beq.n	80267b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	330c      	adds	r3, #12
 80267b2:	61bb      	str	r3, [r7, #24]
 80267b4:	e002      	b.n	80267bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80267b6:	f06f 0303 	mvn.w	r3, #3
 80267ba:	e07d      	b.n	80268b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80267bc:	4b46      	ldr	r3, [pc, #280]	@ (80268d8 <etharp_output+0x1fc>)
 80267be:	781b      	ldrb	r3, [r3, #0]
 80267c0:	4619      	mov	r1, r3
 80267c2:	4a46      	ldr	r2, [pc, #280]	@ (80268dc <etharp_output+0x200>)
 80267c4:	460b      	mov	r3, r1
 80267c6:	005b      	lsls	r3, r3, #1
 80267c8:	440b      	add	r3, r1
 80267ca:	00db      	lsls	r3, r3, #3
 80267cc:	4413      	add	r3, r2
 80267ce:	3314      	adds	r3, #20
 80267d0:	781b      	ldrb	r3, [r3, #0]
 80267d2:	2b01      	cmp	r3, #1
 80267d4:	d925      	bls.n	8026822 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80267d6:	4b40      	ldr	r3, [pc, #256]	@ (80268d8 <etharp_output+0x1fc>)
 80267d8:	781b      	ldrb	r3, [r3, #0]
 80267da:	4619      	mov	r1, r3
 80267dc:	4a3f      	ldr	r2, [pc, #252]	@ (80268dc <etharp_output+0x200>)
 80267de:	460b      	mov	r3, r1
 80267e0:	005b      	lsls	r3, r3, #1
 80267e2:	440b      	add	r3, r1
 80267e4:	00db      	lsls	r3, r3, #3
 80267e6:	4413      	add	r3, r2
 80267e8:	3308      	adds	r3, #8
 80267ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80267ec:	68fa      	ldr	r2, [r7, #12]
 80267ee:	429a      	cmp	r2, r3
 80267f0:	d117      	bne.n	8026822 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80267f2:	69bb      	ldr	r3, [r7, #24]
 80267f4:	681a      	ldr	r2, [r3, #0]
 80267f6:	4b38      	ldr	r3, [pc, #224]	@ (80268d8 <etharp_output+0x1fc>)
 80267f8:	781b      	ldrb	r3, [r3, #0]
 80267fa:	4618      	mov	r0, r3
 80267fc:	4937      	ldr	r1, [pc, #220]	@ (80268dc <etharp_output+0x200>)
 80267fe:	4603      	mov	r3, r0
 8026800:	005b      	lsls	r3, r3, #1
 8026802:	4403      	add	r3, r0
 8026804:	00db      	lsls	r3, r3, #3
 8026806:	440b      	add	r3, r1
 8026808:	3304      	adds	r3, #4
 802680a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802680c:	429a      	cmp	r2, r3
 802680e:	d108      	bne.n	8026822 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8026810:	4b31      	ldr	r3, [pc, #196]	@ (80268d8 <etharp_output+0x1fc>)
 8026812:	781b      	ldrb	r3, [r3, #0]
 8026814:	461a      	mov	r2, r3
 8026816:	68b9      	ldr	r1, [r7, #8]
 8026818:	68f8      	ldr	r0, [r7, #12]
 802681a:	f7ff fec5 	bl	80265a8 <etharp_output_to_arp_index>
 802681e:	4603      	mov	r3, r0
 8026820:	e04a      	b.n	80268b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8026822:	2300      	movs	r3, #0
 8026824:	75fb      	strb	r3, [r7, #23]
 8026826:	e031      	b.n	802688c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8026828:	7dfa      	ldrb	r2, [r7, #23]
 802682a:	492c      	ldr	r1, [pc, #176]	@ (80268dc <etharp_output+0x200>)
 802682c:	4613      	mov	r3, r2
 802682e:	005b      	lsls	r3, r3, #1
 8026830:	4413      	add	r3, r2
 8026832:	00db      	lsls	r3, r3, #3
 8026834:	440b      	add	r3, r1
 8026836:	3314      	adds	r3, #20
 8026838:	781b      	ldrb	r3, [r3, #0]
 802683a:	2b01      	cmp	r3, #1
 802683c:	d923      	bls.n	8026886 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802683e:	7dfa      	ldrb	r2, [r7, #23]
 8026840:	4926      	ldr	r1, [pc, #152]	@ (80268dc <etharp_output+0x200>)
 8026842:	4613      	mov	r3, r2
 8026844:	005b      	lsls	r3, r3, #1
 8026846:	4413      	add	r3, r2
 8026848:	00db      	lsls	r3, r3, #3
 802684a:	440b      	add	r3, r1
 802684c:	3308      	adds	r3, #8
 802684e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8026850:	68fa      	ldr	r2, [r7, #12]
 8026852:	429a      	cmp	r2, r3
 8026854:	d117      	bne.n	8026886 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8026856:	69bb      	ldr	r3, [r7, #24]
 8026858:	6819      	ldr	r1, [r3, #0]
 802685a:	7dfa      	ldrb	r2, [r7, #23]
 802685c:	481f      	ldr	r0, [pc, #124]	@ (80268dc <etharp_output+0x200>)
 802685e:	4613      	mov	r3, r2
 8026860:	005b      	lsls	r3, r3, #1
 8026862:	4413      	add	r3, r2
 8026864:	00db      	lsls	r3, r3, #3
 8026866:	4403      	add	r3, r0
 8026868:	3304      	adds	r3, #4
 802686a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802686c:	4299      	cmp	r1, r3
 802686e:	d10a      	bne.n	8026886 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8026870:	4a19      	ldr	r2, [pc, #100]	@ (80268d8 <etharp_output+0x1fc>)
 8026872:	7dfb      	ldrb	r3, [r7, #23]
 8026874:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8026876:	7dfb      	ldrb	r3, [r7, #23]
 8026878:	461a      	mov	r2, r3
 802687a:	68b9      	ldr	r1, [r7, #8]
 802687c:	68f8      	ldr	r0, [r7, #12]
 802687e:	f7ff fe93 	bl	80265a8 <etharp_output_to_arp_index>
 8026882:	4603      	mov	r3, r0
 8026884:	e018      	b.n	80268b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8026886:	7dfb      	ldrb	r3, [r7, #23]
 8026888:	3301      	adds	r3, #1
 802688a:	75fb      	strb	r3, [r7, #23]
 802688c:	7dfb      	ldrb	r3, [r7, #23]
 802688e:	2b09      	cmp	r3, #9
 8026890:	d9ca      	bls.n	8026828 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8026892:	68ba      	ldr	r2, [r7, #8]
 8026894:	69b9      	ldr	r1, [r7, #24]
 8026896:	68f8      	ldr	r0, [r7, #12]
 8026898:	f000 f822 	bl	80268e0 <etharp_query>
 802689c:	4603      	mov	r3, r0
 802689e:	e00b      	b.n	80268b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80268a0:	68fb      	ldr	r3, [r7, #12]
 80268a2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80268a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80268aa:	9300      	str	r3, [sp, #0]
 80268ac:	69fb      	ldr	r3, [r7, #28]
 80268ae:	68b9      	ldr	r1, [r7, #8]
 80268b0:	68f8      	ldr	r0, [r7, #12]
 80268b2:	f001 fe19 	bl	80284e8 <ethernet_output>
 80268b6:	4603      	mov	r3, r0
}
 80268b8:	4618      	mov	r0, r3
 80268ba:	3720      	adds	r7, #32
 80268bc:	46bd      	mov	sp, r7
 80268be:	bd80      	pop	{r7, pc}
 80268c0:	08030210 	.word	0x08030210
 80268c4:	08030360 	.word	0x08030360
 80268c8:	08030288 	.word	0x08030288
 80268cc:	080303b0 	.word	0x080303b0
 80268d0:	08030350 	.word	0x08030350
 80268d4:	08030efc 	.word	0x08030efc
 80268d8:	2400b61c 	.word	0x2400b61c
 80268dc:	2400b52c 	.word	0x2400b52c

080268e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80268e0:	b580      	push	{r7, lr}
 80268e2:	b08c      	sub	sp, #48	@ 0x30
 80268e4:	af02      	add	r7, sp, #8
 80268e6:	60f8      	str	r0, [r7, #12]
 80268e8:	60b9      	str	r1, [r7, #8]
 80268ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80268ec:	68fb      	ldr	r3, [r7, #12]
 80268ee:	332a      	adds	r3, #42	@ 0x2a
 80268f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80268f2:	23ff      	movs	r3, #255	@ 0xff
 80268f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80268f8:	2300      	movs	r3, #0
 80268fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80268fc:	68bb      	ldr	r3, [r7, #8]
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	68f9      	ldr	r1, [r7, #12]
 8026902:	4618      	mov	r0, r3
 8026904:	f000 fe52 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8026908:	4603      	mov	r3, r0
 802690a:	2b00      	cmp	r3, #0
 802690c:	d10c      	bne.n	8026928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802690e:	68bb      	ldr	r3, [r7, #8]
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8026916:	2be0      	cmp	r3, #224	@ 0xe0
 8026918:	d006      	beq.n	8026928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802691a:	68bb      	ldr	r3, [r7, #8]
 802691c:	2b00      	cmp	r3, #0
 802691e:	d003      	beq.n	8026928 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8026920:	68bb      	ldr	r3, [r7, #8]
 8026922:	681b      	ldr	r3, [r3, #0]
 8026924:	2b00      	cmp	r3, #0
 8026926:	d102      	bne.n	802692e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8026928:	f06f 030f 	mvn.w	r3, #15
 802692c:	e101      	b.n	8026b32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802692e:	68fa      	ldr	r2, [r7, #12]
 8026930:	2101      	movs	r1, #1
 8026932:	68b8      	ldr	r0, [r7, #8]
 8026934:	f7ff fb5c 	bl	8025ff0 <etharp_find_entry>
 8026938:	4603      	mov	r3, r0
 802693a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802693c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8026940:	2b00      	cmp	r3, #0
 8026942:	da02      	bge.n	802694a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8026944:	8a7b      	ldrh	r3, [r7, #18]
 8026946:	b25b      	sxtb	r3, r3
 8026948:	e0f3      	b.n	8026b32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802694a:	8a7b      	ldrh	r3, [r7, #18]
 802694c:	2b7e      	cmp	r3, #126	@ 0x7e
 802694e:	d906      	bls.n	802695e <etharp_query+0x7e>
 8026950:	4b7a      	ldr	r3, [pc, #488]	@ (8026b3c <etharp_query+0x25c>)
 8026952:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8026956:	497a      	ldr	r1, [pc, #488]	@ (8026b40 <etharp_query+0x260>)
 8026958:	487a      	ldr	r0, [pc, #488]	@ (8026b44 <etharp_query+0x264>)
 802695a:	f002 fd05 	bl	8029368 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802695e:	8a7b      	ldrh	r3, [r7, #18]
 8026960:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8026962:	7c7a      	ldrb	r2, [r7, #17]
 8026964:	4978      	ldr	r1, [pc, #480]	@ (8026b48 <etharp_query+0x268>)
 8026966:	4613      	mov	r3, r2
 8026968:	005b      	lsls	r3, r3, #1
 802696a:	4413      	add	r3, r2
 802696c:	00db      	lsls	r3, r3, #3
 802696e:	440b      	add	r3, r1
 8026970:	3314      	adds	r3, #20
 8026972:	781b      	ldrb	r3, [r3, #0]
 8026974:	2b00      	cmp	r3, #0
 8026976:	d115      	bne.n	80269a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8026978:	2301      	movs	r3, #1
 802697a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802697c:	7c7a      	ldrb	r2, [r7, #17]
 802697e:	4972      	ldr	r1, [pc, #456]	@ (8026b48 <etharp_query+0x268>)
 8026980:	4613      	mov	r3, r2
 8026982:	005b      	lsls	r3, r3, #1
 8026984:	4413      	add	r3, r2
 8026986:	00db      	lsls	r3, r3, #3
 8026988:	440b      	add	r3, r1
 802698a:	3314      	adds	r3, #20
 802698c:	2201      	movs	r2, #1
 802698e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8026990:	7c7a      	ldrb	r2, [r7, #17]
 8026992:	496d      	ldr	r1, [pc, #436]	@ (8026b48 <etharp_query+0x268>)
 8026994:	4613      	mov	r3, r2
 8026996:	005b      	lsls	r3, r3, #1
 8026998:	4413      	add	r3, r2
 802699a:	00db      	lsls	r3, r3, #3
 802699c:	440b      	add	r3, r1
 802699e:	3308      	adds	r3, #8
 80269a0:	68fa      	ldr	r2, [r7, #12]
 80269a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80269a4:	7c7a      	ldrb	r2, [r7, #17]
 80269a6:	4968      	ldr	r1, [pc, #416]	@ (8026b48 <etharp_query+0x268>)
 80269a8:	4613      	mov	r3, r2
 80269aa:	005b      	lsls	r3, r3, #1
 80269ac:	4413      	add	r3, r2
 80269ae:	00db      	lsls	r3, r3, #3
 80269b0:	440b      	add	r3, r1
 80269b2:	3314      	adds	r3, #20
 80269b4:	781b      	ldrb	r3, [r3, #0]
 80269b6:	2b01      	cmp	r3, #1
 80269b8:	d011      	beq.n	80269de <etharp_query+0xfe>
 80269ba:	7c7a      	ldrb	r2, [r7, #17]
 80269bc:	4962      	ldr	r1, [pc, #392]	@ (8026b48 <etharp_query+0x268>)
 80269be:	4613      	mov	r3, r2
 80269c0:	005b      	lsls	r3, r3, #1
 80269c2:	4413      	add	r3, r2
 80269c4:	00db      	lsls	r3, r3, #3
 80269c6:	440b      	add	r3, r1
 80269c8:	3314      	adds	r3, #20
 80269ca:	781b      	ldrb	r3, [r3, #0]
 80269cc:	2b01      	cmp	r3, #1
 80269ce:	d806      	bhi.n	80269de <etharp_query+0xfe>
 80269d0:	4b5a      	ldr	r3, [pc, #360]	@ (8026b3c <etharp_query+0x25c>)
 80269d2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80269d6:	495d      	ldr	r1, [pc, #372]	@ (8026b4c <etharp_query+0x26c>)
 80269d8:	485a      	ldr	r0, [pc, #360]	@ (8026b44 <etharp_query+0x264>)
 80269da:	f002 fcc5 	bl	8029368 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80269de:	6a3b      	ldr	r3, [r7, #32]
 80269e0:	2b00      	cmp	r3, #0
 80269e2:	d102      	bne.n	80269ea <etharp_query+0x10a>
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d10c      	bne.n	8026a04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80269ea:	68b9      	ldr	r1, [r7, #8]
 80269ec:	68f8      	ldr	r0, [r7, #12]
 80269ee:	f000 f963 	bl	8026cb8 <etharp_request>
 80269f2:	4603      	mov	r3, r0
 80269f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	d102      	bne.n	8026a04 <etharp_query+0x124>
      return result;
 80269fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8026a02:	e096      	b.n	8026b32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8026a04:	687b      	ldr	r3, [r7, #4]
 8026a06:	2b00      	cmp	r3, #0
 8026a08:	d106      	bne.n	8026a18 <etharp_query+0x138>
 8026a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8026b3c <etharp_query+0x25c>)
 8026a0c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8026a10:	494f      	ldr	r1, [pc, #316]	@ (8026b50 <etharp_query+0x270>)
 8026a12:	484c      	ldr	r0, [pc, #304]	@ (8026b44 <etharp_query+0x264>)
 8026a14:	f002 fca8 	bl	8029368 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8026a18:	7c7a      	ldrb	r2, [r7, #17]
 8026a1a:	494b      	ldr	r1, [pc, #300]	@ (8026b48 <etharp_query+0x268>)
 8026a1c:	4613      	mov	r3, r2
 8026a1e:	005b      	lsls	r3, r3, #1
 8026a20:	4413      	add	r3, r2
 8026a22:	00db      	lsls	r3, r3, #3
 8026a24:	440b      	add	r3, r1
 8026a26:	3314      	adds	r3, #20
 8026a28:	781b      	ldrb	r3, [r3, #0]
 8026a2a:	2b01      	cmp	r3, #1
 8026a2c:	d917      	bls.n	8026a5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8026a2e:	4a49      	ldr	r2, [pc, #292]	@ (8026b54 <etharp_query+0x274>)
 8026a30:	7c7b      	ldrb	r3, [r7, #17]
 8026a32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8026a34:	7c7a      	ldrb	r2, [r7, #17]
 8026a36:	4613      	mov	r3, r2
 8026a38:	005b      	lsls	r3, r3, #1
 8026a3a:	4413      	add	r3, r2
 8026a3c:	00db      	lsls	r3, r3, #3
 8026a3e:	3308      	adds	r3, #8
 8026a40:	4a41      	ldr	r2, [pc, #260]	@ (8026b48 <etharp_query+0x268>)
 8026a42:	4413      	add	r3, r2
 8026a44:	3304      	adds	r3, #4
 8026a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8026a4a:	9200      	str	r2, [sp, #0]
 8026a4c:	697a      	ldr	r2, [r7, #20]
 8026a4e:	6879      	ldr	r1, [r7, #4]
 8026a50:	68f8      	ldr	r0, [r7, #12]
 8026a52:	f001 fd49 	bl	80284e8 <ethernet_output>
 8026a56:	4603      	mov	r3, r0
 8026a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8026a5c:	e067      	b.n	8026b2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8026a5e:	7c7a      	ldrb	r2, [r7, #17]
 8026a60:	4939      	ldr	r1, [pc, #228]	@ (8026b48 <etharp_query+0x268>)
 8026a62:	4613      	mov	r3, r2
 8026a64:	005b      	lsls	r3, r3, #1
 8026a66:	4413      	add	r3, r2
 8026a68:	00db      	lsls	r3, r3, #3
 8026a6a:	440b      	add	r3, r1
 8026a6c:	3314      	adds	r3, #20
 8026a6e:	781b      	ldrb	r3, [r3, #0]
 8026a70:	2b01      	cmp	r3, #1
 8026a72:	d15c      	bne.n	8026b2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8026a74:	2300      	movs	r3, #0
 8026a76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8026a7c:	e01c      	b.n	8026ab8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8026a7e:	69fb      	ldr	r3, [r7, #28]
 8026a80:	895a      	ldrh	r2, [r3, #10]
 8026a82:	69fb      	ldr	r3, [r7, #28]
 8026a84:	891b      	ldrh	r3, [r3, #8]
 8026a86:	429a      	cmp	r2, r3
 8026a88:	d10a      	bne.n	8026aa0 <etharp_query+0x1c0>
 8026a8a:	69fb      	ldr	r3, [r7, #28]
 8026a8c:	681b      	ldr	r3, [r3, #0]
 8026a8e:	2b00      	cmp	r3, #0
 8026a90:	d006      	beq.n	8026aa0 <etharp_query+0x1c0>
 8026a92:	4b2a      	ldr	r3, [pc, #168]	@ (8026b3c <etharp_query+0x25c>)
 8026a94:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8026a98:	492f      	ldr	r1, [pc, #188]	@ (8026b58 <etharp_query+0x278>)
 8026a9a:	482a      	ldr	r0, [pc, #168]	@ (8026b44 <etharp_query+0x264>)
 8026a9c:	f002 fc64 	bl	8029368 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8026aa0:	69fb      	ldr	r3, [r7, #28]
 8026aa2:	7b1b      	ldrb	r3, [r3, #12]
 8026aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8026aa8:	2b00      	cmp	r3, #0
 8026aaa:	d002      	beq.n	8026ab2 <etharp_query+0x1d2>
        copy_needed = 1;
 8026aac:	2301      	movs	r3, #1
 8026aae:	61bb      	str	r3, [r7, #24]
        break;
 8026ab0:	e005      	b.n	8026abe <etharp_query+0x1de>
      }
      p = p->next;
 8026ab2:	69fb      	ldr	r3, [r7, #28]
 8026ab4:	681b      	ldr	r3, [r3, #0]
 8026ab6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8026ab8:	69fb      	ldr	r3, [r7, #28]
 8026aba:	2b00      	cmp	r3, #0
 8026abc:	d1df      	bne.n	8026a7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8026abe:	69bb      	ldr	r3, [r7, #24]
 8026ac0:	2b00      	cmp	r3, #0
 8026ac2:	d007      	beq.n	8026ad4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8026ac4:	687a      	ldr	r2, [r7, #4]
 8026ac6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8026aca:	200e      	movs	r0, #14
 8026acc:	f7f7 fb0c 	bl	801e0e8 <pbuf_clone>
 8026ad0:	61f8      	str	r0, [r7, #28]
 8026ad2:	e004      	b.n	8026ade <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8026ad8:	69f8      	ldr	r0, [r7, #28]
 8026ada:	f7f7 f801 	bl	801dae0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8026ade:	69fb      	ldr	r3, [r7, #28]
 8026ae0:	2b00      	cmp	r3, #0
 8026ae2:	d021      	beq.n	8026b28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8026ae4:	7c7a      	ldrb	r2, [r7, #17]
 8026ae6:	4918      	ldr	r1, [pc, #96]	@ (8026b48 <etharp_query+0x268>)
 8026ae8:	4613      	mov	r3, r2
 8026aea:	005b      	lsls	r3, r3, #1
 8026aec:	4413      	add	r3, r2
 8026aee:	00db      	lsls	r3, r3, #3
 8026af0:	440b      	add	r3, r1
 8026af2:	681b      	ldr	r3, [r3, #0]
 8026af4:	2b00      	cmp	r3, #0
 8026af6:	d00a      	beq.n	8026b0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8026af8:	7c7a      	ldrb	r2, [r7, #17]
 8026afa:	4913      	ldr	r1, [pc, #76]	@ (8026b48 <etharp_query+0x268>)
 8026afc:	4613      	mov	r3, r2
 8026afe:	005b      	lsls	r3, r3, #1
 8026b00:	4413      	add	r3, r2
 8026b02:	00db      	lsls	r3, r3, #3
 8026b04:	440b      	add	r3, r1
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	4618      	mov	r0, r3
 8026b0a:	f7f6 ff49 	bl	801d9a0 <pbuf_free>
      }
      arp_table[i].q = p;
 8026b0e:	7c7a      	ldrb	r2, [r7, #17]
 8026b10:	490d      	ldr	r1, [pc, #52]	@ (8026b48 <etharp_query+0x268>)
 8026b12:	4613      	mov	r3, r2
 8026b14:	005b      	lsls	r3, r3, #1
 8026b16:	4413      	add	r3, r2
 8026b18:	00db      	lsls	r3, r3, #3
 8026b1a:	440b      	add	r3, r1
 8026b1c:	69fa      	ldr	r2, [r7, #28]
 8026b1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8026b20:	2300      	movs	r3, #0
 8026b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8026b26:	e002      	b.n	8026b2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8026b28:	23ff      	movs	r3, #255	@ 0xff
 8026b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8026b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8026b32:	4618      	mov	r0, r3
 8026b34:	3728      	adds	r7, #40	@ 0x28
 8026b36:	46bd      	mov	sp, r7
 8026b38:	bd80      	pop	{r7, pc}
 8026b3a:	bf00      	nop
 8026b3c:	08030210 	.word	0x08030210
 8026b40:	080303bc 	.word	0x080303bc
 8026b44:	08030288 	.word	0x08030288
 8026b48:	2400b52c 	.word	0x2400b52c
 8026b4c:	080303cc 	.word	0x080303cc
 8026b50:	080303b0 	.word	0x080303b0
 8026b54:	2400b61c 	.word	0x2400b61c
 8026b58:	080303f4 	.word	0x080303f4

08026b5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8026b5c:	b580      	push	{r7, lr}
 8026b5e:	b08a      	sub	sp, #40	@ 0x28
 8026b60:	af02      	add	r7, sp, #8
 8026b62:	60f8      	str	r0, [r7, #12]
 8026b64:	60b9      	str	r1, [r7, #8]
 8026b66:	607a      	str	r2, [r7, #4]
 8026b68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8026b6a:	2300      	movs	r3, #0
 8026b6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8026b6e:	68fb      	ldr	r3, [r7, #12]
 8026b70:	2b00      	cmp	r3, #0
 8026b72:	d106      	bne.n	8026b82 <etharp_raw+0x26>
 8026b74:	4b3a      	ldr	r3, [pc, #232]	@ (8026c60 <etharp_raw+0x104>)
 8026b76:	f240 4257 	movw	r2, #1111	@ 0x457
 8026b7a:	493a      	ldr	r1, [pc, #232]	@ (8026c64 <etharp_raw+0x108>)
 8026b7c:	483a      	ldr	r0, [pc, #232]	@ (8026c68 <etharp_raw+0x10c>)
 8026b7e:	f002 fbf3 	bl	8029368 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8026b82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8026b86:	211c      	movs	r1, #28
 8026b88:	200e      	movs	r0, #14
 8026b8a:	f7f6 fc25 	bl	801d3d8 <pbuf_alloc>
 8026b8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8026b90:	69bb      	ldr	r3, [r7, #24]
 8026b92:	2b00      	cmp	r3, #0
 8026b94:	d102      	bne.n	8026b9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8026b96:	f04f 33ff 	mov.w	r3, #4294967295
 8026b9a:	e05d      	b.n	8026c58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8026b9c:	69bb      	ldr	r3, [r7, #24]
 8026b9e:	895b      	ldrh	r3, [r3, #10]
 8026ba0:	2b1b      	cmp	r3, #27
 8026ba2:	d806      	bhi.n	8026bb2 <etharp_raw+0x56>
 8026ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8026c60 <etharp_raw+0x104>)
 8026ba6:	f240 4262 	movw	r2, #1122	@ 0x462
 8026baa:	4930      	ldr	r1, [pc, #192]	@ (8026c6c <etharp_raw+0x110>)
 8026bac:	482e      	ldr	r0, [pc, #184]	@ (8026c68 <etharp_raw+0x10c>)
 8026bae:	f002 fbdb 	bl	8029368 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8026bb2:	69bb      	ldr	r3, [r7, #24]
 8026bb4:	685b      	ldr	r3, [r3, #4]
 8026bb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8026bb8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8026bba:	4618      	mov	r0, r3
 8026bbc:	f7f5 f800 	bl	801bbc0 <lwip_htons>
 8026bc0:	4603      	mov	r3, r0
 8026bc2:	461a      	mov	r2, r3
 8026bc4:	697b      	ldr	r3, [r7, #20]
 8026bc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8026bc8:	68fb      	ldr	r3, [r7, #12]
 8026bca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026bce:	2b06      	cmp	r3, #6
 8026bd0:	d006      	beq.n	8026be0 <etharp_raw+0x84>
 8026bd2:	4b23      	ldr	r3, [pc, #140]	@ (8026c60 <etharp_raw+0x104>)
 8026bd4:	f240 4269 	movw	r2, #1129	@ 0x469
 8026bd8:	4925      	ldr	r1, [pc, #148]	@ (8026c70 <etharp_raw+0x114>)
 8026bda:	4823      	ldr	r0, [pc, #140]	@ (8026c68 <etharp_raw+0x10c>)
 8026bdc:	f002 fbc4 	bl	8029368 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8026be0:	697b      	ldr	r3, [r7, #20]
 8026be2:	3308      	adds	r3, #8
 8026be4:	2206      	movs	r2, #6
 8026be6:	6839      	ldr	r1, [r7, #0]
 8026be8:	4618      	mov	r0, r3
 8026bea:	f002 fe30 	bl	802984e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8026bee:	697b      	ldr	r3, [r7, #20]
 8026bf0:	3312      	adds	r3, #18
 8026bf2:	2206      	movs	r2, #6
 8026bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8026bf6:	4618      	mov	r0, r3
 8026bf8:	f002 fe29 	bl	802984e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8026bfc:	697b      	ldr	r3, [r7, #20]
 8026bfe:	330e      	adds	r3, #14
 8026c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8026c02:	6812      	ldr	r2, [r2, #0]
 8026c04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8026c06:	697b      	ldr	r3, [r7, #20]
 8026c08:	3318      	adds	r3, #24
 8026c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026c0c:	6812      	ldr	r2, [r2, #0]
 8026c0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8026c10:	697b      	ldr	r3, [r7, #20]
 8026c12:	2200      	movs	r2, #0
 8026c14:	701a      	strb	r2, [r3, #0]
 8026c16:	2200      	movs	r2, #0
 8026c18:	f042 0201 	orr.w	r2, r2, #1
 8026c1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8026c1e:	697b      	ldr	r3, [r7, #20]
 8026c20:	2200      	movs	r2, #0
 8026c22:	f042 0208 	orr.w	r2, r2, #8
 8026c26:	709a      	strb	r2, [r3, #2]
 8026c28:	2200      	movs	r2, #0
 8026c2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8026c2c:	697b      	ldr	r3, [r7, #20]
 8026c2e:	2206      	movs	r2, #6
 8026c30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8026c32:	697b      	ldr	r3, [r7, #20]
 8026c34:	2204      	movs	r2, #4
 8026c36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8026c38:	f640 0306 	movw	r3, #2054	@ 0x806
 8026c3c:	9300      	str	r3, [sp, #0]
 8026c3e:	687b      	ldr	r3, [r7, #4]
 8026c40:	68ba      	ldr	r2, [r7, #8]
 8026c42:	69b9      	ldr	r1, [r7, #24]
 8026c44:	68f8      	ldr	r0, [r7, #12]
 8026c46:	f001 fc4f 	bl	80284e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8026c4a:	69b8      	ldr	r0, [r7, #24]
 8026c4c:	f7f6 fea8 	bl	801d9a0 <pbuf_free>
  p = NULL;
 8026c50:	2300      	movs	r3, #0
 8026c52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8026c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8026c58:	4618      	mov	r0, r3
 8026c5a:	3720      	adds	r7, #32
 8026c5c:	46bd      	mov	sp, r7
 8026c5e:	bd80      	pop	{r7, pc}
 8026c60:	08030210 	.word	0x08030210
 8026c64:	08030360 	.word	0x08030360
 8026c68:	08030288 	.word	0x08030288
 8026c6c:	08030410 	.word	0x08030410
 8026c70:	08030444 	.word	0x08030444

08026c74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8026c74:	b580      	push	{r7, lr}
 8026c76:	b088      	sub	sp, #32
 8026c78:	af04      	add	r7, sp, #16
 8026c7a:	60f8      	str	r0, [r7, #12]
 8026c7c:	60b9      	str	r1, [r7, #8]
 8026c7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8026c80:	68fb      	ldr	r3, [r7, #12]
 8026c82:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8026c86:	68fb      	ldr	r3, [r7, #12]
 8026c88:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8026c8c:	68fb      	ldr	r3, [r7, #12]
 8026c8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8026c90:	2201      	movs	r2, #1
 8026c92:	9203      	str	r2, [sp, #12]
 8026c94:	68ba      	ldr	r2, [r7, #8]
 8026c96:	9202      	str	r2, [sp, #8]
 8026c98:	4a06      	ldr	r2, [pc, #24]	@ (8026cb4 <etharp_request_dst+0x40>)
 8026c9a:	9201      	str	r2, [sp, #4]
 8026c9c:	9300      	str	r3, [sp, #0]
 8026c9e:	4603      	mov	r3, r0
 8026ca0:	687a      	ldr	r2, [r7, #4]
 8026ca2:	68f8      	ldr	r0, [r7, #12]
 8026ca4:	f7ff ff5a 	bl	8026b5c <etharp_raw>
 8026ca8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8026caa:	4618      	mov	r0, r3
 8026cac:	3710      	adds	r7, #16
 8026cae:	46bd      	mov	sp, r7
 8026cb0:	bd80      	pop	{r7, pc}
 8026cb2:	bf00      	nop
 8026cb4:	08030f04 	.word	0x08030f04

08026cb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8026cb8:	b580      	push	{r7, lr}
 8026cba:	b082      	sub	sp, #8
 8026cbc:	af00      	add	r7, sp, #0
 8026cbe:	6078      	str	r0, [r7, #4]
 8026cc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8026cc2:	4a05      	ldr	r2, [pc, #20]	@ (8026cd8 <etharp_request+0x20>)
 8026cc4:	6839      	ldr	r1, [r7, #0]
 8026cc6:	6878      	ldr	r0, [r7, #4]
 8026cc8:	f7ff ffd4 	bl	8026c74 <etharp_request_dst>
 8026ccc:	4603      	mov	r3, r0
}
 8026cce:	4618      	mov	r0, r3
 8026cd0:	3708      	adds	r7, #8
 8026cd2:	46bd      	mov	sp, r7
 8026cd4:	bd80      	pop	{r7, pc}
 8026cd6:	bf00      	nop
 8026cd8:	08030efc 	.word	0x08030efc

08026cdc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8026cdc:	b580      	push	{r7, lr}
 8026cde:	b08e      	sub	sp, #56	@ 0x38
 8026ce0:	af04      	add	r7, sp, #16
 8026ce2:	6078      	str	r0, [r7, #4]
 8026ce4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8026ce6:	4b87      	ldr	r3, [pc, #540]	@ (8026f04 <icmp_input+0x228>)
 8026ce8:	689b      	ldr	r3, [r3, #8]
 8026cea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8026cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026cee:	781b      	ldrb	r3, [r3, #0]
 8026cf0:	f003 030f 	and.w	r3, r3, #15
 8026cf4:	b2db      	uxtb	r3, r3
 8026cf6:	009b      	lsls	r3, r3, #2
 8026cf8:	b2db      	uxtb	r3, r3
 8026cfa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8026cfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026cfe:	2b13      	cmp	r3, #19
 8026d00:	f240 80e8 	bls.w	8026ed4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8026d04:	687b      	ldr	r3, [r7, #4]
 8026d06:	895b      	ldrh	r3, [r3, #10]
 8026d08:	2b03      	cmp	r3, #3
 8026d0a:	f240 80e5 	bls.w	8026ed8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8026d0e:	687b      	ldr	r3, [r7, #4]
 8026d10:	685b      	ldr	r3, [r3, #4]
 8026d12:	781b      	ldrb	r3, [r3, #0]
 8026d14:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8026d18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	f000 80d2 	beq.w	8026ec6 <icmp_input+0x1ea>
 8026d22:	2b08      	cmp	r3, #8
 8026d24:	f040 80d2 	bne.w	8026ecc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8026d28:	4b77      	ldr	r3, [pc, #476]	@ (8026f08 <icmp_input+0x22c>)
 8026d2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8026d2c:	4b75      	ldr	r3, [pc, #468]	@ (8026f04 <icmp_input+0x228>)
 8026d2e:	695b      	ldr	r3, [r3, #20]
 8026d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8026d34:	2be0      	cmp	r3, #224	@ 0xe0
 8026d36:	f000 80d6 	beq.w	8026ee6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8026d3a:	4b72      	ldr	r3, [pc, #456]	@ (8026f04 <icmp_input+0x228>)
 8026d3c:	695b      	ldr	r3, [r3, #20]
 8026d3e:	4a71      	ldr	r2, [pc, #452]	@ (8026f04 <icmp_input+0x228>)
 8026d40:	6812      	ldr	r2, [r2, #0]
 8026d42:	4611      	mov	r1, r2
 8026d44:	4618      	mov	r0, r3
 8026d46:	f000 fc31 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8026d4a:	4603      	mov	r3, r0
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	f040 80cc 	bne.w	8026eea <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8026d52:	687b      	ldr	r3, [r7, #4]
 8026d54:	891b      	ldrh	r3, [r3, #8]
 8026d56:	2b07      	cmp	r3, #7
 8026d58:	f240 80c0 	bls.w	8026edc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8026d5c:	6878      	ldr	r0, [r7, #4]
 8026d5e:	f7f5 fab9 	bl	801c2d4 <inet_chksum_pbuf>
 8026d62:	4603      	mov	r3, r0
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	d003      	beq.n	8026d70 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8026d68:	6878      	ldr	r0, [r7, #4]
 8026d6a:	f7f6 fe19 	bl	801d9a0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8026d6e:	e0c5      	b.n	8026efc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8026d70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026d72:	330e      	adds	r3, #14
 8026d74:	4619      	mov	r1, r3
 8026d76:	6878      	ldr	r0, [r7, #4]
 8026d78:	f7f6 fd7c 	bl	801d874 <pbuf_add_header>
 8026d7c:	4603      	mov	r3, r0
 8026d7e:	2b00      	cmp	r3, #0
 8026d80:	d04b      	beq.n	8026e1a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	891a      	ldrh	r2, [r3, #8]
 8026d86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026d88:	4413      	add	r3, r2
 8026d8a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8026d8c:	687b      	ldr	r3, [r7, #4]
 8026d8e:	891b      	ldrh	r3, [r3, #8]
 8026d90:	8b7a      	ldrh	r2, [r7, #26]
 8026d92:	429a      	cmp	r2, r3
 8026d94:	f0c0 80ab 	bcc.w	8026eee <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8026d98:	8b7b      	ldrh	r3, [r7, #26]
 8026d9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8026d9e:	4619      	mov	r1, r3
 8026da0:	200e      	movs	r0, #14
 8026da2:	f7f6 fb19 	bl	801d3d8 <pbuf_alloc>
 8026da6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8026da8:	697b      	ldr	r3, [r7, #20]
 8026daa:	2b00      	cmp	r3, #0
 8026dac:	f000 80a1 	beq.w	8026ef2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8026db0:	697b      	ldr	r3, [r7, #20]
 8026db2:	895b      	ldrh	r3, [r3, #10]
 8026db4:	461a      	mov	r2, r3
 8026db6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026db8:	3308      	adds	r3, #8
 8026dba:	429a      	cmp	r2, r3
 8026dbc:	d203      	bcs.n	8026dc6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8026dbe:	6978      	ldr	r0, [r7, #20]
 8026dc0:	f7f6 fdee 	bl	801d9a0 <pbuf_free>
          goto icmperr;
 8026dc4:	e096      	b.n	8026ef4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8026dc6:	697b      	ldr	r3, [r7, #20]
 8026dc8:	685b      	ldr	r3, [r3, #4]
 8026dca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8026dcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026dce:	4618      	mov	r0, r3
 8026dd0:	f002 fd3d 	bl	802984e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8026dd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026dd6:	4619      	mov	r1, r3
 8026dd8:	6978      	ldr	r0, [r7, #20]
 8026dda:	f7f6 fd5b 	bl	801d894 <pbuf_remove_header>
 8026dde:	4603      	mov	r3, r0
 8026de0:	2b00      	cmp	r3, #0
 8026de2:	d009      	beq.n	8026df8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8026de4:	4b49      	ldr	r3, [pc, #292]	@ (8026f0c <icmp_input+0x230>)
 8026de6:	22b6      	movs	r2, #182	@ 0xb6
 8026de8:	4949      	ldr	r1, [pc, #292]	@ (8026f10 <icmp_input+0x234>)
 8026dea:	484a      	ldr	r0, [pc, #296]	@ (8026f14 <icmp_input+0x238>)
 8026dec:	f002 fabc 	bl	8029368 <iprintf>
          pbuf_free(r);
 8026df0:	6978      	ldr	r0, [r7, #20]
 8026df2:	f7f6 fdd5 	bl	801d9a0 <pbuf_free>
          goto icmperr;
 8026df6:	e07d      	b.n	8026ef4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8026df8:	6879      	ldr	r1, [r7, #4]
 8026dfa:	6978      	ldr	r0, [r7, #20]
 8026dfc:	f7f6 fef8 	bl	801dbf0 <pbuf_copy>
 8026e00:	4603      	mov	r3, r0
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d003      	beq.n	8026e0e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8026e06:	6978      	ldr	r0, [r7, #20]
 8026e08:	f7f6 fdca 	bl	801d9a0 <pbuf_free>
          goto icmperr;
 8026e0c:	e072      	b.n	8026ef4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8026e0e:	6878      	ldr	r0, [r7, #4]
 8026e10:	f7f6 fdc6 	bl	801d9a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8026e14:	697b      	ldr	r3, [r7, #20]
 8026e16:	607b      	str	r3, [r7, #4]
 8026e18:	e00f      	b.n	8026e3a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8026e1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026e1c:	330e      	adds	r3, #14
 8026e1e:	4619      	mov	r1, r3
 8026e20:	6878      	ldr	r0, [r7, #4]
 8026e22:	f7f6 fd37 	bl	801d894 <pbuf_remove_header>
 8026e26:	4603      	mov	r3, r0
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	d006      	beq.n	8026e3a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8026e2c:	4b37      	ldr	r3, [pc, #220]	@ (8026f0c <icmp_input+0x230>)
 8026e2e:	22c7      	movs	r2, #199	@ 0xc7
 8026e30:	4939      	ldr	r1, [pc, #228]	@ (8026f18 <icmp_input+0x23c>)
 8026e32:	4838      	ldr	r0, [pc, #224]	@ (8026f14 <icmp_input+0x238>)
 8026e34:	f002 fa98 	bl	8029368 <iprintf>
          goto icmperr;
 8026e38:	e05c      	b.n	8026ef4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8026e3a:	687b      	ldr	r3, [r7, #4]
 8026e3c:	685b      	ldr	r3, [r3, #4]
 8026e3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8026e40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8026e42:	4619      	mov	r1, r3
 8026e44:	6878      	ldr	r0, [r7, #4]
 8026e46:	f7f6 fd15 	bl	801d874 <pbuf_add_header>
 8026e4a:	4603      	mov	r3, r0
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d13c      	bne.n	8026eca <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	685b      	ldr	r3, [r3, #4]
 8026e54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8026e56:	69fb      	ldr	r3, [r7, #28]
 8026e58:	681a      	ldr	r2, [r3, #0]
 8026e5a:	68fb      	ldr	r3, [r7, #12]
 8026e5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8026e5e:	4b29      	ldr	r3, [pc, #164]	@ (8026f04 <icmp_input+0x228>)
 8026e60:	691a      	ldr	r2, [r3, #16]
 8026e62:	68fb      	ldr	r3, [r7, #12]
 8026e64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8026e66:	693b      	ldr	r3, [r7, #16]
 8026e68:	2200      	movs	r2, #0
 8026e6a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8026e6c:	693b      	ldr	r3, [r7, #16]
 8026e6e:	885b      	ldrh	r3, [r3, #2]
 8026e70:	b29b      	uxth	r3, r3
 8026e72:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8026e76:	4293      	cmp	r3, r2
 8026e78:	d907      	bls.n	8026e8a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8026e7a:	693b      	ldr	r3, [r7, #16]
 8026e7c:	885b      	ldrh	r3, [r3, #2]
 8026e7e:	b29b      	uxth	r3, r3
 8026e80:	3309      	adds	r3, #9
 8026e82:	b29a      	uxth	r2, r3
 8026e84:	693b      	ldr	r3, [r7, #16]
 8026e86:	805a      	strh	r2, [r3, #2]
 8026e88:	e006      	b.n	8026e98 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8026e8a:	693b      	ldr	r3, [r7, #16]
 8026e8c:	885b      	ldrh	r3, [r3, #2]
 8026e8e:	b29b      	uxth	r3, r3
 8026e90:	3308      	adds	r3, #8
 8026e92:	b29a      	uxth	r2, r3
 8026e94:	693b      	ldr	r3, [r7, #16]
 8026e96:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8026e98:	68fb      	ldr	r3, [r7, #12]
 8026e9a:	22ff      	movs	r2, #255	@ 0xff
 8026e9c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8026e9e:	68fb      	ldr	r3, [r7, #12]
 8026ea0:	2200      	movs	r2, #0
 8026ea2:	729a      	strb	r2, [r3, #10]
 8026ea4:	2200      	movs	r2, #0
 8026ea6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8026ea8:	683b      	ldr	r3, [r7, #0]
 8026eaa:	9302      	str	r3, [sp, #8]
 8026eac:	2301      	movs	r3, #1
 8026eae:	9301      	str	r3, [sp, #4]
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	9300      	str	r3, [sp, #0]
 8026eb4:	23ff      	movs	r3, #255	@ 0xff
 8026eb6:	2200      	movs	r2, #0
 8026eb8:	69f9      	ldr	r1, [r7, #28]
 8026eba:	6878      	ldr	r0, [r7, #4]
 8026ebc:	f000 fa9e 	bl	80273fc <ip4_output_if>
 8026ec0:	4603      	mov	r3, r0
 8026ec2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8026ec4:	e001      	b.n	8026eca <icmp_input+0x1ee>
      break;
 8026ec6:	bf00      	nop
 8026ec8:	e000      	b.n	8026ecc <icmp_input+0x1f0>
      break;
 8026eca:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8026ecc:	6878      	ldr	r0, [r7, #4]
 8026ece:	f7f6 fd67 	bl	801d9a0 <pbuf_free>
  return;
 8026ed2:	e013      	b.n	8026efc <icmp_input+0x220>
    goto lenerr;
 8026ed4:	bf00      	nop
 8026ed6:	e002      	b.n	8026ede <icmp_input+0x202>
    goto lenerr;
 8026ed8:	bf00      	nop
 8026eda:	e000      	b.n	8026ede <icmp_input+0x202>
        goto lenerr;
 8026edc:	bf00      	nop
lenerr:
  pbuf_free(p);
 8026ede:	6878      	ldr	r0, [r7, #4]
 8026ee0:	f7f6 fd5e 	bl	801d9a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8026ee4:	e00a      	b.n	8026efc <icmp_input+0x220>
        goto icmperr;
 8026ee6:	bf00      	nop
 8026ee8:	e004      	b.n	8026ef4 <icmp_input+0x218>
        goto icmperr;
 8026eea:	bf00      	nop
 8026eec:	e002      	b.n	8026ef4 <icmp_input+0x218>
          goto icmperr;
 8026eee:	bf00      	nop
 8026ef0:	e000      	b.n	8026ef4 <icmp_input+0x218>
          goto icmperr;
 8026ef2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8026ef4:	6878      	ldr	r0, [r7, #4]
 8026ef6:	f7f6 fd53 	bl	801d9a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8026efa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8026efc:	3728      	adds	r7, #40	@ 0x28
 8026efe:	46bd      	mov	sp, r7
 8026f00:	bd80      	pop	{r7, pc}
 8026f02:	bf00      	nop
 8026f04:	24008540 	.word	0x24008540
 8026f08:	24008554 	.word	0x24008554
 8026f0c:	08030488 	.word	0x08030488
 8026f10:	080304c0 	.word	0x080304c0
 8026f14:	080304f8 	.word	0x080304f8
 8026f18:	08030520 	.word	0x08030520

08026f1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8026f1c:	b580      	push	{r7, lr}
 8026f1e:	b082      	sub	sp, #8
 8026f20:	af00      	add	r7, sp, #0
 8026f22:	6078      	str	r0, [r7, #4]
 8026f24:	460b      	mov	r3, r1
 8026f26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8026f28:	78fb      	ldrb	r3, [r7, #3]
 8026f2a:	461a      	mov	r2, r3
 8026f2c:	2103      	movs	r1, #3
 8026f2e:	6878      	ldr	r0, [r7, #4]
 8026f30:	f000 f814 	bl	8026f5c <icmp_send_response>
}
 8026f34:	bf00      	nop
 8026f36:	3708      	adds	r7, #8
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd80      	pop	{r7, pc}

08026f3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8026f3c:	b580      	push	{r7, lr}
 8026f3e:	b082      	sub	sp, #8
 8026f40:	af00      	add	r7, sp, #0
 8026f42:	6078      	str	r0, [r7, #4]
 8026f44:	460b      	mov	r3, r1
 8026f46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8026f48:	78fb      	ldrb	r3, [r7, #3]
 8026f4a:	461a      	mov	r2, r3
 8026f4c:	210b      	movs	r1, #11
 8026f4e:	6878      	ldr	r0, [r7, #4]
 8026f50:	f000 f804 	bl	8026f5c <icmp_send_response>
}
 8026f54:	bf00      	nop
 8026f56:	3708      	adds	r7, #8
 8026f58:	46bd      	mov	sp, r7
 8026f5a:	bd80      	pop	{r7, pc}

08026f5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8026f5c:	b580      	push	{r7, lr}
 8026f5e:	b08c      	sub	sp, #48	@ 0x30
 8026f60:	af04      	add	r7, sp, #16
 8026f62:	6078      	str	r0, [r7, #4]
 8026f64:	460b      	mov	r3, r1
 8026f66:	70fb      	strb	r3, [r7, #3]
 8026f68:	4613      	mov	r3, r2
 8026f6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8026f6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8026f70:	2124      	movs	r1, #36	@ 0x24
 8026f72:	2022      	movs	r0, #34	@ 0x22
 8026f74:	f7f6 fa30 	bl	801d3d8 <pbuf_alloc>
 8026f78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8026f7a:	69fb      	ldr	r3, [r7, #28]
 8026f7c:	2b00      	cmp	r3, #0
 8026f7e:	d056      	beq.n	802702e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8026f80:	69fb      	ldr	r3, [r7, #28]
 8026f82:	895b      	ldrh	r3, [r3, #10]
 8026f84:	2b23      	cmp	r3, #35	@ 0x23
 8026f86:	d806      	bhi.n	8026f96 <icmp_send_response+0x3a>
 8026f88:	4b2b      	ldr	r3, [pc, #172]	@ (8027038 <icmp_send_response+0xdc>)
 8026f8a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8026f8e:	492b      	ldr	r1, [pc, #172]	@ (802703c <icmp_send_response+0xe0>)
 8026f90:	482b      	ldr	r0, [pc, #172]	@ (8027040 <icmp_send_response+0xe4>)
 8026f92:	f002 f9e9 	bl	8029368 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8026f96:	687b      	ldr	r3, [r7, #4]
 8026f98:	685b      	ldr	r3, [r3, #4]
 8026f9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8026f9c:	69fb      	ldr	r3, [r7, #28]
 8026f9e:	685b      	ldr	r3, [r3, #4]
 8026fa0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8026fa2:	697b      	ldr	r3, [r7, #20]
 8026fa4:	78fa      	ldrb	r2, [r7, #3]
 8026fa6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8026fa8:	697b      	ldr	r3, [r7, #20]
 8026faa:	78ba      	ldrb	r2, [r7, #2]
 8026fac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8026fae:	697b      	ldr	r3, [r7, #20]
 8026fb0:	2200      	movs	r2, #0
 8026fb2:	711a      	strb	r2, [r3, #4]
 8026fb4:	2200      	movs	r2, #0
 8026fb6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8026fb8:	697b      	ldr	r3, [r7, #20]
 8026fba:	2200      	movs	r2, #0
 8026fbc:	719a      	strb	r2, [r3, #6]
 8026fbe:	2200      	movs	r2, #0
 8026fc0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8026fc2:	69fb      	ldr	r3, [r7, #28]
 8026fc4:	685b      	ldr	r3, [r3, #4]
 8026fc6:	f103 0008 	add.w	r0, r3, #8
 8026fca:	687b      	ldr	r3, [r7, #4]
 8026fcc:	685b      	ldr	r3, [r3, #4]
 8026fce:	221c      	movs	r2, #28
 8026fd0:	4619      	mov	r1, r3
 8026fd2:	f002 fc3c 	bl	802984e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8026fd6:	69bb      	ldr	r3, [r7, #24]
 8026fd8:	68db      	ldr	r3, [r3, #12]
 8026fda:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8026fdc:	f107 030c 	add.w	r3, r7, #12
 8026fe0:	4618      	mov	r0, r3
 8026fe2:	f000 f82f 	bl	8027044 <ip4_route>
 8026fe6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8026fe8:	693b      	ldr	r3, [r7, #16]
 8026fea:	2b00      	cmp	r3, #0
 8026fec:	d01b      	beq.n	8027026 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8026fee:	697b      	ldr	r3, [r7, #20]
 8026ff0:	2200      	movs	r2, #0
 8026ff2:	709a      	strb	r2, [r3, #2]
 8026ff4:	2200      	movs	r2, #0
 8026ff6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8026ff8:	69fb      	ldr	r3, [r7, #28]
 8026ffa:	895b      	ldrh	r3, [r3, #10]
 8026ffc:	4619      	mov	r1, r3
 8026ffe:	6978      	ldr	r0, [r7, #20]
 8027000:	f7f5 f956 	bl	801c2b0 <inet_chksum>
 8027004:	4603      	mov	r3, r0
 8027006:	461a      	mov	r2, r3
 8027008:	697b      	ldr	r3, [r7, #20]
 802700a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802700c:	f107 020c 	add.w	r2, r7, #12
 8027010:	693b      	ldr	r3, [r7, #16]
 8027012:	9302      	str	r3, [sp, #8]
 8027014:	2301      	movs	r3, #1
 8027016:	9301      	str	r3, [sp, #4]
 8027018:	2300      	movs	r3, #0
 802701a:	9300      	str	r3, [sp, #0]
 802701c:	23ff      	movs	r3, #255	@ 0xff
 802701e:	2100      	movs	r1, #0
 8027020:	69f8      	ldr	r0, [r7, #28]
 8027022:	f000 f9eb 	bl	80273fc <ip4_output_if>
  }
  pbuf_free(q);
 8027026:	69f8      	ldr	r0, [r7, #28]
 8027028:	f7f6 fcba 	bl	801d9a0 <pbuf_free>
 802702c:	e000      	b.n	8027030 <icmp_send_response+0xd4>
    return;
 802702e:	bf00      	nop
}
 8027030:	3720      	adds	r7, #32
 8027032:	46bd      	mov	sp, r7
 8027034:	bd80      	pop	{r7, pc}
 8027036:	bf00      	nop
 8027038:	08030488 	.word	0x08030488
 802703c:	08030554 	.word	0x08030554
 8027040:	080304f8 	.word	0x080304f8

08027044 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8027044:	b480      	push	{r7}
 8027046:	b085      	sub	sp, #20
 8027048:	af00      	add	r7, sp, #0
 802704a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802704c:	4b33      	ldr	r3, [pc, #204]	@ (802711c <ip4_route+0xd8>)
 802704e:	681b      	ldr	r3, [r3, #0]
 8027050:	60fb      	str	r3, [r7, #12]
 8027052:	e036      	b.n	80270c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8027054:	68fb      	ldr	r3, [r7, #12]
 8027056:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802705a:	f003 0301 	and.w	r3, r3, #1
 802705e:	b2db      	uxtb	r3, r3
 8027060:	2b00      	cmp	r3, #0
 8027062:	d02b      	beq.n	80270bc <ip4_route+0x78>
 8027064:	68fb      	ldr	r3, [r7, #12]
 8027066:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802706a:	089b      	lsrs	r3, r3, #2
 802706c:	f003 0301 	and.w	r3, r3, #1
 8027070:	b2db      	uxtb	r3, r3
 8027072:	2b00      	cmp	r3, #0
 8027074:	d022      	beq.n	80270bc <ip4_route+0x78>
 8027076:	68fb      	ldr	r3, [r7, #12]
 8027078:	3304      	adds	r3, #4
 802707a:	681b      	ldr	r3, [r3, #0]
 802707c:	2b00      	cmp	r3, #0
 802707e:	d01d      	beq.n	80270bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	681a      	ldr	r2, [r3, #0]
 8027084:	68fb      	ldr	r3, [r7, #12]
 8027086:	3304      	adds	r3, #4
 8027088:	681b      	ldr	r3, [r3, #0]
 802708a:	405a      	eors	r2, r3
 802708c:	68fb      	ldr	r3, [r7, #12]
 802708e:	3308      	adds	r3, #8
 8027090:	681b      	ldr	r3, [r3, #0]
 8027092:	4013      	ands	r3, r2
 8027094:	2b00      	cmp	r3, #0
 8027096:	d101      	bne.n	802709c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8027098:	68fb      	ldr	r3, [r7, #12]
 802709a:	e038      	b.n	802710e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802709c:	68fb      	ldr	r3, [r7, #12]
 802709e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80270a2:	f003 0302 	and.w	r3, r3, #2
 80270a6:	2b00      	cmp	r3, #0
 80270a8:	d108      	bne.n	80270bc <ip4_route+0x78>
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	681a      	ldr	r2, [r3, #0]
 80270ae:	68fb      	ldr	r3, [r7, #12]
 80270b0:	330c      	adds	r3, #12
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	429a      	cmp	r2, r3
 80270b6:	d101      	bne.n	80270bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80270b8:	68fb      	ldr	r3, [r7, #12]
 80270ba:	e028      	b.n	802710e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	60fb      	str	r3, [r7, #12]
 80270c2:	68fb      	ldr	r3, [r7, #12]
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	d1c5      	bne.n	8027054 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80270c8:	4b15      	ldr	r3, [pc, #84]	@ (8027120 <ip4_route+0xdc>)
 80270ca:	681b      	ldr	r3, [r3, #0]
 80270cc:	2b00      	cmp	r3, #0
 80270ce:	d01a      	beq.n	8027106 <ip4_route+0xc2>
 80270d0:	4b13      	ldr	r3, [pc, #76]	@ (8027120 <ip4_route+0xdc>)
 80270d2:	681b      	ldr	r3, [r3, #0]
 80270d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80270d8:	f003 0301 	and.w	r3, r3, #1
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d012      	beq.n	8027106 <ip4_route+0xc2>
 80270e0:	4b0f      	ldr	r3, [pc, #60]	@ (8027120 <ip4_route+0xdc>)
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80270e8:	f003 0304 	and.w	r3, r3, #4
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	d00a      	beq.n	8027106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80270f0:	4b0b      	ldr	r3, [pc, #44]	@ (8027120 <ip4_route+0xdc>)
 80270f2:	681b      	ldr	r3, [r3, #0]
 80270f4:	3304      	adds	r3, #4
 80270f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80270f8:	2b00      	cmp	r3, #0
 80270fa:	d004      	beq.n	8027106 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80270fc:	687b      	ldr	r3, [r7, #4]
 80270fe:	681b      	ldr	r3, [r3, #0]
 8027100:	b2db      	uxtb	r3, r3
 8027102:	2b7f      	cmp	r3, #127	@ 0x7f
 8027104:	d101      	bne.n	802710a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8027106:	2300      	movs	r3, #0
 8027108:	e001      	b.n	802710e <ip4_route+0xca>
  }

  return netif_default;
 802710a:	4b05      	ldr	r3, [pc, #20]	@ (8027120 <ip4_route+0xdc>)
 802710c:	681b      	ldr	r3, [r3, #0]
}
 802710e:	4618      	mov	r0, r3
 8027110:	3714      	adds	r7, #20
 8027112:	46bd      	mov	sp, r7
 8027114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027118:	4770      	bx	lr
 802711a:	bf00      	nop
 802711c:	2400b480 	.word	0x2400b480
 8027120:	2400b484 	.word	0x2400b484

08027124 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8027124:	b580      	push	{r7, lr}
 8027126:	b082      	sub	sp, #8
 8027128:	af00      	add	r7, sp, #0
 802712a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8027132:	f003 0301 	and.w	r3, r3, #1
 8027136:	b2db      	uxtb	r3, r3
 8027138:	2b00      	cmp	r3, #0
 802713a:	d016      	beq.n	802716a <ip4_input_accept+0x46>
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	3304      	adds	r3, #4
 8027140:	681b      	ldr	r3, [r3, #0]
 8027142:	2b00      	cmp	r3, #0
 8027144:	d011      	beq.n	802716a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8027146:	4b0b      	ldr	r3, [pc, #44]	@ (8027174 <ip4_input_accept+0x50>)
 8027148:	695a      	ldr	r2, [r3, #20]
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	3304      	adds	r3, #4
 802714e:	681b      	ldr	r3, [r3, #0]
 8027150:	429a      	cmp	r2, r3
 8027152:	d008      	beq.n	8027166 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8027154:	4b07      	ldr	r3, [pc, #28]	@ (8027174 <ip4_input_accept+0x50>)
 8027156:	695b      	ldr	r3, [r3, #20]
 8027158:	6879      	ldr	r1, [r7, #4]
 802715a:	4618      	mov	r0, r3
 802715c:	f000 fa26 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8027160:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8027162:	2b00      	cmp	r3, #0
 8027164:	d001      	beq.n	802716a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8027166:	2301      	movs	r3, #1
 8027168:	e000      	b.n	802716c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802716a:	2300      	movs	r3, #0
}
 802716c:	4618      	mov	r0, r3
 802716e:	3708      	adds	r7, #8
 8027170:	46bd      	mov	sp, r7
 8027172:	bd80      	pop	{r7, pc}
 8027174:	24008540 	.word	0x24008540

08027178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8027178:	b580      	push	{r7, lr}
 802717a:	b088      	sub	sp, #32
 802717c:	af00      	add	r7, sp, #0
 802717e:	6078      	str	r0, [r7, #4]
 8027180:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8027182:	2301      	movs	r3, #1
 8027184:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	685b      	ldr	r3, [r3, #4]
 802718a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 802718c:	69fb      	ldr	r3, [r7, #28]
 802718e:	781b      	ldrb	r3, [r3, #0]
 8027190:	091b      	lsrs	r3, r3, #4
 8027192:	b2db      	uxtb	r3, r3
 8027194:	2b04      	cmp	r3, #4
 8027196:	d004      	beq.n	80271a2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8027198:	6878      	ldr	r0, [r7, #4]
 802719a:	f7f6 fc01 	bl	801d9a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802719e:	2300      	movs	r3, #0
 80271a0:	e123      	b.n	80273ea <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80271a2:	69fb      	ldr	r3, [r7, #28]
 80271a4:	781b      	ldrb	r3, [r3, #0]
 80271a6:	f003 030f 	and.w	r3, r3, #15
 80271aa:	b2db      	uxtb	r3, r3
 80271ac:	009b      	lsls	r3, r3, #2
 80271ae:	b2db      	uxtb	r3, r3
 80271b0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80271b2:	69fb      	ldr	r3, [r7, #28]
 80271b4:	885b      	ldrh	r3, [r3, #2]
 80271b6:	b29b      	uxth	r3, r3
 80271b8:	4618      	mov	r0, r3
 80271ba:	f7f4 fd01 	bl	801bbc0 <lwip_htons>
 80271be:	4603      	mov	r3, r0
 80271c0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	891b      	ldrh	r3, [r3, #8]
 80271c6:	8a3a      	ldrh	r2, [r7, #16]
 80271c8:	429a      	cmp	r2, r3
 80271ca:	d204      	bcs.n	80271d6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80271cc:	8a3b      	ldrh	r3, [r7, #16]
 80271ce:	4619      	mov	r1, r3
 80271d0:	6878      	ldr	r0, [r7, #4]
 80271d2:	f7f6 fa5f 	bl	801d694 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	895b      	ldrh	r3, [r3, #10]
 80271da:	8a7a      	ldrh	r2, [r7, #18]
 80271dc:	429a      	cmp	r2, r3
 80271de:	d807      	bhi.n	80271f0 <ip4_input+0x78>
 80271e0:	687b      	ldr	r3, [r7, #4]
 80271e2:	891b      	ldrh	r3, [r3, #8]
 80271e4:	8a3a      	ldrh	r2, [r7, #16]
 80271e6:	429a      	cmp	r2, r3
 80271e8:	d802      	bhi.n	80271f0 <ip4_input+0x78>
 80271ea:	8a7b      	ldrh	r3, [r7, #18]
 80271ec:	2b13      	cmp	r3, #19
 80271ee:	d804      	bhi.n	80271fa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80271f0:	6878      	ldr	r0, [r7, #4]
 80271f2:	f7f6 fbd5 	bl	801d9a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80271f6:	2300      	movs	r3, #0
 80271f8:	e0f7      	b.n	80273ea <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80271fa:	69fb      	ldr	r3, [r7, #28]
 80271fc:	691b      	ldr	r3, [r3, #16]
 80271fe:	4a7d      	ldr	r2, [pc, #500]	@ (80273f4 <ip4_input+0x27c>)
 8027200:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8027202:	69fb      	ldr	r3, [r7, #28]
 8027204:	68db      	ldr	r3, [r3, #12]
 8027206:	4a7b      	ldr	r2, [pc, #492]	@ (80273f4 <ip4_input+0x27c>)
 8027208:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802720a:	4b7a      	ldr	r3, [pc, #488]	@ (80273f4 <ip4_input+0x27c>)
 802720c:	695b      	ldr	r3, [r3, #20]
 802720e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8027212:	2be0      	cmp	r3, #224	@ 0xe0
 8027214:	d112      	bne.n	802723c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8027216:	683b      	ldr	r3, [r7, #0]
 8027218:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802721c:	f003 0301 	and.w	r3, r3, #1
 8027220:	b2db      	uxtb	r3, r3
 8027222:	2b00      	cmp	r3, #0
 8027224:	d007      	beq.n	8027236 <ip4_input+0xbe>
 8027226:	683b      	ldr	r3, [r7, #0]
 8027228:	3304      	adds	r3, #4
 802722a:	681b      	ldr	r3, [r3, #0]
 802722c:	2b00      	cmp	r3, #0
 802722e:	d002      	beq.n	8027236 <ip4_input+0xbe>
      netif = inp;
 8027230:	683b      	ldr	r3, [r7, #0]
 8027232:	61bb      	str	r3, [r7, #24]
 8027234:	e02a      	b.n	802728c <ip4_input+0x114>
    } else {
      netif = NULL;
 8027236:	2300      	movs	r3, #0
 8027238:	61bb      	str	r3, [r7, #24]
 802723a:	e027      	b.n	802728c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802723c:	6838      	ldr	r0, [r7, #0]
 802723e:	f7ff ff71 	bl	8027124 <ip4_input_accept>
 8027242:	4603      	mov	r3, r0
 8027244:	2b00      	cmp	r3, #0
 8027246:	d002      	beq.n	802724e <ip4_input+0xd6>
      netif = inp;
 8027248:	683b      	ldr	r3, [r7, #0]
 802724a:	61bb      	str	r3, [r7, #24]
 802724c:	e01e      	b.n	802728c <ip4_input+0x114>
    } else {
      netif = NULL;
 802724e:	2300      	movs	r3, #0
 8027250:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8027252:	4b68      	ldr	r3, [pc, #416]	@ (80273f4 <ip4_input+0x27c>)
 8027254:	695b      	ldr	r3, [r3, #20]
 8027256:	b2db      	uxtb	r3, r3
 8027258:	2b7f      	cmp	r3, #127	@ 0x7f
 802725a:	d017      	beq.n	802728c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802725c:	4b66      	ldr	r3, [pc, #408]	@ (80273f8 <ip4_input+0x280>)
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	61bb      	str	r3, [r7, #24]
 8027262:	e00e      	b.n	8027282 <ip4_input+0x10a>
          if (netif == inp) {
 8027264:	69ba      	ldr	r2, [r7, #24]
 8027266:	683b      	ldr	r3, [r7, #0]
 8027268:	429a      	cmp	r2, r3
 802726a:	d006      	beq.n	802727a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802726c:	69b8      	ldr	r0, [r7, #24]
 802726e:	f7ff ff59 	bl	8027124 <ip4_input_accept>
 8027272:	4603      	mov	r3, r0
 8027274:	2b00      	cmp	r3, #0
 8027276:	d108      	bne.n	802728a <ip4_input+0x112>
 8027278:	e000      	b.n	802727c <ip4_input+0x104>
            continue;
 802727a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802727c:	69bb      	ldr	r3, [r7, #24]
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	61bb      	str	r3, [r7, #24]
 8027282:	69bb      	ldr	r3, [r7, #24]
 8027284:	2b00      	cmp	r3, #0
 8027286:	d1ed      	bne.n	8027264 <ip4_input+0xec>
 8027288:	e000      	b.n	802728c <ip4_input+0x114>
            break;
 802728a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 802728c:	69bb      	ldr	r3, [r7, #24]
 802728e:	2b00      	cmp	r3, #0
 8027290:	d111      	bne.n	80272b6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8027292:	69fb      	ldr	r3, [r7, #28]
 8027294:	7a5b      	ldrb	r3, [r3, #9]
 8027296:	2b11      	cmp	r3, #17
 8027298:	d10d      	bne.n	80272b6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 802729a:	8a7b      	ldrh	r3, [r7, #18]
 802729c:	69fa      	ldr	r2, [r7, #28]
 802729e:	4413      	add	r3, r2
 80272a0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80272a2:	68fb      	ldr	r3, [r7, #12]
 80272a4:	885b      	ldrh	r3, [r3, #2]
 80272a6:	b29b      	uxth	r3, r3
 80272a8:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 80272ac:	d103      	bne.n	80272b6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80272ae:	683b      	ldr	r3, [r7, #0]
 80272b0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80272b2:	2300      	movs	r3, #0
 80272b4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80272b6:	697b      	ldr	r3, [r7, #20]
 80272b8:	2b00      	cmp	r3, #0
 80272ba:	d017      	beq.n	80272ec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80272bc:	4b4d      	ldr	r3, [pc, #308]	@ (80273f4 <ip4_input+0x27c>)
 80272be:	691b      	ldr	r3, [r3, #16]
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d013      	beq.n	80272ec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80272c4:	4b4b      	ldr	r3, [pc, #300]	@ (80273f4 <ip4_input+0x27c>)
 80272c6:	691b      	ldr	r3, [r3, #16]
 80272c8:	6839      	ldr	r1, [r7, #0]
 80272ca:	4618      	mov	r0, r3
 80272cc:	f000 f96e 	bl	80275ac <ip4_addr_isbroadcast_u32>
 80272d0:	4603      	mov	r3, r0
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	d105      	bne.n	80272e2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80272d6:	4b47      	ldr	r3, [pc, #284]	@ (80273f4 <ip4_input+0x27c>)
 80272d8:	691b      	ldr	r3, [r3, #16]
 80272da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80272de:	2be0      	cmp	r3, #224	@ 0xe0
 80272e0:	d104      	bne.n	80272ec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80272e2:	6878      	ldr	r0, [r7, #4]
 80272e4:	f7f6 fb5c 	bl	801d9a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80272e8:	2300      	movs	r3, #0
 80272ea:	e07e      	b.n	80273ea <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80272ec:	69bb      	ldr	r3, [r7, #24]
 80272ee:	2b00      	cmp	r3, #0
 80272f0:	d104      	bne.n	80272fc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80272f2:	6878      	ldr	r0, [r7, #4]
 80272f4:	f7f6 fb54 	bl	801d9a0 <pbuf_free>
    return ERR_OK;
 80272f8:	2300      	movs	r3, #0
 80272fa:	e076      	b.n	80273ea <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80272fc:	69fb      	ldr	r3, [r7, #28]
 80272fe:	88db      	ldrh	r3, [r3, #6]
 8027300:	b29b      	uxth	r3, r3
 8027302:	461a      	mov	r2, r3
 8027304:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8027308:	4013      	ands	r3, r2
 802730a:	2b00      	cmp	r3, #0
 802730c:	d00b      	beq.n	8027326 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802730e:	6878      	ldr	r0, [r7, #4]
 8027310:	f000 fd22 	bl	8027d58 <ip4_reass>
 8027314:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8027316:	687b      	ldr	r3, [r7, #4]
 8027318:	2b00      	cmp	r3, #0
 802731a:	d101      	bne.n	8027320 <ip4_input+0x1a8>
      return ERR_OK;
 802731c:	2300      	movs	r3, #0
 802731e:	e064      	b.n	80273ea <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	685b      	ldr	r3, [r3, #4]
 8027324:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8027326:	4a33      	ldr	r2, [pc, #204]	@ (80273f4 <ip4_input+0x27c>)
 8027328:	69bb      	ldr	r3, [r7, #24]
 802732a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 802732c:	4a31      	ldr	r2, [pc, #196]	@ (80273f4 <ip4_input+0x27c>)
 802732e:	683b      	ldr	r3, [r7, #0]
 8027330:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8027332:	4a30      	ldr	r2, [pc, #192]	@ (80273f4 <ip4_input+0x27c>)
 8027334:	69fb      	ldr	r3, [r7, #28]
 8027336:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8027338:	69fb      	ldr	r3, [r7, #28]
 802733a:	781b      	ldrb	r3, [r3, #0]
 802733c:	f003 030f 	and.w	r3, r3, #15
 8027340:	b2db      	uxtb	r3, r3
 8027342:	009b      	lsls	r3, r3, #2
 8027344:	b2db      	uxtb	r3, r3
 8027346:	461a      	mov	r2, r3
 8027348:	4b2a      	ldr	r3, [pc, #168]	@ (80273f4 <ip4_input+0x27c>)
 802734a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 802734c:	8a7b      	ldrh	r3, [r7, #18]
 802734e:	4619      	mov	r1, r3
 8027350:	6878      	ldr	r0, [r7, #4]
 8027352:	f7f6 fa9f 	bl	801d894 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8027356:	69fb      	ldr	r3, [r7, #28]
 8027358:	7a5b      	ldrb	r3, [r3, #9]
 802735a:	2b11      	cmp	r3, #17
 802735c:	d006      	beq.n	802736c <ip4_input+0x1f4>
 802735e:	2b11      	cmp	r3, #17
 8027360:	dc13      	bgt.n	802738a <ip4_input+0x212>
 8027362:	2b01      	cmp	r3, #1
 8027364:	d00c      	beq.n	8027380 <ip4_input+0x208>
 8027366:	2b06      	cmp	r3, #6
 8027368:	d005      	beq.n	8027376 <ip4_input+0x1fe>
 802736a:	e00e      	b.n	802738a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 802736c:	6839      	ldr	r1, [r7, #0]
 802736e:	6878      	ldr	r0, [r7, #4]
 8027370:	f7fc fa1c 	bl	80237ac <udp_input>
        break;
 8027374:	e026      	b.n	80273c4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8027376:	6839      	ldr	r1, [r7, #0]
 8027378:	6878      	ldr	r0, [r7, #4]
 802737a:	f7f8 faa5 	bl	801f8c8 <tcp_input>
        break;
 802737e:	e021      	b.n	80273c4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8027380:	6839      	ldr	r1, [r7, #0]
 8027382:	6878      	ldr	r0, [r7, #4]
 8027384:	f7ff fcaa 	bl	8026cdc <icmp_input>
        break;
 8027388:	e01c      	b.n	80273c4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802738a:	4b1a      	ldr	r3, [pc, #104]	@ (80273f4 <ip4_input+0x27c>)
 802738c:	695b      	ldr	r3, [r3, #20]
 802738e:	69b9      	ldr	r1, [r7, #24]
 8027390:	4618      	mov	r0, r3
 8027392:	f000 f90b 	bl	80275ac <ip4_addr_isbroadcast_u32>
 8027396:	4603      	mov	r3, r0
 8027398:	2b00      	cmp	r3, #0
 802739a:	d10f      	bne.n	80273bc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802739c:	4b15      	ldr	r3, [pc, #84]	@ (80273f4 <ip4_input+0x27c>)
 802739e:	695b      	ldr	r3, [r3, #20]
 80273a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80273a4:	2be0      	cmp	r3, #224	@ 0xe0
 80273a6:	d009      	beq.n	80273bc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80273a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80273ac:	4619      	mov	r1, r3
 80273ae:	6878      	ldr	r0, [r7, #4]
 80273b0:	f7f6 fae3 	bl	801d97a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80273b4:	2102      	movs	r1, #2
 80273b6:	6878      	ldr	r0, [r7, #4]
 80273b8:	f7ff fdb0 	bl	8026f1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80273bc:	6878      	ldr	r0, [r7, #4]
 80273be:	f7f6 faef 	bl	801d9a0 <pbuf_free>
        break;
 80273c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80273c4:	4b0b      	ldr	r3, [pc, #44]	@ (80273f4 <ip4_input+0x27c>)
 80273c6:	2200      	movs	r2, #0
 80273c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80273ca:	4b0a      	ldr	r3, [pc, #40]	@ (80273f4 <ip4_input+0x27c>)
 80273cc:	2200      	movs	r2, #0
 80273ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80273d0:	4b08      	ldr	r3, [pc, #32]	@ (80273f4 <ip4_input+0x27c>)
 80273d2:	2200      	movs	r2, #0
 80273d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80273d6:	4b07      	ldr	r3, [pc, #28]	@ (80273f4 <ip4_input+0x27c>)
 80273d8:	2200      	movs	r2, #0
 80273da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80273dc:	4b05      	ldr	r3, [pc, #20]	@ (80273f4 <ip4_input+0x27c>)
 80273de:	2200      	movs	r2, #0
 80273e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80273e2:	4b04      	ldr	r3, [pc, #16]	@ (80273f4 <ip4_input+0x27c>)
 80273e4:	2200      	movs	r2, #0
 80273e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80273e8:	2300      	movs	r3, #0
}
 80273ea:	4618      	mov	r0, r3
 80273ec:	3720      	adds	r7, #32
 80273ee:	46bd      	mov	sp, r7
 80273f0:	bd80      	pop	{r7, pc}
 80273f2:	bf00      	nop
 80273f4:	24008540 	.word	0x24008540
 80273f8:	2400b480 	.word	0x2400b480

080273fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80273fc:	b580      	push	{r7, lr}
 80273fe:	b08a      	sub	sp, #40	@ 0x28
 8027400:	af04      	add	r7, sp, #16
 8027402:	60f8      	str	r0, [r7, #12]
 8027404:	60b9      	str	r1, [r7, #8]
 8027406:	607a      	str	r2, [r7, #4]
 8027408:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802740a:	68bb      	ldr	r3, [r7, #8]
 802740c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802740e:	687b      	ldr	r3, [r7, #4]
 8027410:	2b00      	cmp	r3, #0
 8027412:	d009      	beq.n	8027428 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8027414:	68bb      	ldr	r3, [r7, #8]
 8027416:	2b00      	cmp	r3, #0
 8027418:	d003      	beq.n	8027422 <ip4_output_if+0x26>
 802741a:	68bb      	ldr	r3, [r7, #8]
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	2b00      	cmp	r3, #0
 8027420:	d102      	bne.n	8027428 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8027422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027424:	3304      	adds	r3, #4
 8027426:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8027428:	78fa      	ldrb	r2, [r7, #3]
 802742a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802742c:	9302      	str	r3, [sp, #8]
 802742e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8027432:	9301      	str	r3, [sp, #4]
 8027434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8027438:	9300      	str	r3, [sp, #0]
 802743a:	4613      	mov	r3, r2
 802743c:	687a      	ldr	r2, [r7, #4]
 802743e:	6979      	ldr	r1, [r7, #20]
 8027440:	68f8      	ldr	r0, [r7, #12]
 8027442:	f000 f805 	bl	8027450 <ip4_output_if_src>
 8027446:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8027448:	4618      	mov	r0, r3
 802744a:	3718      	adds	r7, #24
 802744c:	46bd      	mov	sp, r7
 802744e:	bd80      	pop	{r7, pc}

08027450 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8027450:	b580      	push	{r7, lr}
 8027452:	b088      	sub	sp, #32
 8027454:	af00      	add	r7, sp, #0
 8027456:	60f8      	str	r0, [r7, #12]
 8027458:	60b9      	str	r1, [r7, #8]
 802745a:	607a      	str	r2, [r7, #4]
 802745c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802745e:	68fb      	ldr	r3, [r7, #12]
 8027460:	7b9b      	ldrb	r3, [r3, #14]
 8027462:	2b01      	cmp	r3, #1
 8027464:	d006      	beq.n	8027474 <ip4_output_if_src+0x24>
 8027466:	4b4b      	ldr	r3, [pc, #300]	@ (8027594 <ip4_output_if_src+0x144>)
 8027468:	f44f 7255 	mov.w	r2, #852	@ 0x354
 802746c:	494a      	ldr	r1, [pc, #296]	@ (8027598 <ip4_output_if_src+0x148>)
 802746e:	484b      	ldr	r0, [pc, #300]	@ (802759c <ip4_output_if_src+0x14c>)
 8027470:	f001 ff7a 	bl	8029368 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8027474:	687b      	ldr	r3, [r7, #4]
 8027476:	2b00      	cmp	r3, #0
 8027478:	d060      	beq.n	802753c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802747a:	2314      	movs	r3, #20
 802747c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802747e:	2114      	movs	r1, #20
 8027480:	68f8      	ldr	r0, [r7, #12]
 8027482:	f7f6 f9f7 	bl	801d874 <pbuf_add_header>
 8027486:	4603      	mov	r3, r0
 8027488:	2b00      	cmp	r3, #0
 802748a:	d002      	beq.n	8027492 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802748c:	f06f 0301 	mvn.w	r3, #1
 8027490:	e07c      	b.n	802758c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8027492:	68fb      	ldr	r3, [r7, #12]
 8027494:	685b      	ldr	r3, [r3, #4]
 8027496:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8027498:	68fb      	ldr	r3, [r7, #12]
 802749a:	895b      	ldrh	r3, [r3, #10]
 802749c:	2b13      	cmp	r3, #19
 802749e:	d806      	bhi.n	80274ae <ip4_output_if_src+0x5e>
 80274a0:	4b3c      	ldr	r3, [pc, #240]	@ (8027594 <ip4_output_if_src+0x144>)
 80274a2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80274a6:	493e      	ldr	r1, [pc, #248]	@ (80275a0 <ip4_output_if_src+0x150>)
 80274a8:	483c      	ldr	r0, [pc, #240]	@ (802759c <ip4_output_if_src+0x14c>)
 80274aa:	f001 ff5d 	bl	8029368 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80274ae:	69fb      	ldr	r3, [r7, #28]
 80274b0:	78fa      	ldrb	r2, [r7, #3]
 80274b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80274b4:	69fb      	ldr	r3, [r7, #28]
 80274b6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80274ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80274bc:	687b      	ldr	r3, [r7, #4]
 80274be:	681a      	ldr	r2, [r3, #0]
 80274c0:	69fb      	ldr	r3, [r7, #28]
 80274c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80274c4:	8b7b      	ldrh	r3, [r7, #26]
 80274c6:	089b      	lsrs	r3, r3, #2
 80274c8:	b29b      	uxth	r3, r3
 80274ca:	b2db      	uxtb	r3, r3
 80274cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80274d0:	b2da      	uxtb	r2, r3
 80274d2:	69fb      	ldr	r3, [r7, #28]
 80274d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80274d6:	69fb      	ldr	r3, [r7, #28]
 80274d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80274dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80274de:	68fb      	ldr	r3, [r7, #12]
 80274e0:	891b      	ldrh	r3, [r3, #8]
 80274e2:	4618      	mov	r0, r3
 80274e4:	f7f4 fb6c 	bl	801bbc0 <lwip_htons>
 80274e8:	4603      	mov	r3, r0
 80274ea:	461a      	mov	r2, r3
 80274ec:	69fb      	ldr	r3, [r7, #28]
 80274ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80274f0:	69fb      	ldr	r3, [r7, #28]
 80274f2:	2200      	movs	r2, #0
 80274f4:	719a      	strb	r2, [r3, #6]
 80274f6:	2200      	movs	r2, #0
 80274f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80274fa:	4b2a      	ldr	r3, [pc, #168]	@ (80275a4 <ip4_output_if_src+0x154>)
 80274fc:	881b      	ldrh	r3, [r3, #0]
 80274fe:	4618      	mov	r0, r3
 8027500:	f7f4 fb5e 	bl	801bbc0 <lwip_htons>
 8027504:	4603      	mov	r3, r0
 8027506:	461a      	mov	r2, r3
 8027508:	69fb      	ldr	r3, [r7, #28]
 802750a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802750c:	4b25      	ldr	r3, [pc, #148]	@ (80275a4 <ip4_output_if_src+0x154>)
 802750e:	881b      	ldrh	r3, [r3, #0]
 8027510:	3301      	adds	r3, #1
 8027512:	b29a      	uxth	r2, r3
 8027514:	4b23      	ldr	r3, [pc, #140]	@ (80275a4 <ip4_output_if_src+0x154>)
 8027516:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8027518:	68bb      	ldr	r3, [r7, #8]
 802751a:	2b00      	cmp	r3, #0
 802751c:	d104      	bne.n	8027528 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802751e:	4b22      	ldr	r3, [pc, #136]	@ (80275a8 <ip4_output_if_src+0x158>)
 8027520:	681a      	ldr	r2, [r3, #0]
 8027522:	69fb      	ldr	r3, [r7, #28]
 8027524:	60da      	str	r2, [r3, #12]
 8027526:	e003      	b.n	8027530 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8027528:	68bb      	ldr	r3, [r7, #8]
 802752a:	681a      	ldr	r2, [r3, #0]
 802752c:	69fb      	ldr	r3, [r7, #28]
 802752e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8027530:	69fb      	ldr	r3, [r7, #28]
 8027532:	2200      	movs	r2, #0
 8027534:	729a      	strb	r2, [r3, #10]
 8027536:	2200      	movs	r2, #0
 8027538:	72da      	strb	r2, [r3, #11]
 802753a:	e00f      	b.n	802755c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 802753c:	68fb      	ldr	r3, [r7, #12]
 802753e:	895b      	ldrh	r3, [r3, #10]
 8027540:	2b13      	cmp	r3, #19
 8027542:	d802      	bhi.n	802754a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8027544:	f06f 0301 	mvn.w	r3, #1
 8027548:	e020      	b.n	802758c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802754a:	68fb      	ldr	r3, [r7, #12]
 802754c:	685b      	ldr	r3, [r3, #4]
 802754e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8027550:	69fb      	ldr	r3, [r7, #28]
 8027552:	691b      	ldr	r3, [r3, #16]
 8027554:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8027556:	f107 0314 	add.w	r3, r7, #20
 802755a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802755e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8027560:	2b00      	cmp	r3, #0
 8027562:	d00c      	beq.n	802757e <ip4_output_if_src+0x12e>
 8027564:	68fb      	ldr	r3, [r7, #12]
 8027566:	891a      	ldrh	r2, [r3, #8]
 8027568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802756a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802756c:	429a      	cmp	r2, r3
 802756e:	d906      	bls.n	802757e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8027570:	687a      	ldr	r2, [r7, #4]
 8027572:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8027574:	68f8      	ldr	r0, [r7, #12]
 8027576:	f000 fde3 	bl	8028140 <ip4_frag>
 802757a:	4603      	mov	r3, r0
 802757c:	e006      	b.n	802758c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 802757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027580:	695b      	ldr	r3, [r3, #20]
 8027582:	687a      	ldr	r2, [r7, #4]
 8027584:	68f9      	ldr	r1, [r7, #12]
 8027586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027588:	4798      	blx	r3
 802758a:	4603      	mov	r3, r0
}
 802758c:	4618      	mov	r0, r3
 802758e:	3720      	adds	r7, #32
 8027590:	46bd      	mov	sp, r7
 8027592:	bd80      	pop	{r7, pc}
 8027594:	08030580 	.word	0x08030580
 8027598:	080305b4 	.word	0x080305b4
 802759c:	080305c0 	.word	0x080305c0
 80275a0:	080305e8 	.word	0x080305e8
 80275a4:	2400b61e 	.word	0x2400b61e
 80275a8:	08030ef4 	.word	0x08030ef4

080275ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80275ac:	b480      	push	{r7}
 80275ae:	b085      	sub	sp, #20
 80275b0:	af00      	add	r7, sp, #0
 80275b2:	6078      	str	r0, [r7, #4]
 80275b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80275ba:	687b      	ldr	r3, [r7, #4]
 80275bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80275c0:	d002      	beq.n	80275c8 <ip4_addr_isbroadcast_u32+0x1c>
 80275c2:	687b      	ldr	r3, [r7, #4]
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d101      	bne.n	80275cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80275c8:	2301      	movs	r3, #1
 80275ca:	e02a      	b.n	8027622 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80275cc:	683b      	ldr	r3, [r7, #0]
 80275ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80275d2:	f003 0302 	and.w	r3, r3, #2
 80275d6:	2b00      	cmp	r3, #0
 80275d8:	d101      	bne.n	80275de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80275da:	2300      	movs	r3, #0
 80275dc:	e021      	b.n	8027622 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80275de:	683b      	ldr	r3, [r7, #0]
 80275e0:	3304      	adds	r3, #4
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	687a      	ldr	r2, [r7, #4]
 80275e6:	429a      	cmp	r2, r3
 80275e8:	d101      	bne.n	80275ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80275ea:	2300      	movs	r3, #0
 80275ec:	e019      	b.n	8027622 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80275ee:	68fa      	ldr	r2, [r7, #12]
 80275f0:	683b      	ldr	r3, [r7, #0]
 80275f2:	3304      	adds	r3, #4
 80275f4:	681b      	ldr	r3, [r3, #0]
 80275f6:	405a      	eors	r2, r3
 80275f8:	683b      	ldr	r3, [r7, #0]
 80275fa:	3308      	adds	r3, #8
 80275fc:	681b      	ldr	r3, [r3, #0]
 80275fe:	4013      	ands	r3, r2
 8027600:	2b00      	cmp	r3, #0
 8027602:	d10d      	bne.n	8027620 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8027604:	683b      	ldr	r3, [r7, #0]
 8027606:	3308      	adds	r3, #8
 8027608:	681b      	ldr	r3, [r3, #0]
 802760a:	43da      	mvns	r2, r3
 802760c:	687b      	ldr	r3, [r7, #4]
 802760e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8027610:	683b      	ldr	r3, [r7, #0]
 8027612:	3308      	adds	r3, #8
 8027614:	681b      	ldr	r3, [r3, #0]
 8027616:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8027618:	429a      	cmp	r2, r3
 802761a:	d101      	bne.n	8027620 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802761c:	2301      	movs	r3, #1
 802761e:	e000      	b.n	8027622 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8027620:	2300      	movs	r3, #0
  }
}
 8027622:	4618      	mov	r0, r3
 8027624:	3714      	adds	r7, #20
 8027626:	46bd      	mov	sp, r7
 8027628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802762c:	4770      	bx	lr
	...

08027630 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8027630:	b580      	push	{r7, lr}
 8027632:	b082      	sub	sp, #8
 8027634:	af00      	add	r7, sp, #0
 8027636:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8027638:	2210      	movs	r2, #16
 802763a:	4904      	ldr	r1, [pc, #16]	@ (802764c <ip4addr_ntoa+0x1c>)
 802763c:	6878      	ldr	r0, [r7, #4]
 802763e:	f000 f807 	bl	8027650 <ip4addr_ntoa_r>
 8027642:	4603      	mov	r3, r0
}
 8027644:	4618      	mov	r0, r3
 8027646:	3708      	adds	r7, #8
 8027648:	46bd      	mov	sp, r7
 802764a:	bd80      	pop	{r7, pc}
 802764c:	2400b620 	.word	0x2400b620

08027650 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8027650:	b480      	push	{r7}
 8027652:	b08d      	sub	sp, #52	@ 0x34
 8027654:	af00      	add	r7, sp, #0
 8027656:	60f8      	str	r0, [r7, #12]
 8027658:	60b9      	str	r1, [r7, #8]
 802765a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 802765c:	2300      	movs	r3, #0
 802765e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8027660:	68fb      	ldr	r3, [r7, #12]
 8027662:	681b      	ldr	r3, [r3, #0]
 8027664:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8027666:	68bb      	ldr	r3, [r7, #8]
 8027668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 802766a:	f107 0318 	add.w	r3, r7, #24
 802766e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8027670:	2300      	movs	r3, #0
 8027672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8027676:	e058      	b.n	802772a <ip4addr_ntoa_r+0xda>
    i = 0;
 8027678:	2300      	movs	r3, #0
 802767a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 802767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027680:	781a      	ldrb	r2, [r3, #0]
 8027682:	4b32      	ldr	r3, [pc, #200]	@ (802774c <ip4addr_ntoa_r+0xfc>)
 8027684:	fba3 1302 	umull	r1, r3, r3, r2
 8027688:	08d9      	lsrs	r1, r3, #3
 802768a:	460b      	mov	r3, r1
 802768c:	009b      	lsls	r3, r3, #2
 802768e:	440b      	add	r3, r1
 8027690:	005b      	lsls	r3, r3, #1
 8027692:	1ad3      	subs	r3, r2, r3
 8027694:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8027696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027698:	781b      	ldrb	r3, [r3, #0]
 802769a:	4a2c      	ldr	r2, [pc, #176]	@ (802774c <ip4addr_ntoa_r+0xfc>)
 802769c:	fba2 2303 	umull	r2, r3, r2, r3
 80276a0:	08db      	lsrs	r3, r3, #3
 80276a2:	b2da      	uxtb	r2, r3
 80276a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80276a6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80276a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80276ac:	1c5a      	adds	r2, r3, #1
 80276ae:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80276b2:	4619      	mov	r1, r3
 80276b4:	7ffb      	ldrb	r3, [r7, #31]
 80276b6:	3330      	adds	r3, #48	@ 0x30
 80276b8:	b2da      	uxtb	r2, r3
 80276ba:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80276be:	443b      	add	r3, r7
 80276c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80276c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80276c6:	781b      	ldrb	r3, [r3, #0]
 80276c8:	2b00      	cmp	r3, #0
 80276ca:	d1d8      	bne.n	802767e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80276cc:	e011      	b.n	80276f2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80276ce:	6a3b      	ldr	r3, [r7, #32]
 80276d0:	1c5a      	adds	r2, r3, #1
 80276d2:	623a      	str	r2, [r7, #32]
 80276d4:	687a      	ldr	r2, [r7, #4]
 80276d6:	429a      	cmp	r2, r3
 80276d8:	dc01      	bgt.n	80276de <ip4addr_ntoa_r+0x8e>
        return NULL;
 80276da:	2300      	movs	r3, #0
 80276dc:	e030      	b.n	8027740 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80276de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80276e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80276e4:	1c59      	adds	r1, r3, #1
 80276e6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80276e8:	3230      	adds	r2, #48	@ 0x30
 80276ea:	443a      	add	r2, r7
 80276ec:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80276f0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80276f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80276f6:	1e5a      	subs	r2, r3, #1
 80276f8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80276fc:	2b00      	cmp	r3, #0
 80276fe:	d1e6      	bne.n	80276ce <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8027700:	6a3b      	ldr	r3, [r7, #32]
 8027702:	1c5a      	adds	r2, r3, #1
 8027704:	623a      	str	r2, [r7, #32]
 8027706:	687a      	ldr	r2, [r7, #4]
 8027708:	429a      	cmp	r2, r3
 802770a:	dc01      	bgt.n	8027710 <ip4addr_ntoa_r+0xc0>
      return NULL;
 802770c:	2300      	movs	r3, #0
 802770e:	e017      	b.n	8027740 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8027710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027712:	1c5a      	adds	r2, r3, #1
 8027714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8027716:	222e      	movs	r2, #46	@ 0x2e
 8027718:	701a      	strb	r2, [r3, #0]
    ap++;
 802771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802771c:	3301      	adds	r3, #1
 802771e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8027720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8027724:	3301      	adds	r3, #1
 8027726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802772a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802772e:	2b03      	cmp	r3, #3
 8027730:	d9a2      	bls.n	8027678 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8027732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027734:	3b01      	subs	r3, #1
 8027736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802773a:	2200      	movs	r2, #0
 802773c:	701a      	strb	r2, [r3, #0]
  return buf;
 802773e:	68bb      	ldr	r3, [r7, #8]
}
 8027740:	4618      	mov	r0, r3
 8027742:	3734      	adds	r7, #52	@ 0x34
 8027744:	46bd      	mov	sp, r7
 8027746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802774a:	4770      	bx	lr
 802774c:	cccccccd 	.word	0xcccccccd

08027750 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8027750:	b580      	push	{r7, lr}
 8027752:	b084      	sub	sp, #16
 8027754:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8027756:	2300      	movs	r3, #0
 8027758:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802775a:	4b12      	ldr	r3, [pc, #72]	@ (80277a4 <ip_reass_tmr+0x54>)
 802775c:	681b      	ldr	r3, [r3, #0]
 802775e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8027760:	e018      	b.n	8027794 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8027762:	68fb      	ldr	r3, [r7, #12]
 8027764:	7fdb      	ldrb	r3, [r3, #31]
 8027766:	2b00      	cmp	r3, #0
 8027768:	d00b      	beq.n	8027782 <ip_reass_tmr+0x32>
      r->timer--;
 802776a:	68fb      	ldr	r3, [r7, #12]
 802776c:	7fdb      	ldrb	r3, [r3, #31]
 802776e:	3b01      	subs	r3, #1
 8027770:	b2da      	uxtb	r2, r3
 8027772:	68fb      	ldr	r3, [r7, #12]
 8027774:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8027776:	68fb      	ldr	r3, [r7, #12]
 8027778:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802777a:	68fb      	ldr	r3, [r7, #12]
 802777c:	681b      	ldr	r3, [r3, #0]
 802777e:	60fb      	str	r3, [r7, #12]
 8027780:	e008      	b.n	8027794 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8027782:	68fb      	ldr	r3, [r7, #12]
 8027784:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8027786:	68fb      	ldr	r3, [r7, #12]
 8027788:	681b      	ldr	r3, [r3, #0]
 802778a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 802778c:	68b9      	ldr	r1, [r7, #8]
 802778e:	6878      	ldr	r0, [r7, #4]
 8027790:	f000 f80a 	bl	80277a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8027794:	68fb      	ldr	r3, [r7, #12]
 8027796:	2b00      	cmp	r3, #0
 8027798:	d1e3      	bne.n	8027762 <ip_reass_tmr+0x12>
    }
  }
}
 802779a:	bf00      	nop
 802779c:	bf00      	nop
 802779e:	3710      	adds	r7, #16
 80277a0:	46bd      	mov	sp, r7
 80277a2:	bd80      	pop	{r7, pc}
 80277a4:	2400b630 	.word	0x2400b630

080277a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80277a8:	b580      	push	{r7, lr}
 80277aa:	b088      	sub	sp, #32
 80277ac:	af00      	add	r7, sp, #0
 80277ae:	6078      	str	r0, [r7, #4]
 80277b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80277b2:	2300      	movs	r3, #0
 80277b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80277b6:	683a      	ldr	r2, [r7, #0]
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	429a      	cmp	r2, r3
 80277bc:	d105      	bne.n	80277ca <ip_reass_free_complete_datagram+0x22>
 80277be:	4b45      	ldr	r3, [pc, #276]	@ (80278d4 <ip_reass_free_complete_datagram+0x12c>)
 80277c0:	22ab      	movs	r2, #171	@ 0xab
 80277c2:	4945      	ldr	r1, [pc, #276]	@ (80278d8 <ip_reass_free_complete_datagram+0x130>)
 80277c4:	4845      	ldr	r0, [pc, #276]	@ (80278dc <ip_reass_free_complete_datagram+0x134>)
 80277c6:	f001 fdcf 	bl	8029368 <iprintf>
  if (prev != NULL) {
 80277ca:	683b      	ldr	r3, [r7, #0]
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	d00a      	beq.n	80277e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80277d0:	683b      	ldr	r3, [r7, #0]
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	687a      	ldr	r2, [r7, #4]
 80277d6:	429a      	cmp	r2, r3
 80277d8:	d005      	beq.n	80277e6 <ip_reass_free_complete_datagram+0x3e>
 80277da:	4b3e      	ldr	r3, [pc, #248]	@ (80278d4 <ip_reass_free_complete_datagram+0x12c>)
 80277dc:	22ad      	movs	r2, #173	@ 0xad
 80277de:	4940      	ldr	r1, [pc, #256]	@ (80278e0 <ip_reass_free_complete_datagram+0x138>)
 80277e0:	483e      	ldr	r0, [pc, #248]	@ (80278dc <ip_reass_free_complete_datagram+0x134>)
 80277e2:	f001 fdc1 	bl	8029368 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80277e6:	687b      	ldr	r3, [r7, #4]
 80277e8:	685b      	ldr	r3, [r3, #4]
 80277ea:	685b      	ldr	r3, [r3, #4]
 80277ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80277ee:	697b      	ldr	r3, [r7, #20]
 80277f0:	889b      	ldrh	r3, [r3, #4]
 80277f2:	b29b      	uxth	r3, r3
 80277f4:	2b00      	cmp	r3, #0
 80277f6:	d12a      	bne.n	802784e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80277f8:	687b      	ldr	r3, [r7, #4]
 80277fa:	685b      	ldr	r3, [r3, #4]
 80277fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80277fe:	697b      	ldr	r3, [r7, #20]
 8027800:	681a      	ldr	r2, [r3, #0]
 8027802:	687b      	ldr	r3, [r7, #4]
 8027804:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8027806:	69bb      	ldr	r3, [r7, #24]
 8027808:	6858      	ldr	r0, [r3, #4]
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	3308      	adds	r3, #8
 802780e:	2214      	movs	r2, #20
 8027810:	4619      	mov	r1, r3
 8027812:	f002 f81c 	bl	802984e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8027816:	2101      	movs	r1, #1
 8027818:	69b8      	ldr	r0, [r7, #24]
 802781a:	f7ff fb8f 	bl	8026f3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802781e:	69b8      	ldr	r0, [r7, #24]
 8027820:	f7f6 f946 	bl	801dab0 <pbuf_clen>
 8027824:	4603      	mov	r3, r0
 8027826:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8027828:	8bfa      	ldrh	r2, [r7, #30]
 802782a:	8a7b      	ldrh	r3, [r7, #18]
 802782c:	4413      	add	r3, r2
 802782e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8027832:	db05      	blt.n	8027840 <ip_reass_free_complete_datagram+0x98>
 8027834:	4b27      	ldr	r3, [pc, #156]	@ (80278d4 <ip_reass_free_complete_datagram+0x12c>)
 8027836:	22bc      	movs	r2, #188	@ 0xbc
 8027838:	492a      	ldr	r1, [pc, #168]	@ (80278e4 <ip_reass_free_complete_datagram+0x13c>)
 802783a:	4828      	ldr	r0, [pc, #160]	@ (80278dc <ip_reass_free_complete_datagram+0x134>)
 802783c:	f001 fd94 	bl	8029368 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8027840:	8bfa      	ldrh	r2, [r7, #30]
 8027842:	8a7b      	ldrh	r3, [r7, #18]
 8027844:	4413      	add	r3, r2
 8027846:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8027848:	69b8      	ldr	r0, [r7, #24]
 802784a:	f7f6 f8a9 	bl	801d9a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802784e:	687b      	ldr	r3, [r7, #4]
 8027850:	685b      	ldr	r3, [r3, #4]
 8027852:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8027854:	e01f      	b.n	8027896 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8027856:	69bb      	ldr	r3, [r7, #24]
 8027858:	685b      	ldr	r3, [r3, #4]
 802785a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802785c:	69bb      	ldr	r3, [r7, #24]
 802785e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8027860:	697b      	ldr	r3, [r7, #20]
 8027862:	681b      	ldr	r3, [r3, #0]
 8027864:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8027866:	68f8      	ldr	r0, [r7, #12]
 8027868:	f7f6 f922 	bl	801dab0 <pbuf_clen>
 802786c:	4603      	mov	r3, r0
 802786e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8027870:	8bfa      	ldrh	r2, [r7, #30]
 8027872:	8a7b      	ldrh	r3, [r7, #18]
 8027874:	4413      	add	r3, r2
 8027876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802787a:	db05      	blt.n	8027888 <ip_reass_free_complete_datagram+0xe0>
 802787c:	4b15      	ldr	r3, [pc, #84]	@ (80278d4 <ip_reass_free_complete_datagram+0x12c>)
 802787e:	22cc      	movs	r2, #204	@ 0xcc
 8027880:	4918      	ldr	r1, [pc, #96]	@ (80278e4 <ip_reass_free_complete_datagram+0x13c>)
 8027882:	4816      	ldr	r0, [pc, #88]	@ (80278dc <ip_reass_free_complete_datagram+0x134>)
 8027884:	f001 fd70 	bl	8029368 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8027888:	8bfa      	ldrh	r2, [r7, #30]
 802788a:	8a7b      	ldrh	r3, [r7, #18]
 802788c:	4413      	add	r3, r2
 802788e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8027890:	68f8      	ldr	r0, [r7, #12]
 8027892:	f7f6 f885 	bl	801d9a0 <pbuf_free>
  while (p != NULL) {
 8027896:	69bb      	ldr	r3, [r7, #24]
 8027898:	2b00      	cmp	r3, #0
 802789a:	d1dc      	bne.n	8027856 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802789c:	6839      	ldr	r1, [r7, #0]
 802789e:	6878      	ldr	r0, [r7, #4]
 80278a0:	f000 f8c2 	bl	8027a28 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80278a4:	4b10      	ldr	r3, [pc, #64]	@ (80278e8 <ip_reass_free_complete_datagram+0x140>)
 80278a6:	881b      	ldrh	r3, [r3, #0]
 80278a8:	8bfa      	ldrh	r2, [r7, #30]
 80278aa:	429a      	cmp	r2, r3
 80278ac:	d905      	bls.n	80278ba <ip_reass_free_complete_datagram+0x112>
 80278ae:	4b09      	ldr	r3, [pc, #36]	@ (80278d4 <ip_reass_free_complete_datagram+0x12c>)
 80278b0:	22d2      	movs	r2, #210	@ 0xd2
 80278b2:	490e      	ldr	r1, [pc, #56]	@ (80278ec <ip_reass_free_complete_datagram+0x144>)
 80278b4:	4809      	ldr	r0, [pc, #36]	@ (80278dc <ip_reass_free_complete_datagram+0x134>)
 80278b6:	f001 fd57 	bl	8029368 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80278ba:	4b0b      	ldr	r3, [pc, #44]	@ (80278e8 <ip_reass_free_complete_datagram+0x140>)
 80278bc:	881a      	ldrh	r2, [r3, #0]
 80278be:	8bfb      	ldrh	r3, [r7, #30]
 80278c0:	1ad3      	subs	r3, r2, r3
 80278c2:	b29a      	uxth	r2, r3
 80278c4:	4b08      	ldr	r3, [pc, #32]	@ (80278e8 <ip_reass_free_complete_datagram+0x140>)
 80278c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80278c8:	8bfb      	ldrh	r3, [r7, #30]
}
 80278ca:	4618      	mov	r0, r3
 80278cc:	3720      	adds	r7, #32
 80278ce:	46bd      	mov	sp, r7
 80278d0:	bd80      	pop	{r7, pc}
 80278d2:	bf00      	nop
 80278d4:	08030618 	.word	0x08030618
 80278d8:	08030654 	.word	0x08030654
 80278dc:	08030660 	.word	0x08030660
 80278e0:	08030688 	.word	0x08030688
 80278e4:	0803069c 	.word	0x0803069c
 80278e8:	2400b634 	.word	0x2400b634
 80278ec:	080306bc 	.word	0x080306bc

080278f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80278f0:	b580      	push	{r7, lr}
 80278f2:	b08a      	sub	sp, #40	@ 0x28
 80278f4:	af00      	add	r7, sp, #0
 80278f6:	6078      	str	r0, [r7, #4]
 80278f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80278fa:	2300      	movs	r3, #0
 80278fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80278fe:	2300      	movs	r3, #0
 8027900:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8027902:	2300      	movs	r3, #0
 8027904:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8027906:	2300      	movs	r3, #0
 8027908:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802790a:	2300      	movs	r3, #0
 802790c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802790e:	4b28      	ldr	r3, [pc, #160]	@ (80279b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8027910:	681b      	ldr	r3, [r3, #0]
 8027912:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8027914:	e030      	b.n	8027978 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8027916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027918:	695a      	ldr	r2, [r3, #20]
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	68db      	ldr	r3, [r3, #12]
 802791e:	429a      	cmp	r2, r3
 8027920:	d10c      	bne.n	802793c <ip_reass_remove_oldest_datagram+0x4c>
 8027922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027924:	699a      	ldr	r2, [r3, #24]
 8027926:	687b      	ldr	r3, [r7, #4]
 8027928:	691b      	ldr	r3, [r3, #16]
 802792a:	429a      	cmp	r2, r3
 802792c:	d106      	bne.n	802793c <ip_reass_remove_oldest_datagram+0x4c>
 802792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027930:	899a      	ldrh	r2, [r3, #12]
 8027932:	687b      	ldr	r3, [r7, #4]
 8027934:	889b      	ldrh	r3, [r3, #4]
 8027936:	b29b      	uxth	r3, r3
 8027938:	429a      	cmp	r2, r3
 802793a:	d014      	beq.n	8027966 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802793c:	693b      	ldr	r3, [r7, #16]
 802793e:	3301      	adds	r3, #1
 8027940:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8027942:	6a3b      	ldr	r3, [r7, #32]
 8027944:	2b00      	cmp	r3, #0
 8027946:	d104      	bne.n	8027952 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8027948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802794a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802794c:	69fb      	ldr	r3, [r7, #28]
 802794e:	61bb      	str	r3, [r7, #24]
 8027950:	e009      	b.n	8027966 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8027952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027954:	7fda      	ldrb	r2, [r3, #31]
 8027956:	6a3b      	ldr	r3, [r7, #32]
 8027958:	7fdb      	ldrb	r3, [r3, #31]
 802795a:	429a      	cmp	r2, r3
 802795c:	d803      	bhi.n	8027966 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027960:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8027962:	69fb      	ldr	r3, [r7, #28]
 8027964:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8027966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027968:	681b      	ldr	r3, [r3, #0]
 802796a:	2b00      	cmp	r3, #0
 802796c:	d001      	beq.n	8027972 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027970:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8027972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8027978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802797a:	2b00      	cmp	r3, #0
 802797c:	d1cb      	bne.n	8027916 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802797e:	6a3b      	ldr	r3, [r7, #32]
 8027980:	2b00      	cmp	r3, #0
 8027982:	d008      	beq.n	8027996 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8027984:	69b9      	ldr	r1, [r7, #24]
 8027986:	6a38      	ldr	r0, [r7, #32]
 8027988:	f7ff ff0e 	bl	80277a8 <ip_reass_free_complete_datagram>
 802798c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802798e:	697a      	ldr	r2, [r7, #20]
 8027990:	68fb      	ldr	r3, [r7, #12]
 8027992:	4413      	add	r3, r2
 8027994:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8027996:	697a      	ldr	r2, [r7, #20]
 8027998:	683b      	ldr	r3, [r7, #0]
 802799a:	429a      	cmp	r2, r3
 802799c:	da02      	bge.n	80279a4 <ip_reass_remove_oldest_datagram+0xb4>
 802799e:	693b      	ldr	r3, [r7, #16]
 80279a0:	2b01      	cmp	r3, #1
 80279a2:	dcac      	bgt.n	80278fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80279a4:	697b      	ldr	r3, [r7, #20]
}
 80279a6:	4618      	mov	r0, r3
 80279a8:	3728      	adds	r7, #40	@ 0x28
 80279aa:	46bd      	mov	sp, r7
 80279ac:	bd80      	pop	{r7, pc}
 80279ae:	bf00      	nop
 80279b0:	2400b630 	.word	0x2400b630

080279b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80279b4:	b580      	push	{r7, lr}
 80279b6:	b084      	sub	sp, #16
 80279b8:	af00      	add	r7, sp, #0
 80279ba:	6078      	str	r0, [r7, #4]
 80279bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80279be:	2004      	movs	r0, #4
 80279c0:	f7f5 f91c 	bl	801cbfc <memp_malloc>
 80279c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80279c6:	68fb      	ldr	r3, [r7, #12]
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	d110      	bne.n	80279ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80279cc:	6839      	ldr	r1, [r7, #0]
 80279ce:	6878      	ldr	r0, [r7, #4]
 80279d0:	f7ff ff8e 	bl	80278f0 <ip_reass_remove_oldest_datagram>
 80279d4:	4602      	mov	r2, r0
 80279d6:	683b      	ldr	r3, [r7, #0]
 80279d8:	4293      	cmp	r3, r2
 80279da:	dc03      	bgt.n	80279e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80279dc:	2004      	movs	r0, #4
 80279de:	f7f5 f90d 	bl	801cbfc <memp_malloc>
 80279e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80279e4:	68fb      	ldr	r3, [r7, #12]
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	d101      	bne.n	80279ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80279ea:	2300      	movs	r3, #0
 80279ec:	e016      	b.n	8027a1c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80279ee:	2220      	movs	r2, #32
 80279f0:	2100      	movs	r1, #0
 80279f2:	68f8      	ldr	r0, [r7, #12]
 80279f4:	f001 fe66 	bl	80296c4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80279f8:	68fb      	ldr	r3, [r7, #12]
 80279fa:	220f      	movs	r2, #15
 80279fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80279fe:	4b09      	ldr	r3, [pc, #36]	@ (8027a24 <ip_reass_enqueue_new_datagram+0x70>)
 8027a00:	681a      	ldr	r2, [r3, #0]
 8027a02:	68fb      	ldr	r3, [r7, #12]
 8027a04:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8027a06:	4a07      	ldr	r2, [pc, #28]	@ (8027a24 <ip_reass_enqueue_new_datagram+0x70>)
 8027a08:	68fb      	ldr	r3, [r7, #12]
 8027a0a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8027a0c:	68fb      	ldr	r3, [r7, #12]
 8027a0e:	3308      	adds	r3, #8
 8027a10:	2214      	movs	r2, #20
 8027a12:	6879      	ldr	r1, [r7, #4]
 8027a14:	4618      	mov	r0, r3
 8027a16:	f001 ff1a 	bl	802984e <memcpy>
  return ipr;
 8027a1a:	68fb      	ldr	r3, [r7, #12]
}
 8027a1c:	4618      	mov	r0, r3
 8027a1e:	3710      	adds	r7, #16
 8027a20:	46bd      	mov	sp, r7
 8027a22:	bd80      	pop	{r7, pc}
 8027a24:	2400b630 	.word	0x2400b630

08027a28 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8027a28:	b580      	push	{r7, lr}
 8027a2a:	b082      	sub	sp, #8
 8027a2c:	af00      	add	r7, sp, #0
 8027a2e:	6078      	str	r0, [r7, #4]
 8027a30:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8027a32:	4b10      	ldr	r3, [pc, #64]	@ (8027a74 <ip_reass_dequeue_datagram+0x4c>)
 8027a34:	681b      	ldr	r3, [r3, #0]
 8027a36:	687a      	ldr	r2, [r7, #4]
 8027a38:	429a      	cmp	r2, r3
 8027a3a:	d104      	bne.n	8027a46 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8027a3c:	687b      	ldr	r3, [r7, #4]
 8027a3e:	681b      	ldr	r3, [r3, #0]
 8027a40:	4a0c      	ldr	r2, [pc, #48]	@ (8027a74 <ip_reass_dequeue_datagram+0x4c>)
 8027a42:	6013      	str	r3, [r2, #0]
 8027a44:	e00d      	b.n	8027a62 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8027a46:	683b      	ldr	r3, [r7, #0]
 8027a48:	2b00      	cmp	r3, #0
 8027a4a:	d106      	bne.n	8027a5a <ip_reass_dequeue_datagram+0x32>
 8027a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8027a78 <ip_reass_dequeue_datagram+0x50>)
 8027a4e:	f240 1245 	movw	r2, #325	@ 0x145
 8027a52:	490a      	ldr	r1, [pc, #40]	@ (8027a7c <ip_reass_dequeue_datagram+0x54>)
 8027a54:	480a      	ldr	r0, [pc, #40]	@ (8027a80 <ip_reass_dequeue_datagram+0x58>)
 8027a56:	f001 fc87 	bl	8029368 <iprintf>
    prev->next = ipr->next;
 8027a5a:	687b      	ldr	r3, [r7, #4]
 8027a5c:	681a      	ldr	r2, [r3, #0]
 8027a5e:	683b      	ldr	r3, [r7, #0]
 8027a60:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8027a62:	6879      	ldr	r1, [r7, #4]
 8027a64:	2004      	movs	r0, #4
 8027a66:	f7f5 f939 	bl	801ccdc <memp_free>
}
 8027a6a:	bf00      	nop
 8027a6c:	3708      	adds	r7, #8
 8027a6e:	46bd      	mov	sp, r7
 8027a70:	bd80      	pop	{r7, pc}
 8027a72:	bf00      	nop
 8027a74:	2400b630 	.word	0x2400b630
 8027a78:	08030618 	.word	0x08030618
 8027a7c:	080306e0 	.word	0x080306e0
 8027a80:	08030660 	.word	0x08030660

08027a84 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8027a84:	b580      	push	{r7, lr}
 8027a86:	b08c      	sub	sp, #48	@ 0x30
 8027a88:	af00      	add	r7, sp, #0
 8027a8a:	60f8      	str	r0, [r7, #12]
 8027a8c:	60b9      	str	r1, [r7, #8]
 8027a8e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8027a90:	2300      	movs	r3, #0
 8027a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8027a94:	2301      	movs	r3, #1
 8027a96:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8027a98:	68bb      	ldr	r3, [r7, #8]
 8027a9a:	685b      	ldr	r3, [r3, #4]
 8027a9c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8027a9e:	69fb      	ldr	r3, [r7, #28]
 8027aa0:	885b      	ldrh	r3, [r3, #2]
 8027aa2:	b29b      	uxth	r3, r3
 8027aa4:	4618      	mov	r0, r3
 8027aa6:	f7f4 f88b 	bl	801bbc0 <lwip_htons>
 8027aaa:	4603      	mov	r3, r0
 8027aac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8027aae:	69fb      	ldr	r3, [r7, #28]
 8027ab0:	781b      	ldrb	r3, [r3, #0]
 8027ab2:	f003 030f 	and.w	r3, r3, #15
 8027ab6:	b2db      	uxtb	r3, r3
 8027ab8:	009b      	lsls	r3, r3, #2
 8027aba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8027abc:	7e7b      	ldrb	r3, [r7, #25]
 8027abe:	b29b      	uxth	r3, r3
 8027ac0:	8b7a      	ldrh	r2, [r7, #26]
 8027ac2:	429a      	cmp	r2, r3
 8027ac4:	d202      	bcs.n	8027acc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8027aca:	e135      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8027acc:	7e7b      	ldrb	r3, [r7, #25]
 8027ace:	b29b      	uxth	r3, r3
 8027ad0:	8b7a      	ldrh	r2, [r7, #26]
 8027ad2:	1ad3      	subs	r3, r2, r3
 8027ad4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8027ad6:	69fb      	ldr	r3, [r7, #28]
 8027ad8:	88db      	ldrh	r3, [r3, #6]
 8027ada:	b29b      	uxth	r3, r3
 8027adc:	4618      	mov	r0, r3
 8027ade:	f7f4 f86f 	bl	801bbc0 <lwip_htons>
 8027ae2:	4603      	mov	r3, r0
 8027ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8027ae8:	b29b      	uxth	r3, r3
 8027aea:	00db      	lsls	r3, r3, #3
 8027aec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8027aee:	68bb      	ldr	r3, [r7, #8]
 8027af0:	685b      	ldr	r3, [r3, #4]
 8027af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8027af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027af6:	2200      	movs	r2, #0
 8027af8:	701a      	strb	r2, [r3, #0]
 8027afa:	2200      	movs	r2, #0
 8027afc:	705a      	strb	r2, [r3, #1]
 8027afe:	2200      	movs	r2, #0
 8027b00:	709a      	strb	r2, [r3, #2]
 8027b02:	2200      	movs	r2, #0
 8027b04:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8027b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b08:	8afa      	ldrh	r2, [r7, #22]
 8027b0a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8027b0c:	8afa      	ldrh	r2, [r7, #22]
 8027b0e:	8b7b      	ldrh	r3, [r7, #26]
 8027b10:	4413      	add	r3, r2
 8027b12:	b29a      	uxth	r2, r3
 8027b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b16:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8027b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b1a:	88db      	ldrh	r3, [r3, #6]
 8027b1c:	b29b      	uxth	r3, r3
 8027b1e:	8afa      	ldrh	r2, [r7, #22]
 8027b20:	429a      	cmp	r2, r3
 8027b22:	d902      	bls.n	8027b2a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027b24:	f04f 33ff 	mov.w	r3, #4294967295
 8027b28:	e106      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8027b2a:	68fb      	ldr	r3, [r7, #12]
 8027b2c:	685b      	ldr	r3, [r3, #4]
 8027b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8027b30:	e068      	b.n	8027c04 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8027b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027b34:	685b      	ldr	r3, [r3, #4]
 8027b36:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8027b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b3a:	889b      	ldrh	r3, [r3, #4]
 8027b3c:	b29a      	uxth	r2, r3
 8027b3e:	693b      	ldr	r3, [r7, #16]
 8027b40:	889b      	ldrh	r3, [r3, #4]
 8027b42:	b29b      	uxth	r3, r3
 8027b44:	429a      	cmp	r2, r3
 8027b46:	d235      	bcs.n	8027bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8027b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027b4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8027b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d020      	beq.n	8027b96 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8027b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b56:	889b      	ldrh	r3, [r3, #4]
 8027b58:	b29a      	uxth	r2, r3
 8027b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b5c:	88db      	ldrh	r3, [r3, #6]
 8027b5e:	b29b      	uxth	r3, r3
 8027b60:	429a      	cmp	r2, r3
 8027b62:	d307      	bcc.n	8027b74 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8027b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b66:	88db      	ldrh	r3, [r3, #6]
 8027b68:	b29a      	uxth	r2, r3
 8027b6a:	693b      	ldr	r3, [r7, #16]
 8027b6c:	889b      	ldrh	r3, [r3, #4]
 8027b6e:	b29b      	uxth	r3, r3
 8027b70:	429a      	cmp	r2, r3
 8027b72:	d902      	bls.n	8027b7a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027b74:	f04f 33ff 	mov.w	r3, #4294967295
 8027b78:	e0de      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8027b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b7c:	68ba      	ldr	r2, [r7, #8]
 8027b7e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8027b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b82:	88db      	ldrh	r3, [r3, #6]
 8027b84:	b29a      	uxth	r2, r3
 8027b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b88:	889b      	ldrh	r3, [r3, #4]
 8027b8a:	b29b      	uxth	r3, r3
 8027b8c:	429a      	cmp	r2, r3
 8027b8e:	d03d      	beq.n	8027c0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8027b90:	2300      	movs	r3, #0
 8027b92:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8027b94:	e03a      	b.n	8027c0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8027b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027b98:	88db      	ldrh	r3, [r3, #6]
 8027b9a:	b29a      	uxth	r2, r3
 8027b9c:	693b      	ldr	r3, [r7, #16]
 8027b9e:	889b      	ldrh	r3, [r3, #4]
 8027ba0:	b29b      	uxth	r3, r3
 8027ba2:	429a      	cmp	r2, r3
 8027ba4:	d902      	bls.n	8027bac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8027baa:	e0c5      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8027bac:	68fb      	ldr	r3, [r7, #12]
 8027bae:	68ba      	ldr	r2, [r7, #8]
 8027bb0:	605a      	str	r2, [r3, #4]
      break;
 8027bb2:	e02b      	b.n	8027c0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8027bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027bb6:	889b      	ldrh	r3, [r3, #4]
 8027bb8:	b29a      	uxth	r2, r3
 8027bba:	693b      	ldr	r3, [r7, #16]
 8027bbc:	889b      	ldrh	r3, [r3, #4]
 8027bbe:	b29b      	uxth	r3, r3
 8027bc0:	429a      	cmp	r2, r3
 8027bc2:	d102      	bne.n	8027bca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8027bc8:	e0b6      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8027bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027bcc:	889b      	ldrh	r3, [r3, #4]
 8027bce:	b29a      	uxth	r2, r3
 8027bd0:	693b      	ldr	r3, [r7, #16]
 8027bd2:	88db      	ldrh	r3, [r3, #6]
 8027bd4:	b29b      	uxth	r3, r3
 8027bd6:	429a      	cmp	r2, r3
 8027bd8:	d202      	bcs.n	8027be0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8027bda:	f04f 33ff 	mov.w	r3, #4294967295
 8027bde:	e0ab      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8027be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027be2:	2b00      	cmp	r3, #0
 8027be4:	d009      	beq.n	8027bfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8027be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027be8:	88db      	ldrh	r3, [r3, #6]
 8027bea:	b29a      	uxth	r2, r3
 8027bec:	693b      	ldr	r3, [r7, #16]
 8027bee:	889b      	ldrh	r3, [r3, #4]
 8027bf0:	b29b      	uxth	r3, r3
 8027bf2:	429a      	cmp	r2, r3
 8027bf4:	d001      	beq.n	8027bfa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8027bf6:	2300      	movs	r3, #0
 8027bf8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8027bfa:	693b      	ldr	r3, [r7, #16]
 8027bfc:	681b      	ldr	r3, [r3, #0]
 8027bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8027c00:	693b      	ldr	r3, [r7, #16]
 8027c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8027c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c06:	2b00      	cmp	r3, #0
 8027c08:	d193      	bne.n	8027b32 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8027c0a:	e000      	b.n	8027c0e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8027c0c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8027c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c10:	2b00      	cmp	r3, #0
 8027c12:	d12d      	bne.n	8027c70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8027c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c16:	2b00      	cmp	r3, #0
 8027c18:	d01c      	beq.n	8027c54 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8027c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c1c:	88db      	ldrh	r3, [r3, #6]
 8027c1e:	b29a      	uxth	r2, r3
 8027c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027c22:	889b      	ldrh	r3, [r3, #4]
 8027c24:	b29b      	uxth	r3, r3
 8027c26:	429a      	cmp	r2, r3
 8027c28:	d906      	bls.n	8027c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8027c2a:	4b45      	ldr	r3, [pc, #276]	@ (8027d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8027c2c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8027c30:	4944      	ldr	r1, [pc, #272]	@ (8027d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8027c32:	4845      	ldr	r0, [pc, #276]	@ (8027d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8027c34:	f001 fb98 	bl	8029368 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8027c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c3a:	68ba      	ldr	r2, [r7, #8]
 8027c3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8027c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c40:	88db      	ldrh	r3, [r3, #6]
 8027c42:	b29a      	uxth	r2, r3
 8027c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027c46:	889b      	ldrh	r3, [r3, #4]
 8027c48:	b29b      	uxth	r3, r3
 8027c4a:	429a      	cmp	r2, r3
 8027c4c:	d010      	beq.n	8027c70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8027c4e:	2300      	movs	r3, #0
 8027c50:	623b      	str	r3, [r7, #32]
 8027c52:	e00d      	b.n	8027c70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	685b      	ldr	r3, [r3, #4]
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	d006      	beq.n	8027c6a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8027c5c:	4b38      	ldr	r3, [pc, #224]	@ (8027d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8027c5e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8027c62:	493a      	ldr	r1, [pc, #232]	@ (8027d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8027c64:	4838      	ldr	r0, [pc, #224]	@ (8027d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8027c66:	f001 fb7f 	bl	8029368 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8027c6a:	68fb      	ldr	r3, [r7, #12]
 8027c6c:	68ba      	ldr	r2, [r7, #8]
 8027c6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8027c70:	687b      	ldr	r3, [r7, #4]
 8027c72:	2b00      	cmp	r3, #0
 8027c74:	d105      	bne.n	8027c82 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8027c76:	68fb      	ldr	r3, [r7, #12]
 8027c78:	7f9b      	ldrb	r3, [r3, #30]
 8027c7a:	f003 0301 	and.w	r3, r3, #1
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	d059      	beq.n	8027d36 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8027c82:	6a3b      	ldr	r3, [r7, #32]
 8027c84:	2b00      	cmp	r3, #0
 8027c86:	d04f      	beq.n	8027d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	685b      	ldr	r3, [r3, #4]
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	d006      	beq.n	8027c9e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8027c90:	68fb      	ldr	r3, [r7, #12]
 8027c92:	685b      	ldr	r3, [r3, #4]
 8027c94:	685b      	ldr	r3, [r3, #4]
 8027c96:	889b      	ldrh	r3, [r3, #4]
 8027c98:	b29b      	uxth	r3, r3
 8027c9a:	2b00      	cmp	r3, #0
 8027c9c:	d002      	beq.n	8027ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8027c9e:	2300      	movs	r3, #0
 8027ca0:	623b      	str	r3, [r7, #32]
 8027ca2:	e041      	b.n	8027d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8027ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8027ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027caa:	681b      	ldr	r3, [r3, #0]
 8027cac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8027cae:	e012      	b.n	8027cd6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8027cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027cb2:	685b      	ldr	r3, [r3, #4]
 8027cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8027cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027cb8:	88db      	ldrh	r3, [r3, #6]
 8027cba:	b29a      	uxth	r2, r3
 8027cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027cbe:	889b      	ldrh	r3, [r3, #4]
 8027cc0:	b29b      	uxth	r3, r3
 8027cc2:	429a      	cmp	r2, r3
 8027cc4:	d002      	beq.n	8027ccc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8027cc6:	2300      	movs	r3, #0
 8027cc8:	623b      	str	r3, [r7, #32]
            break;
 8027cca:	e007      	b.n	8027cdc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8027ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027cce:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8027cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8027cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	d1e9      	bne.n	8027cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8027cdc:	6a3b      	ldr	r3, [r7, #32]
 8027cde:	2b00      	cmp	r3, #0
 8027ce0:	d022      	beq.n	8027d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8027ce2:	68fb      	ldr	r3, [r7, #12]
 8027ce4:	685b      	ldr	r3, [r3, #4]
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d106      	bne.n	8027cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8027cea:	4b15      	ldr	r3, [pc, #84]	@ (8027d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8027cec:	f240 12df 	movw	r2, #479	@ 0x1df
 8027cf0:	4917      	ldr	r1, [pc, #92]	@ (8027d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8027cf2:	4815      	ldr	r0, [pc, #84]	@ (8027d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8027cf4:	f001 fb38 	bl	8029368 <iprintf>
          LWIP_ASSERT("sanity check",
 8027cf8:	68fb      	ldr	r3, [r7, #12]
 8027cfa:	685b      	ldr	r3, [r3, #4]
 8027cfc:	685b      	ldr	r3, [r3, #4]
 8027cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8027d00:	429a      	cmp	r2, r3
 8027d02:	d106      	bne.n	8027d12 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8027d04:	4b0e      	ldr	r3, [pc, #56]	@ (8027d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8027d06:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8027d0a:	4911      	ldr	r1, [pc, #68]	@ (8027d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8027d0c:	480e      	ldr	r0, [pc, #56]	@ (8027d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8027d0e:	f001 fb2b 	bl	8029368 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8027d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027d14:	681b      	ldr	r3, [r3, #0]
 8027d16:	2b00      	cmp	r3, #0
 8027d18:	d006      	beq.n	8027d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8027d1a:	4b09      	ldr	r3, [pc, #36]	@ (8027d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8027d1c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8027d20:	490c      	ldr	r1, [pc, #48]	@ (8027d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8027d22:	4809      	ldr	r0, [pc, #36]	@ (8027d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8027d24:	f001 fb20 	bl	8029368 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8027d28:	6a3b      	ldr	r3, [r7, #32]
 8027d2a:	2b00      	cmp	r3, #0
 8027d2c:	bf14      	ite	ne
 8027d2e:	2301      	movne	r3, #1
 8027d30:	2300      	moveq	r3, #0
 8027d32:	b2db      	uxtb	r3, r3
 8027d34:	e000      	b.n	8027d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8027d36:	2300      	movs	r3, #0
}
 8027d38:	4618      	mov	r0, r3
 8027d3a:	3730      	adds	r7, #48	@ 0x30
 8027d3c:	46bd      	mov	sp, r7
 8027d3e:	bd80      	pop	{r7, pc}
 8027d40:	08030618 	.word	0x08030618
 8027d44:	080306fc 	.word	0x080306fc
 8027d48:	08030660 	.word	0x08030660
 8027d4c:	0803071c 	.word	0x0803071c
 8027d50:	08030754 	.word	0x08030754
 8027d54:	08030764 	.word	0x08030764

08027d58 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8027d58:	b580      	push	{r7, lr}
 8027d5a:	b08e      	sub	sp, #56	@ 0x38
 8027d5c:	af00      	add	r7, sp, #0
 8027d5e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8027d60:	687b      	ldr	r3, [r7, #4]
 8027d62:	685b      	ldr	r3, [r3, #4]
 8027d64:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8027d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027d68:	781b      	ldrb	r3, [r3, #0]
 8027d6a:	f003 030f 	and.w	r3, r3, #15
 8027d6e:	b2db      	uxtb	r3, r3
 8027d70:	009b      	lsls	r3, r3, #2
 8027d72:	b2db      	uxtb	r3, r3
 8027d74:	2b14      	cmp	r3, #20
 8027d76:	f040 8171 	bne.w	802805c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8027d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027d7c:	88db      	ldrh	r3, [r3, #6]
 8027d7e:	b29b      	uxth	r3, r3
 8027d80:	4618      	mov	r0, r3
 8027d82:	f7f3 ff1d 	bl	801bbc0 <lwip_htons>
 8027d86:	4603      	mov	r3, r0
 8027d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8027d8c:	b29b      	uxth	r3, r3
 8027d8e:	00db      	lsls	r3, r3, #3
 8027d90:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8027d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027d94:	885b      	ldrh	r3, [r3, #2]
 8027d96:	b29b      	uxth	r3, r3
 8027d98:	4618      	mov	r0, r3
 8027d9a:	f7f3 ff11 	bl	801bbc0 <lwip_htons>
 8027d9e:	4603      	mov	r3, r0
 8027da0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8027da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027da4:	781b      	ldrb	r3, [r3, #0]
 8027da6:	f003 030f 	and.w	r3, r3, #15
 8027daa:	b2db      	uxtb	r3, r3
 8027dac:	009b      	lsls	r3, r3, #2
 8027dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8027db2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8027db6:	b29b      	uxth	r3, r3
 8027db8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8027dba:	429a      	cmp	r2, r3
 8027dbc:	f0c0 8150 	bcc.w	8028060 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8027dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8027dc4:	b29b      	uxth	r3, r3
 8027dc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8027dc8:	1ad3      	subs	r3, r2, r3
 8027dca:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8027dcc:	6878      	ldr	r0, [r7, #4]
 8027dce:	f7f5 fe6f 	bl	801dab0 <pbuf_clen>
 8027dd2:	4603      	mov	r3, r0
 8027dd4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8027dd6:	4b8c      	ldr	r3, [pc, #560]	@ (8028008 <ip4_reass+0x2b0>)
 8027dd8:	881b      	ldrh	r3, [r3, #0]
 8027dda:	461a      	mov	r2, r3
 8027ddc:	8c3b      	ldrh	r3, [r7, #32]
 8027dde:	4413      	add	r3, r2
 8027de0:	2b0a      	cmp	r3, #10
 8027de2:	dd10      	ble.n	8027e06 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8027de4:	8c3b      	ldrh	r3, [r7, #32]
 8027de6:	4619      	mov	r1, r3
 8027de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027dea:	f7ff fd81 	bl	80278f0 <ip_reass_remove_oldest_datagram>
 8027dee:	4603      	mov	r3, r0
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	f000 8137 	beq.w	8028064 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8027df6:	4b84      	ldr	r3, [pc, #528]	@ (8028008 <ip4_reass+0x2b0>)
 8027df8:	881b      	ldrh	r3, [r3, #0]
 8027dfa:	461a      	mov	r2, r3
 8027dfc:	8c3b      	ldrh	r3, [r7, #32]
 8027dfe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8027e00:	2b0a      	cmp	r3, #10
 8027e02:	f300 812f 	bgt.w	8028064 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8027e06:	4b81      	ldr	r3, [pc, #516]	@ (802800c <ip4_reass+0x2b4>)
 8027e08:	681b      	ldr	r3, [r3, #0]
 8027e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8027e0c:	e015      	b.n	8027e3a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8027e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e10:	695a      	ldr	r2, [r3, #20]
 8027e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e14:	68db      	ldr	r3, [r3, #12]
 8027e16:	429a      	cmp	r2, r3
 8027e18:	d10c      	bne.n	8027e34 <ip4_reass+0xdc>
 8027e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e1c:	699a      	ldr	r2, [r3, #24]
 8027e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e20:	691b      	ldr	r3, [r3, #16]
 8027e22:	429a      	cmp	r2, r3
 8027e24:	d106      	bne.n	8027e34 <ip4_reass+0xdc>
 8027e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e28:	899a      	ldrh	r2, [r3, #12]
 8027e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e2c:	889b      	ldrh	r3, [r3, #4]
 8027e2e:	b29b      	uxth	r3, r3
 8027e30:	429a      	cmp	r2, r3
 8027e32:	d006      	beq.n	8027e42 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8027e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e36:	681b      	ldr	r3, [r3, #0]
 8027e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8027e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e3c:	2b00      	cmp	r3, #0
 8027e3e:	d1e6      	bne.n	8027e0e <ip4_reass+0xb6>
 8027e40:	e000      	b.n	8027e44 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8027e42:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8027e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e46:	2b00      	cmp	r3, #0
 8027e48:	d109      	bne.n	8027e5e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8027e4a:	8c3b      	ldrh	r3, [r7, #32]
 8027e4c:	4619      	mov	r1, r3
 8027e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027e50:	f7ff fdb0 	bl	80279b4 <ip_reass_enqueue_new_datagram>
 8027e54:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8027e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d11c      	bne.n	8027e96 <ip4_reass+0x13e>
      goto nullreturn;
 8027e5c:	e105      	b.n	802806a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8027e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e60:	88db      	ldrh	r3, [r3, #6]
 8027e62:	b29b      	uxth	r3, r3
 8027e64:	4618      	mov	r0, r3
 8027e66:	f7f3 feab 	bl	801bbc0 <lwip_htons>
 8027e6a:	4603      	mov	r3, r0
 8027e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d110      	bne.n	8027e96 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8027e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e76:	89db      	ldrh	r3, [r3, #14]
 8027e78:	4618      	mov	r0, r3
 8027e7a:	f7f3 fea1 	bl	801bbc0 <lwip_htons>
 8027e7e:	4603      	mov	r3, r0
 8027e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d006      	beq.n	8027e96 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8027e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027e8a:	3308      	adds	r3, #8
 8027e8c:	2214      	movs	r2, #20
 8027e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8027e90:	4618      	mov	r0, r3
 8027e92:	f001 fcdc 	bl	802984e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8027e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027e98:	88db      	ldrh	r3, [r3, #6]
 8027e9a:	b29b      	uxth	r3, r3
 8027e9c:	f003 0320 	and.w	r3, r3, #32
 8027ea0:	2b00      	cmp	r3, #0
 8027ea2:	bf0c      	ite	eq
 8027ea4:	2301      	moveq	r3, #1
 8027ea6:	2300      	movne	r3, #0
 8027ea8:	b2db      	uxtb	r3, r3
 8027eaa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8027eac:	69fb      	ldr	r3, [r7, #28]
 8027eae:	2b00      	cmp	r3, #0
 8027eb0:	d00e      	beq.n	8027ed0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8027eb2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8027eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8027eb6:	4413      	add	r3, r2
 8027eb8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8027eba:	8b7a      	ldrh	r2, [r7, #26]
 8027ebc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8027ebe:	429a      	cmp	r2, r3
 8027ec0:	f0c0 80a0 	bcc.w	8028004 <ip4_reass+0x2ac>
 8027ec4:	8b7b      	ldrh	r3, [r7, #26]
 8027ec6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8027eca:	4293      	cmp	r3, r2
 8027ecc:	f200 809a 	bhi.w	8028004 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8027ed0:	69fa      	ldr	r2, [r7, #28]
 8027ed2:	6879      	ldr	r1, [r7, #4]
 8027ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027ed6:	f7ff fdd5 	bl	8027a84 <ip_reass_chain_frag_into_datagram_and_validate>
 8027eda:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8027edc:	697b      	ldr	r3, [r7, #20]
 8027ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ee2:	f000 809b 	beq.w	802801c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8027ee6:	4b48      	ldr	r3, [pc, #288]	@ (8028008 <ip4_reass+0x2b0>)
 8027ee8:	881a      	ldrh	r2, [r3, #0]
 8027eea:	8c3b      	ldrh	r3, [r7, #32]
 8027eec:	4413      	add	r3, r2
 8027eee:	b29a      	uxth	r2, r3
 8027ef0:	4b45      	ldr	r3, [pc, #276]	@ (8028008 <ip4_reass+0x2b0>)
 8027ef2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8027ef4:	69fb      	ldr	r3, [r7, #28]
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	d00d      	beq.n	8027f16 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8027efa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8027efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8027efe:	4413      	add	r3, r2
 8027f00:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8027f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f04:	8a7a      	ldrh	r2, [r7, #18]
 8027f06:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8027f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f0a:	7f9b      	ldrb	r3, [r3, #30]
 8027f0c:	f043 0301 	orr.w	r3, r3, #1
 8027f10:	b2da      	uxtb	r2, r3
 8027f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f14:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8027f16:	697b      	ldr	r3, [r7, #20]
 8027f18:	2b01      	cmp	r3, #1
 8027f1a:	d171      	bne.n	8028000 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8027f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f1e:	8b9b      	ldrh	r3, [r3, #28]
 8027f20:	3314      	adds	r3, #20
 8027f22:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8027f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f26:	685b      	ldr	r3, [r3, #4]
 8027f28:	685b      	ldr	r3, [r3, #4]
 8027f2a:	681b      	ldr	r3, [r3, #0]
 8027f2c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8027f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f30:	685b      	ldr	r3, [r3, #4]
 8027f32:	685b      	ldr	r3, [r3, #4]
 8027f34:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8027f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f38:	3308      	adds	r3, #8
 8027f3a:	2214      	movs	r2, #20
 8027f3c:	4619      	mov	r1, r3
 8027f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8027f40:	f001 fc85 	bl	802984e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8027f44:	8a3b      	ldrh	r3, [r7, #16]
 8027f46:	4618      	mov	r0, r3
 8027f48:	f7f3 fe3a 	bl	801bbc0 <lwip_htons>
 8027f4c:	4603      	mov	r3, r0
 8027f4e:	461a      	mov	r2, r3
 8027f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8027f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f56:	2200      	movs	r2, #0
 8027f58:	719a      	strb	r2, [r3, #6]
 8027f5a:	2200      	movs	r2, #0
 8027f5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8027f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f60:	2200      	movs	r2, #0
 8027f62:	729a      	strb	r2, [r3, #10]
 8027f64:	2200      	movs	r2, #0
 8027f66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8027f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027f6a:	685b      	ldr	r3, [r3, #4]
 8027f6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8027f6e:	e00d      	b.n	8027f8c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8027f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f72:	685b      	ldr	r3, [r3, #4]
 8027f74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8027f76:	2114      	movs	r1, #20
 8027f78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8027f7a:	f7f5 fc8b 	bl	801d894 <pbuf_remove_header>
      pbuf_cat(p, r);
 8027f7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8027f80:	6878      	ldr	r0, [r7, #4]
 8027f82:	f7f5 fdcf 	bl	801db24 <pbuf_cat>
      r = iprh->next_pbuf;
 8027f86:	68fb      	ldr	r3, [r7, #12]
 8027f88:	681b      	ldr	r3, [r3, #0]
 8027f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8027f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f8e:	2b00      	cmp	r3, #0
 8027f90:	d1ee      	bne.n	8027f70 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8027f92:	4b1e      	ldr	r3, [pc, #120]	@ (802800c <ip4_reass+0x2b4>)
 8027f94:	681b      	ldr	r3, [r3, #0]
 8027f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027f98:	429a      	cmp	r2, r3
 8027f9a:	d102      	bne.n	8027fa2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8027f9c:	2300      	movs	r3, #0
 8027f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027fa0:	e010      	b.n	8027fc4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8027fa2:	4b1a      	ldr	r3, [pc, #104]	@ (802800c <ip4_reass+0x2b4>)
 8027fa4:	681b      	ldr	r3, [r3, #0]
 8027fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027fa8:	e007      	b.n	8027fba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8027faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027fac:	681b      	ldr	r3, [r3, #0]
 8027fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027fb0:	429a      	cmp	r2, r3
 8027fb2:	d006      	beq.n	8027fc2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8027fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027fb6:	681b      	ldr	r3, [r3, #0]
 8027fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8027fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027fbc:	2b00      	cmp	r3, #0
 8027fbe:	d1f4      	bne.n	8027faa <ip4_reass+0x252>
 8027fc0:	e000      	b.n	8027fc4 <ip4_reass+0x26c>
          break;
 8027fc2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8027fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8027fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8027fc8:	f7ff fd2e 	bl	8027a28 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8027fcc:	6878      	ldr	r0, [r7, #4]
 8027fce:	f7f5 fd6f 	bl	801dab0 <pbuf_clen>
 8027fd2:	4603      	mov	r3, r0
 8027fd4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8027fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8028008 <ip4_reass+0x2b0>)
 8027fd8:	881b      	ldrh	r3, [r3, #0]
 8027fda:	8c3a      	ldrh	r2, [r7, #32]
 8027fdc:	429a      	cmp	r2, r3
 8027fde:	d906      	bls.n	8027fee <ip4_reass+0x296>
 8027fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8028010 <ip4_reass+0x2b8>)
 8027fe2:	f240 229b 	movw	r2, #667	@ 0x29b
 8027fe6:	490b      	ldr	r1, [pc, #44]	@ (8028014 <ip4_reass+0x2bc>)
 8027fe8:	480b      	ldr	r0, [pc, #44]	@ (8028018 <ip4_reass+0x2c0>)
 8027fea:	f001 f9bd 	bl	8029368 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8027fee:	4b06      	ldr	r3, [pc, #24]	@ (8028008 <ip4_reass+0x2b0>)
 8027ff0:	881a      	ldrh	r2, [r3, #0]
 8027ff2:	8c3b      	ldrh	r3, [r7, #32]
 8027ff4:	1ad3      	subs	r3, r2, r3
 8027ff6:	b29a      	uxth	r2, r3
 8027ff8:	4b03      	ldr	r3, [pc, #12]	@ (8028008 <ip4_reass+0x2b0>)
 8027ffa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8027ffc:	687b      	ldr	r3, [r7, #4]
 8027ffe:	e038      	b.n	8028072 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8028000:	2300      	movs	r3, #0
 8028002:	e036      	b.n	8028072 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8028004:	bf00      	nop
 8028006:	e00a      	b.n	802801e <ip4_reass+0x2c6>
 8028008:	2400b634 	.word	0x2400b634
 802800c:	2400b630 	.word	0x2400b630
 8028010:	08030618 	.word	0x08030618
 8028014:	08030788 	.word	0x08030788
 8028018:	08030660 	.word	0x08030660
    goto nullreturn_ipr;
 802801c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028020:	2b00      	cmp	r3, #0
 8028022:	d106      	bne.n	8028032 <ip4_reass+0x2da>
 8028024:	4b15      	ldr	r3, [pc, #84]	@ (802807c <ip4_reass+0x324>)
 8028026:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 802802a:	4915      	ldr	r1, [pc, #84]	@ (8028080 <ip4_reass+0x328>)
 802802c:	4815      	ldr	r0, [pc, #84]	@ (8028084 <ip4_reass+0x32c>)
 802802e:	f001 f99b 	bl	8029368 <iprintf>
  if (ipr->p == NULL) {
 8028032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028034:	685b      	ldr	r3, [r3, #4]
 8028036:	2b00      	cmp	r3, #0
 8028038:	d116      	bne.n	8028068 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802803a:	4b13      	ldr	r3, [pc, #76]	@ (8028088 <ip4_reass+0x330>)
 802803c:	681b      	ldr	r3, [r3, #0]
 802803e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028040:	429a      	cmp	r2, r3
 8028042:	d006      	beq.n	8028052 <ip4_reass+0x2fa>
 8028044:	4b0d      	ldr	r3, [pc, #52]	@ (802807c <ip4_reass+0x324>)
 8028046:	f240 22ab 	movw	r2, #683	@ 0x2ab
 802804a:	4910      	ldr	r1, [pc, #64]	@ (802808c <ip4_reass+0x334>)
 802804c:	480d      	ldr	r0, [pc, #52]	@ (8028084 <ip4_reass+0x32c>)
 802804e:	f001 f98b 	bl	8029368 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8028052:	2100      	movs	r1, #0
 8028054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8028056:	f7ff fce7 	bl	8027a28 <ip_reass_dequeue_datagram>
 802805a:	e006      	b.n	802806a <ip4_reass+0x312>
    goto nullreturn;
 802805c:	bf00      	nop
 802805e:	e004      	b.n	802806a <ip4_reass+0x312>
    goto nullreturn;
 8028060:	bf00      	nop
 8028062:	e002      	b.n	802806a <ip4_reass+0x312>
      goto nullreturn;
 8028064:	bf00      	nop
 8028066:	e000      	b.n	802806a <ip4_reass+0x312>
  }

nullreturn:
 8028068:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802806a:	6878      	ldr	r0, [r7, #4]
 802806c:	f7f5 fc98 	bl	801d9a0 <pbuf_free>
  return NULL;
 8028070:	2300      	movs	r3, #0
}
 8028072:	4618      	mov	r0, r3
 8028074:	3738      	adds	r7, #56	@ 0x38
 8028076:	46bd      	mov	sp, r7
 8028078:	bd80      	pop	{r7, pc}
 802807a:	bf00      	nop
 802807c:	08030618 	.word	0x08030618
 8028080:	080307a4 	.word	0x080307a4
 8028084:	08030660 	.word	0x08030660
 8028088:	2400b630 	.word	0x2400b630
 802808c:	080307b0 	.word	0x080307b0

08028090 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8028090:	b580      	push	{r7, lr}
 8028092:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8028094:	2005      	movs	r0, #5
 8028096:	f7f4 fdb1 	bl	801cbfc <memp_malloc>
 802809a:	4603      	mov	r3, r0
}
 802809c:	4618      	mov	r0, r3
 802809e:	bd80      	pop	{r7, pc}

080280a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80280a0:	b580      	push	{r7, lr}
 80280a2:	b082      	sub	sp, #8
 80280a4:	af00      	add	r7, sp, #0
 80280a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80280a8:	687b      	ldr	r3, [r7, #4]
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	d106      	bne.n	80280bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80280ae:	4b07      	ldr	r3, [pc, #28]	@ (80280cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80280b0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80280b4:	4906      	ldr	r1, [pc, #24]	@ (80280d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80280b6:	4807      	ldr	r0, [pc, #28]	@ (80280d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80280b8:	f001 f956 	bl	8029368 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80280bc:	6879      	ldr	r1, [r7, #4]
 80280be:	2005      	movs	r0, #5
 80280c0:	f7f4 fe0c 	bl	801ccdc <memp_free>
}
 80280c4:	bf00      	nop
 80280c6:	3708      	adds	r7, #8
 80280c8:	46bd      	mov	sp, r7
 80280ca:	bd80      	pop	{r7, pc}
 80280cc:	08030618 	.word	0x08030618
 80280d0:	080307d0 	.word	0x080307d0
 80280d4:	08030660 	.word	0x08030660

080280d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80280d8:	b580      	push	{r7, lr}
 80280da:	b084      	sub	sp, #16
 80280dc:	af00      	add	r7, sp, #0
 80280de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80280e0:	687b      	ldr	r3, [r7, #4]
 80280e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80280e4:	68fb      	ldr	r3, [r7, #12]
 80280e6:	2b00      	cmp	r3, #0
 80280e8:	d106      	bne.n	80280f8 <ipfrag_free_pbuf_custom+0x20>
 80280ea:	4b11      	ldr	r3, [pc, #68]	@ (8028130 <ipfrag_free_pbuf_custom+0x58>)
 80280ec:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80280f0:	4910      	ldr	r1, [pc, #64]	@ (8028134 <ipfrag_free_pbuf_custom+0x5c>)
 80280f2:	4811      	ldr	r0, [pc, #68]	@ (8028138 <ipfrag_free_pbuf_custom+0x60>)
 80280f4:	f001 f938 	bl	8029368 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80280f8:	68fa      	ldr	r2, [r7, #12]
 80280fa:	687b      	ldr	r3, [r7, #4]
 80280fc:	429a      	cmp	r2, r3
 80280fe:	d006      	beq.n	802810e <ipfrag_free_pbuf_custom+0x36>
 8028100:	4b0b      	ldr	r3, [pc, #44]	@ (8028130 <ipfrag_free_pbuf_custom+0x58>)
 8028102:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8028106:	490d      	ldr	r1, [pc, #52]	@ (802813c <ipfrag_free_pbuf_custom+0x64>)
 8028108:	480b      	ldr	r0, [pc, #44]	@ (8028138 <ipfrag_free_pbuf_custom+0x60>)
 802810a:	f001 f92d 	bl	8029368 <iprintf>
  if (pcr->original != NULL) {
 802810e:	68fb      	ldr	r3, [r7, #12]
 8028110:	695b      	ldr	r3, [r3, #20]
 8028112:	2b00      	cmp	r3, #0
 8028114:	d004      	beq.n	8028120 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8028116:	68fb      	ldr	r3, [r7, #12]
 8028118:	695b      	ldr	r3, [r3, #20]
 802811a:	4618      	mov	r0, r3
 802811c:	f7f5 fc40 	bl	801d9a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8028120:	68f8      	ldr	r0, [r7, #12]
 8028122:	f7ff ffbd 	bl	80280a0 <ip_frag_free_pbuf_custom_ref>
}
 8028126:	bf00      	nop
 8028128:	3710      	adds	r7, #16
 802812a:	46bd      	mov	sp, r7
 802812c:	bd80      	pop	{r7, pc}
 802812e:	bf00      	nop
 8028130:	08030618 	.word	0x08030618
 8028134:	080307dc 	.word	0x080307dc
 8028138:	08030660 	.word	0x08030660
 802813c:	080307e8 	.word	0x080307e8

08028140 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8028140:	b580      	push	{r7, lr}
 8028142:	b094      	sub	sp, #80	@ 0x50
 8028144:	af02      	add	r7, sp, #8
 8028146:	60f8      	str	r0, [r7, #12]
 8028148:	60b9      	str	r1, [r7, #8]
 802814a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802814c:	2300      	movs	r3, #0
 802814e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8028152:	68bb      	ldr	r3, [r7, #8]
 8028154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8028156:	3b14      	subs	r3, #20
 8028158:	2b00      	cmp	r3, #0
 802815a:	da00      	bge.n	802815e <ip4_frag+0x1e>
 802815c:	3307      	adds	r3, #7
 802815e:	10db      	asrs	r3, r3, #3
 8028160:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8028162:	2314      	movs	r3, #20
 8028164:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	685b      	ldr	r3, [r3, #4]
 802816a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 802816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802816e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8028170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028172:	781b      	ldrb	r3, [r3, #0]
 8028174:	f003 030f 	and.w	r3, r3, #15
 8028178:	b2db      	uxtb	r3, r3
 802817a:	009b      	lsls	r3, r3, #2
 802817c:	b2db      	uxtb	r3, r3
 802817e:	2b14      	cmp	r3, #20
 8028180:	d002      	beq.n	8028188 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8028182:	f06f 0305 	mvn.w	r3, #5
 8028186:	e110      	b.n	80283aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8028188:	68fb      	ldr	r3, [r7, #12]
 802818a:	895b      	ldrh	r3, [r3, #10]
 802818c:	2b13      	cmp	r3, #19
 802818e:	d809      	bhi.n	80281a4 <ip4_frag+0x64>
 8028190:	4b88      	ldr	r3, [pc, #544]	@ (80283b4 <ip4_frag+0x274>)
 8028192:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8028196:	4988      	ldr	r1, [pc, #544]	@ (80283b8 <ip4_frag+0x278>)
 8028198:	4888      	ldr	r0, [pc, #544]	@ (80283bc <ip4_frag+0x27c>)
 802819a:	f001 f8e5 	bl	8029368 <iprintf>
 802819e:	f06f 0305 	mvn.w	r3, #5
 80281a2:	e102      	b.n	80283aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80281a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80281a6:	88db      	ldrh	r3, [r3, #6]
 80281a8:	b29b      	uxth	r3, r3
 80281aa:	4618      	mov	r0, r3
 80281ac:	f7f3 fd08 	bl	801bbc0 <lwip_htons>
 80281b0:	4603      	mov	r3, r0
 80281b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80281b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80281b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80281ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80281be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80281c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80281c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80281c6:	68fb      	ldr	r3, [r7, #12]
 80281c8:	891b      	ldrh	r3, [r3, #8]
 80281ca:	3b14      	subs	r3, #20
 80281cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80281d0:	e0e1      	b.n	8028396 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80281d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80281d4:	00db      	lsls	r3, r3, #3
 80281d6:	b29b      	uxth	r3, r3
 80281d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80281dc:	4293      	cmp	r3, r2
 80281de:	bf28      	it	cs
 80281e0:	4613      	movcs	r3, r2
 80281e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80281e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80281e8:	2114      	movs	r1, #20
 80281ea:	200e      	movs	r0, #14
 80281ec:	f7f5 f8f4 	bl	801d3d8 <pbuf_alloc>
 80281f0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80281f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	f000 80d5 	beq.w	80283a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80281fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80281fc:	895b      	ldrh	r3, [r3, #10]
 80281fe:	2b13      	cmp	r3, #19
 8028200:	d806      	bhi.n	8028210 <ip4_frag+0xd0>
 8028202:	4b6c      	ldr	r3, [pc, #432]	@ (80283b4 <ip4_frag+0x274>)
 8028204:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8028208:	496d      	ldr	r1, [pc, #436]	@ (80283c0 <ip4_frag+0x280>)
 802820a:	486c      	ldr	r0, [pc, #432]	@ (80283bc <ip4_frag+0x27c>)
 802820c:	f001 f8ac 	bl	8029368 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8028210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028212:	685b      	ldr	r3, [r3, #4]
 8028214:	2214      	movs	r2, #20
 8028216:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8028218:	4618      	mov	r0, r3
 802821a:	f001 fb18 	bl	802984e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028220:	685b      	ldr	r3, [r3, #4]
 8028222:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8028224:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8028226:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 802822a:	e064      	b.n	80282f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802822c:	68fb      	ldr	r3, [r7, #12]
 802822e:	895a      	ldrh	r2, [r3, #10]
 8028230:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8028232:	1ad3      	subs	r3, r2, r3
 8028234:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8028236:	68fb      	ldr	r3, [r7, #12]
 8028238:	895b      	ldrh	r3, [r3, #10]
 802823a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 802823c:	429a      	cmp	r2, r3
 802823e:	d906      	bls.n	802824e <ip4_frag+0x10e>
 8028240:	4b5c      	ldr	r3, [pc, #368]	@ (80283b4 <ip4_frag+0x274>)
 8028242:	f240 322d 	movw	r2, #813	@ 0x32d
 8028246:	495f      	ldr	r1, [pc, #380]	@ (80283c4 <ip4_frag+0x284>)
 8028248:	485c      	ldr	r0, [pc, #368]	@ (80283bc <ip4_frag+0x27c>)
 802824a:	f001 f88d 	bl	8029368 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802824e:	8bfa      	ldrh	r2, [r7, #30]
 8028250:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8028254:	4293      	cmp	r3, r2
 8028256:	bf28      	it	cs
 8028258:	4613      	movcs	r3, r2
 802825a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802825e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8028262:	2b00      	cmp	r3, #0
 8028264:	d105      	bne.n	8028272 <ip4_frag+0x132>
        poff = 0;
 8028266:	2300      	movs	r3, #0
 8028268:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 802826a:	68fb      	ldr	r3, [r7, #12]
 802826c:	681b      	ldr	r3, [r3, #0]
 802826e:	60fb      	str	r3, [r7, #12]
        continue;
 8028270:	e041      	b.n	80282f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8028272:	f7ff ff0d 	bl	8028090 <ip_frag_alloc_pbuf_custom_ref>
 8028276:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8028278:	69bb      	ldr	r3, [r7, #24]
 802827a:	2b00      	cmp	r3, #0
 802827c:	d103      	bne.n	8028286 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802827e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028280:	f7f5 fb8e 	bl	801d9a0 <pbuf_free>
        goto memerr;
 8028284:	e08f      	b.n	80283a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8028286:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8028288:	68fb      	ldr	r3, [r7, #12]
 802828a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802828c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802828e:	4413      	add	r3, r2
 8028290:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8028294:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8028298:	9201      	str	r2, [sp, #4]
 802829a:	9300      	str	r3, [sp, #0]
 802829c:	4603      	mov	r3, r0
 802829e:	2241      	movs	r2, #65	@ 0x41
 80282a0:	2000      	movs	r0, #0
 80282a2:	f7f5 f9c3 	bl	801d62c <pbuf_alloced_custom>
 80282a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80282a8:	697b      	ldr	r3, [r7, #20]
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	d106      	bne.n	80282bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80282ae:	69b8      	ldr	r0, [r7, #24]
 80282b0:	f7ff fef6 	bl	80280a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80282b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80282b6:	f7f5 fb73 	bl	801d9a0 <pbuf_free>
        goto memerr;
 80282ba:	e074      	b.n	80283a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80282bc:	68f8      	ldr	r0, [r7, #12]
 80282be:	f7f5 fc0f 	bl	801dae0 <pbuf_ref>
      pcr->original = p;
 80282c2:	69bb      	ldr	r3, [r7, #24]
 80282c4:	68fa      	ldr	r2, [r7, #12]
 80282c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80282c8:	69bb      	ldr	r3, [r7, #24]
 80282ca:	4a3f      	ldr	r2, [pc, #252]	@ (80283c8 <ip4_frag+0x288>)
 80282cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80282ce:	6979      	ldr	r1, [r7, #20]
 80282d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80282d2:	f7f5 fc27 	bl	801db24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80282d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80282da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80282de:	1ad3      	subs	r3, r2, r3
 80282e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80282e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d004      	beq.n	80282f6 <ip4_frag+0x1b6>
        poff = 0;
 80282ec:	2300      	movs	r3, #0
 80282ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80282f0:	68fb      	ldr	r3, [r7, #12]
 80282f2:	681b      	ldr	r3, [r3, #0]
 80282f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80282f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80282fa:	2b00      	cmp	r3, #0
 80282fc:	d196      	bne.n	802822c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80282fe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8028300:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8028304:	4413      	add	r3, r2
 8028306:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8028308:	68bb      	ldr	r3, [r7, #8]
 802830a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802830c:	f1a3 0213 	sub.w	r2, r3, #19
 8028310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8028314:	429a      	cmp	r2, r3
 8028316:	bfcc      	ite	gt
 8028318:	2301      	movgt	r3, #1
 802831a:	2300      	movle	r3, #0
 802831c:	b2db      	uxtb	r3, r3
 802831e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8028320:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8028324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8028328:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 802832a:	6a3b      	ldr	r3, [r7, #32]
 802832c:	2b00      	cmp	r3, #0
 802832e:	d002      	beq.n	8028336 <ip4_frag+0x1f6>
 8028330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028332:	2b00      	cmp	r3, #0
 8028334:	d003      	beq.n	802833e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8028336:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8028338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802833c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802833e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8028340:	4618      	mov	r0, r3
 8028342:	f7f3 fc3d 	bl	801bbc0 <lwip_htons>
 8028346:	4603      	mov	r3, r0
 8028348:	461a      	mov	r2, r3
 802834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802834c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802834e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8028350:	3314      	adds	r3, #20
 8028352:	b29b      	uxth	r3, r3
 8028354:	4618      	mov	r0, r3
 8028356:	f7f3 fc33 	bl	801bbc0 <lwip_htons>
 802835a:	4603      	mov	r3, r0
 802835c:	461a      	mov	r2, r3
 802835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028360:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8028362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028364:	2200      	movs	r2, #0
 8028366:	729a      	strb	r2, [r3, #10]
 8028368:	2200      	movs	r2, #0
 802836a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802836c:	68bb      	ldr	r3, [r7, #8]
 802836e:	695b      	ldr	r3, [r3, #20]
 8028370:	687a      	ldr	r2, [r7, #4]
 8028372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8028374:	68b8      	ldr	r0, [r7, #8]
 8028376:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8028378:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802837a:	f7f5 fb11 	bl	801d9a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802837e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8028382:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8028384:	1ad3      	subs	r3, r2, r3
 8028386:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 802838a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 802838e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8028390:	4413      	add	r3, r2
 8028392:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8028396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802839a:	2b00      	cmp	r3, #0
 802839c:	f47f af19 	bne.w	80281d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80283a0:	2300      	movs	r3, #0
 80283a2:	e002      	b.n	80283aa <ip4_frag+0x26a>
      goto memerr;
 80283a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80283a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80283aa:	4618      	mov	r0, r3
 80283ac:	3748      	adds	r7, #72	@ 0x48
 80283ae:	46bd      	mov	sp, r7
 80283b0:	bd80      	pop	{r7, pc}
 80283b2:	bf00      	nop
 80283b4:	08030618 	.word	0x08030618
 80283b8:	080307f4 	.word	0x080307f4
 80283bc:	08030660 	.word	0x08030660
 80283c0:	08030810 	.word	0x08030810
 80283c4:	08030830 	.word	0x08030830
 80283c8:	080280d9 	.word	0x080280d9

080283cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80283cc:	b580      	push	{r7, lr}
 80283ce:	b086      	sub	sp, #24
 80283d0:	af00      	add	r7, sp, #0
 80283d2:	6078      	str	r0, [r7, #4]
 80283d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80283d6:	230e      	movs	r3, #14
 80283d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80283da:	687b      	ldr	r3, [r7, #4]
 80283dc:	895b      	ldrh	r3, [r3, #10]
 80283de:	2b0e      	cmp	r3, #14
 80283e0:	d96e      	bls.n	80284c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80283e2:	687b      	ldr	r3, [r7, #4]
 80283e4:	7bdb      	ldrb	r3, [r3, #15]
 80283e6:	2b00      	cmp	r3, #0
 80283e8:	d106      	bne.n	80283f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80283ea:	683b      	ldr	r3, [r7, #0]
 80283ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80283f0:	3301      	adds	r3, #1
 80283f2:	b2da      	uxtb	r2, r3
 80283f4:	687b      	ldr	r3, [r7, #4]
 80283f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80283f8:	687b      	ldr	r3, [r7, #4]
 80283fa:	685b      	ldr	r3, [r3, #4]
 80283fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80283fe:	693b      	ldr	r3, [r7, #16]
 8028400:	7b1a      	ldrb	r2, [r3, #12]
 8028402:	7b5b      	ldrb	r3, [r3, #13]
 8028404:	021b      	lsls	r3, r3, #8
 8028406:	4313      	orrs	r3, r2
 8028408:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802840a:	693b      	ldr	r3, [r7, #16]
 802840c:	781b      	ldrb	r3, [r3, #0]
 802840e:	f003 0301 	and.w	r3, r3, #1
 8028412:	2b00      	cmp	r3, #0
 8028414:	d023      	beq.n	802845e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8028416:	693b      	ldr	r3, [r7, #16]
 8028418:	781b      	ldrb	r3, [r3, #0]
 802841a:	2b01      	cmp	r3, #1
 802841c:	d10f      	bne.n	802843e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802841e:	693b      	ldr	r3, [r7, #16]
 8028420:	785b      	ldrb	r3, [r3, #1]
 8028422:	2b00      	cmp	r3, #0
 8028424:	d11b      	bne.n	802845e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8028426:	693b      	ldr	r3, [r7, #16]
 8028428:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802842a:	2b5e      	cmp	r3, #94	@ 0x5e
 802842c:	d117      	bne.n	802845e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802842e:	687b      	ldr	r3, [r7, #4]
 8028430:	7b5b      	ldrb	r3, [r3, #13]
 8028432:	f043 0310 	orr.w	r3, r3, #16
 8028436:	b2da      	uxtb	r2, r3
 8028438:	687b      	ldr	r3, [r7, #4]
 802843a:	735a      	strb	r2, [r3, #13]
 802843c:	e00f      	b.n	802845e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802843e:	693b      	ldr	r3, [r7, #16]
 8028440:	2206      	movs	r2, #6
 8028442:	4928      	ldr	r1, [pc, #160]	@ (80284e4 <ethernet_input+0x118>)
 8028444:	4618      	mov	r0, r3
 8028446:	f001 f913 	bl	8029670 <memcmp>
 802844a:	4603      	mov	r3, r0
 802844c:	2b00      	cmp	r3, #0
 802844e:	d106      	bne.n	802845e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	7b5b      	ldrb	r3, [r3, #13]
 8028454:	f043 0308 	orr.w	r3, r3, #8
 8028458:	b2da      	uxtb	r2, r3
 802845a:	687b      	ldr	r3, [r7, #4]
 802845c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802845e:	89fb      	ldrh	r3, [r7, #14]
 8028460:	2b08      	cmp	r3, #8
 8028462:	d003      	beq.n	802846c <ethernet_input+0xa0>
 8028464:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8028468:	d014      	beq.n	8028494 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802846a:	e032      	b.n	80284d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802846c:	683b      	ldr	r3, [r7, #0]
 802846e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8028472:	f003 0308 	and.w	r3, r3, #8
 8028476:	2b00      	cmp	r3, #0
 8028478:	d024      	beq.n	80284c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802847a:	8afb      	ldrh	r3, [r7, #22]
 802847c:	4619      	mov	r1, r3
 802847e:	6878      	ldr	r0, [r7, #4]
 8028480:	f7f5 fa08 	bl	801d894 <pbuf_remove_header>
 8028484:	4603      	mov	r3, r0
 8028486:	2b00      	cmp	r3, #0
 8028488:	d11e      	bne.n	80284c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 802848a:	6839      	ldr	r1, [r7, #0]
 802848c:	6878      	ldr	r0, [r7, #4]
 802848e:	f7fe fe73 	bl	8027178 <ip4_input>
      break;
 8028492:	e013      	b.n	80284bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8028494:	683b      	ldr	r3, [r7, #0]
 8028496:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802849a:	f003 0308 	and.w	r3, r3, #8
 802849e:	2b00      	cmp	r3, #0
 80284a0:	d014      	beq.n	80284cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80284a2:	8afb      	ldrh	r3, [r7, #22]
 80284a4:	4619      	mov	r1, r3
 80284a6:	6878      	ldr	r0, [r7, #4]
 80284a8:	f7f5 f9f4 	bl	801d894 <pbuf_remove_header>
 80284ac:	4603      	mov	r3, r0
 80284ae:	2b00      	cmp	r3, #0
 80284b0:	d10e      	bne.n	80284d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80284b2:	6839      	ldr	r1, [r7, #0]
 80284b4:	6878      	ldr	r0, [r7, #4]
 80284b6:	f7fd ffe9 	bl	802648c <etharp_input>
      break;
 80284ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80284bc:	2300      	movs	r3, #0
 80284be:	e00c      	b.n	80284da <ethernet_input+0x10e>
    goto free_and_return;
 80284c0:	bf00      	nop
 80284c2:	e006      	b.n	80284d2 <ethernet_input+0x106>
        goto free_and_return;
 80284c4:	bf00      	nop
 80284c6:	e004      	b.n	80284d2 <ethernet_input+0x106>
        goto free_and_return;
 80284c8:	bf00      	nop
 80284ca:	e002      	b.n	80284d2 <ethernet_input+0x106>
        goto free_and_return;
 80284cc:	bf00      	nop
 80284ce:	e000      	b.n	80284d2 <ethernet_input+0x106>
        goto free_and_return;
 80284d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80284d2:	6878      	ldr	r0, [r7, #4]
 80284d4:	f7f5 fa64 	bl	801d9a0 <pbuf_free>
  return ERR_OK;
 80284d8:	2300      	movs	r3, #0
}
 80284da:	4618      	mov	r0, r3
 80284dc:	3718      	adds	r7, #24
 80284de:	46bd      	mov	sp, r7
 80284e0:	bd80      	pop	{r7, pc}
 80284e2:	bf00      	nop
 80284e4:	08030efc 	.word	0x08030efc

080284e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80284e8:	b580      	push	{r7, lr}
 80284ea:	b086      	sub	sp, #24
 80284ec:	af00      	add	r7, sp, #0
 80284ee:	60f8      	str	r0, [r7, #12]
 80284f0:	60b9      	str	r1, [r7, #8]
 80284f2:	607a      	str	r2, [r7, #4]
 80284f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80284f6:	8c3b      	ldrh	r3, [r7, #32]
 80284f8:	4618      	mov	r0, r3
 80284fa:	f7f3 fb61 	bl	801bbc0 <lwip_htons>
 80284fe:	4603      	mov	r3, r0
 8028500:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8028502:	210e      	movs	r1, #14
 8028504:	68b8      	ldr	r0, [r7, #8]
 8028506:	f7f5 f9b5 	bl	801d874 <pbuf_add_header>
 802850a:	4603      	mov	r3, r0
 802850c:	2b00      	cmp	r3, #0
 802850e:	d125      	bne.n	802855c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8028510:	68bb      	ldr	r3, [r7, #8]
 8028512:	685b      	ldr	r3, [r3, #4]
 8028514:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8028516:	693b      	ldr	r3, [r7, #16]
 8028518:	8afa      	ldrh	r2, [r7, #22]
 802851a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802851c:	693b      	ldr	r3, [r7, #16]
 802851e:	2206      	movs	r2, #6
 8028520:	6839      	ldr	r1, [r7, #0]
 8028522:	4618      	mov	r0, r3
 8028524:	f001 f993 	bl	802984e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8028528:	693b      	ldr	r3, [r7, #16]
 802852a:	3306      	adds	r3, #6
 802852c:	2206      	movs	r2, #6
 802852e:	6879      	ldr	r1, [r7, #4]
 8028530:	4618      	mov	r0, r3
 8028532:	f001 f98c 	bl	802984e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8028536:	68fb      	ldr	r3, [r7, #12]
 8028538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802853c:	2b06      	cmp	r3, #6
 802853e:	d006      	beq.n	802854e <ethernet_output+0x66>
 8028540:	4b0a      	ldr	r3, [pc, #40]	@ (802856c <ethernet_output+0x84>)
 8028542:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8028546:	490a      	ldr	r1, [pc, #40]	@ (8028570 <ethernet_output+0x88>)
 8028548:	480a      	ldr	r0, [pc, #40]	@ (8028574 <ethernet_output+0x8c>)
 802854a:	f000 ff0d 	bl	8029368 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802854e:	68fb      	ldr	r3, [r7, #12]
 8028550:	699b      	ldr	r3, [r3, #24]
 8028552:	68b9      	ldr	r1, [r7, #8]
 8028554:	68f8      	ldr	r0, [r7, #12]
 8028556:	4798      	blx	r3
 8028558:	4603      	mov	r3, r0
 802855a:	e002      	b.n	8028562 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 802855c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802855e:	f06f 0301 	mvn.w	r3, #1
}
 8028562:	4618      	mov	r0, r3
 8028564:	3718      	adds	r7, #24
 8028566:	46bd      	mov	sp, r7
 8028568:	bd80      	pop	{r7, pc}
 802856a:	bf00      	nop
 802856c:	08030840 	.word	0x08030840
 8028570:	08030878 	.word	0x08030878
 8028574:	080308ac 	.word	0x080308ac

08028578 <__assert_func>:
 8028578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802857a:	4614      	mov	r4, r2
 802857c:	461a      	mov	r2, r3
 802857e:	4b09      	ldr	r3, [pc, #36]	@ (80285a4 <__assert_func+0x2c>)
 8028580:	681b      	ldr	r3, [r3, #0]
 8028582:	4605      	mov	r5, r0
 8028584:	68d8      	ldr	r0, [r3, #12]
 8028586:	b954      	cbnz	r4, 802859e <__assert_func+0x26>
 8028588:	4b07      	ldr	r3, [pc, #28]	@ (80285a8 <__assert_func+0x30>)
 802858a:	461c      	mov	r4, r3
 802858c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028590:	9100      	str	r1, [sp, #0]
 8028592:	462b      	mov	r3, r5
 8028594:	4905      	ldr	r1, [pc, #20]	@ (80285ac <__assert_func+0x34>)
 8028596:	f000 feb7 	bl	8029308 <fiprintf>
 802859a:	f001 f966 	bl	802986a <abort>
 802859e:	4b04      	ldr	r3, [pc, #16]	@ (80285b0 <__assert_func+0x38>)
 80285a0:	e7f4      	b.n	802858c <__assert_func+0x14>
 80285a2:	bf00      	nop
 80285a4:	2400007c 	.word	0x2400007c
 80285a8:	08030f45 	.word	0x08030f45
 80285ac:	08030f17 	.word	0x08030f17
 80285b0:	08030f0a 	.word	0x08030f0a

080285b4 <atoi>:
 80285b4:	220a      	movs	r2, #10
 80285b6:	2100      	movs	r1, #0
 80285b8:	f000 b9c0 	b.w	802893c <strtol>

080285bc <calloc>:
 80285bc:	4b02      	ldr	r3, [pc, #8]	@ (80285c8 <calloc+0xc>)
 80285be:	460a      	mov	r2, r1
 80285c0:	4601      	mov	r1, r0
 80285c2:	6818      	ldr	r0, [r3, #0]
 80285c4:	f000 b802 	b.w	80285cc <_calloc_r>
 80285c8:	2400007c 	.word	0x2400007c

080285cc <_calloc_r>:
 80285cc:	b570      	push	{r4, r5, r6, lr}
 80285ce:	fba1 5402 	umull	r5, r4, r1, r2
 80285d2:	b93c      	cbnz	r4, 80285e4 <_calloc_r+0x18>
 80285d4:	4629      	mov	r1, r5
 80285d6:	f000 f83f 	bl	8028658 <_malloc_r>
 80285da:	4606      	mov	r6, r0
 80285dc:	b928      	cbnz	r0, 80285ea <_calloc_r+0x1e>
 80285de:	2600      	movs	r6, #0
 80285e0:	4630      	mov	r0, r6
 80285e2:	bd70      	pop	{r4, r5, r6, pc}
 80285e4:	220c      	movs	r2, #12
 80285e6:	6002      	str	r2, [r0, #0]
 80285e8:	e7f9      	b.n	80285de <_calloc_r+0x12>
 80285ea:	462a      	mov	r2, r5
 80285ec:	4621      	mov	r1, r4
 80285ee:	f001 f869 	bl	80296c4 <memset>
 80285f2:	e7f5      	b.n	80285e0 <_calloc_r+0x14>

080285f4 <malloc>:
 80285f4:	4b02      	ldr	r3, [pc, #8]	@ (8028600 <malloc+0xc>)
 80285f6:	4601      	mov	r1, r0
 80285f8:	6818      	ldr	r0, [r3, #0]
 80285fa:	f000 b82d 	b.w	8028658 <_malloc_r>
 80285fe:	bf00      	nop
 8028600:	2400007c 	.word	0x2400007c

08028604 <free>:
 8028604:	4b02      	ldr	r3, [pc, #8]	@ (8028610 <free+0xc>)
 8028606:	4601      	mov	r1, r0
 8028608:	6818      	ldr	r0, [r3, #0]
 802860a:	f001 bf13 	b.w	802a434 <_free_r>
 802860e:	bf00      	nop
 8028610:	2400007c 	.word	0x2400007c

08028614 <sbrk_aligned>:
 8028614:	b570      	push	{r4, r5, r6, lr}
 8028616:	4e0f      	ldr	r6, [pc, #60]	@ (8028654 <sbrk_aligned+0x40>)
 8028618:	460c      	mov	r4, r1
 802861a:	6831      	ldr	r1, [r6, #0]
 802861c:	4605      	mov	r5, r0
 802861e:	b911      	cbnz	r1, 8028626 <sbrk_aligned+0x12>
 8028620:	f001 f8c6 	bl	80297b0 <_sbrk_r>
 8028624:	6030      	str	r0, [r6, #0]
 8028626:	4621      	mov	r1, r4
 8028628:	4628      	mov	r0, r5
 802862a:	f001 f8c1 	bl	80297b0 <_sbrk_r>
 802862e:	1c43      	adds	r3, r0, #1
 8028630:	d103      	bne.n	802863a <sbrk_aligned+0x26>
 8028632:	f04f 34ff 	mov.w	r4, #4294967295
 8028636:	4620      	mov	r0, r4
 8028638:	bd70      	pop	{r4, r5, r6, pc}
 802863a:	1cc4      	adds	r4, r0, #3
 802863c:	f024 0403 	bic.w	r4, r4, #3
 8028640:	42a0      	cmp	r0, r4
 8028642:	d0f8      	beq.n	8028636 <sbrk_aligned+0x22>
 8028644:	1a21      	subs	r1, r4, r0
 8028646:	4628      	mov	r0, r5
 8028648:	f001 f8b2 	bl	80297b0 <_sbrk_r>
 802864c:	3001      	adds	r0, #1
 802864e:	d1f2      	bne.n	8028636 <sbrk_aligned+0x22>
 8028650:	e7ef      	b.n	8028632 <sbrk_aligned+0x1e>
 8028652:	bf00      	nop
 8028654:	2400b638 	.word	0x2400b638

08028658 <_malloc_r>:
 8028658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802865c:	1ccd      	adds	r5, r1, #3
 802865e:	f025 0503 	bic.w	r5, r5, #3
 8028662:	3508      	adds	r5, #8
 8028664:	2d0c      	cmp	r5, #12
 8028666:	bf38      	it	cc
 8028668:	250c      	movcc	r5, #12
 802866a:	2d00      	cmp	r5, #0
 802866c:	4606      	mov	r6, r0
 802866e:	db01      	blt.n	8028674 <_malloc_r+0x1c>
 8028670:	42a9      	cmp	r1, r5
 8028672:	d904      	bls.n	802867e <_malloc_r+0x26>
 8028674:	230c      	movs	r3, #12
 8028676:	6033      	str	r3, [r6, #0]
 8028678:	2000      	movs	r0, #0
 802867a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802867e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028754 <_malloc_r+0xfc>
 8028682:	f000 f869 	bl	8028758 <__malloc_lock>
 8028686:	f8d8 3000 	ldr.w	r3, [r8]
 802868a:	461c      	mov	r4, r3
 802868c:	bb44      	cbnz	r4, 80286e0 <_malloc_r+0x88>
 802868e:	4629      	mov	r1, r5
 8028690:	4630      	mov	r0, r6
 8028692:	f7ff ffbf 	bl	8028614 <sbrk_aligned>
 8028696:	1c43      	adds	r3, r0, #1
 8028698:	4604      	mov	r4, r0
 802869a:	d158      	bne.n	802874e <_malloc_r+0xf6>
 802869c:	f8d8 4000 	ldr.w	r4, [r8]
 80286a0:	4627      	mov	r7, r4
 80286a2:	2f00      	cmp	r7, #0
 80286a4:	d143      	bne.n	802872e <_malloc_r+0xd6>
 80286a6:	2c00      	cmp	r4, #0
 80286a8:	d04b      	beq.n	8028742 <_malloc_r+0xea>
 80286aa:	6823      	ldr	r3, [r4, #0]
 80286ac:	4639      	mov	r1, r7
 80286ae:	4630      	mov	r0, r6
 80286b0:	eb04 0903 	add.w	r9, r4, r3
 80286b4:	f001 f87c 	bl	80297b0 <_sbrk_r>
 80286b8:	4581      	cmp	r9, r0
 80286ba:	d142      	bne.n	8028742 <_malloc_r+0xea>
 80286bc:	6821      	ldr	r1, [r4, #0]
 80286be:	1a6d      	subs	r5, r5, r1
 80286c0:	4629      	mov	r1, r5
 80286c2:	4630      	mov	r0, r6
 80286c4:	f7ff ffa6 	bl	8028614 <sbrk_aligned>
 80286c8:	3001      	adds	r0, #1
 80286ca:	d03a      	beq.n	8028742 <_malloc_r+0xea>
 80286cc:	6823      	ldr	r3, [r4, #0]
 80286ce:	442b      	add	r3, r5
 80286d0:	6023      	str	r3, [r4, #0]
 80286d2:	f8d8 3000 	ldr.w	r3, [r8]
 80286d6:	685a      	ldr	r2, [r3, #4]
 80286d8:	bb62      	cbnz	r2, 8028734 <_malloc_r+0xdc>
 80286da:	f8c8 7000 	str.w	r7, [r8]
 80286de:	e00f      	b.n	8028700 <_malloc_r+0xa8>
 80286e0:	6822      	ldr	r2, [r4, #0]
 80286e2:	1b52      	subs	r2, r2, r5
 80286e4:	d420      	bmi.n	8028728 <_malloc_r+0xd0>
 80286e6:	2a0b      	cmp	r2, #11
 80286e8:	d917      	bls.n	802871a <_malloc_r+0xc2>
 80286ea:	1961      	adds	r1, r4, r5
 80286ec:	42a3      	cmp	r3, r4
 80286ee:	6025      	str	r5, [r4, #0]
 80286f0:	bf18      	it	ne
 80286f2:	6059      	strne	r1, [r3, #4]
 80286f4:	6863      	ldr	r3, [r4, #4]
 80286f6:	bf08      	it	eq
 80286f8:	f8c8 1000 	streq.w	r1, [r8]
 80286fc:	5162      	str	r2, [r4, r5]
 80286fe:	604b      	str	r3, [r1, #4]
 8028700:	4630      	mov	r0, r6
 8028702:	f000 f82f 	bl	8028764 <__malloc_unlock>
 8028706:	f104 000b 	add.w	r0, r4, #11
 802870a:	1d23      	adds	r3, r4, #4
 802870c:	f020 0007 	bic.w	r0, r0, #7
 8028710:	1ac2      	subs	r2, r0, r3
 8028712:	bf1c      	itt	ne
 8028714:	1a1b      	subne	r3, r3, r0
 8028716:	50a3      	strne	r3, [r4, r2]
 8028718:	e7af      	b.n	802867a <_malloc_r+0x22>
 802871a:	6862      	ldr	r2, [r4, #4]
 802871c:	42a3      	cmp	r3, r4
 802871e:	bf0c      	ite	eq
 8028720:	f8c8 2000 	streq.w	r2, [r8]
 8028724:	605a      	strne	r2, [r3, #4]
 8028726:	e7eb      	b.n	8028700 <_malloc_r+0xa8>
 8028728:	4623      	mov	r3, r4
 802872a:	6864      	ldr	r4, [r4, #4]
 802872c:	e7ae      	b.n	802868c <_malloc_r+0x34>
 802872e:	463c      	mov	r4, r7
 8028730:	687f      	ldr	r7, [r7, #4]
 8028732:	e7b6      	b.n	80286a2 <_malloc_r+0x4a>
 8028734:	461a      	mov	r2, r3
 8028736:	685b      	ldr	r3, [r3, #4]
 8028738:	42a3      	cmp	r3, r4
 802873a:	d1fb      	bne.n	8028734 <_malloc_r+0xdc>
 802873c:	2300      	movs	r3, #0
 802873e:	6053      	str	r3, [r2, #4]
 8028740:	e7de      	b.n	8028700 <_malloc_r+0xa8>
 8028742:	230c      	movs	r3, #12
 8028744:	6033      	str	r3, [r6, #0]
 8028746:	4630      	mov	r0, r6
 8028748:	f000 f80c 	bl	8028764 <__malloc_unlock>
 802874c:	e794      	b.n	8028678 <_malloc_r+0x20>
 802874e:	6005      	str	r5, [r0, #0]
 8028750:	e7d6      	b.n	8028700 <_malloc_r+0xa8>
 8028752:	bf00      	nop
 8028754:	2400b63c 	.word	0x2400b63c

08028758 <__malloc_lock>:
 8028758:	4801      	ldr	r0, [pc, #4]	@ (8028760 <__malloc_lock+0x8>)
 802875a:	f001 b876 	b.w	802984a <__retarget_lock_acquire_recursive>
 802875e:	bf00      	nop
 8028760:	2400b780 	.word	0x2400b780

08028764 <__malloc_unlock>:
 8028764:	4801      	ldr	r0, [pc, #4]	@ (802876c <__malloc_unlock+0x8>)
 8028766:	f001 b871 	b.w	802984c <__retarget_lock_release_recursive>
 802876a:	bf00      	nop
 802876c:	2400b780 	.word	0x2400b780

08028770 <srand>:
 8028770:	b538      	push	{r3, r4, r5, lr}
 8028772:	4b10      	ldr	r3, [pc, #64]	@ (80287b4 <srand+0x44>)
 8028774:	681d      	ldr	r5, [r3, #0]
 8028776:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8028778:	4604      	mov	r4, r0
 802877a:	b9b3      	cbnz	r3, 80287aa <srand+0x3a>
 802877c:	2018      	movs	r0, #24
 802877e:	f7ff ff39 	bl	80285f4 <malloc>
 8028782:	4602      	mov	r2, r0
 8028784:	6328      	str	r0, [r5, #48]	@ 0x30
 8028786:	b920      	cbnz	r0, 8028792 <srand+0x22>
 8028788:	4b0b      	ldr	r3, [pc, #44]	@ (80287b8 <srand+0x48>)
 802878a:	480c      	ldr	r0, [pc, #48]	@ (80287bc <srand+0x4c>)
 802878c:	2146      	movs	r1, #70	@ 0x46
 802878e:	f7ff fef3 	bl	8028578 <__assert_func>
 8028792:	490b      	ldr	r1, [pc, #44]	@ (80287c0 <srand+0x50>)
 8028794:	4b0b      	ldr	r3, [pc, #44]	@ (80287c4 <srand+0x54>)
 8028796:	e9c0 1300 	strd	r1, r3, [r0]
 802879a:	4b0b      	ldr	r3, [pc, #44]	@ (80287c8 <srand+0x58>)
 802879c:	6083      	str	r3, [r0, #8]
 802879e:	230b      	movs	r3, #11
 80287a0:	8183      	strh	r3, [r0, #12]
 80287a2:	2100      	movs	r1, #0
 80287a4:	2001      	movs	r0, #1
 80287a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80287aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80287ac:	2200      	movs	r2, #0
 80287ae:	611c      	str	r4, [r3, #16]
 80287b0:	615a      	str	r2, [r3, #20]
 80287b2:	bd38      	pop	{r3, r4, r5, pc}
 80287b4:	2400007c 	.word	0x2400007c
 80287b8:	08030f46 	.word	0x08030f46
 80287bc:	08030f5d 	.word	0x08030f5d
 80287c0:	abcd330e 	.word	0xabcd330e
 80287c4:	e66d1234 	.word	0xe66d1234
 80287c8:	0005deec 	.word	0x0005deec

080287cc <rand>:
 80287cc:	4b16      	ldr	r3, [pc, #88]	@ (8028828 <rand+0x5c>)
 80287ce:	b510      	push	{r4, lr}
 80287d0:	681c      	ldr	r4, [r3, #0]
 80287d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80287d4:	b9b3      	cbnz	r3, 8028804 <rand+0x38>
 80287d6:	2018      	movs	r0, #24
 80287d8:	f7ff ff0c 	bl	80285f4 <malloc>
 80287dc:	4602      	mov	r2, r0
 80287de:	6320      	str	r0, [r4, #48]	@ 0x30
 80287e0:	b920      	cbnz	r0, 80287ec <rand+0x20>
 80287e2:	4b12      	ldr	r3, [pc, #72]	@ (802882c <rand+0x60>)
 80287e4:	4812      	ldr	r0, [pc, #72]	@ (8028830 <rand+0x64>)
 80287e6:	2152      	movs	r1, #82	@ 0x52
 80287e8:	f7ff fec6 	bl	8028578 <__assert_func>
 80287ec:	4911      	ldr	r1, [pc, #68]	@ (8028834 <rand+0x68>)
 80287ee:	4b12      	ldr	r3, [pc, #72]	@ (8028838 <rand+0x6c>)
 80287f0:	e9c0 1300 	strd	r1, r3, [r0]
 80287f4:	4b11      	ldr	r3, [pc, #68]	@ (802883c <rand+0x70>)
 80287f6:	6083      	str	r3, [r0, #8]
 80287f8:	230b      	movs	r3, #11
 80287fa:	8183      	strh	r3, [r0, #12]
 80287fc:	2100      	movs	r1, #0
 80287fe:	2001      	movs	r0, #1
 8028800:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8028804:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8028806:	480e      	ldr	r0, [pc, #56]	@ (8028840 <rand+0x74>)
 8028808:	690b      	ldr	r3, [r1, #16]
 802880a:	694c      	ldr	r4, [r1, #20]
 802880c:	4a0d      	ldr	r2, [pc, #52]	@ (8028844 <rand+0x78>)
 802880e:	4358      	muls	r0, r3
 8028810:	fb02 0004 	mla	r0, r2, r4, r0
 8028814:	fba3 3202 	umull	r3, r2, r3, r2
 8028818:	3301      	adds	r3, #1
 802881a:	eb40 0002 	adc.w	r0, r0, r2
 802881e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8028822:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8028826:	bd10      	pop	{r4, pc}
 8028828:	2400007c 	.word	0x2400007c
 802882c:	08030f46 	.word	0x08030f46
 8028830:	08030f5d 	.word	0x08030f5d
 8028834:	abcd330e 	.word	0xabcd330e
 8028838:	e66d1234 	.word	0xe66d1234
 802883c:	0005deec 	.word	0x0005deec
 8028840:	5851f42d 	.word	0x5851f42d
 8028844:	4c957f2d 	.word	0x4c957f2d

08028848 <_strtol_l.constprop.0>:
 8028848:	2b24      	cmp	r3, #36	@ 0x24
 802884a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802884e:	4686      	mov	lr, r0
 8028850:	4690      	mov	r8, r2
 8028852:	d801      	bhi.n	8028858 <_strtol_l.constprop.0+0x10>
 8028854:	2b01      	cmp	r3, #1
 8028856:	d106      	bne.n	8028866 <_strtol_l.constprop.0+0x1e>
 8028858:	f000 ffcc 	bl	80297f4 <__errno>
 802885c:	2316      	movs	r3, #22
 802885e:	6003      	str	r3, [r0, #0]
 8028860:	2000      	movs	r0, #0
 8028862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028866:	4834      	ldr	r0, [pc, #208]	@ (8028938 <_strtol_l.constprop.0+0xf0>)
 8028868:	460d      	mov	r5, r1
 802886a:	462a      	mov	r2, r5
 802886c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028870:	5d06      	ldrb	r6, [r0, r4]
 8028872:	f016 0608 	ands.w	r6, r6, #8
 8028876:	d1f8      	bne.n	802886a <_strtol_l.constprop.0+0x22>
 8028878:	2c2d      	cmp	r4, #45	@ 0x2d
 802887a:	d12d      	bne.n	80288d8 <_strtol_l.constprop.0+0x90>
 802887c:	782c      	ldrb	r4, [r5, #0]
 802887e:	2601      	movs	r6, #1
 8028880:	1c95      	adds	r5, r2, #2
 8028882:	f033 0210 	bics.w	r2, r3, #16
 8028886:	d109      	bne.n	802889c <_strtol_l.constprop.0+0x54>
 8028888:	2c30      	cmp	r4, #48	@ 0x30
 802888a:	d12a      	bne.n	80288e2 <_strtol_l.constprop.0+0x9a>
 802888c:	782a      	ldrb	r2, [r5, #0]
 802888e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8028892:	2a58      	cmp	r2, #88	@ 0x58
 8028894:	d125      	bne.n	80288e2 <_strtol_l.constprop.0+0x9a>
 8028896:	786c      	ldrb	r4, [r5, #1]
 8028898:	2310      	movs	r3, #16
 802889a:	3502      	adds	r5, #2
 802889c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80288a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80288a4:	2200      	movs	r2, #0
 80288a6:	fbbc f9f3 	udiv	r9, ip, r3
 80288aa:	4610      	mov	r0, r2
 80288ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80288b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80288b4:	2f09      	cmp	r7, #9
 80288b6:	d81b      	bhi.n	80288f0 <_strtol_l.constprop.0+0xa8>
 80288b8:	463c      	mov	r4, r7
 80288ba:	42a3      	cmp	r3, r4
 80288bc:	dd27      	ble.n	802890e <_strtol_l.constprop.0+0xc6>
 80288be:	1c57      	adds	r7, r2, #1
 80288c0:	d007      	beq.n	80288d2 <_strtol_l.constprop.0+0x8a>
 80288c2:	4581      	cmp	r9, r0
 80288c4:	d320      	bcc.n	8028908 <_strtol_l.constprop.0+0xc0>
 80288c6:	d101      	bne.n	80288cc <_strtol_l.constprop.0+0x84>
 80288c8:	45a2      	cmp	sl, r4
 80288ca:	db1d      	blt.n	8028908 <_strtol_l.constprop.0+0xc0>
 80288cc:	fb00 4003 	mla	r0, r0, r3, r4
 80288d0:	2201      	movs	r2, #1
 80288d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80288d6:	e7eb      	b.n	80288b0 <_strtol_l.constprop.0+0x68>
 80288d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80288da:	bf04      	itt	eq
 80288dc:	782c      	ldrbeq	r4, [r5, #0]
 80288de:	1c95      	addeq	r5, r2, #2
 80288e0:	e7cf      	b.n	8028882 <_strtol_l.constprop.0+0x3a>
 80288e2:	2b00      	cmp	r3, #0
 80288e4:	d1da      	bne.n	802889c <_strtol_l.constprop.0+0x54>
 80288e6:	2c30      	cmp	r4, #48	@ 0x30
 80288e8:	bf0c      	ite	eq
 80288ea:	2308      	moveq	r3, #8
 80288ec:	230a      	movne	r3, #10
 80288ee:	e7d5      	b.n	802889c <_strtol_l.constprop.0+0x54>
 80288f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80288f4:	2f19      	cmp	r7, #25
 80288f6:	d801      	bhi.n	80288fc <_strtol_l.constprop.0+0xb4>
 80288f8:	3c37      	subs	r4, #55	@ 0x37
 80288fa:	e7de      	b.n	80288ba <_strtol_l.constprop.0+0x72>
 80288fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8028900:	2f19      	cmp	r7, #25
 8028902:	d804      	bhi.n	802890e <_strtol_l.constprop.0+0xc6>
 8028904:	3c57      	subs	r4, #87	@ 0x57
 8028906:	e7d8      	b.n	80288ba <_strtol_l.constprop.0+0x72>
 8028908:	f04f 32ff 	mov.w	r2, #4294967295
 802890c:	e7e1      	b.n	80288d2 <_strtol_l.constprop.0+0x8a>
 802890e:	1c53      	adds	r3, r2, #1
 8028910:	d108      	bne.n	8028924 <_strtol_l.constprop.0+0xdc>
 8028912:	2322      	movs	r3, #34	@ 0x22
 8028914:	f8ce 3000 	str.w	r3, [lr]
 8028918:	4660      	mov	r0, ip
 802891a:	f1b8 0f00 	cmp.w	r8, #0
 802891e:	d0a0      	beq.n	8028862 <_strtol_l.constprop.0+0x1a>
 8028920:	1e69      	subs	r1, r5, #1
 8028922:	e006      	b.n	8028932 <_strtol_l.constprop.0+0xea>
 8028924:	b106      	cbz	r6, 8028928 <_strtol_l.constprop.0+0xe0>
 8028926:	4240      	negs	r0, r0
 8028928:	f1b8 0f00 	cmp.w	r8, #0
 802892c:	d099      	beq.n	8028862 <_strtol_l.constprop.0+0x1a>
 802892e:	2a00      	cmp	r2, #0
 8028930:	d1f6      	bne.n	8028920 <_strtol_l.constprop.0+0xd8>
 8028932:	f8c8 1000 	str.w	r1, [r8]
 8028936:	e794      	b.n	8028862 <_strtol_l.constprop.0+0x1a>
 8028938:	08030fb6 	.word	0x08030fb6

0802893c <strtol>:
 802893c:	4613      	mov	r3, r2
 802893e:	460a      	mov	r2, r1
 8028940:	4601      	mov	r1, r0
 8028942:	4802      	ldr	r0, [pc, #8]	@ (802894c <strtol+0x10>)
 8028944:	6800      	ldr	r0, [r0, #0]
 8028946:	f7ff bf7f 	b.w	8028848 <_strtol_l.constprop.0>
 802894a:	bf00      	nop
 802894c:	2400007c 	.word	0x2400007c

08028950 <__cvt>:
 8028950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028952:	ed2d 8b02 	vpush	{d8}
 8028956:	eeb0 8b40 	vmov.f64	d8, d0
 802895a:	b085      	sub	sp, #20
 802895c:	4617      	mov	r7, r2
 802895e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028960:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028962:	ee18 2a90 	vmov	r2, s17
 8028966:	f025 0520 	bic.w	r5, r5, #32
 802896a:	2a00      	cmp	r2, #0
 802896c:	bfb6      	itet	lt
 802896e:	222d      	movlt	r2, #45	@ 0x2d
 8028970:	2200      	movge	r2, #0
 8028972:	eeb1 8b40 	vneglt.f64	d8, d0
 8028976:	2d46      	cmp	r5, #70	@ 0x46
 8028978:	460c      	mov	r4, r1
 802897a:	701a      	strb	r2, [r3, #0]
 802897c:	d004      	beq.n	8028988 <__cvt+0x38>
 802897e:	2d45      	cmp	r5, #69	@ 0x45
 8028980:	d100      	bne.n	8028984 <__cvt+0x34>
 8028982:	3401      	adds	r4, #1
 8028984:	2102      	movs	r1, #2
 8028986:	e000      	b.n	802898a <__cvt+0x3a>
 8028988:	2103      	movs	r1, #3
 802898a:	ab03      	add	r3, sp, #12
 802898c:	9301      	str	r3, [sp, #4]
 802898e:	ab02      	add	r3, sp, #8
 8028990:	9300      	str	r3, [sp, #0]
 8028992:	4622      	mov	r2, r4
 8028994:	4633      	mov	r3, r6
 8028996:	eeb0 0b48 	vmov.f64	d0, d8
 802899a:	f000 fff5 	bl	8029988 <_dtoa_r>
 802899e:	2d47      	cmp	r5, #71	@ 0x47
 80289a0:	d114      	bne.n	80289cc <__cvt+0x7c>
 80289a2:	07fb      	lsls	r3, r7, #31
 80289a4:	d50a      	bpl.n	80289bc <__cvt+0x6c>
 80289a6:	1902      	adds	r2, r0, r4
 80289a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80289ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289b0:	bf08      	it	eq
 80289b2:	9203      	streq	r2, [sp, #12]
 80289b4:	2130      	movs	r1, #48	@ 0x30
 80289b6:	9b03      	ldr	r3, [sp, #12]
 80289b8:	4293      	cmp	r3, r2
 80289ba:	d319      	bcc.n	80289f0 <__cvt+0xa0>
 80289bc:	9b03      	ldr	r3, [sp, #12]
 80289be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80289c0:	1a1b      	subs	r3, r3, r0
 80289c2:	6013      	str	r3, [r2, #0]
 80289c4:	b005      	add	sp, #20
 80289c6:	ecbd 8b02 	vpop	{d8}
 80289ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289cc:	2d46      	cmp	r5, #70	@ 0x46
 80289ce:	eb00 0204 	add.w	r2, r0, r4
 80289d2:	d1e9      	bne.n	80289a8 <__cvt+0x58>
 80289d4:	7803      	ldrb	r3, [r0, #0]
 80289d6:	2b30      	cmp	r3, #48	@ 0x30
 80289d8:	d107      	bne.n	80289ea <__cvt+0x9a>
 80289da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80289de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289e2:	bf1c      	itt	ne
 80289e4:	f1c4 0401 	rsbne	r4, r4, #1
 80289e8:	6034      	strne	r4, [r6, #0]
 80289ea:	6833      	ldr	r3, [r6, #0]
 80289ec:	441a      	add	r2, r3
 80289ee:	e7db      	b.n	80289a8 <__cvt+0x58>
 80289f0:	1c5c      	adds	r4, r3, #1
 80289f2:	9403      	str	r4, [sp, #12]
 80289f4:	7019      	strb	r1, [r3, #0]
 80289f6:	e7de      	b.n	80289b6 <__cvt+0x66>

080289f8 <__exponent>:
 80289f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80289fa:	2900      	cmp	r1, #0
 80289fc:	bfba      	itte	lt
 80289fe:	4249      	neglt	r1, r1
 8028a00:	232d      	movlt	r3, #45	@ 0x2d
 8028a02:	232b      	movge	r3, #43	@ 0x2b
 8028a04:	2909      	cmp	r1, #9
 8028a06:	7002      	strb	r2, [r0, #0]
 8028a08:	7043      	strb	r3, [r0, #1]
 8028a0a:	dd29      	ble.n	8028a60 <__exponent+0x68>
 8028a0c:	f10d 0307 	add.w	r3, sp, #7
 8028a10:	461d      	mov	r5, r3
 8028a12:	270a      	movs	r7, #10
 8028a14:	461a      	mov	r2, r3
 8028a16:	fbb1 f6f7 	udiv	r6, r1, r7
 8028a1a:	fb07 1416 	mls	r4, r7, r6, r1
 8028a1e:	3430      	adds	r4, #48	@ 0x30
 8028a20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8028a24:	460c      	mov	r4, r1
 8028a26:	2c63      	cmp	r4, #99	@ 0x63
 8028a28:	f103 33ff 	add.w	r3, r3, #4294967295
 8028a2c:	4631      	mov	r1, r6
 8028a2e:	dcf1      	bgt.n	8028a14 <__exponent+0x1c>
 8028a30:	3130      	adds	r1, #48	@ 0x30
 8028a32:	1e94      	subs	r4, r2, #2
 8028a34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028a38:	1c41      	adds	r1, r0, #1
 8028a3a:	4623      	mov	r3, r4
 8028a3c:	42ab      	cmp	r3, r5
 8028a3e:	d30a      	bcc.n	8028a56 <__exponent+0x5e>
 8028a40:	f10d 0309 	add.w	r3, sp, #9
 8028a44:	1a9b      	subs	r3, r3, r2
 8028a46:	42ac      	cmp	r4, r5
 8028a48:	bf88      	it	hi
 8028a4a:	2300      	movhi	r3, #0
 8028a4c:	3302      	adds	r3, #2
 8028a4e:	4403      	add	r3, r0
 8028a50:	1a18      	subs	r0, r3, r0
 8028a52:	b003      	add	sp, #12
 8028a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028a56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8028a5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8028a5e:	e7ed      	b.n	8028a3c <__exponent+0x44>
 8028a60:	2330      	movs	r3, #48	@ 0x30
 8028a62:	3130      	adds	r1, #48	@ 0x30
 8028a64:	7083      	strb	r3, [r0, #2]
 8028a66:	70c1      	strb	r1, [r0, #3]
 8028a68:	1d03      	adds	r3, r0, #4
 8028a6a:	e7f1      	b.n	8028a50 <__exponent+0x58>
 8028a6c:	0000      	movs	r0, r0
	...

08028a70 <_printf_float>:
 8028a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a74:	b08d      	sub	sp, #52	@ 0x34
 8028a76:	460c      	mov	r4, r1
 8028a78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8028a7c:	4616      	mov	r6, r2
 8028a7e:	461f      	mov	r7, r3
 8028a80:	4605      	mov	r5, r0
 8028a82:	f000 fe5d 	bl	8029740 <_localeconv_r>
 8028a86:	f8d0 b000 	ldr.w	fp, [r0]
 8028a8a:	4658      	mov	r0, fp
 8028a8c:	f7d7 fc78 	bl	8000380 <strlen>
 8028a90:	2300      	movs	r3, #0
 8028a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a94:	f8d8 3000 	ldr.w	r3, [r8]
 8028a98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8028a9c:	6822      	ldr	r2, [r4, #0]
 8028a9e:	9005      	str	r0, [sp, #20]
 8028aa0:	3307      	adds	r3, #7
 8028aa2:	f023 0307 	bic.w	r3, r3, #7
 8028aa6:	f103 0108 	add.w	r1, r3, #8
 8028aaa:	f8c8 1000 	str.w	r1, [r8]
 8028aae:	ed93 0b00 	vldr	d0, [r3]
 8028ab2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8028d10 <_printf_float+0x2a0>
 8028ab6:	eeb0 7bc0 	vabs.f64	d7, d0
 8028aba:	eeb4 7b46 	vcmp.f64	d7, d6
 8028abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ac2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8028ac6:	dd24      	ble.n	8028b12 <_printf_float+0xa2>
 8028ac8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8028acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ad0:	d502      	bpl.n	8028ad8 <_printf_float+0x68>
 8028ad2:	232d      	movs	r3, #45	@ 0x2d
 8028ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028ad8:	498f      	ldr	r1, [pc, #572]	@ (8028d18 <_printf_float+0x2a8>)
 8028ada:	4b90      	ldr	r3, [pc, #576]	@ (8028d1c <_printf_float+0x2ac>)
 8028adc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8028ae0:	bf94      	ite	ls
 8028ae2:	4688      	movls	r8, r1
 8028ae4:	4698      	movhi	r8, r3
 8028ae6:	f022 0204 	bic.w	r2, r2, #4
 8028aea:	2303      	movs	r3, #3
 8028aec:	6123      	str	r3, [r4, #16]
 8028aee:	6022      	str	r2, [r4, #0]
 8028af0:	f04f 0a00 	mov.w	sl, #0
 8028af4:	9700      	str	r7, [sp, #0]
 8028af6:	4633      	mov	r3, r6
 8028af8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8028afa:	4621      	mov	r1, r4
 8028afc:	4628      	mov	r0, r5
 8028afe:	f000 f9d1 	bl	8028ea4 <_printf_common>
 8028b02:	3001      	adds	r0, #1
 8028b04:	f040 8089 	bne.w	8028c1a <_printf_float+0x1aa>
 8028b08:	f04f 30ff 	mov.w	r0, #4294967295
 8028b0c:	b00d      	add	sp, #52	@ 0x34
 8028b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b12:	eeb4 0b40 	vcmp.f64	d0, d0
 8028b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b1a:	d709      	bvc.n	8028b30 <_printf_float+0xc0>
 8028b1c:	ee10 3a90 	vmov	r3, s1
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	bfbc      	itt	lt
 8028b24:	232d      	movlt	r3, #45	@ 0x2d
 8028b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8028b2a:	497d      	ldr	r1, [pc, #500]	@ (8028d20 <_printf_float+0x2b0>)
 8028b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8028d24 <_printf_float+0x2b4>)
 8028b2e:	e7d5      	b.n	8028adc <_printf_float+0x6c>
 8028b30:	6863      	ldr	r3, [r4, #4]
 8028b32:	1c59      	adds	r1, r3, #1
 8028b34:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8028b38:	d139      	bne.n	8028bae <_printf_float+0x13e>
 8028b3a:	2306      	movs	r3, #6
 8028b3c:	6063      	str	r3, [r4, #4]
 8028b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8028b42:	2300      	movs	r3, #0
 8028b44:	6022      	str	r2, [r4, #0]
 8028b46:	9303      	str	r3, [sp, #12]
 8028b48:	ab0a      	add	r3, sp, #40	@ 0x28
 8028b4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8028b4e:	ab09      	add	r3, sp, #36	@ 0x24
 8028b50:	9300      	str	r3, [sp, #0]
 8028b52:	6861      	ldr	r1, [r4, #4]
 8028b54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8028b58:	4628      	mov	r0, r5
 8028b5a:	f7ff fef9 	bl	8028950 <__cvt>
 8028b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8028b62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028b64:	4680      	mov	r8, r0
 8028b66:	d129      	bne.n	8028bbc <_printf_float+0x14c>
 8028b68:	1cc8      	adds	r0, r1, #3
 8028b6a:	db02      	blt.n	8028b72 <_printf_float+0x102>
 8028b6c:	6863      	ldr	r3, [r4, #4]
 8028b6e:	4299      	cmp	r1, r3
 8028b70:	dd41      	ble.n	8028bf6 <_printf_float+0x186>
 8028b72:	f1a9 0902 	sub.w	r9, r9, #2
 8028b76:	fa5f f989 	uxtb.w	r9, r9
 8028b7a:	3901      	subs	r1, #1
 8028b7c:	464a      	mov	r2, r9
 8028b7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8028b82:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b84:	f7ff ff38 	bl	80289f8 <__exponent>
 8028b88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028b8a:	1813      	adds	r3, r2, r0
 8028b8c:	2a01      	cmp	r2, #1
 8028b8e:	4682      	mov	sl, r0
 8028b90:	6123      	str	r3, [r4, #16]
 8028b92:	dc02      	bgt.n	8028b9a <_printf_float+0x12a>
 8028b94:	6822      	ldr	r2, [r4, #0]
 8028b96:	07d2      	lsls	r2, r2, #31
 8028b98:	d501      	bpl.n	8028b9e <_printf_float+0x12e>
 8028b9a:	3301      	adds	r3, #1
 8028b9c:	6123      	str	r3, [r4, #16]
 8028b9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	d0a6      	beq.n	8028af4 <_printf_float+0x84>
 8028ba6:	232d      	movs	r3, #45	@ 0x2d
 8028ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028bac:	e7a2      	b.n	8028af4 <_printf_float+0x84>
 8028bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8028bb2:	d1c4      	bne.n	8028b3e <_printf_float+0xce>
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d1c2      	bne.n	8028b3e <_printf_float+0xce>
 8028bb8:	2301      	movs	r3, #1
 8028bba:	e7bf      	b.n	8028b3c <_printf_float+0xcc>
 8028bbc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8028bc0:	d9db      	bls.n	8028b7a <_printf_float+0x10a>
 8028bc2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8028bc6:	d118      	bne.n	8028bfa <_printf_float+0x18a>
 8028bc8:	2900      	cmp	r1, #0
 8028bca:	6863      	ldr	r3, [r4, #4]
 8028bcc:	dd0b      	ble.n	8028be6 <_printf_float+0x176>
 8028bce:	6121      	str	r1, [r4, #16]
 8028bd0:	b913      	cbnz	r3, 8028bd8 <_printf_float+0x168>
 8028bd2:	6822      	ldr	r2, [r4, #0]
 8028bd4:	07d0      	lsls	r0, r2, #31
 8028bd6:	d502      	bpl.n	8028bde <_printf_float+0x16e>
 8028bd8:	3301      	adds	r3, #1
 8028bda:	440b      	add	r3, r1
 8028bdc:	6123      	str	r3, [r4, #16]
 8028bde:	65a1      	str	r1, [r4, #88]	@ 0x58
 8028be0:	f04f 0a00 	mov.w	sl, #0
 8028be4:	e7db      	b.n	8028b9e <_printf_float+0x12e>
 8028be6:	b913      	cbnz	r3, 8028bee <_printf_float+0x17e>
 8028be8:	6822      	ldr	r2, [r4, #0]
 8028bea:	07d2      	lsls	r2, r2, #31
 8028bec:	d501      	bpl.n	8028bf2 <_printf_float+0x182>
 8028bee:	3302      	adds	r3, #2
 8028bf0:	e7f4      	b.n	8028bdc <_printf_float+0x16c>
 8028bf2:	2301      	movs	r3, #1
 8028bf4:	e7f2      	b.n	8028bdc <_printf_float+0x16c>
 8028bf6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8028bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028bfc:	4299      	cmp	r1, r3
 8028bfe:	db05      	blt.n	8028c0c <_printf_float+0x19c>
 8028c00:	6823      	ldr	r3, [r4, #0]
 8028c02:	6121      	str	r1, [r4, #16]
 8028c04:	07d8      	lsls	r0, r3, #31
 8028c06:	d5ea      	bpl.n	8028bde <_printf_float+0x16e>
 8028c08:	1c4b      	adds	r3, r1, #1
 8028c0a:	e7e7      	b.n	8028bdc <_printf_float+0x16c>
 8028c0c:	2900      	cmp	r1, #0
 8028c0e:	bfd4      	ite	le
 8028c10:	f1c1 0202 	rsble	r2, r1, #2
 8028c14:	2201      	movgt	r2, #1
 8028c16:	4413      	add	r3, r2
 8028c18:	e7e0      	b.n	8028bdc <_printf_float+0x16c>
 8028c1a:	6823      	ldr	r3, [r4, #0]
 8028c1c:	055a      	lsls	r2, r3, #21
 8028c1e:	d407      	bmi.n	8028c30 <_printf_float+0x1c0>
 8028c20:	6923      	ldr	r3, [r4, #16]
 8028c22:	4642      	mov	r2, r8
 8028c24:	4631      	mov	r1, r6
 8028c26:	4628      	mov	r0, r5
 8028c28:	47b8      	blx	r7
 8028c2a:	3001      	adds	r0, #1
 8028c2c:	d12a      	bne.n	8028c84 <_printf_float+0x214>
 8028c2e:	e76b      	b.n	8028b08 <_printf_float+0x98>
 8028c30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8028c34:	f240 80e0 	bls.w	8028df8 <_printf_float+0x388>
 8028c38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8028c3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c44:	d133      	bne.n	8028cae <_printf_float+0x23e>
 8028c46:	4a38      	ldr	r2, [pc, #224]	@ (8028d28 <_printf_float+0x2b8>)
 8028c48:	2301      	movs	r3, #1
 8028c4a:	4631      	mov	r1, r6
 8028c4c:	4628      	mov	r0, r5
 8028c4e:	47b8      	blx	r7
 8028c50:	3001      	adds	r0, #1
 8028c52:	f43f af59 	beq.w	8028b08 <_printf_float+0x98>
 8028c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8028c5a:	4543      	cmp	r3, r8
 8028c5c:	db02      	blt.n	8028c64 <_printf_float+0x1f4>
 8028c5e:	6823      	ldr	r3, [r4, #0]
 8028c60:	07d8      	lsls	r0, r3, #31
 8028c62:	d50f      	bpl.n	8028c84 <_printf_float+0x214>
 8028c64:	9b05      	ldr	r3, [sp, #20]
 8028c66:	465a      	mov	r2, fp
 8028c68:	4631      	mov	r1, r6
 8028c6a:	4628      	mov	r0, r5
 8028c6c:	47b8      	blx	r7
 8028c6e:	3001      	adds	r0, #1
 8028c70:	f43f af4a 	beq.w	8028b08 <_printf_float+0x98>
 8028c74:	f04f 0900 	mov.w	r9, #0
 8028c78:	f108 38ff 	add.w	r8, r8, #4294967295
 8028c7c:	f104 0a1a 	add.w	sl, r4, #26
 8028c80:	45c8      	cmp	r8, r9
 8028c82:	dc09      	bgt.n	8028c98 <_printf_float+0x228>
 8028c84:	6823      	ldr	r3, [r4, #0]
 8028c86:	079b      	lsls	r3, r3, #30
 8028c88:	f100 8107 	bmi.w	8028e9a <_printf_float+0x42a>
 8028c8c:	68e0      	ldr	r0, [r4, #12]
 8028c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028c90:	4298      	cmp	r0, r3
 8028c92:	bfb8      	it	lt
 8028c94:	4618      	movlt	r0, r3
 8028c96:	e739      	b.n	8028b0c <_printf_float+0x9c>
 8028c98:	2301      	movs	r3, #1
 8028c9a:	4652      	mov	r2, sl
 8028c9c:	4631      	mov	r1, r6
 8028c9e:	4628      	mov	r0, r5
 8028ca0:	47b8      	blx	r7
 8028ca2:	3001      	adds	r0, #1
 8028ca4:	f43f af30 	beq.w	8028b08 <_printf_float+0x98>
 8028ca8:	f109 0901 	add.w	r9, r9, #1
 8028cac:	e7e8      	b.n	8028c80 <_printf_float+0x210>
 8028cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cb0:	2b00      	cmp	r3, #0
 8028cb2:	dc3b      	bgt.n	8028d2c <_printf_float+0x2bc>
 8028cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8028d28 <_printf_float+0x2b8>)
 8028cb6:	2301      	movs	r3, #1
 8028cb8:	4631      	mov	r1, r6
 8028cba:	4628      	mov	r0, r5
 8028cbc:	47b8      	blx	r7
 8028cbe:	3001      	adds	r0, #1
 8028cc0:	f43f af22 	beq.w	8028b08 <_printf_float+0x98>
 8028cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8028cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8028ccc:	d102      	bne.n	8028cd4 <_printf_float+0x264>
 8028cce:	6823      	ldr	r3, [r4, #0]
 8028cd0:	07d9      	lsls	r1, r3, #31
 8028cd2:	d5d7      	bpl.n	8028c84 <_printf_float+0x214>
 8028cd4:	9b05      	ldr	r3, [sp, #20]
 8028cd6:	465a      	mov	r2, fp
 8028cd8:	4631      	mov	r1, r6
 8028cda:	4628      	mov	r0, r5
 8028cdc:	47b8      	blx	r7
 8028cde:	3001      	adds	r0, #1
 8028ce0:	f43f af12 	beq.w	8028b08 <_printf_float+0x98>
 8028ce4:	f04f 0a00 	mov.w	sl, #0
 8028ce8:	f104 0b1a 	add.w	fp, r4, #26
 8028cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cee:	425b      	negs	r3, r3
 8028cf0:	4553      	cmp	r3, sl
 8028cf2:	dc01      	bgt.n	8028cf8 <_printf_float+0x288>
 8028cf4:	464b      	mov	r3, r9
 8028cf6:	e794      	b.n	8028c22 <_printf_float+0x1b2>
 8028cf8:	2301      	movs	r3, #1
 8028cfa:	465a      	mov	r2, fp
 8028cfc:	4631      	mov	r1, r6
 8028cfe:	4628      	mov	r0, r5
 8028d00:	47b8      	blx	r7
 8028d02:	3001      	adds	r0, #1
 8028d04:	f43f af00 	beq.w	8028b08 <_printf_float+0x98>
 8028d08:	f10a 0a01 	add.w	sl, sl, #1
 8028d0c:	e7ee      	b.n	8028cec <_printf_float+0x27c>
 8028d0e:	bf00      	nop
 8028d10:	ffffffff 	.word	0xffffffff
 8028d14:	7fefffff 	.word	0x7fefffff
 8028d18:	080310b6 	.word	0x080310b6
 8028d1c:	080310ba 	.word	0x080310ba
 8028d20:	080310be 	.word	0x080310be
 8028d24:	080310c2 	.word	0x080310c2
 8028d28:	080310c6 	.word	0x080310c6
 8028d2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028d2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8028d32:	4553      	cmp	r3, sl
 8028d34:	bfa8      	it	ge
 8028d36:	4653      	movge	r3, sl
 8028d38:	2b00      	cmp	r3, #0
 8028d3a:	4699      	mov	r9, r3
 8028d3c:	dc37      	bgt.n	8028dae <_printf_float+0x33e>
 8028d3e:	2300      	movs	r3, #0
 8028d40:	9307      	str	r3, [sp, #28]
 8028d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028d46:	f104 021a 	add.w	r2, r4, #26
 8028d4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028d4c:	9907      	ldr	r1, [sp, #28]
 8028d4e:	9306      	str	r3, [sp, #24]
 8028d50:	eba3 0309 	sub.w	r3, r3, r9
 8028d54:	428b      	cmp	r3, r1
 8028d56:	dc31      	bgt.n	8028dbc <_printf_float+0x34c>
 8028d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d5a:	459a      	cmp	sl, r3
 8028d5c:	dc3b      	bgt.n	8028dd6 <_printf_float+0x366>
 8028d5e:	6823      	ldr	r3, [r4, #0]
 8028d60:	07da      	lsls	r2, r3, #31
 8028d62:	d438      	bmi.n	8028dd6 <_printf_float+0x366>
 8028d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d66:	ebaa 0903 	sub.w	r9, sl, r3
 8028d6a:	9b06      	ldr	r3, [sp, #24]
 8028d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8028d70:	4599      	cmp	r9, r3
 8028d72:	bfa8      	it	ge
 8028d74:	4699      	movge	r9, r3
 8028d76:	f1b9 0f00 	cmp.w	r9, #0
 8028d7a:	dc34      	bgt.n	8028de6 <_printf_float+0x376>
 8028d7c:	f04f 0800 	mov.w	r8, #0
 8028d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028d84:	f104 0b1a 	add.w	fp, r4, #26
 8028d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8028d8e:	eba3 0309 	sub.w	r3, r3, r9
 8028d92:	4543      	cmp	r3, r8
 8028d94:	f77f af76 	ble.w	8028c84 <_printf_float+0x214>
 8028d98:	2301      	movs	r3, #1
 8028d9a:	465a      	mov	r2, fp
 8028d9c:	4631      	mov	r1, r6
 8028d9e:	4628      	mov	r0, r5
 8028da0:	47b8      	blx	r7
 8028da2:	3001      	adds	r0, #1
 8028da4:	f43f aeb0 	beq.w	8028b08 <_printf_float+0x98>
 8028da8:	f108 0801 	add.w	r8, r8, #1
 8028dac:	e7ec      	b.n	8028d88 <_printf_float+0x318>
 8028dae:	4642      	mov	r2, r8
 8028db0:	4631      	mov	r1, r6
 8028db2:	4628      	mov	r0, r5
 8028db4:	47b8      	blx	r7
 8028db6:	3001      	adds	r0, #1
 8028db8:	d1c1      	bne.n	8028d3e <_printf_float+0x2ce>
 8028dba:	e6a5      	b.n	8028b08 <_printf_float+0x98>
 8028dbc:	2301      	movs	r3, #1
 8028dbe:	4631      	mov	r1, r6
 8028dc0:	4628      	mov	r0, r5
 8028dc2:	9206      	str	r2, [sp, #24]
 8028dc4:	47b8      	blx	r7
 8028dc6:	3001      	adds	r0, #1
 8028dc8:	f43f ae9e 	beq.w	8028b08 <_printf_float+0x98>
 8028dcc:	9b07      	ldr	r3, [sp, #28]
 8028dce:	9a06      	ldr	r2, [sp, #24]
 8028dd0:	3301      	adds	r3, #1
 8028dd2:	9307      	str	r3, [sp, #28]
 8028dd4:	e7b9      	b.n	8028d4a <_printf_float+0x2da>
 8028dd6:	9b05      	ldr	r3, [sp, #20]
 8028dd8:	465a      	mov	r2, fp
 8028dda:	4631      	mov	r1, r6
 8028ddc:	4628      	mov	r0, r5
 8028dde:	47b8      	blx	r7
 8028de0:	3001      	adds	r0, #1
 8028de2:	d1bf      	bne.n	8028d64 <_printf_float+0x2f4>
 8028de4:	e690      	b.n	8028b08 <_printf_float+0x98>
 8028de6:	9a06      	ldr	r2, [sp, #24]
 8028de8:	464b      	mov	r3, r9
 8028dea:	4442      	add	r2, r8
 8028dec:	4631      	mov	r1, r6
 8028dee:	4628      	mov	r0, r5
 8028df0:	47b8      	blx	r7
 8028df2:	3001      	adds	r0, #1
 8028df4:	d1c2      	bne.n	8028d7c <_printf_float+0x30c>
 8028df6:	e687      	b.n	8028b08 <_printf_float+0x98>
 8028df8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028dfc:	f1b9 0f01 	cmp.w	r9, #1
 8028e00:	dc01      	bgt.n	8028e06 <_printf_float+0x396>
 8028e02:	07db      	lsls	r3, r3, #31
 8028e04:	d536      	bpl.n	8028e74 <_printf_float+0x404>
 8028e06:	2301      	movs	r3, #1
 8028e08:	4642      	mov	r2, r8
 8028e0a:	4631      	mov	r1, r6
 8028e0c:	4628      	mov	r0, r5
 8028e0e:	47b8      	blx	r7
 8028e10:	3001      	adds	r0, #1
 8028e12:	f43f ae79 	beq.w	8028b08 <_printf_float+0x98>
 8028e16:	9b05      	ldr	r3, [sp, #20]
 8028e18:	465a      	mov	r2, fp
 8028e1a:	4631      	mov	r1, r6
 8028e1c:	4628      	mov	r0, r5
 8028e1e:	47b8      	blx	r7
 8028e20:	3001      	adds	r0, #1
 8028e22:	f43f ae71 	beq.w	8028b08 <_printf_float+0x98>
 8028e26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8028e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e32:	f109 39ff 	add.w	r9, r9, #4294967295
 8028e36:	d018      	beq.n	8028e6a <_printf_float+0x3fa>
 8028e38:	464b      	mov	r3, r9
 8028e3a:	f108 0201 	add.w	r2, r8, #1
 8028e3e:	4631      	mov	r1, r6
 8028e40:	4628      	mov	r0, r5
 8028e42:	47b8      	blx	r7
 8028e44:	3001      	adds	r0, #1
 8028e46:	d10c      	bne.n	8028e62 <_printf_float+0x3f2>
 8028e48:	e65e      	b.n	8028b08 <_printf_float+0x98>
 8028e4a:	2301      	movs	r3, #1
 8028e4c:	465a      	mov	r2, fp
 8028e4e:	4631      	mov	r1, r6
 8028e50:	4628      	mov	r0, r5
 8028e52:	47b8      	blx	r7
 8028e54:	3001      	adds	r0, #1
 8028e56:	f43f ae57 	beq.w	8028b08 <_printf_float+0x98>
 8028e5a:	f108 0801 	add.w	r8, r8, #1
 8028e5e:	45c8      	cmp	r8, r9
 8028e60:	dbf3      	blt.n	8028e4a <_printf_float+0x3da>
 8028e62:	4653      	mov	r3, sl
 8028e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8028e68:	e6dc      	b.n	8028c24 <_printf_float+0x1b4>
 8028e6a:	f04f 0800 	mov.w	r8, #0
 8028e6e:	f104 0b1a 	add.w	fp, r4, #26
 8028e72:	e7f4      	b.n	8028e5e <_printf_float+0x3ee>
 8028e74:	2301      	movs	r3, #1
 8028e76:	4642      	mov	r2, r8
 8028e78:	e7e1      	b.n	8028e3e <_printf_float+0x3ce>
 8028e7a:	2301      	movs	r3, #1
 8028e7c:	464a      	mov	r2, r9
 8028e7e:	4631      	mov	r1, r6
 8028e80:	4628      	mov	r0, r5
 8028e82:	47b8      	blx	r7
 8028e84:	3001      	adds	r0, #1
 8028e86:	f43f ae3f 	beq.w	8028b08 <_printf_float+0x98>
 8028e8a:	f108 0801 	add.w	r8, r8, #1
 8028e8e:	68e3      	ldr	r3, [r4, #12]
 8028e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028e92:	1a5b      	subs	r3, r3, r1
 8028e94:	4543      	cmp	r3, r8
 8028e96:	dcf0      	bgt.n	8028e7a <_printf_float+0x40a>
 8028e98:	e6f8      	b.n	8028c8c <_printf_float+0x21c>
 8028e9a:	f04f 0800 	mov.w	r8, #0
 8028e9e:	f104 0919 	add.w	r9, r4, #25
 8028ea2:	e7f4      	b.n	8028e8e <_printf_float+0x41e>

08028ea4 <_printf_common>:
 8028ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028ea8:	4616      	mov	r6, r2
 8028eaa:	4698      	mov	r8, r3
 8028eac:	688a      	ldr	r2, [r1, #8]
 8028eae:	690b      	ldr	r3, [r1, #16]
 8028eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8028eb4:	4293      	cmp	r3, r2
 8028eb6:	bfb8      	it	lt
 8028eb8:	4613      	movlt	r3, r2
 8028eba:	6033      	str	r3, [r6, #0]
 8028ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8028ec0:	4607      	mov	r7, r0
 8028ec2:	460c      	mov	r4, r1
 8028ec4:	b10a      	cbz	r2, 8028eca <_printf_common+0x26>
 8028ec6:	3301      	adds	r3, #1
 8028ec8:	6033      	str	r3, [r6, #0]
 8028eca:	6823      	ldr	r3, [r4, #0]
 8028ecc:	0699      	lsls	r1, r3, #26
 8028ece:	bf42      	ittt	mi
 8028ed0:	6833      	ldrmi	r3, [r6, #0]
 8028ed2:	3302      	addmi	r3, #2
 8028ed4:	6033      	strmi	r3, [r6, #0]
 8028ed6:	6825      	ldr	r5, [r4, #0]
 8028ed8:	f015 0506 	ands.w	r5, r5, #6
 8028edc:	d106      	bne.n	8028eec <_printf_common+0x48>
 8028ede:	f104 0a19 	add.w	sl, r4, #25
 8028ee2:	68e3      	ldr	r3, [r4, #12]
 8028ee4:	6832      	ldr	r2, [r6, #0]
 8028ee6:	1a9b      	subs	r3, r3, r2
 8028ee8:	42ab      	cmp	r3, r5
 8028eea:	dc26      	bgt.n	8028f3a <_printf_common+0x96>
 8028eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8028ef0:	6822      	ldr	r2, [r4, #0]
 8028ef2:	3b00      	subs	r3, #0
 8028ef4:	bf18      	it	ne
 8028ef6:	2301      	movne	r3, #1
 8028ef8:	0692      	lsls	r2, r2, #26
 8028efa:	d42b      	bmi.n	8028f54 <_printf_common+0xb0>
 8028efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8028f00:	4641      	mov	r1, r8
 8028f02:	4638      	mov	r0, r7
 8028f04:	47c8      	blx	r9
 8028f06:	3001      	adds	r0, #1
 8028f08:	d01e      	beq.n	8028f48 <_printf_common+0xa4>
 8028f0a:	6823      	ldr	r3, [r4, #0]
 8028f0c:	6922      	ldr	r2, [r4, #16]
 8028f0e:	f003 0306 	and.w	r3, r3, #6
 8028f12:	2b04      	cmp	r3, #4
 8028f14:	bf02      	ittt	eq
 8028f16:	68e5      	ldreq	r5, [r4, #12]
 8028f18:	6833      	ldreq	r3, [r6, #0]
 8028f1a:	1aed      	subeq	r5, r5, r3
 8028f1c:	68a3      	ldr	r3, [r4, #8]
 8028f1e:	bf0c      	ite	eq
 8028f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028f24:	2500      	movne	r5, #0
 8028f26:	4293      	cmp	r3, r2
 8028f28:	bfc4      	itt	gt
 8028f2a:	1a9b      	subgt	r3, r3, r2
 8028f2c:	18ed      	addgt	r5, r5, r3
 8028f2e:	2600      	movs	r6, #0
 8028f30:	341a      	adds	r4, #26
 8028f32:	42b5      	cmp	r5, r6
 8028f34:	d11a      	bne.n	8028f6c <_printf_common+0xc8>
 8028f36:	2000      	movs	r0, #0
 8028f38:	e008      	b.n	8028f4c <_printf_common+0xa8>
 8028f3a:	2301      	movs	r3, #1
 8028f3c:	4652      	mov	r2, sl
 8028f3e:	4641      	mov	r1, r8
 8028f40:	4638      	mov	r0, r7
 8028f42:	47c8      	blx	r9
 8028f44:	3001      	adds	r0, #1
 8028f46:	d103      	bne.n	8028f50 <_printf_common+0xac>
 8028f48:	f04f 30ff 	mov.w	r0, #4294967295
 8028f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f50:	3501      	adds	r5, #1
 8028f52:	e7c6      	b.n	8028ee2 <_printf_common+0x3e>
 8028f54:	18e1      	adds	r1, r4, r3
 8028f56:	1c5a      	adds	r2, r3, #1
 8028f58:	2030      	movs	r0, #48	@ 0x30
 8028f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8028f5e:	4422      	add	r2, r4
 8028f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8028f68:	3302      	adds	r3, #2
 8028f6a:	e7c7      	b.n	8028efc <_printf_common+0x58>
 8028f6c:	2301      	movs	r3, #1
 8028f6e:	4622      	mov	r2, r4
 8028f70:	4641      	mov	r1, r8
 8028f72:	4638      	mov	r0, r7
 8028f74:	47c8      	blx	r9
 8028f76:	3001      	adds	r0, #1
 8028f78:	d0e6      	beq.n	8028f48 <_printf_common+0xa4>
 8028f7a:	3601      	adds	r6, #1
 8028f7c:	e7d9      	b.n	8028f32 <_printf_common+0x8e>
	...

08028f80 <_printf_i>:
 8028f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028f84:	7e0f      	ldrb	r7, [r1, #24]
 8028f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028f88:	2f78      	cmp	r7, #120	@ 0x78
 8028f8a:	4691      	mov	r9, r2
 8028f8c:	4680      	mov	r8, r0
 8028f8e:	460c      	mov	r4, r1
 8028f90:	469a      	mov	sl, r3
 8028f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8028f96:	d807      	bhi.n	8028fa8 <_printf_i+0x28>
 8028f98:	2f62      	cmp	r7, #98	@ 0x62
 8028f9a:	d80a      	bhi.n	8028fb2 <_printf_i+0x32>
 8028f9c:	2f00      	cmp	r7, #0
 8028f9e:	f000 80d2 	beq.w	8029146 <_printf_i+0x1c6>
 8028fa2:	2f58      	cmp	r7, #88	@ 0x58
 8028fa4:	f000 80b9 	beq.w	802911a <_printf_i+0x19a>
 8028fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028fb0:	e03a      	b.n	8029028 <_printf_i+0xa8>
 8028fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8028fb6:	2b15      	cmp	r3, #21
 8028fb8:	d8f6      	bhi.n	8028fa8 <_printf_i+0x28>
 8028fba:	a101      	add	r1, pc, #4	@ (adr r1, 8028fc0 <_printf_i+0x40>)
 8028fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028fc0:	08029019 	.word	0x08029019
 8028fc4:	0802902d 	.word	0x0802902d
 8028fc8:	08028fa9 	.word	0x08028fa9
 8028fcc:	08028fa9 	.word	0x08028fa9
 8028fd0:	08028fa9 	.word	0x08028fa9
 8028fd4:	08028fa9 	.word	0x08028fa9
 8028fd8:	0802902d 	.word	0x0802902d
 8028fdc:	08028fa9 	.word	0x08028fa9
 8028fe0:	08028fa9 	.word	0x08028fa9
 8028fe4:	08028fa9 	.word	0x08028fa9
 8028fe8:	08028fa9 	.word	0x08028fa9
 8028fec:	0802912d 	.word	0x0802912d
 8028ff0:	08029057 	.word	0x08029057
 8028ff4:	080290e7 	.word	0x080290e7
 8028ff8:	08028fa9 	.word	0x08028fa9
 8028ffc:	08028fa9 	.word	0x08028fa9
 8029000:	0802914f 	.word	0x0802914f
 8029004:	08028fa9 	.word	0x08028fa9
 8029008:	08029057 	.word	0x08029057
 802900c:	08028fa9 	.word	0x08028fa9
 8029010:	08028fa9 	.word	0x08028fa9
 8029014:	080290ef 	.word	0x080290ef
 8029018:	6833      	ldr	r3, [r6, #0]
 802901a:	1d1a      	adds	r2, r3, #4
 802901c:	681b      	ldr	r3, [r3, #0]
 802901e:	6032      	str	r2, [r6, #0]
 8029020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029028:	2301      	movs	r3, #1
 802902a:	e09d      	b.n	8029168 <_printf_i+0x1e8>
 802902c:	6833      	ldr	r3, [r6, #0]
 802902e:	6820      	ldr	r0, [r4, #0]
 8029030:	1d19      	adds	r1, r3, #4
 8029032:	6031      	str	r1, [r6, #0]
 8029034:	0606      	lsls	r6, r0, #24
 8029036:	d501      	bpl.n	802903c <_printf_i+0xbc>
 8029038:	681d      	ldr	r5, [r3, #0]
 802903a:	e003      	b.n	8029044 <_printf_i+0xc4>
 802903c:	0645      	lsls	r5, r0, #25
 802903e:	d5fb      	bpl.n	8029038 <_printf_i+0xb8>
 8029040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029044:	2d00      	cmp	r5, #0
 8029046:	da03      	bge.n	8029050 <_printf_i+0xd0>
 8029048:	232d      	movs	r3, #45	@ 0x2d
 802904a:	426d      	negs	r5, r5
 802904c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029050:	4859      	ldr	r0, [pc, #356]	@ (80291b8 <_printf_i+0x238>)
 8029052:	230a      	movs	r3, #10
 8029054:	e011      	b.n	802907a <_printf_i+0xfa>
 8029056:	6821      	ldr	r1, [r4, #0]
 8029058:	6833      	ldr	r3, [r6, #0]
 802905a:	0608      	lsls	r0, r1, #24
 802905c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029060:	d402      	bmi.n	8029068 <_printf_i+0xe8>
 8029062:	0649      	lsls	r1, r1, #25
 8029064:	bf48      	it	mi
 8029066:	b2ad      	uxthmi	r5, r5
 8029068:	2f6f      	cmp	r7, #111	@ 0x6f
 802906a:	4853      	ldr	r0, [pc, #332]	@ (80291b8 <_printf_i+0x238>)
 802906c:	6033      	str	r3, [r6, #0]
 802906e:	bf14      	ite	ne
 8029070:	230a      	movne	r3, #10
 8029072:	2308      	moveq	r3, #8
 8029074:	2100      	movs	r1, #0
 8029076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802907a:	6866      	ldr	r6, [r4, #4]
 802907c:	60a6      	str	r6, [r4, #8]
 802907e:	2e00      	cmp	r6, #0
 8029080:	bfa2      	ittt	ge
 8029082:	6821      	ldrge	r1, [r4, #0]
 8029084:	f021 0104 	bicge.w	r1, r1, #4
 8029088:	6021      	strge	r1, [r4, #0]
 802908a:	b90d      	cbnz	r5, 8029090 <_printf_i+0x110>
 802908c:	2e00      	cmp	r6, #0
 802908e:	d04b      	beq.n	8029128 <_printf_i+0x1a8>
 8029090:	4616      	mov	r6, r2
 8029092:	fbb5 f1f3 	udiv	r1, r5, r3
 8029096:	fb03 5711 	mls	r7, r3, r1, r5
 802909a:	5dc7      	ldrb	r7, [r0, r7]
 802909c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80290a0:	462f      	mov	r7, r5
 80290a2:	42bb      	cmp	r3, r7
 80290a4:	460d      	mov	r5, r1
 80290a6:	d9f4      	bls.n	8029092 <_printf_i+0x112>
 80290a8:	2b08      	cmp	r3, #8
 80290aa:	d10b      	bne.n	80290c4 <_printf_i+0x144>
 80290ac:	6823      	ldr	r3, [r4, #0]
 80290ae:	07df      	lsls	r7, r3, #31
 80290b0:	d508      	bpl.n	80290c4 <_printf_i+0x144>
 80290b2:	6923      	ldr	r3, [r4, #16]
 80290b4:	6861      	ldr	r1, [r4, #4]
 80290b6:	4299      	cmp	r1, r3
 80290b8:	bfde      	ittt	le
 80290ba:	2330      	movle	r3, #48	@ 0x30
 80290bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80290c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80290c4:	1b92      	subs	r2, r2, r6
 80290c6:	6122      	str	r2, [r4, #16]
 80290c8:	f8cd a000 	str.w	sl, [sp]
 80290cc:	464b      	mov	r3, r9
 80290ce:	aa03      	add	r2, sp, #12
 80290d0:	4621      	mov	r1, r4
 80290d2:	4640      	mov	r0, r8
 80290d4:	f7ff fee6 	bl	8028ea4 <_printf_common>
 80290d8:	3001      	adds	r0, #1
 80290da:	d14a      	bne.n	8029172 <_printf_i+0x1f2>
 80290dc:	f04f 30ff 	mov.w	r0, #4294967295
 80290e0:	b004      	add	sp, #16
 80290e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80290e6:	6823      	ldr	r3, [r4, #0]
 80290e8:	f043 0320 	orr.w	r3, r3, #32
 80290ec:	6023      	str	r3, [r4, #0]
 80290ee:	4833      	ldr	r0, [pc, #204]	@ (80291bc <_printf_i+0x23c>)
 80290f0:	2778      	movs	r7, #120	@ 0x78
 80290f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80290f6:	6823      	ldr	r3, [r4, #0]
 80290f8:	6831      	ldr	r1, [r6, #0]
 80290fa:	061f      	lsls	r7, r3, #24
 80290fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8029100:	d402      	bmi.n	8029108 <_printf_i+0x188>
 8029102:	065f      	lsls	r7, r3, #25
 8029104:	bf48      	it	mi
 8029106:	b2ad      	uxthmi	r5, r5
 8029108:	6031      	str	r1, [r6, #0]
 802910a:	07d9      	lsls	r1, r3, #31
 802910c:	bf44      	itt	mi
 802910e:	f043 0320 	orrmi.w	r3, r3, #32
 8029112:	6023      	strmi	r3, [r4, #0]
 8029114:	b11d      	cbz	r5, 802911e <_printf_i+0x19e>
 8029116:	2310      	movs	r3, #16
 8029118:	e7ac      	b.n	8029074 <_printf_i+0xf4>
 802911a:	4827      	ldr	r0, [pc, #156]	@ (80291b8 <_printf_i+0x238>)
 802911c:	e7e9      	b.n	80290f2 <_printf_i+0x172>
 802911e:	6823      	ldr	r3, [r4, #0]
 8029120:	f023 0320 	bic.w	r3, r3, #32
 8029124:	6023      	str	r3, [r4, #0]
 8029126:	e7f6      	b.n	8029116 <_printf_i+0x196>
 8029128:	4616      	mov	r6, r2
 802912a:	e7bd      	b.n	80290a8 <_printf_i+0x128>
 802912c:	6833      	ldr	r3, [r6, #0]
 802912e:	6825      	ldr	r5, [r4, #0]
 8029130:	6961      	ldr	r1, [r4, #20]
 8029132:	1d18      	adds	r0, r3, #4
 8029134:	6030      	str	r0, [r6, #0]
 8029136:	062e      	lsls	r6, r5, #24
 8029138:	681b      	ldr	r3, [r3, #0]
 802913a:	d501      	bpl.n	8029140 <_printf_i+0x1c0>
 802913c:	6019      	str	r1, [r3, #0]
 802913e:	e002      	b.n	8029146 <_printf_i+0x1c6>
 8029140:	0668      	lsls	r0, r5, #25
 8029142:	d5fb      	bpl.n	802913c <_printf_i+0x1bc>
 8029144:	8019      	strh	r1, [r3, #0]
 8029146:	2300      	movs	r3, #0
 8029148:	6123      	str	r3, [r4, #16]
 802914a:	4616      	mov	r6, r2
 802914c:	e7bc      	b.n	80290c8 <_printf_i+0x148>
 802914e:	6833      	ldr	r3, [r6, #0]
 8029150:	1d1a      	adds	r2, r3, #4
 8029152:	6032      	str	r2, [r6, #0]
 8029154:	681e      	ldr	r6, [r3, #0]
 8029156:	6862      	ldr	r2, [r4, #4]
 8029158:	2100      	movs	r1, #0
 802915a:	4630      	mov	r0, r6
 802915c:	f7d7 f8c0 	bl	80002e0 <memchr>
 8029160:	b108      	cbz	r0, 8029166 <_printf_i+0x1e6>
 8029162:	1b80      	subs	r0, r0, r6
 8029164:	6060      	str	r0, [r4, #4]
 8029166:	6863      	ldr	r3, [r4, #4]
 8029168:	6123      	str	r3, [r4, #16]
 802916a:	2300      	movs	r3, #0
 802916c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029170:	e7aa      	b.n	80290c8 <_printf_i+0x148>
 8029172:	6923      	ldr	r3, [r4, #16]
 8029174:	4632      	mov	r2, r6
 8029176:	4649      	mov	r1, r9
 8029178:	4640      	mov	r0, r8
 802917a:	47d0      	blx	sl
 802917c:	3001      	adds	r0, #1
 802917e:	d0ad      	beq.n	80290dc <_printf_i+0x15c>
 8029180:	6823      	ldr	r3, [r4, #0]
 8029182:	079b      	lsls	r3, r3, #30
 8029184:	d413      	bmi.n	80291ae <_printf_i+0x22e>
 8029186:	68e0      	ldr	r0, [r4, #12]
 8029188:	9b03      	ldr	r3, [sp, #12]
 802918a:	4298      	cmp	r0, r3
 802918c:	bfb8      	it	lt
 802918e:	4618      	movlt	r0, r3
 8029190:	e7a6      	b.n	80290e0 <_printf_i+0x160>
 8029192:	2301      	movs	r3, #1
 8029194:	4632      	mov	r2, r6
 8029196:	4649      	mov	r1, r9
 8029198:	4640      	mov	r0, r8
 802919a:	47d0      	blx	sl
 802919c:	3001      	adds	r0, #1
 802919e:	d09d      	beq.n	80290dc <_printf_i+0x15c>
 80291a0:	3501      	adds	r5, #1
 80291a2:	68e3      	ldr	r3, [r4, #12]
 80291a4:	9903      	ldr	r1, [sp, #12]
 80291a6:	1a5b      	subs	r3, r3, r1
 80291a8:	42ab      	cmp	r3, r5
 80291aa:	dcf2      	bgt.n	8029192 <_printf_i+0x212>
 80291ac:	e7eb      	b.n	8029186 <_printf_i+0x206>
 80291ae:	2500      	movs	r5, #0
 80291b0:	f104 0619 	add.w	r6, r4, #25
 80291b4:	e7f5      	b.n	80291a2 <_printf_i+0x222>
 80291b6:	bf00      	nop
 80291b8:	080310c8 	.word	0x080310c8
 80291bc:	080310d9 	.word	0x080310d9

080291c0 <std>:
 80291c0:	2300      	movs	r3, #0
 80291c2:	b510      	push	{r4, lr}
 80291c4:	4604      	mov	r4, r0
 80291c6:	e9c0 3300 	strd	r3, r3, [r0]
 80291ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80291ce:	6083      	str	r3, [r0, #8]
 80291d0:	8181      	strh	r1, [r0, #12]
 80291d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80291d4:	81c2      	strh	r2, [r0, #14]
 80291d6:	6183      	str	r3, [r0, #24]
 80291d8:	4619      	mov	r1, r3
 80291da:	2208      	movs	r2, #8
 80291dc:	305c      	adds	r0, #92	@ 0x5c
 80291de:	f000 fa71 	bl	80296c4 <memset>
 80291e2:	4b0d      	ldr	r3, [pc, #52]	@ (8029218 <std+0x58>)
 80291e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80291e6:	4b0d      	ldr	r3, [pc, #52]	@ (802921c <std+0x5c>)
 80291e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80291ea:	4b0d      	ldr	r3, [pc, #52]	@ (8029220 <std+0x60>)
 80291ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80291ee:	4b0d      	ldr	r3, [pc, #52]	@ (8029224 <std+0x64>)
 80291f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80291f2:	4b0d      	ldr	r3, [pc, #52]	@ (8029228 <std+0x68>)
 80291f4:	6224      	str	r4, [r4, #32]
 80291f6:	429c      	cmp	r4, r3
 80291f8:	d006      	beq.n	8029208 <std+0x48>
 80291fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80291fe:	4294      	cmp	r4, r2
 8029200:	d002      	beq.n	8029208 <std+0x48>
 8029202:	33d0      	adds	r3, #208	@ 0xd0
 8029204:	429c      	cmp	r4, r3
 8029206:	d105      	bne.n	8029214 <std+0x54>
 8029208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029210:	f000 bb1a 	b.w	8029848 <__retarget_lock_init_recursive>
 8029214:	bd10      	pop	{r4, pc}
 8029216:	bf00      	nop
 8029218:	080294c1 	.word	0x080294c1
 802921c:	080294e3 	.word	0x080294e3
 8029220:	0802951b 	.word	0x0802951b
 8029224:	0802953f 	.word	0x0802953f
 8029228:	2400b640 	.word	0x2400b640

0802922c <stdio_exit_handler>:
 802922c:	4a02      	ldr	r2, [pc, #8]	@ (8029238 <stdio_exit_handler+0xc>)
 802922e:	4903      	ldr	r1, [pc, #12]	@ (802923c <stdio_exit_handler+0x10>)
 8029230:	4803      	ldr	r0, [pc, #12]	@ (8029240 <stdio_exit_handler+0x14>)
 8029232:	f000 b87b 	b.w	802932c <_fwalk_sglue>
 8029236:	bf00      	nop
 8029238:	24000070 	.word	0x24000070
 802923c:	0802b209 	.word	0x0802b209
 8029240:	24000080 	.word	0x24000080

08029244 <cleanup_stdio>:
 8029244:	6841      	ldr	r1, [r0, #4]
 8029246:	4b0c      	ldr	r3, [pc, #48]	@ (8029278 <cleanup_stdio+0x34>)
 8029248:	4299      	cmp	r1, r3
 802924a:	b510      	push	{r4, lr}
 802924c:	4604      	mov	r4, r0
 802924e:	d001      	beq.n	8029254 <cleanup_stdio+0x10>
 8029250:	f001 ffda 	bl	802b208 <_fflush_r>
 8029254:	68a1      	ldr	r1, [r4, #8]
 8029256:	4b09      	ldr	r3, [pc, #36]	@ (802927c <cleanup_stdio+0x38>)
 8029258:	4299      	cmp	r1, r3
 802925a:	d002      	beq.n	8029262 <cleanup_stdio+0x1e>
 802925c:	4620      	mov	r0, r4
 802925e:	f001 ffd3 	bl	802b208 <_fflush_r>
 8029262:	68e1      	ldr	r1, [r4, #12]
 8029264:	4b06      	ldr	r3, [pc, #24]	@ (8029280 <cleanup_stdio+0x3c>)
 8029266:	4299      	cmp	r1, r3
 8029268:	d004      	beq.n	8029274 <cleanup_stdio+0x30>
 802926a:	4620      	mov	r0, r4
 802926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029270:	f001 bfca 	b.w	802b208 <_fflush_r>
 8029274:	bd10      	pop	{r4, pc}
 8029276:	bf00      	nop
 8029278:	2400b640 	.word	0x2400b640
 802927c:	2400b6a8 	.word	0x2400b6a8
 8029280:	2400b710 	.word	0x2400b710

08029284 <global_stdio_init.part.0>:
 8029284:	b510      	push	{r4, lr}
 8029286:	4b0b      	ldr	r3, [pc, #44]	@ (80292b4 <global_stdio_init.part.0+0x30>)
 8029288:	4c0b      	ldr	r4, [pc, #44]	@ (80292b8 <global_stdio_init.part.0+0x34>)
 802928a:	4a0c      	ldr	r2, [pc, #48]	@ (80292bc <global_stdio_init.part.0+0x38>)
 802928c:	601a      	str	r2, [r3, #0]
 802928e:	4620      	mov	r0, r4
 8029290:	2200      	movs	r2, #0
 8029292:	2104      	movs	r1, #4
 8029294:	f7ff ff94 	bl	80291c0 <std>
 8029298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802929c:	2201      	movs	r2, #1
 802929e:	2109      	movs	r1, #9
 80292a0:	f7ff ff8e 	bl	80291c0 <std>
 80292a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80292a8:	2202      	movs	r2, #2
 80292aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80292ae:	2112      	movs	r1, #18
 80292b0:	f7ff bf86 	b.w	80291c0 <std>
 80292b4:	2400b778 	.word	0x2400b778
 80292b8:	2400b640 	.word	0x2400b640
 80292bc:	0802922d 	.word	0x0802922d

080292c0 <__sfp_lock_acquire>:
 80292c0:	4801      	ldr	r0, [pc, #4]	@ (80292c8 <__sfp_lock_acquire+0x8>)
 80292c2:	f000 bac2 	b.w	802984a <__retarget_lock_acquire_recursive>
 80292c6:	bf00      	nop
 80292c8:	2400b781 	.word	0x2400b781

080292cc <__sfp_lock_release>:
 80292cc:	4801      	ldr	r0, [pc, #4]	@ (80292d4 <__sfp_lock_release+0x8>)
 80292ce:	f000 babd 	b.w	802984c <__retarget_lock_release_recursive>
 80292d2:	bf00      	nop
 80292d4:	2400b781 	.word	0x2400b781

080292d8 <__sinit>:
 80292d8:	b510      	push	{r4, lr}
 80292da:	4604      	mov	r4, r0
 80292dc:	f7ff fff0 	bl	80292c0 <__sfp_lock_acquire>
 80292e0:	6a23      	ldr	r3, [r4, #32]
 80292e2:	b11b      	cbz	r3, 80292ec <__sinit+0x14>
 80292e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80292e8:	f7ff bff0 	b.w	80292cc <__sfp_lock_release>
 80292ec:	4b04      	ldr	r3, [pc, #16]	@ (8029300 <__sinit+0x28>)
 80292ee:	6223      	str	r3, [r4, #32]
 80292f0:	4b04      	ldr	r3, [pc, #16]	@ (8029304 <__sinit+0x2c>)
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	2b00      	cmp	r3, #0
 80292f6:	d1f5      	bne.n	80292e4 <__sinit+0xc>
 80292f8:	f7ff ffc4 	bl	8029284 <global_stdio_init.part.0>
 80292fc:	e7f2      	b.n	80292e4 <__sinit+0xc>
 80292fe:	bf00      	nop
 8029300:	08029245 	.word	0x08029245
 8029304:	2400b778 	.word	0x2400b778

08029308 <fiprintf>:
 8029308:	b40e      	push	{r1, r2, r3}
 802930a:	b503      	push	{r0, r1, lr}
 802930c:	4601      	mov	r1, r0
 802930e:	ab03      	add	r3, sp, #12
 8029310:	4805      	ldr	r0, [pc, #20]	@ (8029328 <fiprintf+0x20>)
 8029312:	f853 2b04 	ldr.w	r2, [r3], #4
 8029316:	6800      	ldr	r0, [r0, #0]
 8029318:	9301      	str	r3, [sp, #4]
 802931a:	f001 fdd9 	bl	802aed0 <_vfiprintf_r>
 802931e:	b002      	add	sp, #8
 8029320:	f85d eb04 	ldr.w	lr, [sp], #4
 8029324:	b003      	add	sp, #12
 8029326:	4770      	bx	lr
 8029328:	2400007c 	.word	0x2400007c

0802932c <_fwalk_sglue>:
 802932c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029330:	4607      	mov	r7, r0
 8029332:	4688      	mov	r8, r1
 8029334:	4614      	mov	r4, r2
 8029336:	2600      	movs	r6, #0
 8029338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802933c:	f1b9 0901 	subs.w	r9, r9, #1
 8029340:	d505      	bpl.n	802934e <_fwalk_sglue+0x22>
 8029342:	6824      	ldr	r4, [r4, #0]
 8029344:	2c00      	cmp	r4, #0
 8029346:	d1f7      	bne.n	8029338 <_fwalk_sglue+0xc>
 8029348:	4630      	mov	r0, r6
 802934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802934e:	89ab      	ldrh	r3, [r5, #12]
 8029350:	2b01      	cmp	r3, #1
 8029352:	d907      	bls.n	8029364 <_fwalk_sglue+0x38>
 8029354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029358:	3301      	adds	r3, #1
 802935a:	d003      	beq.n	8029364 <_fwalk_sglue+0x38>
 802935c:	4629      	mov	r1, r5
 802935e:	4638      	mov	r0, r7
 8029360:	47c0      	blx	r8
 8029362:	4306      	orrs	r6, r0
 8029364:	3568      	adds	r5, #104	@ 0x68
 8029366:	e7e9      	b.n	802933c <_fwalk_sglue+0x10>

08029368 <iprintf>:
 8029368:	b40f      	push	{r0, r1, r2, r3}
 802936a:	b507      	push	{r0, r1, r2, lr}
 802936c:	4906      	ldr	r1, [pc, #24]	@ (8029388 <iprintf+0x20>)
 802936e:	ab04      	add	r3, sp, #16
 8029370:	6808      	ldr	r0, [r1, #0]
 8029372:	f853 2b04 	ldr.w	r2, [r3], #4
 8029376:	6881      	ldr	r1, [r0, #8]
 8029378:	9301      	str	r3, [sp, #4]
 802937a:	f001 fda9 	bl	802aed0 <_vfiprintf_r>
 802937e:	b003      	add	sp, #12
 8029380:	f85d eb04 	ldr.w	lr, [sp], #4
 8029384:	b004      	add	sp, #16
 8029386:	4770      	bx	lr
 8029388:	2400007c 	.word	0x2400007c

0802938c <putchar>:
 802938c:	4b02      	ldr	r3, [pc, #8]	@ (8029398 <putchar+0xc>)
 802938e:	4601      	mov	r1, r0
 8029390:	6818      	ldr	r0, [r3, #0]
 8029392:	6882      	ldr	r2, [r0, #8]
 8029394:	f001 bfc2 	b.w	802b31c <_putc_r>
 8029398:	2400007c 	.word	0x2400007c

0802939c <_puts_r>:
 802939c:	6a03      	ldr	r3, [r0, #32]
 802939e:	b570      	push	{r4, r5, r6, lr}
 80293a0:	6884      	ldr	r4, [r0, #8]
 80293a2:	4605      	mov	r5, r0
 80293a4:	460e      	mov	r6, r1
 80293a6:	b90b      	cbnz	r3, 80293ac <_puts_r+0x10>
 80293a8:	f7ff ff96 	bl	80292d8 <__sinit>
 80293ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80293ae:	07db      	lsls	r3, r3, #31
 80293b0:	d405      	bmi.n	80293be <_puts_r+0x22>
 80293b2:	89a3      	ldrh	r3, [r4, #12]
 80293b4:	0598      	lsls	r0, r3, #22
 80293b6:	d402      	bmi.n	80293be <_puts_r+0x22>
 80293b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80293ba:	f000 fa46 	bl	802984a <__retarget_lock_acquire_recursive>
 80293be:	89a3      	ldrh	r3, [r4, #12]
 80293c0:	0719      	lsls	r1, r3, #28
 80293c2:	d502      	bpl.n	80293ca <_puts_r+0x2e>
 80293c4:	6923      	ldr	r3, [r4, #16]
 80293c6:	2b00      	cmp	r3, #0
 80293c8:	d135      	bne.n	8029436 <_puts_r+0x9a>
 80293ca:	4621      	mov	r1, r4
 80293cc:	4628      	mov	r0, r5
 80293ce:	f000 f8f9 	bl	80295c4 <__swsetup_r>
 80293d2:	b380      	cbz	r0, 8029436 <_puts_r+0x9a>
 80293d4:	f04f 35ff 	mov.w	r5, #4294967295
 80293d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80293da:	07da      	lsls	r2, r3, #31
 80293dc:	d405      	bmi.n	80293ea <_puts_r+0x4e>
 80293de:	89a3      	ldrh	r3, [r4, #12]
 80293e0:	059b      	lsls	r3, r3, #22
 80293e2:	d402      	bmi.n	80293ea <_puts_r+0x4e>
 80293e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80293e6:	f000 fa31 	bl	802984c <__retarget_lock_release_recursive>
 80293ea:	4628      	mov	r0, r5
 80293ec:	bd70      	pop	{r4, r5, r6, pc}
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	da04      	bge.n	80293fc <_puts_r+0x60>
 80293f2:	69a2      	ldr	r2, [r4, #24]
 80293f4:	429a      	cmp	r2, r3
 80293f6:	dc17      	bgt.n	8029428 <_puts_r+0x8c>
 80293f8:	290a      	cmp	r1, #10
 80293fa:	d015      	beq.n	8029428 <_puts_r+0x8c>
 80293fc:	6823      	ldr	r3, [r4, #0]
 80293fe:	1c5a      	adds	r2, r3, #1
 8029400:	6022      	str	r2, [r4, #0]
 8029402:	7019      	strb	r1, [r3, #0]
 8029404:	68a3      	ldr	r3, [r4, #8]
 8029406:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802940a:	3b01      	subs	r3, #1
 802940c:	60a3      	str	r3, [r4, #8]
 802940e:	2900      	cmp	r1, #0
 8029410:	d1ed      	bne.n	80293ee <_puts_r+0x52>
 8029412:	2b00      	cmp	r3, #0
 8029414:	da11      	bge.n	802943a <_puts_r+0x9e>
 8029416:	4622      	mov	r2, r4
 8029418:	210a      	movs	r1, #10
 802941a:	4628      	mov	r0, r5
 802941c:	f000 f893 	bl	8029546 <__swbuf_r>
 8029420:	3001      	adds	r0, #1
 8029422:	d0d7      	beq.n	80293d4 <_puts_r+0x38>
 8029424:	250a      	movs	r5, #10
 8029426:	e7d7      	b.n	80293d8 <_puts_r+0x3c>
 8029428:	4622      	mov	r2, r4
 802942a:	4628      	mov	r0, r5
 802942c:	f000 f88b 	bl	8029546 <__swbuf_r>
 8029430:	3001      	adds	r0, #1
 8029432:	d1e7      	bne.n	8029404 <_puts_r+0x68>
 8029434:	e7ce      	b.n	80293d4 <_puts_r+0x38>
 8029436:	3e01      	subs	r6, #1
 8029438:	e7e4      	b.n	8029404 <_puts_r+0x68>
 802943a:	6823      	ldr	r3, [r4, #0]
 802943c:	1c5a      	adds	r2, r3, #1
 802943e:	6022      	str	r2, [r4, #0]
 8029440:	220a      	movs	r2, #10
 8029442:	701a      	strb	r2, [r3, #0]
 8029444:	e7ee      	b.n	8029424 <_puts_r+0x88>
	...

08029448 <puts>:
 8029448:	4b02      	ldr	r3, [pc, #8]	@ (8029454 <puts+0xc>)
 802944a:	4601      	mov	r1, r0
 802944c:	6818      	ldr	r0, [r3, #0]
 802944e:	f7ff bfa5 	b.w	802939c <_puts_r>
 8029452:	bf00      	nop
 8029454:	2400007c 	.word	0x2400007c

08029458 <sniprintf>:
 8029458:	b40c      	push	{r2, r3}
 802945a:	b530      	push	{r4, r5, lr}
 802945c:	4b17      	ldr	r3, [pc, #92]	@ (80294bc <sniprintf+0x64>)
 802945e:	1e0c      	subs	r4, r1, #0
 8029460:	681d      	ldr	r5, [r3, #0]
 8029462:	b09d      	sub	sp, #116	@ 0x74
 8029464:	da08      	bge.n	8029478 <sniprintf+0x20>
 8029466:	238b      	movs	r3, #139	@ 0x8b
 8029468:	602b      	str	r3, [r5, #0]
 802946a:	f04f 30ff 	mov.w	r0, #4294967295
 802946e:	b01d      	add	sp, #116	@ 0x74
 8029470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029474:	b002      	add	sp, #8
 8029476:	4770      	bx	lr
 8029478:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802947c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8029480:	bf14      	ite	ne
 8029482:	f104 33ff 	addne.w	r3, r4, #4294967295
 8029486:	4623      	moveq	r3, r4
 8029488:	9304      	str	r3, [sp, #16]
 802948a:	9307      	str	r3, [sp, #28]
 802948c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8029490:	9002      	str	r0, [sp, #8]
 8029492:	9006      	str	r0, [sp, #24]
 8029494:	f8ad 3016 	strh.w	r3, [sp, #22]
 8029498:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802949a:	ab21      	add	r3, sp, #132	@ 0x84
 802949c:	a902      	add	r1, sp, #8
 802949e:	4628      	mov	r0, r5
 80294a0:	9301      	str	r3, [sp, #4]
 80294a2:	f001 fbef 	bl	802ac84 <_svfiprintf_r>
 80294a6:	1c43      	adds	r3, r0, #1
 80294a8:	bfbc      	itt	lt
 80294aa:	238b      	movlt	r3, #139	@ 0x8b
 80294ac:	602b      	strlt	r3, [r5, #0]
 80294ae:	2c00      	cmp	r4, #0
 80294b0:	d0dd      	beq.n	802946e <sniprintf+0x16>
 80294b2:	9b02      	ldr	r3, [sp, #8]
 80294b4:	2200      	movs	r2, #0
 80294b6:	701a      	strb	r2, [r3, #0]
 80294b8:	e7d9      	b.n	802946e <sniprintf+0x16>
 80294ba:	bf00      	nop
 80294bc:	2400007c 	.word	0x2400007c

080294c0 <__sread>:
 80294c0:	b510      	push	{r4, lr}
 80294c2:	460c      	mov	r4, r1
 80294c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294c8:	f000 f960 	bl	802978c <_read_r>
 80294cc:	2800      	cmp	r0, #0
 80294ce:	bfab      	itete	ge
 80294d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80294d2:	89a3      	ldrhlt	r3, [r4, #12]
 80294d4:	181b      	addge	r3, r3, r0
 80294d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80294da:	bfac      	ite	ge
 80294dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80294de:	81a3      	strhlt	r3, [r4, #12]
 80294e0:	bd10      	pop	{r4, pc}

080294e2 <__swrite>:
 80294e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80294e6:	461f      	mov	r7, r3
 80294e8:	898b      	ldrh	r3, [r1, #12]
 80294ea:	05db      	lsls	r3, r3, #23
 80294ec:	4605      	mov	r5, r0
 80294ee:	460c      	mov	r4, r1
 80294f0:	4616      	mov	r6, r2
 80294f2:	d505      	bpl.n	8029500 <__swrite+0x1e>
 80294f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294f8:	2302      	movs	r3, #2
 80294fa:	2200      	movs	r2, #0
 80294fc:	f000 f934 	bl	8029768 <_lseek_r>
 8029500:	89a3      	ldrh	r3, [r4, #12]
 8029502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802950a:	81a3      	strh	r3, [r4, #12]
 802950c:	4632      	mov	r2, r6
 802950e:	463b      	mov	r3, r7
 8029510:	4628      	mov	r0, r5
 8029512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029516:	f000 b95b 	b.w	80297d0 <_write_r>

0802951a <__sseek>:
 802951a:	b510      	push	{r4, lr}
 802951c:	460c      	mov	r4, r1
 802951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029522:	f000 f921 	bl	8029768 <_lseek_r>
 8029526:	1c43      	adds	r3, r0, #1
 8029528:	89a3      	ldrh	r3, [r4, #12]
 802952a:	bf15      	itete	ne
 802952c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802952e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029536:	81a3      	strheq	r3, [r4, #12]
 8029538:	bf18      	it	ne
 802953a:	81a3      	strhne	r3, [r4, #12]
 802953c:	bd10      	pop	{r4, pc}

0802953e <__sclose>:
 802953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029542:	f000 b901 	b.w	8029748 <_close_r>

08029546 <__swbuf_r>:
 8029546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029548:	460e      	mov	r6, r1
 802954a:	4614      	mov	r4, r2
 802954c:	4605      	mov	r5, r0
 802954e:	b118      	cbz	r0, 8029558 <__swbuf_r+0x12>
 8029550:	6a03      	ldr	r3, [r0, #32]
 8029552:	b90b      	cbnz	r3, 8029558 <__swbuf_r+0x12>
 8029554:	f7ff fec0 	bl	80292d8 <__sinit>
 8029558:	69a3      	ldr	r3, [r4, #24]
 802955a:	60a3      	str	r3, [r4, #8]
 802955c:	89a3      	ldrh	r3, [r4, #12]
 802955e:	071a      	lsls	r2, r3, #28
 8029560:	d501      	bpl.n	8029566 <__swbuf_r+0x20>
 8029562:	6923      	ldr	r3, [r4, #16]
 8029564:	b943      	cbnz	r3, 8029578 <__swbuf_r+0x32>
 8029566:	4621      	mov	r1, r4
 8029568:	4628      	mov	r0, r5
 802956a:	f000 f82b 	bl	80295c4 <__swsetup_r>
 802956e:	b118      	cbz	r0, 8029578 <__swbuf_r+0x32>
 8029570:	f04f 37ff 	mov.w	r7, #4294967295
 8029574:	4638      	mov	r0, r7
 8029576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029578:	6823      	ldr	r3, [r4, #0]
 802957a:	6922      	ldr	r2, [r4, #16]
 802957c:	1a98      	subs	r0, r3, r2
 802957e:	6963      	ldr	r3, [r4, #20]
 8029580:	b2f6      	uxtb	r6, r6
 8029582:	4283      	cmp	r3, r0
 8029584:	4637      	mov	r7, r6
 8029586:	dc05      	bgt.n	8029594 <__swbuf_r+0x4e>
 8029588:	4621      	mov	r1, r4
 802958a:	4628      	mov	r0, r5
 802958c:	f001 fe3c 	bl	802b208 <_fflush_r>
 8029590:	2800      	cmp	r0, #0
 8029592:	d1ed      	bne.n	8029570 <__swbuf_r+0x2a>
 8029594:	68a3      	ldr	r3, [r4, #8]
 8029596:	3b01      	subs	r3, #1
 8029598:	60a3      	str	r3, [r4, #8]
 802959a:	6823      	ldr	r3, [r4, #0]
 802959c:	1c5a      	adds	r2, r3, #1
 802959e:	6022      	str	r2, [r4, #0]
 80295a0:	701e      	strb	r6, [r3, #0]
 80295a2:	6962      	ldr	r2, [r4, #20]
 80295a4:	1c43      	adds	r3, r0, #1
 80295a6:	429a      	cmp	r2, r3
 80295a8:	d004      	beq.n	80295b4 <__swbuf_r+0x6e>
 80295aa:	89a3      	ldrh	r3, [r4, #12]
 80295ac:	07db      	lsls	r3, r3, #31
 80295ae:	d5e1      	bpl.n	8029574 <__swbuf_r+0x2e>
 80295b0:	2e0a      	cmp	r6, #10
 80295b2:	d1df      	bne.n	8029574 <__swbuf_r+0x2e>
 80295b4:	4621      	mov	r1, r4
 80295b6:	4628      	mov	r0, r5
 80295b8:	f001 fe26 	bl	802b208 <_fflush_r>
 80295bc:	2800      	cmp	r0, #0
 80295be:	d0d9      	beq.n	8029574 <__swbuf_r+0x2e>
 80295c0:	e7d6      	b.n	8029570 <__swbuf_r+0x2a>
	...

080295c4 <__swsetup_r>:
 80295c4:	b538      	push	{r3, r4, r5, lr}
 80295c6:	4b29      	ldr	r3, [pc, #164]	@ (802966c <__swsetup_r+0xa8>)
 80295c8:	4605      	mov	r5, r0
 80295ca:	6818      	ldr	r0, [r3, #0]
 80295cc:	460c      	mov	r4, r1
 80295ce:	b118      	cbz	r0, 80295d8 <__swsetup_r+0x14>
 80295d0:	6a03      	ldr	r3, [r0, #32]
 80295d2:	b90b      	cbnz	r3, 80295d8 <__swsetup_r+0x14>
 80295d4:	f7ff fe80 	bl	80292d8 <__sinit>
 80295d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80295dc:	0719      	lsls	r1, r3, #28
 80295de:	d422      	bmi.n	8029626 <__swsetup_r+0x62>
 80295e0:	06da      	lsls	r2, r3, #27
 80295e2:	d407      	bmi.n	80295f4 <__swsetup_r+0x30>
 80295e4:	2209      	movs	r2, #9
 80295e6:	602a      	str	r2, [r5, #0]
 80295e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80295ec:	81a3      	strh	r3, [r4, #12]
 80295ee:	f04f 30ff 	mov.w	r0, #4294967295
 80295f2:	e033      	b.n	802965c <__swsetup_r+0x98>
 80295f4:	0758      	lsls	r0, r3, #29
 80295f6:	d512      	bpl.n	802961e <__swsetup_r+0x5a>
 80295f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80295fa:	b141      	cbz	r1, 802960e <__swsetup_r+0x4a>
 80295fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029600:	4299      	cmp	r1, r3
 8029602:	d002      	beq.n	802960a <__swsetup_r+0x46>
 8029604:	4628      	mov	r0, r5
 8029606:	f000 ff15 	bl	802a434 <_free_r>
 802960a:	2300      	movs	r3, #0
 802960c:	6363      	str	r3, [r4, #52]	@ 0x34
 802960e:	89a3      	ldrh	r3, [r4, #12]
 8029610:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029614:	81a3      	strh	r3, [r4, #12]
 8029616:	2300      	movs	r3, #0
 8029618:	6063      	str	r3, [r4, #4]
 802961a:	6923      	ldr	r3, [r4, #16]
 802961c:	6023      	str	r3, [r4, #0]
 802961e:	89a3      	ldrh	r3, [r4, #12]
 8029620:	f043 0308 	orr.w	r3, r3, #8
 8029624:	81a3      	strh	r3, [r4, #12]
 8029626:	6923      	ldr	r3, [r4, #16]
 8029628:	b94b      	cbnz	r3, 802963e <__swsetup_r+0x7a>
 802962a:	89a3      	ldrh	r3, [r4, #12]
 802962c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029634:	d003      	beq.n	802963e <__swsetup_r+0x7a>
 8029636:	4621      	mov	r1, r4
 8029638:	4628      	mov	r0, r5
 802963a:	f001 fe33 	bl	802b2a4 <__smakebuf_r>
 802963e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029642:	f013 0201 	ands.w	r2, r3, #1
 8029646:	d00a      	beq.n	802965e <__swsetup_r+0x9a>
 8029648:	2200      	movs	r2, #0
 802964a:	60a2      	str	r2, [r4, #8]
 802964c:	6962      	ldr	r2, [r4, #20]
 802964e:	4252      	negs	r2, r2
 8029650:	61a2      	str	r2, [r4, #24]
 8029652:	6922      	ldr	r2, [r4, #16]
 8029654:	b942      	cbnz	r2, 8029668 <__swsetup_r+0xa4>
 8029656:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802965a:	d1c5      	bne.n	80295e8 <__swsetup_r+0x24>
 802965c:	bd38      	pop	{r3, r4, r5, pc}
 802965e:	0799      	lsls	r1, r3, #30
 8029660:	bf58      	it	pl
 8029662:	6962      	ldrpl	r2, [r4, #20]
 8029664:	60a2      	str	r2, [r4, #8]
 8029666:	e7f4      	b.n	8029652 <__swsetup_r+0x8e>
 8029668:	2000      	movs	r0, #0
 802966a:	e7f7      	b.n	802965c <__swsetup_r+0x98>
 802966c:	2400007c 	.word	0x2400007c

08029670 <memcmp>:
 8029670:	b510      	push	{r4, lr}
 8029672:	3901      	subs	r1, #1
 8029674:	4402      	add	r2, r0
 8029676:	4290      	cmp	r0, r2
 8029678:	d101      	bne.n	802967e <memcmp+0xe>
 802967a:	2000      	movs	r0, #0
 802967c:	e005      	b.n	802968a <memcmp+0x1a>
 802967e:	7803      	ldrb	r3, [r0, #0]
 8029680:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029684:	42a3      	cmp	r3, r4
 8029686:	d001      	beq.n	802968c <memcmp+0x1c>
 8029688:	1b18      	subs	r0, r3, r4
 802968a:	bd10      	pop	{r4, pc}
 802968c:	3001      	adds	r0, #1
 802968e:	e7f2      	b.n	8029676 <memcmp+0x6>

08029690 <memmove>:
 8029690:	4288      	cmp	r0, r1
 8029692:	b510      	push	{r4, lr}
 8029694:	eb01 0402 	add.w	r4, r1, r2
 8029698:	d902      	bls.n	80296a0 <memmove+0x10>
 802969a:	4284      	cmp	r4, r0
 802969c:	4623      	mov	r3, r4
 802969e:	d807      	bhi.n	80296b0 <memmove+0x20>
 80296a0:	1e43      	subs	r3, r0, #1
 80296a2:	42a1      	cmp	r1, r4
 80296a4:	d008      	beq.n	80296b8 <memmove+0x28>
 80296a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80296aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80296ae:	e7f8      	b.n	80296a2 <memmove+0x12>
 80296b0:	4402      	add	r2, r0
 80296b2:	4601      	mov	r1, r0
 80296b4:	428a      	cmp	r2, r1
 80296b6:	d100      	bne.n	80296ba <memmove+0x2a>
 80296b8:	bd10      	pop	{r4, pc}
 80296ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80296be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80296c2:	e7f7      	b.n	80296b4 <memmove+0x24>

080296c4 <memset>:
 80296c4:	4402      	add	r2, r0
 80296c6:	4603      	mov	r3, r0
 80296c8:	4293      	cmp	r3, r2
 80296ca:	d100      	bne.n	80296ce <memset+0xa>
 80296cc:	4770      	bx	lr
 80296ce:	f803 1b01 	strb.w	r1, [r3], #1
 80296d2:	e7f9      	b.n	80296c8 <memset+0x4>

080296d4 <strchr>:
 80296d4:	b2c9      	uxtb	r1, r1
 80296d6:	4603      	mov	r3, r0
 80296d8:	4618      	mov	r0, r3
 80296da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80296de:	b112      	cbz	r2, 80296e6 <strchr+0x12>
 80296e0:	428a      	cmp	r2, r1
 80296e2:	d1f9      	bne.n	80296d8 <strchr+0x4>
 80296e4:	4770      	bx	lr
 80296e6:	2900      	cmp	r1, #0
 80296e8:	bf18      	it	ne
 80296ea:	2000      	movne	r0, #0
 80296ec:	4770      	bx	lr

080296ee <strncmp>:
 80296ee:	b510      	push	{r4, lr}
 80296f0:	b16a      	cbz	r2, 802970e <strncmp+0x20>
 80296f2:	3901      	subs	r1, #1
 80296f4:	1884      	adds	r4, r0, r2
 80296f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80296fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80296fe:	429a      	cmp	r2, r3
 8029700:	d103      	bne.n	802970a <strncmp+0x1c>
 8029702:	42a0      	cmp	r0, r4
 8029704:	d001      	beq.n	802970a <strncmp+0x1c>
 8029706:	2a00      	cmp	r2, #0
 8029708:	d1f5      	bne.n	80296f6 <strncmp+0x8>
 802970a:	1ad0      	subs	r0, r2, r3
 802970c:	bd10      	pop	{r4, pc}
 802970e:	4610      	mov	r0, r2
 8029710:	e7fc      	b.n	802970c <strncmp+0x1e>

08029712 <strrchr>:
 8029712:	b538      	push	{r3, r4, r5, lr}
 8029714:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8029718:	4603      	mov	r3, r0
 802971a:	d10e      	bne.n	802973a <strrchr+0x28>
 802971c:	4621      	mov	r1, r4
 802971e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029722:	f7ff bfd7 	b.w	80296d4 <strchr>
 8029726:	1c43      	adds	r3, r0, #1
 8029728:	4605      	mov	r5, r0
 802972a:	4621      	mov	r1, r4
 802972c:	4618      	mov	r0, r3
 802972e:	f7ff ffd1 	bl	80296d4 <strchr>
 8029732:	2800      	cmp	r0, #0
 8029734:	d1f7      	bne.n	8029726 <strrchr+0x14>
 8029736:	4628      	mov	r0, r5
 8029738:	bd38      	pop	{r3, r4, r5, pc}
 802973a:	2500      	movs	r5, #0
 802973c:	e7f5      	b.n	802972a <strrchr+0x18>
	...

08029740 <_localeconv_r>:
 8029740:	4800      	ldr	r0, [pc, #0]	@ (8029744 <_localeconv_r+0x4>)
 8029742:	4770      	bx	lr
 8029744:	240001bc 	.word	0x240001bc

08029748 <_close_r>:
 8029748:	b538      	push	{r3, r4, r5, lr}
 802974a:	4d06      	ldr	r5, [pc, #24]	@ (8029764 <_close_r+0x1c>)
 802974c:	2300      	movs	r3, #0
 802974e:	4604      	mov	r4, r0
 8029750:	4608      	mov	r0, r1
 8029752:	602b      	str	r3, [r5, #0]
 8029754:	f7e8 fe12 	bl	801237c <_close>
 8029758:	1c43      	adds	r3, r0, #1
 802975a:	d102      	bne.n	8029762 <_close_r+0x1a>
 802975c:	682b      	ldr	r3, [r5, #0]
 802975e:	b103      	cbz	r3, 8029762 <_close_r+0x1a>
 8029760:	6023      	str	r3, [r4, #0]
 8029762:	bd38      	pop	{r3, r4, r5, pc}
 8029764:	2400b77c 	.word	0x2400b77c

08029768 <_lseek_r>:
 8029768:	b538      	push	{r3, r4, r5, lr}
 802976a:	4d07      	ldr	r5, [pc, #28]	@ (8029788 <_lseek_r+0x20>)
 802976c:	4604      	mov	r4, r0
 802976e:	4608      	mov	r0, r1
 8029770:	4611      	mov	r1, r2
 8029772:	2200      	movs	r2, #0
 8029774:	602a      	str	r2, [r5, #0]
 8029776:	461a      	mov	r2, r3
 8029778:	f7e8 fe27 	bl	80123ca <_lseek>
 802977c:	1c43      	adds	r3, r0, #1
 802977e:	d102      	bne.n	8029786 <_lseek_r+0x1e>
 8029780:	682b      	ldr	r3, [r5, #0]
 8029782:	b103      	cbz	r3, 8029786 <_lseek_r+0x1e>
 8029784:	6023      	str	r3, [r4, #0]
 8029786:	bd38      	pop	{r3, r4, r5, pc}
 8029788:	2400b77c 	.word	0x2400b77c

0802978c <_read_r>:
 802978c:	b538      	push	{r3, r4, r5, lr}
 802978e:	4d07      	ldr	r5, [pc, #28]	@ (80297ac <_read_r+0x20>)
 8029790:	4604      	mov	r4, r0
 8029792:	4608      	mov	r0, r1
 8029794:	4611      	mov	r1, r2
 8029796:	2200      	movs	r2, #0
 8029798:	602a      	str	r2, [r5, #0]
 802979a:	461a      	mov	r2, r3
 802979c:	f7e8 fdb5 	bl	801230a <_read>
 80297a0:	1c43      	adds	r3, r0, #1
 80297a2:	d102      	bne.n	80297aa <_read_r+0x1e>
 80297a4:	682b      	ldr	r3, [r5, #0]
 80297a6:	b103      	cbz	r3, 80297aa <_read_r+0x1e>
 80297a8:	6023      	str	r3, [r4, #0]
 80297aa:	bd38      	pop	{r3, r4, r5, pc}
 80297ac:	2400b77c 	.word	0x2400b77c

080297b0 <_sbrk_r>:
 80297b0:	b538      	push	{r3, r4, r5, lr}
 80297b2:	4d06      	ldr	r5, [pc, #24]	@ (80297cc <_sbrk_r+0x1c>)
 80297b4:	2300      	movs	r3, #0
 80297b6:	4604      	mov	r4, r0
 80297b8:	4608      	mov	r0, r1
 80297ba:	602b      	str	r3, [r5, #0]
 80297bc:	f7e8 fe12 	bl	80123e4 <_sbrk>
 80297c0:	1c43      	adds	r3, r0, #1
 80297c2:	d102      	bne.n	80297ca <_sbrk_r+0x1a>
 80297c4:	682b      	ldr	r3, [r5, #0]
 80297c6:	b103      	cbz	r3, 80297ca <_sbrk_r+0x1a>
 80297c8:	6023      	str	r3, [r4, #0]
 80297ca:	bd38      	pop	{r3, r4, r5, pc}
 80297cc:	2400b77c 	.word	0x2400b77c

080297d0 <_write_r>:
 80297d0:	b538      	push	{r3, r4, r5, lr}
 80297d2:	4d07      	ldr	r5, [pc, #28]	@ (80297f0 <_write_r+0x20>)
 80297d4:	4604      	mov	r4, r0
 80297d6:	4608      	mov	r0, r1
 80297d8:	4611      	mov	r1, r2
 80297da:	2200      	movs	r2, #0
 80297dc:	602a      	str	r2, [r5, #0]
 80297de:	461a      	mov	r2, r3
 80297e0:	f7e8 fdb0 	bl	8012344 <_write>
 80297e4:	1c43      	adds	r3, r0, #1
 80297e6:	d102      	bne.n	80297ee <_write_r+0x1e>
 80297e8:	682b      	ldr	r3, [r5, #0]
 80297ea:	b103      	cbz	r3, 80297ee <_write_r+0x1e>
 80297ec:	6023      	str	r3, [r4, #0]
 80297ee:	bd38      	pop	{r3, r4, r5, pc}
 80297f0:	2400b77c 	.word	0x2400b77c

080297f4 <__errno>:
 80297f4:	4b01      	ldr	r3, [pc, #4]	@ (80297fc <__errno+0x8>)
 80297f6:	6818      	ldr	r0, [r3, #0]
 80297f8:	4770      	bx	lr
 80297fa:	bf00      	nop
 80297fc:	2400007c 	.word	0x2400007c

08029800 <__libc_init_array>:
 8029800:	b570      	push	{r4, r5, r6, lr}
 8029802:	4d0d      	ldr	r5, [pc, #52]	@ (8029838 <__libc_init_array+0x38>)
 8029804:	4c0d      	ldr	r4, [pc, #52]	@ (802983c <__libc_init_array+0x3c>)
 8029806:	1b64      	subs	r4, r4, r5
 8029808:	10a4      	asrs	r4, r4, #2
 802980a:	2600      	movs	r6, #0
 802980c:	42a6      	cmp	r6, r4
 802980e:	d109      	bne.n	8029824 <__libc_init_array+0x24>
 8029810:	4d0b      	ldr	r5, [pc, #44]	@ (8029840 <__libc_init_array+0x40>)
 8029812:	4c0c      	ldr	r4, [pc, #48]	@ (8029844 <__libc_init_array+0x44>)
 8029814:	f001 fe72 	bl	802b4fc <_init>
 8029818:	1b64      	subs	r4, r4, r5
 802981a:	10a4      	asrs	r4, r4, #2
 802981c:	2600      	movs	r6, #0
 802981e:	42a6      	cmp	r6, r4
 8029820:	d105      	bne.n	802982e <__libc_init_array+0x2e>
 8029822:	bd70      	pop	{r4, r5, r6, pc}
 8029824:	f855 3b04 	ldr.w	r3, [r5], #4
 8029828:	4798      	blx	r3
 802982a:	3601      	adds	r6, #1
 802982c:	e7ee      	b.n	802980c <__libc_init_array+0xc>
 802982e:	f855 3b04 	ldr.w	r3, [r5], #4
 8029832:	4798      	blx	r3
 8029834:	3601      	adds	r6, #1
 8029836:	e7f2      	b.n	802981e <__libc_init_array+0x1e>
 8029838:	080312dc 	.word	0x080312dc
 802983c:	080312dc 	.word	0x080312dc
 8029840:	080312dc 	.word	0x080312dc
 8029844:	080312e0 	.word	0x080312e0

08029848 <__retarget_lock_init_recursive>:
 8029848:	4770      	bx	lr

0802984a <__retarget_lock_acquire_recursive>:
 802984a:	4770      	bx	lr

0802984c <__retarget_lock_release_recursive>:
 802984c:	4770      	bx	lr

0802984e <memcpy>:
 802984e:	440a      	add	r2, r1
 8029850:	4291      	cmp	r1, r2
 8029852:	f100 33ff 	add.w	r3, r0, #4294967295
 8029856:	d100      	bne.n	802985a <memcpy+0xc>
 8029858:	4770      	bx	lr
 802985a:	b510      	push	{r4, lr}
 802985c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029864:	4291      	cmp	r1, r2
 8029866:	d1f9      	bne.n	802985c <memcpy+0xe>
 8029868:	bd10      	pop	{r4, pc}

0802986a <abort>:
 802986a:	b508      	push	{r3, lr}
 802986c:	2006      	movs	r0, #6
 802986e:	f001 fdb1 	bl	802b3d4 <raise>
 8029872:	2001      	movs	r0, #1
 8029874:	f7e8 fd3e 	bl	80122f4 <_exit>

08029878 <quorem>:
 8029878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802987c:	6903      	ldr	r3, [r0, #16]
 802987e:	690c      	ldr	r4, [r1, #16]
 8029880:	42a3      	cmp	r3, r4
 8029882:	4607      	mov	r7, r0
 8029884:	db7e      	blt.n	8029984 <quorem+0x10c>
 8029886:	3c01      	subs	r4, #1
 8029888:	f101 0814 	add.w	r8, r1, #20
 802988c:	00a3      	lsls	r3, r4, #2
 802988e:	f100 0514 	add.w	r5, r0, #20
 8029892:	9300      	str	r3, [sp, #0]
 8029894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029898:	9301      	str	r3, [sp, #4]
 802989a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802989e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80298a2:	3301      	adds	r3, #1
 80298a4:	429a      	cmp	r2, r3
 80298a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80298aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80298ae:	d32e      	bcc.n	802990e <quorem+0x96>
 80298b0:	f04f 0a00 	mov.w	sl, #0
 80298b4:	46c4      	mov	ip, r8
 80298b6:	46ae      	mov	lr, r5
 80298b8:	46d3      	mov	fp, sl
 80298ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80298be:	b298      	uxth	r0, r3
 80298c0:	fb06 a000 	mla	r0, r6, r0, sl
 80298c4:	0c02      	lsrs	r2, r0, #16
 80298c6:	0c1b      	lsrs	r3, r3, #16
 80298c8:	fb06 2303 	mla	r3, r6, r3, r2
 80298cc:	f8de 2000 	ldr.w	r2, [lr]
 80298d0:	b280      	uxth	r0, r0
 80298d2:	b292      	uxth	r2, r2
 80298d4:	1a12      	subs	r2, r2, r0
 80298d6:	445a      	add	r2, fp
 80298d8:	f8de 0000 	ldr.w	r0, [lr]
 80298dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80298e0:	b29b      	uxth	r3, r3
 80298e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80298e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80298ea:	b292      	uxth	r2, r2
 80298ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80298f0:	45e1      	cmp	r9, ip
 80298f2:	f84e 2b04 	str.w	r2, [lr], #4
 80298f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80298fa:	d2de      	bcs.n	80298ba <quorem+0x42>
 80298fc:	9b00      	ldr	r3, [sp, #0]
 80298fe:	58eb      	ldr	r3, [r5, r3]
 8029900:	b92b      	cbnz	r3, 802990e <quorem+0x96>
 8029902:	9b01      	ldr	r3, [sp, #4]
 8029904:	3b04      	subs	r3, #4
 8029906:	429d      	cmp	r5, r3
 8029908:	461a      	mov	r2, r3
 802990a:	d32f      	bcc.n	802996c <quorem+0xf4>
 802990c:	613c      	str	r4, [r7, #16]
 802990e:	4638      	mov	r0, r7
 8029910:	f001 f854 	bl	802a9bc <__mcmp>
 8029914:	2800      	cmp	r0, #0
 8029916:	db25      	blt.n	8029964 <quorem+0xec>
 8029918:	4629      	mov	r1, r5
 802991a:	2000      	movs	r0, #0
 802991c:	f858 2b04 	ldr.w	r2, [r8], #4
 8029920:	f8d1 c000 	ldr.w	ip, [r1]
 8029924:	fa1f fe82 	uxth.w	lr, r2
 8029928:	fa1f f38c 	uxth.w	r3, ip
 802992c:	eba3 030e 	sub.w	r3, r3, lr
 8029930:	4403      	add	r3, r0
 8029932:	0c12      	lsrs	r2, r2, #16
 8029934:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8029938:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802993c:	b29b      	uxth	r3, r3
 802993e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029942:	45c1      	cmp	r9, r8
 8029944:	f841 3b04 	str.w	r3, [r1], #4
 8029948:	ea4f 4022 	mov.w	r0, r2, asr #16
 802994c:	d2e6      	bcs.n	802991c <quorem+0xa4>
 802994e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029956:	b922      	cbnz	r2, 8029962 <quorem+0xea>
 8029958:	3b04      	subs	r3, #4
 802995a:	429d      	cmp	r5, r3
 802995c:	461a      	mov	r2, r3
 802995e:	d30b      	bcc.n	8029978 <quorem+0x100>
 8029960:	613c      	str	r4, [r7, #16]
 8029962:	3601      	adds	r6, #1
 8029964:	4630      	mov	r0, r6
 8029966:	b003      	add	sp, #12
 8029968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802996c:	6812      	ldr	r2, [r2, #0]
 802996e:	3b04      	subs	r3, #4
 8029970:	2a00      	cmp	r2, #0
 8029972:	d1cb      	bne.n	802990c <quorem+0x94>
 8029974:	3c01      	subs	r4, #1
 8029976:	e7c6      	b.n	8029906 <quorem+0x8e>
 8029978:	6812      	ldr	r2, [r2, #0]
 802997a:	3b04      	subs	r3, #4
 802997c:	2a00      	cmp	r2, #0
 802997e:	d1ef      	bne.n	8029960 <quorem+0xe8>
 8029980:	3c01      	subs	r4, #1
 8029982:	e7ea      	b.n	802995a <quorem+0xe2>
 8029984:	2000      	movs	r0, #0
 8029986:	e7ee      	b.n	8029966 <quorem+0xee>

08029988 <_dtoa_r>:
 8029988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802998c:	ed2d 8b02 	vpush	{d8}
 8029990:	69c7      	ldr	r7, [r0, #28]
 8029992:	b091      	sub	sp, #68	@ 0x44
 8029994:	ed8d 0b02 	vstr	d0, [sp, #8]
 8029998:	ec55 4b10 	vmov	r4, r5, d0
 802999c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802999e:	9107      	str	r1, [sp, #28]
 80299a0:	4681      	mov	r9, r0
 80299a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80299a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80299a6:	b97f      	cbnz	r7, 80299c8 <_dtoa_r+0x40>
 80299a8:	2010      	movs	r0, #16
 80299aa:	f7fe fe23 	bl	80285f4 <malloc>
 80299ae:	4602      	mov	r2, r0
 80299b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80299b4:	b920      	cbnz	r0, 80299c0 <_dtoa_r+0x38>
 80299b6:	4ba0      	ldr	r3, [pc, #640]	@ (8029c38 <_dtoa_r+0x2b0>)
 80299b8:	21ef      	movs	r1, #239	@ 0xef
 80299ba:	48a0      	ldr	r0, [pc, #640]	@ (8029c3c <_dtoa_r+0x2b4>)
 80299bc:	f7fe fddc 	bl	8028578 <__assert_func>
 80299c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80299c4:	6007      	str	r7, [r0, #0]
 80299c6:	60c7      	str	r7, [r0, #12]
 80299c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80299cc:	6819      	ldr	r1, [r3, #0]
 80299ce:	b159      	cbz	r1, 80299e8 <_dtoa_r+0x60>
 80299d0:	685a      	ldr	r2, [r3, #4]
 80299d2:	604a      	str	r2, [r1, #4]
 80299d4:	2301      	movs	r3, #1
 80299d6:	4093      	lsls	r3, r2
 80299d8:	608b      	str	r3, [r1, #8]
 80299da:	4648      	mov	r0, r9
 80299dc:	f000 fdb4 	bl	802a548 <_Bfree>
 80299e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80299e4:	2200      	movs	r2, #0
 80299e6:	601a      	str	r2, [r3, #0]
 80299e8:	1e2b      	subs	r3, r5, #0
 80299ea:	bfbb      	ittet	lt
 80299ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80299f0:	9303      	strlt	r3, [sp, #12]
 80299f2:	2300      	movge	r3, #0
 80299f4:	2201      	movlt	r2, #1
 80299f6:	bfac      	ite	ge
 80299f8:	6033      	strge	r3, [r6, #0]
 80299fa:	6032      	strlt	r2, [r6, #0]
 80299fc:	4b90      	ldr	r3, [pc, #576]	@ (8029c40 <_dtoa_r+0x2b8>)
 80299fe:	9e03      	ldr	r6, [sp, #12]
 8029a00:	43b3      	bics	r3, r6
 8029a02:	d110      	bne.n	8029a26 <_dtoa_r+0x9e>
 8029a04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029a06:	f242 730f 	movw	r3, #9999	@ 0x270f
 8029a0a:	6013      	str	r3, [r2, #0]
 8029a0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8029a10:	4323      	orrs	r3, r4
 8029a12:	f000 84de 	beq.w	802a3d2 <_dtoa_r+0xa4a>
 8029a16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029a18:	4f8a      	ldr	r7, [pc, #552]	@ (8029c44 <_dtoa_r+0x2bc>)
 8029a1a:	2b00      	cmp	r3, #0
 8029a1c:	f000 84e0 	beq.w	802a3e0 <_dtoa_r+0xa58>
 8029a20:	1cfb      	adds	r3, r7, #3
 8029a22:	f000 bcdb 	b.w	802a3dc <_dtoa_r+0xa54>
 8029a26:	ed9d 8b02 	vldr	d8, [sp, #8]
 8029a2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8029a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a32:	d10a      	bne.n	8029a4a <_dtoa_r+0xc2>
 8029a34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029a36:	2301      	movs	r3, #1
 8029a38:	6013      	str	r3, [r2, #0]
 8029a3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029a3c:	b113      	cbz	r3, 8029a44 <_dtoa_r+0xbc>
 8029a3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8029a40:	4b81      	ldr	r3, [pc, #516]	@ (8029c48 <_dtoa_r+0x2c0>)
 8029a42:	6013      	str	r3, [r2, #0]
 8029a44:	4f81      	ldr	r7, [pc, #516]	@ (8029c4c <_dtoa_r+0x2c4>)
 8029a46:	f000 bccb 	b.w	802a3e0 <_dtoa_r+0xa58>
 8029a4a:	aa0e      	add	r2, sp, #56	@ 0x38
 8029a4c:	a90f      	add	r1, sp, #60	@ 0x3c
 8029a4e:	4648      	mov	r0, r9
 8029a50:	eeb0 0b48 	vmov.f64	d0, d8
 8029a54:	f001 f862 	bl	802ab1c <__d2b>
 8029a58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8029a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029a5e:	9001      	str	r0, [sp, #4]
 8029a60:	2b00      	cmp	r3, #0
 8029a62:	d045      	beq.n	8029af0 <_dtoa_r+0x168>
 8029a64:	eeb0 7b48 	vmov.f64	d7, d8
 8029a68:	ee18 1a90 	vmov	r1, s17
 8029a6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8029a70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8029a74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8029a78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8029a7c:	2500      	movs	r5, #0
 8029a7e:	ee07 1a90 	vmov	s15, r1
 8029a82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8029a86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029c20 <_dtoa_r+0x298>
 8029a8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029a8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8029c28 <_dtoa_r+0x2a0>
 8029a92:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029a96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029c30 <_dtoa_r+0x2a8>
 8029a9a:	ee07 3a90 	vmov	s15, r3
 8029a9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8029aa2:	eeb0 7b46 	vmov.f64	d7, d6
 8029aa6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8029aaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8029aae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8029ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ab6:	ee16 8a90 	vmov	r8, s13
 8029aba:	d508      	bpl.n	8029ace <_dtoa_r+0x146>
 8029abc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8029ac0:	eeb4 6b47 	vcmp.f64	d6, d7
 8029ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ac8:	bf18      	it	ne
 8029aca:	f108 38ff 	addne.w	r8, r8, #4294967295
 8029ace:	f1b8 0f16 	cmp.w	r8, #22
 8029ad2:	d82b      	bhi.n	8029b2c <_dtoa_r+0x1a4>
 8029ad4:	495e      	ldr	r1, [pc, #376]	@ (8029c50 <_dtoa_r+0x2c8>)
 8029ad6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8029ada:	ed91 7b00 	vldr	d7, [r1]
 8029ade:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8029ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ae6:	d501      	bpl.n	8029aec <_dtoa_r+0x164>
 8029ae8:	f108 38ff 	add.w	r8, r8, #4294967295
 8029aec:	2100      	movs	r1, #0
 8029aee:	e01e      	b.n	8029b2e <_dtoa_r+0x1a6>
 8029af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029af2:	4413      	add	r3, r2
 8029af4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8029af8:	2920      	cmp	r1, #32
 8029afa:	bfc1      	itttt	gt
 8029afc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8029b00:	408e      	lslgt	r6, r1
 8029b02:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8029b06:	fa24 f101 	lsrgt.w	r1, r4, r1
 8029b0a:	bfd6      	itet	le
 8029b0c:	f1c1 0120 	rsble	r1, r1, #32
 8029b10:	4331      	orrgt	r1, r6
 8029b12:	fa04 f101 	lslle.w	r1, r4, r1
 8029b16:	ee07 1a90 	vmov	s15, r1
 8029b1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8029b1e:	3b01      	subs	r3, #1
 8029b20:	ee17 1a90 	vmov	r1, s15
 8029b24:	2501      	movs	r5, #1
 8029b26:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8029b2a:	e7a8      	b.n	8029a7e <_dtoa_r+0xf6>
 8029b2c:	2101      	movs	r1, #1
 8029b2e:	1ad2      	subs	r2, r2, r3
 8029b30:	1e53      	subs	r3, r2, #1
 8029b32:	9306      	str	r3, [sp, #24]
 8029b34:	bf45      	ittet	mi
 8029b36:	f1c2 0301 	rsbmi	r3, r2, #1
 8029b3a:	9305      	strmi	r3, [sp, #20]
 8029b3c:	2300      	movpl	r3, #0
 8029b3e:	2300      	movmi	r3, #0
 8029b40:	bf4c      	ite	mi
 8029b42:	9306      	strmi	r3, [sp, #24]
 8029b44:	9305      	strpl	r3, [sp, #20]
 8029b46:	f1b8 0f00 	cmp.w	r8, #0
 8029b4a:	910c      	str	r1, [sp, #48]	@ 0x30
 8029b4c:	db18      	blt.n	8029b80 <_dtoa_r+0x1f8>
 8029b4e:	9b06      	ldr	r3, [sp, #24]
 8029b50:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8029b54:	4443      	add	r3, r8
 8029b56:	9306      	str	r3, [sp, #24]
 8029b58:	2300      	movs	r3, #0
 8029b5a:	9a07      	ldr	r2, [sp, #28]
 8029b5c:	2a09      	cmp	r2, #9
 8029b5e:	d849      	bhi.n	8029bf4 <_dtoa_r+0x26c>
 8029b60:	2a05      	cmp	r2, #5
 8029b62:	bfc4      	itt	gt
 8029b64:	3a04      	subgt	r2, #4
 8029b66:	9207      	strgt	r2, [sp, #28]
 8029b68:	9a07      	ldr	r2, [sp, #28]
 8029b6a:	f1a2 0202 	sub.w	r2, r2, #2
 8029b6e:	bfcc      	ite	gt
 8029b70:	2400      	movgt	r4, #0
 8029b72:	2401      	movle	r4, #1
 8029b74:	2a03      	cmp	r2, #3
 8029b76:	d848      	bhi.n	8029c0a <_dtoa_r+0x282>
 8029b78:	e8df f002 	tbb	[pc, r2]
 8029b7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8029b80:	9b05      	ldr	r3, [sp, #20]
 8029b82:	2200      	movs	r2, #0
 8029b84:	eba3 0308 	sub.w	r3, r3, r8
 8029b88:	9305      	str	r3, [sp, #20]
 8029b8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8029b8c:	f1c8 0300 	rsb	r3, r8, #0
 8029b90:	e7e3      	b.n	8029b5a <_dtoa_r+0x1d2>
 8029b92:	2200      	movs	r2, #0
 8029b94:	9208      	str	r2, [sp, #32]
 8029b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029b98:	2a00      	cmp	r2, #0
 8029b9a:	dc39      	bgt.n	8029c10 <_dtoa_r+0x288>
 8029b9c:	f04f 0b01 	mov.w	fp, #1
 8029ba0:	46da      	mov	sl, fp
 8029ba2:	465a      	mov	r2, fp
 8029ba4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8029ba8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8029bac:	2100      	movs	r1, #0
 8029bae:	2004      	movs	r0, #4
 8029bb0:	f100 0614 	add.w	r6, r0, #20
 8029bb4:	4296      	cmp	r6, r2
 8029bb6:	d930      	bls.n	8029c1a <_dtoa_r+0x292>
 8029bb8:	6079      	str	r1, [r7, #4]
 8029bba:	4648      	mov	r0, r9
 8029bbc:	9304      	str	r3, [sp, #16]
 8029bbe:	f000 fc83 	bl	802a4c8 <_Balloc>
 8029bc2:	9b04      	ldr	r3, [sp, #16]
 8029bc4:	4607      	mov	r7, r0
 8029bc6:	2800      	cmp	r0, #0
 8029bc8:	d146      	bne.n	8029c58 <_dtoa_r+0x2d0>
 8029bca:	4b22      	ldr	r3, [pc, #136]	@ (8029c54 <_dtoa_r+0x2cc>)
 8029bcc:	4602      	mov	r2, r0
 8029bce:	f240 11af 	movw	r1, #431	@ 0x1af
 8029bd2:	e6f2      	b.n	80299ba <_dtoa_r+0x32>
 8029bd4:	2201      	movs	r2, #1
 8029bd6:	e7dd      	b.n	8029b94 <_dtoa_r+0x20c>
 8029bd8:	2200      	movs	r2, #0
 8029bda:	9208      	str	r2, [sp, #32]
 8029bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029bde:	eb08 0b02 	add.w	fp, r8, r2
 8029be2:	f10b 0a01 	add.w	sl, fp, #1
 8029be6:	4652      	mov	r2, sl
 8029be8:	2a01      	cmp	r2, #1
 8029bea:	bfb8      	it	lt
 8029bec:	2201      	movlt	r2, #1
 8029bee:	e7db      	b.n	8029ba8 <_dtoa_r+0x220>
 8029bf0:	2201      	movs	r2, #1
 8029bf2:	e7f2      	b.n	8029bda <_dtoa_r+0x252>
 8029bf4:	2401      	movs	r4, #1
 8029bf6:	2200      	movs	r2, #0
 8029bf8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8029bfc:	f04f 3bff 	mov.w	fp, #4294967295
 8029c00:	2100      	movs	r1, #0
 8029c02:	46da      	mov	sl, fp
 8029c04:	2212      	movs	r2, #18
 8029c06:	9109      	str	r1, [sp, #36]	@ 0x24
 8029c08:	e7ce      	b.n	8029ba8 <_dtoa_r+0x220>
 8029c0a:	2201      	movs	r2, #1
 8029c0c:	9208      	str	r2, [sp, #32]
 8029c0e:	e7f5      	b.n	8029bfc <_dtoa_r+0x274>
 8029c10:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029c14:	46da      	mov	sl, fp
 8029c16:	465a      	mov	r2, fp
 8029c18:	e7c6      	b.n	8029ba8 <_dtoa_r+0x220>
 8029c1a:	3101      	adds	r1, #1
 8029c1c:	0040      	lsls	r0, r0, #1
 8029c1e:	e7c7      	b.n	8029bb0 <_dtoa_r+0x228>
 8029c20:	636f4361 	.word	0x636f4361
 8029c24:	3fd287a7 	.word	0x3fd287a7
 8029c28:	8b60c8b3 	.word	0x8b60c8b3
 8029c2c:	3fc68a28 	.word	0x3fc68a28
 8029c30:	509f79fb 	.word	0x509f79fb
 8029c34:	3fd34413 	.word	0x3fd34413
 8029c38:	08030f46 	.word	0x08030f46
 8029c3c:	080310f7 	.word	0x080310f7
 8029c40:	7ff00000 	.word	0x7ff00000
 8029c44:	080310f3 	.word	0x080310f3
 8029c48:	080310c7 	.word	0x080310c7
 8029c4c:	080310c6 	.word	0x080310c6
 8029c50:	080311f0 	.word	0x080311f0
 8029c54:	0803114f 	.word	0x0803114f
 8029c58:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8029c5c:	f1ba 0f0e 	cmp.w	sl, #14
 8029c60:	6010      	str	r0, [r2, #0]
 8029c62:	d86f      	bhi.n	8029d44 <_dtoa_r+0x3bc>
 8029c64:	2c00      	cmp	r4, #0
 8029c66:	d06d      	beq.n	8029d44 <_dtoa_r+0x3bc>
 8029c68:	f1b8 0f00 	cmp.w	r8, #0
 8029c6c:	f340 80c2 	ble.w	8029df4 <_dtoa_r+0x46c>
 8029c70:	4aca      	ldr	r2, [pc, #808]	@ (8029f9c <_dtoa_r+0x614>)
 8029c72:	f008 010f 	and.w	r1, r8, #15
 8029c76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8029c7a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8029c7e:	ed92 7b00 	vldr	d7, [r2]
 8029c82:	ea4f 1128 	mov.w	r1, r8, asr #4
 8029c86:	f000 80a9 	beq.w	8029ddc <_dtoa_r+0x454>
 8029c8a:	4ac5      	ldr	r2, [pc, #788]	@ (8029fa0 <_dtoa_r+0x618>)
 8029c8c:	ed92 6b08 	vldr	d6, [r2, #32]
 8029c90:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8029c94:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029c98:	f001 010f 	and.w	r1, r1, #15
 8029c9c:	2203      	movs	r2, #3
 8029c9e:	48c0      	ldr	r0, [pc, #768]	@ (8029fa0 <_dtoa_r+0x618>)
 8029ca0:	2900      	cmp	r1, #0
 8029ca2:	f040 809d 	bne.w	8029de0 <_dtoa_r+0x458>
 8029ca6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029caa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8029cae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029cb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029cb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029cb8:	2900      	cmp	r1, #0
 8029cba:	f000 80c1 	beq.w	8029e40 <_dtoa_r+0x4b8>
 8029cbe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8029cc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cca:	f140 80b9 	bpl.w	8029e40 <_dtoa_r+0x4b8>
 8029cce:	f1ba 0f00 	cmp.w	sl, #0
 8029cd2:	f000 80b5 	beq.w	8029e40 <_dtoa_r+0x4b8>
 8029cd6:	f1bb 0f00 	cmp.w	fp, #0
 8029cda:	dd31      	ble.n	8029d40 <_dtoa_r+0x3b8>
 8029cdc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8029ce0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029ce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029ce8:	f108 31ff 	add.w	r1, r8, #4294967295
 8029cec:	9104      	str	r1, [sp, #16]
 8029cee:	3201      	adds	r2, #1
 8029cf0:	465c      	mov	r4, fp
 8029cf2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029cf6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8029cfa:	ee07 2a90 	vmov	s15, r2
 8029cfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8029d02:	eea7 5b06 	vfma.f64	d5, d7, d6
 8029d06:	ee15 2a90 	vmov	r2, s11
 8029d0a:	ec51 0b15 	vmov	r0, r1, d5
 8029d0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8029d12:	2c00      	cmp	r4, #0
 8029d14:	f040 8098 	bne.w	8029e48 <_dtoa_r+0x4c0>
 8029d18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8029d1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8029d20:	ec41 0b17 	vmov	d7, r0, r1
 8029d24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d2c:	f300 8261 	bgt.w	802a1f2 <_dtoa_r+0x86a>
 8029d30:	eeb1 7b47 	vneg.f64	d7, d7
 8029d34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d3c:	f100 80f5 	bmi.w	8029f2a <_dtoa_r+0x5a2>
 8029d40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8029d44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d46:	2a00      	cmp	r2, #0
 8029d48:	f2c0 812c 	blt.w	8029fa4 <_dtoa_r+0x61c>
 8029d4c:	f1b8 0f0e 	cmp.w	r8, #14
 8029d50:	f300 8128 	bgt.w	8029fa4 <_dtoa_r+0x61c>
 8029d54:	4b91      	ldr	r3, [pc, #580]	@ (8029f9c <_dtoa_r+0x614>)
 8029d56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8029d5a:	ed93 6b00 	vldr	d6, [r3]
 8029d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d60:	2b00      	cmp	r3, #0
 8029d62:	da03      	bge.n	8029d6c <_dtoa_r+0x3e4>
 8029d64:	f1ba 0f00 	cmp.w	sl, #0
 8029d68:	f340 80d2 	ble.w	8029f10 <_dtoa_r+0x588>
 8029d6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8029d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029d74:	463e      	mov	r6, r7
 8029d76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8029d7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8029d7e:	ee15 3a10 	vmov	r3, s10
 8029d82:	3330      	adds	r3, #48	@ 0x30
 8029d84:	f806 3b01 	strb.w	r3, [r6], #1
 8029d88:	1bf3      	subs	r3, r6, r7
 8029d8a:	459a      	cmp	sl, r3
 8029d8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8029d90:	eea3 7b46 	vfms.f64	d7, d3, d6
 8029d94:	f040 80f8 	bne.w	8029f88 <_dtoa_r+0x600>
 8029d98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8029d9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029da4:	f300 80dd 	bgt.w	8029f62 <_dtoa_r+0x5da>
 8029da8:	eeb4 7b46 	vcmp.f64	d7, d6
 8029dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029db0:	d104      	bne.n	8029dbc <_dtoa_r+0x434>
 8029db2:	ee15 3a10 	vmov	r3, s10
 8029db6:	07db      	lsls	r3, r3, #31
 8029db8:	f100 80d3 	bmi.w	8029f62 <_dtoa_r+0x5da>
 8029dbc:	9901      	ldr	r1, [sp, #4]
 8029dbe:	4648      	mov	r0, r9
 8029dc0:	f000 fbc2 	bl	802a548 <_Bfree>
 8029dc4:	2300      	movs	r3, #0
 8029dc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029dc8:	7033      	strb	r3, [r6, #0]
 8029dca:	f108 0301 	add.w	r3, r8, #1
 8029dce:	6013      	str	r3, [r2, #0]
 8029dd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029dd2:	2b00      	cmp	r3, #0
 8029dd4:	f000 8304 	beq.w	802a3e0 <_dtoa_r+0xa58>
 8029dd8:	601e      	str	r6, [r3, #0]
 8029dda:	e301      	b.n	802a3e0 <_dtoa_r+0xa58>
 8029ddc:	2202      	movs	r2, #2
 8029dde:	e75e      	b.n	8029c9e <_dtoa_r+0x316>
 8029de0:	07cc      	lsls	r4, r1, #31
 8029de2:	d504      	bpl.n	8029dee <_dtoa_r+0x466>
 8029de4:	ed90 6b00 	vldr	d6, [r0]
 8029de8:	3201      	adds	r2, #1
 8029dea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029dee:	1049      	asrs	r1, r1, #1
 8029df0:	3008      	adds	r0, #8
 8029df2:	e755      	b.n	8029ca0 <_dtoa_r+0x318>
 8029df4:	d022      	beq.n	8029e3c <_dtoa_r+0x4b4>
 8029df6:	f1c8 0100 	rsb	r1, r8, #0
 8029dfa:	4a68      	ldr	r2, [pc, #416]	@ (8029f9c <_dtoa_r+0x614>)
 8029dfc:	f001 000f 	and.w	r0, r1, #15
 8029e00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8029e04:	ed92 7b00 	vldr	d7, [r2]
 8029e08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8029e0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029e10:	4863      	ldr	r0, [pc, #396]	@ (8029fa0 <_dtoa_r+0x618>)
 8029e12:	1109      	asrs	r1, r1, #4
 8029e14:	2400      	movs	r4, #0
 8029e16:	2202      	movs	r2, #2
 8029e18:	b929      	cbnz	r1, 8029e26 <_dtoa_r+0x49e>
 8029e1a:	2c00      	cmp	r4, #0
 8029e1c:	f43f af49 	beq.w	8029cb2 <_dtoa_r+0x32a>
 8029e20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029e24:	e745      	b.n	8029cb2 <_dtoa_r+0x32a>
 8029e26:	07ce      	lsls	r6, r1, #31
 8029e28:	d505      	bpl.n	8029e36 <_dtoa_r+0x4ae>
 8029e2a:	ed90 6b00 	vldr	d6, [r0]
 8029e2e:	3201      	adds	r2, #1
 8029e30:	2401      	movs	r4, #1
 8029e32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029e36:	1049      	asrs	r1, r1, #1
 8029e38:	3008      	adds	r0, #8
 8029e3a:	e7ed      	b.n	8029e18 <_dtoa_r+0x490>
 8029e3c:	2202      	movs	r2, #2
 8029e3e:	e738      	b.n	8029cb2 <_dtoa_r+0x32a>
 8029e40:	f8cd 8010 	str.w	r8, [sp, #16]
 8029e44:	4654      	mov	r4, sl
 8029e46:	e754      	b.n	8029cf2 <_dtoa_r+0x36a>
 8029e48:	4a54      	ldr	r2, [pc, #336]	@ (8029f9c <_dtoa_r+0x614>)
 8029e4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8029e4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8029e52:	9a08      	ldr	r2, [sp, #32]
 8029e54:	ec41 0b17 	vmov	d7, r0, r1
 8029e58:	443c      	add	r4, r7
 8029e5a:	b34a      	cbz	r2, 8029eb0 <_dtoa_r+0x528>
 8029e5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8029e60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8029e64:	463e      	mov	r6, r7
 8029e66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8029e6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8029e6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8029e72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8029e76:	ee14 2a90 	vmov	r2, s9
 8029e7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8029e7e:	3230      	adds	r2, #48	@ 0x30
 8029e80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029e84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e8c:	f806 2b01 	strb.w	r2, [r6], #1
 8029e90:	d438      	bmi.n	8029f04 <_dtoa_r+0x57c>
 8029e92:	ee32 5b46 	vsub.f64	d5, d2, d6
 8029e96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8029e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e9e:	d462      	bmi.n	8029f66 <_dtoa_r+0x5de>
 8029ea0:	42a6      	cmp	r6, r4
 8029ea2:	f43f af4d 	beq.w	8029d40 <_dtoa_r+0x3b8>
 8029ea6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8029eaa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029eae:	e7e0      	b.n	8029e72 <_dtoa_r+0x4ea>
 8029eb0:	4621      	mov	r1, r4
 8029eb2:	463e      	mov	r6, r7
 8029eb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029eb8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8029ebc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8029ec0:	ee14 2a90 	vmov	r2, s9
 8029ec4:	3230      	adds	r2, #48	@ 0x30
 8029ec6:	f806 2b01 	strb.w	r2, [r6], #1
 8029eca:	42a6      	cmp	r6, r4
 8029ecc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8029ed0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029ed4:	d119      	bne.n	8029f0a <_dtoa_r+0x582>
 8029ed6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8029eda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8029ede:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8029ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ee6:	dc3e      	bgt.n	8029f66 <_dtoa_r+0x5de>
 8029ee8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8029eec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8029ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ef4:	f57f af24 	bpl.w	8029d40 <_dtoa_r+0x3b8>
 8029ef8:	460e      	mov	r6, r1
 8029efa:	3901      	subs	r1, #1
 8029efc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029f00:	2b30      	cmp	r3, #48	@ 0x30
 8029f02:	d0f9      	beq.n	8029ef8 <_dtoa_r+0x570>
 8029f04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8029f08:	e758      	b.n	8029dbc <_dtoa_r+0x434>
 8029f0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029f0e:	e7d5      	b.n	8029ebc <_dtoa_r+0x534>
 8029f10:	d10b      	bne.n	8029f2a <_dtoa_r+0x5a2>
 8029f12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8029f16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8029f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029f1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f26:	f2c0 8161 	blt.w	802a1ec <_dtoa_r+0x864>
 8029f2a:	2400      	movs	r4, #0
 8029f2c:	4625      	mov	r5, r4
 8029f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f30:	43db      	mvns	r3, r3
 8029f32:	9304      	str	r3, [sp, #16]
 8029f34:	463e      	mov	r6, r7
 8029f36:	f04f 0800 	mov.w	r8, #0
 8029f3a:	4621      	mov	r1, r4
 8029f3c:	4648      	mov	r0, r9
 8029f3e:	f000 fb03 	bl	802a548 <_Bfree>
 8029f42:	2d00      	cmp	r5, #0
 8029f44:	d0de      	beq.n	8029f04 <_dtoa_r+0x57c>
 8029f46:	f1b8 0f00 	cmp.w	r8, #0
 8029f4a:	d005      	beq.n	8029f58 <_dtoa_r+0x5d0>
 8029f4c:	45a8      	cmp	r8, r5
 8029f4e:	d003      	beq.n	8029f58 <_dtoa_r+0x5d0>
 8029f50:	4641      	mov	r1, r8
 8029f52:	4648      	mov	r0, r9
 8029f54:	f000 faf8 	bl	802a548 <_Bfree>
 8029f58:	4629      	mov	r1, r5
 8029f5a:	4648      	mov	r0, r9
 8029f5c:	f000 faf4 	bl	802a548 <_Bfree>
 8029f60:	e7d0      	b.n	8029f04 <_dtoa_r+0x57c>
 8029f62:	f8cd 8010 	str.w	r8, [sp, #16]
 8029f66:	4633      	mov	r3, r6
 8029f68:	461e      	mov	r6, r3
 8029f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029f6e:	2a39      	cmp	r2, #57	@ 0x39
 8029f70:	d106      	bne.n	8029f80 <_dtoa_r+0x5f8>
 8029f72:	429f      	cmp	r7, r3
 8029f74:	d1f8      	bne.n	8029f68 <_dtoa_r+0x5e0>
 8029f76:	9a04      	ldr	r2, [sp, #16]
 8029f78:	3201      	adds	r2, #1
 8029f7a:	9204      	str	r2, [sp, #16]
 8029f7c:	2230      	movs	r2, #48	@ 0x30
 8029f7e:	703a      	strb	r2, [r7, #0]
 8029f80:	781a      	ldrb	r2, [r3, #0]
 8029f82:	3201      	adds	r2, #1
 8029f84:	701a      	strb	r2, [r3, #0]
 8029f86:	e7bd      	b.n	8029f04 <_dtoa_r+0x57c>
 8029f88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029f8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8029f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f94:	f47f aeef 	bne.w	8029d76 <_dtoa_r+0x3ee>
 8029f98:	e710      	b.n	8029dbc <_dtoa_r+0x434>
 8029f9a:	bf00      	nop
 8029f9c:	080311f0 	.word	0x080311f0
 8029fa0:	080311c8 	.word	0x080311c8
 8029fa4:	9908      	ldr	r1, [sp, #32]
 8029fa6:	2900      	cmp	r1, #0
 8029fa8:	f000 80e3 	beq.w	802a172 <_dtoa_r+0x7ea>
 8029fac:	9907      	ldr	r1, [sp, #28]
 8029fae:	2901      	cmp	r1, #1
 8029fb0:	f300 80c8 	bgt.w	802a144 <_dtoa_r+0x7bc>
 8029fb4:	2d00      	cmp	r5, #0
 8029fb6:	f000 80c1 	beq.w	802a13c <_dtoa_r+0x7b4>
 8029fba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8029fbe:	9e05      	ldr	r6, [sp, #20]
 8029fc0:	461c      	mov	r4, r3
 8029fc2:	9304      	str	r3, [sp, #16]
 8029fc4:	9b05      	ldr	r3, [sp, #20]
 8029fc6:	4413      	add	r3, r2
 8029fc8:	9305      	str	r3, [sp, #20]
 8029fca:	9b06      	ldr	r3, [sp, #24]
 8029fcc:	2101      	movs	r1, #1
 8029fce:	4413      	add	r3, r2
 8029fd0:	4648      	mov	r0, r9
 8029fd2:	9306      	str	r3, [sp, #24]
 8029fd4:	f000 fb6c 	bl	802a6b0 <__i2b>
 8029fd8:	9b04      	ldr	r3, [sp, #16]
 8029fda:	4605      	mov	r5, r0
 8029fdc:	b166      	cbz	r6, 8029ff8 <_dtoa_r+0x670>
 8029fde:	9a06      	ldr	r2, [sp, #24]
 8029fe0:	2a00      	cmp	r2, #0
 8029fe2:	dd09      	ble.n	8029ff8 <_dtoa_r+0x670>
 8029fe4:	42b2      	cmp	r2, r6
 8029fe6:	9905      	ldr	r1, [sp, #20]
 8029fe8:	bfa8      	it	ge
 8029fea:	4632      	movge	r2, r6
 8029fec:	1a89      	subs	r1, r1, r2
 8029fee:	9105      	str	r1, [sp, #20]
 8029ff0:	9906      	ldr	r1, [sp, #24]
 8029ff2:	1ab6      	subs	r6, r6, r2
 8029ff4:	1a8a      	subs	r2, r1, r2
 8029ff6:	9206      	str	r2, [sp, #24]
 8029ff8:	b1fb      	cbz	r3, 802a03a <_dtoa_r+0x6b2>
 8029ffa:	9a08      	ldr	r2, [sp, #32]
 8029ffc:	2a00      	cmp	r2, #0
 8029ffe:	f000 80bc 	beq.w	802a17a <_dtoa_r+0x7f2>
 802a002:	b19c      	cbz	r4, 802a02c <_dtoa_r+0x6a4>
 802a004:	4629      	mov	r1, r5
 802a006:	4622      	mov	r2, r4
 802a008:	4648      	mov	r0, r9
 802a00a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a00c:	f000 fc10 	bl	802a830 <__pow5mult>
 802a010:	9a01      	ldr	r2, [sp, #4]
 802a012:	4601      	mov	r1, r0
 802a014:	4605      	mov	r5, r0
 802a016:	4648      	mov	r0, r9
 802a018:	f000 fb60 	bl	802a6dc <__multiply>
 802a01c:	9901      	ldr	r1, [sp, #4]
 802a01e:	9004      	str	r0, [sp, #16]
 802a020:	4648      	mov	r0, r9
 802a022:	f000 fa91 	bl	802a548 <_Bfree>
 802a026:	9a04      	ldr	r2, [sp, #16]
 802a028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a02a:	9201      	str	r2, [sp, #4]
 802a02c:	1b1a      	subs	r2, r3, r4
 802a02e:	d004      	beq.n	802a03a <_dtoa_r+0x6b2>
 802a030:	9901      	ldr	r1, [sp, #4]
 802a032:	4648      	mov	r0, r9
 802a034:	f000 fbfc 	bl	802a830 <__pow5mult>
 802a038:	9001      	str	r0, [sp, #4]
 802a03a:	2101      	movs	r1, #1
 802a03c:	4648      	mov	r0, r9
 802a03e:	f000 fb37 	bl	802a6b0 <__i2b>
 802a042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a044:	4604      	mov	r4, r0
 802a046:	2b00      	cmp	r3, #0
 802a048:	f000 81d0 	beq.w	802a3ec <_dtoa_r+0xa64>
 802a04c:	461a      	mov	r2, r3
 802a04e:	4601      	mov	r1, r0
 802a050:	4648      	mov	r0, r9
 802a052:	f000 fbed 	bl	802a830 <__pow5mult>
 802a056:	9b07      	ldr	r3, [sp, #28]
 802a058:	2b01      	cmp	r3, #1
 802a05a:	4604      	mov	r4, r0
 802a05c:	f300 8095 	bgt.w	802a18a <_dtoa_r+0x802>
 802a060:	9b02      	ldr	r3, [sp, #8]
 802a062:	2b00      	cmp	r3, #0
 802a064:	f040 808b 	bne.w	802a17e <_dtoa_r+0x7f6>
 802a068:	9b03      	ldr	r3, [sp, #12]
 802a06a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802a06e:	2a00      	cmp	r2, #0
 802a070:	f040 8087 	bne.w	802a182 <_dtoa_r+0x7fa>
 802a074:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802a078:	0d12      	lsrs	r2, r2, #20
 802a07a:	0512      	lsls	r2, r2, #20
 802a07c:	2a00      	cmp	r2, #0
 802a07e:	f000 8082 	beq.w	802a186 <_dtoa_r+0x7fe>
 802a082:	9b05      	ldr	r3, [sp, #20]
 802a084:	3301      	adds	r3, #1
 802a086:	9305      	str	r3, [sp, #20]
 802a088:	9b06      	ldr	r3, [sp, #24]
 802a08a:	3301      	adds	r3, #1
 802a08c:	9306      	str	r3, [sp, #24]
 802a08e:	2301      	movs	r3, #1
 802a090:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a094:	2b00      	cmp	r3, #0
 802a096:	f000 81af 	beq.w	802a3f8 <_dtoa_r+0xa70>
 802a09a:	6922      	ldr	r2, [r4, #16]
 802a09c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802a0a0:	6910      	ldr	r0, [r2, #16]
 802a0a2:	f000 fab9 	bl	802a618 <__hi0bits>
 802a0a6:	f1c0 0020 	rsb	r0, r0, #32
 802a0aa:	9b06      	ldr	r3, [sp, #24]
 802a0ac:	4418      	add	r0, r3
 802a0ae:	f010 001f 	ands.w	r0, r0, #31
 802a0b2:	d076      	beq.n	802a1a2 <_dtoa_r+0x81a>
 802a0b4:	f1c0 0220 	rsb	r2, r0, #32
 802a0b8:	2a04      	cmp	r2, #4
 802a0ba:	dd69      	ble.n	802a190 <_dtoa_r+0x808>
 802a0bc:	9b05      	ldr	r3, [sp, #20]
 802a0be:	f1c0 001c 	rsb	r0, r0, #28
 802a0c2:	4403      	add	r3, r0
 802a0c4:	9305      	str	r3, [sp, #20]
 802a0c6:	9b06      	ldr	r3, [sp, #24]
 802a0c8:	4406      	add	r6, r0
 802a0ca:	4403      	add	r3, r0
 802a0cc:	9306      	str	r3, [sp, #24]
 802a0ce:	9b05      	ldr	r3, [sp, #20]
 802a0d0:	2b00      	cmp	r3, #0
 802a0d2:	dd05      	ble.n	802a0e0 <_dtoa_r+0x758>
 802a0d4:	9901      	ldr	r1, [sp, #4]
 802a0d6:	461a      	mov	r2, r3
 802a0d8:	4648      	mov	r0, r9
 802a0da:	f000 fc03 	bl	802a8e4 <__lshift>
 802a0de:	9001      	str	r0, [sp, #4]
 802a0e0:	9b06      	ldr	r3, [sp, #24]
 802a0e2:	2b00      	cmp	r3, #0
 802a0e4:	dd05      	ble.n	802a0f2 <_dtoa_r+0x76a>
 802a0e6:	4621      	mov	r1, r4
 802a0e8:	461a      	mov	r2, r3
 802a0ea:	4648      	mov	r0, r9
 802a0ec:	f000 fbfa 	bl	802a8e4 <__lshift>
 802a0f0:	4604      	mov	r4, r0
 802a0f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a0f4:	2b00      	cmp	r3, #0
 802a0f6:	d056      	beq.n	802a1a6 <_dtoa_r+0x81e>
 802a0f8:	9801      	ldr	r0, [sp, #4]
 802a0fa:	4621      	mov	r1, r4
 802a0fc:	f000 fc5e 	bl	802a9bc <__mcmp>
 802a100:	2800      	cmp	r0, #0
 802a102:	da50      	bge.n	802a1a6 <_dtoa_r+0x81e>
 802a104:	f108 33ff 	add.w	r3, r8, #4294967295
 802a108:	9304      	str	r3, [sp, #16]
 802a10a:	9901      	ldr	r1, [sp, #4]
 802a10c:	2300      	movs	r3, #0
 802a10e:	220a      	movs	r2, #10
 802a110:	4648      	mov	r0, r9
 802a112:	f000 fa3b 	bl	802a58c <__multadd>
 802a116:	9b08      	ldr	r3, [sp, #32]
 802a118:	9001      	str	r0, [sp, #4]
 802a11a:	2b00      	cmp	r3, #0
 802a11c:	f000 816e 	beq.w	802a3fc <_dtoa_r+0xa74>
 802a120:	4629      	mov	r1, r5
 802a122:	2300      	movs	r3, #0
 802a124:	220a      	movs	r2, #10
 802a126:	4648      	mov	r0, r9
 802a128:	f000 fa30 	bl	802a58c <__multadd>
 802a12c:	f1bb 0f00 	cmp.w	fp, #0
 802a130:	4605      	mov	r5, r0
 802a132:	dc64      	bgt.n	802a1fe <_dtoa_r+0x876>
 802a134:	9b07      	ldr	r3, [sp, #28]
 802a136:	2b02      	cmp	r3, #2
 802a138:	dc3e      	bgt.n	802a1b8 <_dtoa_r+0x830>
 802a13a:	e060      	b.n	802a1fe <_dtoa_r+0x876>
 802a13c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a13e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802a142:	e73c      	b.n	8029fbe <_dtoa_r+0x636>
 802a144:	f10a 34ff 	add.w	r4, sl, #4294967295
 802a148:	42a3      	cmp	r3, r4
 802a14a:	bfbf      	itttt	lt
 802a14c:	1ae2      	sublt	r2, r4, r3
 802a14e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802a150:	189b      	addlt	r3, r3, r2
 802a152:	930a      	strlt	r3, [sp, #40]	@ 0x28
 802a154:	bfae      	itee	ge
 802a156:	1b1c      	subge	r4, r3, r4
 802a158:	4623      	movlt	r3, r4
 802a15a:	2400      	movlt	r4, #0
 802a15c:	f1ba 0f00 	cmp.w	sl, #0
 802a160:	bfb5      	itete	lt
 802a162:	9a05      	ldrlt	r2, [sp, #20]
 802a164:	9e05      	ldrge	r6, [sp, #20]
 802a166:	eba2 060a 	sublt.w	r6, r2, sl
 802a16a:	4652      	movge	r2, sl
 802a16c:	bfb8      	it	lt
 802a16e:	2200      	movlt	r2, #0
 802a170:	e727      	b.n	8029fc2 <_dtoa_r+0x63a>
 802a172:	9e05      	ldr	r6, [sp, #20]
 802a174:	9d08      	ldr	r5, [sp, #32]
 802a176:	461c      	mov	r4, r3
 802a178:	e730      	b.n	8029fdc <_dtoa_r+0x654>
 802a17a:	461a      	mov	r2, r3
 802a17c:	e758      	b.n	802a030 <_dtoa_r+0x6a8>
 802a17e:	2300      	movs	r3, #0
 802a180:	e786      	b.n	802a090 <_dtoa_r+0x708>
 802a182:	9b02      	ldr	r3, [sp, #8]
 802a184:	e784      	b.n	802a090 <_dtoa_r+0x708>
 802a186:	920b      	str	r2, [sp, #44]	@ 0x2c
 802a188:	e783      	b.n	802a092 <_dtoa_r+0x70a>
 802a18a:	2300      	movs	r3, #0
 802a18c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a18e:	e784      	b.n	802a09a <_dtoa_r+0x712>
 802a190:	d09d      	beq.n	802a0ce <_dtoa_r+0x746>
 802a192:	9b05      	ldr	r3, [sp, #20]
 802a194:	321c      	adds	r2, #28
 802a196:	4413      	add	r3, r2
 802a198:	9305      	str	r3, [sp, #20]
 802a19a:	9b06      	ldr	r3, [sp, #24]
 802a19c:	4416      	add	r6, r2
 802a19e:	4413      	add	r3, r2
 802a1a0:	e794      	b.n	802a0cc <_dtoa_r+0x744>
 802a1a2:	4602      	mov	r2, r0
 802a1a4:	e7f5      	b.n	802a192 <_dtoa_r+0x80a>
 802a1a6:	f1ba 0f00 	cmp.w	sl, #0
 802a1aa:	f8cd 8010 	str.w	r8, [sp, #16]
 802a1ae:	46d3      	mov	fp, sl
 802a1b0:	dc21      	bgt.n	802a1f6 <_dtoa_r+0x86e>
 802a1b2:	9b07      	ldr	r3, [sp, #28]
 802a1b4:	2b02      	cmp	r3, #2
 802a1b6:	dd1e      	ble.n	802a1f6 <_dtoa_r+0x86e>
 802a1b8:	f1bb 0f00 	cmp.w	fp, #0
 802a1bc:	f47f aeb7 	bne.w	8029f2e <_dtoa_r+0x5a6>
 802a1c0:	4621      	mov	r1, r4
 802a1c2:	465b      	mov	r3, fp
 802a1c4:	2205      	movs	r2, #5
 802a1c6:	4648      	mov	r0, r9
 802a1c8:	f000 f9e0 	bl	802a58c <__multadd>
 802a1cc:	4601      	mov	r1, r0
 802a1ce:	4604      	mov	r4, r0
 802a1d0:	9801      	ldr	r0, [sp, #4]
 802a1d2:	f000 fbf3 	bl	802a9bc <__mcmp>
 802a1d6:	2800      	cmp	r0, #0
 802a1d8:	f77f aea9 	ble.w	8029f2e <_dtoa_r+0x5a6>
 802a1dc:	463e      	mov	r6, r7
 802a1de:	2331      	movs	r3, #49	@ 0x31
 802a1e0:	f806 3b01 	strb.w	r3, [r6], #1
 802a1e4:	9b04      	ldr	r3, [sp, #16]
 802a1e6:	3301      	adds	r3, #1
 802a1e8:	9304      	str	r3, [sp, #16]
 802a1ea:	e6a4      	b.n	8029f36 <_dtoa_r+0x5ae>
 802a1ec:	f8cd 8010 	str.w	r8, [sp, #16]
 802a1f0:	4654      	mov	r4, sl
 802a1f2:	4625      	mov	r5, r4
 802a1f4:	e7f2      	b.n	802a1dc <_dtoa_r+0x854>
 802a1f6:	9b08      	ldr	r3, [sp, #32]
 802a1f8:	2b00      	cmp	r3, #0
 802a1fa:	f000 8103 	beq.w	802a404 <_dtoa_r+0xa7c>
 802a1fe:	2e00      	cmp	r6, #0
 802a200:	dd05      	ble.n	802a20e <_dtoa_r+0x886>
 802a202:	4629      	mov	r1, r5
 802a204:	4632      	mov	r2, r6
 802a206:	4648      	mov	r0, r9
 802a208:	f000 fb6c 	bl	802a8e4 <__lshift>
 802a20c:	4605      	mov	r5, r0
 802a20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a210:	2b00      	cmp	r3, #0
 802a212:	d058      	beq.n	802a2c6 <_dtoa_r+0x93e>
 802a214:	6869      	ldr	r1, [r5, #4]
 802a216:	4648      	mov	r0, r9
 802a218:	f000 f956 	bl	802a4c8 <_Balloc>
 802a21c:	4606      	mov	r6, r0
 802a21e:	b928      	cbnz	r0, 802a22c <_dtoa_r+0x8a4>
 802a220:	4b82      	ldr	r3, [pc, #520]	@ (802a42c <_dtoa_r+0xaa4>)
 802a222:	4602      	mov	r2, r0
 802a224:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802a228:	f7ff bbc7 	b.w	80299ba <_dtoa_r+0x32>
 802a22c:	692a      	ldr	r2, [r5, #16]
 802a22e:	3202      	adds	r2, #2
 802a230:	0092      	lsls	r2, r2, #2
 802a232:	f105 010c 	add.w	r1, r5, #12
 802a236:	300c      	adds	r0, #12
 802a238:	f7ff fb09 	bl	802984e <memcpy>
 802a23c:	2201      	movs	r2, #1
 802a23e:	4631      	mov	r1, r6
 802a240:	4648      	mov	r0, r9
 802a242:	f000 fb4f 	bl	802a8e4 <__lshift>
 802a246:	1c7b      	adds	r3, r7, #1
 802a248:	9305      	str	r3, [sp, #20]
 802a24a:	eb07 030b 	add.w	r3, r7, fp
 802a24e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a250:	9b02      	ldr	r3, [sp, #8]
 802a252:	f003 0301 	and.w	r3, r3, #1
 802a256:	46a8      	mov	r8, r5
 802a258:	9308      	str	r3, [sp, #32]
 802a25a:	4605      	mov	r5, r0
 802a25c:	9b05      	ldr	r3, [sp, #20]
 802a25e:	9801      	ldr	r0, [sp, #4]
 802a260:	4621      	mov	r1, r4
 802a262:	f103 3bff 	add.w	fp, r3, #4294967295
 802a266:	f7ff fb07 	bl	8029878 <quorem>
 802a26a:	4641      	mov	r1, r8
 802a26c:	9002      	str	r0, [sp, #8]
 802a26e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a272:	9801      	ldr	r0, [sp, #4]
 802a274:	f000 fba2 	bl	802a9bc <__mcmp>
 802a278:	462a      	mov	r2, r5
 802a27a:	9006      	str	r0, [sp, #24]
 802a27c:	4621      	mov	r1, r4
 802a27e:	4648      	mov	r0, r9
 802a280:	f000 fbb8 	bl	802a9f4 <__mdiff>
 802a284:	68c2      	ldr	r2, [r0, #12]
 802a286:	4606      	mov	r6, r0
 802a288:	b9fa      	cbnz	r2, 802a2ca <_dtoa_r+0x942>
 802a28a:	4601      	mov	r1, r0
 802a28c:	9801      	ldr	r0, [sp, #4]
 802a28e:	f000 fb95 	bl	802a9bc <__mcmp>
 802a292:	4602      	mov	r2, r0
 802a294:	4631      	mov	r1, r6
 802a296:	4648      	mov	r0, r9
 802a298:	920a      	str	r2, [sp, #40]	@ 0x28
 802a29a:	f000 f955 	bl	802a548 <_Bfree>
 802a29e:	9b07      	ldr	r3, [sp, #28]
 802a2a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a2a2:	9e05      	ldr	r6, [sp, #20]
 802a2a4:	ea43 0102 	orr.w	r1, r3, r2
 802a2a8:	9b08      	ldr	r3, [sp, #32]
 802a2aa:	4319      	orrs	r1, r3
 802a2ac:	d10f      	bne.n	802a2ce <_dtoa_r+0x946>
 802a2ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a2b2:	d028      	beq.n	802a306 <_dtoa_r+0x97e>
 802a2b4:	9b06      	ldr	r3, [sp, #24]
 802a2b6:	2b00      	cmp	r3, #0
 802a2b8:	dd02      	ble.n	802a2c0 <_dtoa_r+0x938>
 802a2ba:	9b02      	ldr	r3, [sp, #8]
 802a2bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802a2c0:	f88b a000 	strb.w	sl, [fp]
 802a2c4:	e639      	b.n	8029f3a <_dtoa_r+0x5b2>
 802a2c6:	4628      	mov	r0, r5
 802a2c8:	e7bd      	b.n	802a246 <_dtoa_r+0x8be>
 802a2ca:	2201      	movs	r2, #1
 802a2cc:	e7e2      	b.n	802a294 <_dtoa_r+0x90c>
 802a2ce:	9b06      	ldr	r3, [sp, #24]
 802a2d0:	2b00      	cmp	r3, #0
 802a2d2:	db04      	blt.n	802a2de <_dtoa_r+0x956>
 802a2d4:	9907      	ldr	r1, [sp, #28]
 802a2d6:	430b      	orrs	r3, r1
 802a2d8:	9908      	ldr	r1, [sp, #32]
 802a2da:	430b      	orrs	r3, r1
 802a2dc:	d120      	bne.n	802a320 <_dtoa_r+0x998>
 802a2de:	2a00      	cmp	r2, #0
 802a2e0:	ddee      	ble.n	802a2c0 <_dtoa_r+0x938>
 802a2e2:	9901      	ldr	r1, [sp, #4]
 802a2e4:	2201      	movs	r2, #1
 802a2e6:	4648      	mov	r0, r9
 802a2e8:	f000 fafc 	bl	802a8e4 <__lshift>
 802a2ec:	4621      	mov	r1, r4
 802a2ee:	9001      	str	r0, [sp, #4]
 802a2f0:	f000 fb64 	bl	802a9bc <__mcmp>
 802a2f4:	2800      	cmp	r0, #0
 802a2f6:	dc03      	bgt.n	802a300 <_dtoa_r+0x978>
 802a2f8:	d1e2      	bne.n	802a2c0 <_dtoa_r+0x938>
 802a2fa:	f01a 0f01 	tst.w	sl, #1
 802a2fe:	d0df      	beq.n	802a2c0 <_dtoa_r+0x938>
 802a300:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a304:	d1d9      	bne.n	802a2ba <_dtoa_r+0x932>
 802a306:	2339      	movs	r3, #57	@ 0x39
 802a308:	f88b 3000 	strb.w	r3, [fp]
 802a30c:	4633      	mov	r3, r6
 802a30e:	461e      	mov	r6, r3
 802a310:	3b01      	subs	r3, #1
 802a312:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802a316:	2a39      	cmp	r2, #57	@ 0x39
 802a318:	d053      	beq.n	802a3c2 <_dtoa_r+0xa3a>
 802a31a:	3201      	adds	r2, #1
 802a31c:	701a      	strb	r2, [r3, #0]
 802a31e:	e60c      	b.n	8029f3a <_dtoa_r+0x5b2>
 802a320:	2a00      	cmp	r2, #0
 802a322:	dd07      	ble.n	802a334 <_dtoa_r+0x9ac>
 802a324:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a328:	d0ed      	beq.n	802a306 <_dtoa_r+0x97e>
 802a32a:	f10a 0301 	add.w	r3, sl, #1
 802a32e:	f88b 3000 	strb.w	r3, [fp]
 802a332:	e602      	b.n	8029f3a <_dtoa_r+0x5b2>
 802a334:	9b05      	ldr	r3, [sp, #20]
 802a336:	9a05      	ldr	r2, [sp, #20]
 802a338:	f803 ac01 	strb.w	sl, [r3, #-1]
 802a33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a33e:	4293      	cmp	r3, r2
 802a340:	d029      	beq.n	802a396 <_dtoa_r+0xa0e>
 802a342:	9901      	ldr	r1, [sp, #4]
 802a344:	2300      	movs	r3, #0
 802a346:	220a      	movs	r2, #10
 802a348:	4648      	mov	r0, r9
 802a34a:	f000 f91f 	bl	802a58c <__multadd>
 802a34e:	45a8      	cmp	r8, r5
 802a350:	9001      	str	r0, [sp, #4]
 802a352:	f04f 0300 	mov.w	r3, #0
 802a356:	f04f 020a 	mov.w	r2, #10
 802a35a:	4641      	mov	r1, r8
 802a35c:	4648      	mov	r0, r9
 802a35e:	d107      	bne.n	802a370 <_dtoa_r+0x9e8>
 802a360:	f000 f914 	bl	802a58c <__multadd>
 802a364:	4680      	mov	r8, r0
 802a366:	4605      	mov	r5, r0
 802a368:	9b05      	ldr	r3, [sp, #20]
 802a36a:	3301      	adds	r3, #1
 802a36c:	9305      	str	r3, [sp, #20]
 802a36e:	e775      	b.n	802a25c <_dtoa_r+0x8d4>
 802a370:	f000 f90c 	bl	802a58c <__multadd>
 802a374:	4629      	mov	r1, r5
 802a376:	4680      	mov	r8, r0
 802a378:	2300      	movs	r3, #0
 802a37a:	220a      	movs	r2, #10
 802a37c:	4648      	mov	r0, r9
 802a37e:	f000 f905 	bl	802a58c <__multadd>
 802a382:	4605      	mov	r5, r0
 802a384:	e7f0      	b.n	802a368 <_dtoa_r+0x9e0>
 802a386:	f1bb 0f00 	cmp.w	fp, #0
 802a38a:	bfcc      	ite	gt
 802a38c:	465e      	movgt	r6, fp
 802a38e:	2601      	movle	r6, #1
 802a390:	443e      	add	r6, r7
 802a392:	f04f 0800 	mov.w	r8, #0
 802a396:	9901      	ldr	r1, [sp, #4]
 802a398:	2201      	movs	r2, #1
 802a39a:	4648      	mov	r0, r9
 802a39c:	f000 faa2 	bl	802a8e4 <__lshift>
 802a3a0:	4621      	mov	r1, r4
 802a3a2:	9001      	str	r0, [sp, #4]
 802a3a4:	f000 fb0a 	bl	802a9bc <__mcmp>
 802a3a8:	2800      	cmp	r0, #0
 802a3aa:	dcaf      	bgt.n	802a30c <_dtoa_r+0x984>
 802a3ac:	d102      	bne.n	802a3b4 <_dtoa_r+0xa2c>
 802a3ae:	f01a 0f01 	tst.w	sl, #1
 802a3b2:	d1ab      	bne.n	802a30c <_dtoa_r+0x984>
 802a3b4:	4633      	mov	r3, r6
 802a3b6:	461e      	mov	r6, r3
 802a3b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a3bc:	2a30      	cmp	r2, #48	@ 0x30
 802a3be:	d0fa      	beq.n	802a3b6 <_dtoa_r+0xa2e>
 802a3c0:	e5bb      	b.n	8029f3a <_dtoa_r+0x5b2>
 802a3c2:	429f      	cmp	r7, r3
 802a3c4:	d1a3      	bne.n	802a30e <_dtoa_r+0x986>
 802a3c6:	9b04      	ldr	r3, [sp, #16]
 802a3c8:	3301      	adds	r3, #1
 802a3ca:	9304      	str	r3, [sp, #16]
 802a3cc:	2331      	movs	r3, #49	@ 0x31
 802a3ce:	703b      	strb	r3, [r7, #0]
 802a3d0:	e5b3      	b.n	8029f3a <_dtoa_r+0x5b2>
 802a3d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a3d4:	4f16      	ldr	r7, [pc, #88]	@ (802a430 <_dtoa_r+0xaa8>)
 802a3d6:	b11b      	cbz	r3, 802a3e0 <_dtoa_r+0xa58>
 802a3d8:	f107 0308 	add.w	r3, r7, #8
 802a3dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802a3de:	6013      	str	r3, [r2, #0]
 802a3e0:	4638      	mov	r0, r7
 802a3e2:	b011      	add	sp, #68	@ 0x44
 802a3e4:	ecbd 8b02 	vpop	{d8}
 802a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3ec:	9b07      	ldr	r3, [sp, #28]
 802a3ee:	2b01      	cmp	r3, #1
 802a3f0:	f77f ae36 	ble.w	802a060 <_dtoa_r+0x6d8>
 802a3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a3f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a3f8:	2001      	movs	r0, #1
 802a3fa:	e656      	b.n	802a0aa <_dtoa_r+0x722>
 802a3fc:	f1bb 0f00 	cmp.w	fp, #0
 802a400:	f77f aed7 	ble.w	802a1b2 <_dtoa_r+0x82a>
 802a404:	463e      	mov	r6, r7
 802a406:	9801      	ldr	r0, [sp, #4]
 802a408:	4621      	mov	r1, r4
 802a40a:	f7ff fa35 	bl	8029878 <quorem>
 802a40e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a412:	f806 ab01 	strb.w	sl, [r6], #1
 802a416:	1bf2      	subs	r2, r6, r7
 802a418:	4593      	cmp	fp, r2
 802a41a:	ddb4      	ble.n	802a386 <_dtoa_r+0x9fe>
 802a41c:	9901      	ldr	r1, [sp, #4]
 802a41e:	2300      	movs	r3, #0
 802a420:	220a      	movs	r2, #10
 802a422:	4648      	mov	r0, r9
 802a424:	f000 f8b2 	bl	802a58c <__multadd>
 802a428:	9001      	str	r0, [sp, #4]
 802a42a:	e7ec      	b.n	802a406 <_dtoa_r+0xa7e>
 802a42c:	0803114f 	.word	0x0803114f
 802a430:	080310ea 	.word	0x080310ea

0802a434 <_free_r>:
 802a434:	b538      	push	{r3, r4, r5, lr}
 802a436:	4605      	mov	r5, r0
 802a438:	2900      	cmp	r1, #0
 802a43a:	d041      	beq.n	802a4c0 <_free_r+0x8c>
 802a43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a440:	1f0c      	subs	r4, r1, #4
 802a442:	2b00      	cmp	r3, #0
 802a444:	bfb8      	it	lt
 802a446:	18e4      	addlt	r4, r4, r3
 802a448:	f7fe f986 	bl	8028758 <__malloc_lock>
 802a44c:	4a1d      	ldr	r2, [pc, #116]	@ (802a4c4 <_free_r+0x90>)
 802a44e:	6813      	ldr	r3, [r2, #0]
 802a450:	b933      	cbnz	r3, 802a460 <_free_r+0x2c>
 802a452:	6063      	str	r3, [r4, #4]
 802a454:	6014      	str	r4, [r2, #0]
 802a456:	4628      	mov	r0, r5
 802a458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a45c:	f7fe b982 	b.w	8028764 <__malloc_unlock>
 802a460:	42a3      	cmp	r3, r4
 802a462:	d908      	bls.n	802a476 <_free_r+0x42>
 802a464:	6820      	ldr	r0, [r4, #0]
 802a466:	1821      	adds	r1, r4, r0
 802a468:	428b      	cmp	r3, r1
 802a46a:	bf01      	itttt	eq
 802a46c:	6819      	ldreq	r1, [r3, #0]
 802a46e:	685b      	ldreq	r3, [r3, #4]
 802a470:	1809      	addeq	r1, r1, r0
 802a472:	6021      	streq	r1, [r4, #0]
 802a474:	e7ed      	b.n	802a452 <_free_r+0x1e>
 802a476:	461a      	mov	r2, r3
 802a478:	685b      	ldr	r3, [r3, #4]
 802a47a:	b10b      	cbz	r3, 802a480 <_free_r+0x4c>
 802a47c:	42a3      	cmp	r3, r4
 802a47e:	d9fa      	bls.n	802a476 <_free_r+0x42>
 802a480:	6811      	ldr	r1, [r2, #0]
 802a482:	1850      	adds	r0, r2, r1
 802a484:	42a0      	cmp	r0, r4
 802a486:	d10b      	bne.n	802a4a0 <_free_r+0x6c>
 802a488:	6820      	ldr	r0, [r4, #0]
 802a48a:	4401      	add	r1, r0
 802a48c:	1850      	adds	r0, r2, r1
 802a48e:	4283      	cmp	r3, r0
 802a490:	6011      	str	r1, [r2, #0]
 802a492:	d1e0      	bne.n	802a456 <_free_r+0x22>
 802a494:	6818      	ldr	r0, [r3, #0]
 802a496:	685b      	ldr	r3, [r3, #4]
 802a498:	6053      	str	r3, [r2, #4]
 802a49a:	4408      	add	r0, r1
 802a49c:	6010      	str	r0, [r2, #0]
 802a49e:	e7da      	b.n	802a456 <_free_r+0x22>
 802a4a0:	d902      	bls.n	802a4a8 <_free_r+0x74>
 802a4a2:	230c      	movs	r3, #12
 802a4a4:	602b      	str	r3, [r5, #0]
 802a4a6:	e7d6      	b.n	802a456 <_free_r+0x22>
 802a4a8:	6820      	ldr	r0, [r4, #0]
 802a4aa:	1821      	adds	r1, r4, r0
 802a4ac:	428b      	cmp	r3, r1
 802a4ae:	bf04      	itt	eq
 802a4b0:	6819      	ldreq	r1, [r3, #0]
 802a4b2:	685b      	ldreq	r3, [r3, #4]
 802a4b4:	6063      	str	r3, [r4, #4]
 802a4b6:	bf04      	itt	eq
 802a4b8:	1809      	addeq	r1, r1, r0
 802a4ba:	6021      	streq	r1, [r4, #0]
 802a4bc:	6054      	str	r4, [r2, #4]
 802a4be:	e7ca      	b.n	802a456 <_free_r+0x22>
 802a4c0:	bd38      	pop	{r3, r4, r5, pc}
 802a4c2:	bf00      	nop
 802a4c4:	2400b63c 	.word	0x2400b63c

0802a4c8 <_Balloc>:
 802a4c8:	b570      	push	{r4, r5, r6, lr}
 802a4ca:	69c6      	ldr	r6, [r0, #28]
 802a4cc:	4604      	mov	r4, r0
 802a4ce:	460d      	mov	r5, r1
 802a4d0:	b976      	cbnz	r6, 802a4f0 <_Balloc+0x28>
 802a4d2:	2010      	movs	r0, #16
 802a4d4:	f7fe f88e 	bl	80285f4 <malloc>
 802a4d8:	4602      	mov	r2, r0
 802a4da:	61e0      	str	r0, [r4, #28]
 802a4dc:	b920      	cbnz	r0, 802a4e8 <_Balloc+0x20>
 802a4de:	4b18      	ldr	r3, [pc, #96]	@ (802a540 <_Balloc+0x78>)
 802a4e0:	4818      	ldr	r0, [pc, #96]	@ (802a544 <_Balloc+0x7c>)
 802a4e2:	216b      	movs	r1, #107	@ 0x6b
 802a4e4:	f7fe f848 	bl	8028578 <__assert_func>
 802a4e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a4ec:	6006      	str	r6, [r0, #0]
 802a4ee:	60c6      	str	r6, [r0, #12]
 802a4f0:	69e6      	ldr	r6, [r4, #28]
 802a4f2:	68f3      	ldr	r3, [r6, #12]
 802a4f4:	b183      	cbz	r3, 802a518 <_Balloc+0x50>
 802a4f6:	69e3      	ldr	r3, [r4, #28]
 802a4f8:	68db      	ldr	r3, [r3, #12]
 802a4fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a4fe:	b9b8      	cbnz	r0, 802a530 <_Balloc+0x68>
 802a500:	2101      	movs	r1, #1
 802a502:	fa01 f605 	lsl.w	r6, r1, r5
 802a506:	1d72      	adds	r2, r6, #5
 802a508:	0092      	lsls	r2, r2, #2
 802a50a:	4620      	mov	r0, r4
 802a50c:	f7fe f85e 	bl	80285cc <_calloc_r>
 802a510:	b160      	cbz	r0, 802a52c <_Balloc+0x64>
 802a512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a516:	e00e      	b.n	802a536 <_Balloc+0x6e>
 802a518:	2221      	movs	r2, #33	@ 0x21
 802a51a:	2104      	movs	r1, #4
 802a51c:	4620      	mov	r0, r4
 802a51e:	f7fe f855 	bl	80285cc <_calloc_r>
 802a522:	69e3      	ldr	r3, [r4, #28]
 802a524:	60f0      	str	r0, [r6, #12]
 802a526:	68db      	ldr	r3, [r3, #12]
 802a528:	2b00      	cmp	r3, #0
 802a52a:	d1e4      	bne.n	802a4f6 <_Balloc+0x2e>
 802a52c:	2000      	movs	r0, #0
 802a52e:	bd70      	pop	{r4, r5, r6, pc}
 802a530:	6802      	ldr	r2, [r0, #0]
 802a532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a536:	2300      	movs	r3, #0
 802a538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a53c:	e7f7      	b.n	802a52e <_Balloc+0x66>
 802a53e:	bf00      	nop
 802a540:	08030f46 	.word	0x08030f46
 802a544:	08031160 	.word	0x08031160

0802a548 <_Bfree>:
 802a548:	b570      	push	{r4, r5, r6, lr}
 802a54a:	69c6      	ldr	r6, [r0, #28]
 802a54c:	4605      	mov	r5, r0
 802a54e:	460c      	mov	r4, r1
 802a550:	b976      	cbnz	r6, 802a570 <_Bfree+0x28>
 802a552:	2010      	movs	r0, #16
 802a554:	f7fe f84e 	bl	80285f4 <malloc>
 802a558:	4602      	mov	r2, r0
 802a55a:	61e8      	str	r0, [r5, #28]
 802a55c:	b920      	cbnz	r0, 802a568 <_Bfree+0x20>
 802a55e:	4b09      	ldr	r3, [pc, #36]	@ (802a584 <_Bfree+0x3c>)
 802a560:	4809      	ldr	r0, [pc, #36]	@ (802a588 <_Bfree+0x40>)
 802a562:	218f      	movs	r1, #143	@ 0x8f
 802a564:	f7fe f808 	bl	8028578 <__assert_func>
 802a568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a56c:	6006      	str	r6, [r0, #0]
 802a56e:	60c6      	str	r6, [r0, #12]
 802a570:	b13c      	cbz	r4, 802a582 <_Bfree+0x3a>
 802a572:	69eb      	ldr	r3, [r5, #28]
 802a574:	6862      	ldr	r2, [r4, #4]
 802a576:	68db      	ldr	r3, [r3, #12]
 802a578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a57c:	6021      	str	r1, [r4, #0]
 802a57e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a582:	bd70      	pop	{r4, r5, r6, pc}
 802a584:	08030f46 	.word	0x08030f46
 802a588:	08031160 	.word	0x08031160

0802a58c <__multadd>:
 802a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a590:	690d      	ldr	r5, [r1, #16]
 802a592:	4607      	mov	r7, r0
 802a594:	460c      	mov	r4, r1
 802a596:	461e      	mov	r6, r3
 802a598:	f101 0c14 	add.w	ip, r1, #20
 802a59c:	2000      	movs	r0, #0
 802a59e:	f8dc 3000 	ldr.w	r3, [ip]
 802a5a2:	b299      	uxth	r1, r3
 802a5a4:	fb02 6101 	mla	r1, r2, r1, r6
 802a5a8:	0c1e      	lsrs	r6, r3, #16
 802a5aa:	0c0b      	lsrs	r3, r1, #16
 802a5ac:	fb02 3306 	mla	r3, r2, r6, r3
 802a5b0:	b289      	uxth	r1, r1
 802a5b2:	3001      	adds	r0, #1
 802a5b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a5b8:	4285      	cmp	r5, r0
 802a5ba:	f84c 1b04 	str.w	r1, [ip], #4
 802a5be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802a5c2:	dcec      	bgt.n	802a59e <__multadd+0x12>
 802a5c4:	b30e      	cbz	r6, 802a60a <__multadd+0x7e>
 802a5c6:	68a3      	ldr	r3, [r4, #8]
 802a5c8:	42ab      	cmp	r3, r5
 802a5ca:	dc19      	bgt.n	802a600 <__multadd+0x74>
 802a5cc:	6861      	ldr	r1, [r4, #4]
 802a5ce:	4638      	mov	r0, r7
 802a5d0:	3101      	adds	r1, #1
 802a5d2:	f7ff ff79 	bl	802a4c8 <_Balloc>
 802a5d6:	4680      	mov	r8, r0
 802a5d8:	b928      	cbnz	r0, 802a5e6 <__multadd+0x5a>
 802a5da:	4602      	mov	r2, r0
 802a5dc:	4b0c      	ldr	r3, [pc, #48]	@ (802a610 <__multadd+0x84>)
 802a5de:	480d      	ldr	r0, [pc, #52]	@ (802a614 <__multadd+0x88>)
 802a5e0:	21ba      	movs	r1, #186	@ 0xba
 802a5e2:	f7fd ffc9 	bl	8028578 <__assert_func>
 802a5e6:	6922      	ldr	r2, [r4, #16]
 802a5e8:	3202      	adds	r2, #2
 802a5ea:	f104 010c 	add.w	r1, r4, #12
 802a5ee:	0092      	lsls	r2, r2, #2
 802a5f0:	300c      	adds	r0, #12
 802a5f2:	f7ff f92c 	bl	802984e <memcpy>
 802a5f6:	4621      	mov	r1, r4
 802a5f8:	4638      	mov	r0, r7
 802a5fa:	f7ff ffa5 	bl	802a548 <_Bfree>
 802a5fe:	4644      	mov	r4, r8
 802a600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802a604:	3501      	adds	r5, #1
 802a606:	615e      	str	r6, [r3, #20]
 802a608:	6125      	str	r5, [r4, #16]
 802a60a:	4620      	mov	r0, r4
 802a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a610:	0803114f 	.word	0x0803114f
 802a614:	08031160 	.word	0x08031160

0802a618 <__hi0bits>:
 802a618:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a61c:	4603      	mov	r3, r0
 802a61e:	bf36      	itet	cc
 802a620:	0403      	lslcc	r3, r0, #16
 802a622:	2000      	movcs	r0, #0
 802a624:	2010      	movcc	r0, #16
 802a626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802a62a:	bf3c      	itt	cc
 802a62c:	021b      	lslcc	r3, r3, #8
 802a62e:	3008      	addcc	r0, #8
 802a630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802a634:	bf3c      	itt	cc
 802a636:	011b      	lslcc	r3, r3, #4
 802a638:	3004      	addcc	r0, #4
 802a63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802a63e:	bf3c      	itt	cc
 802a640:	009b      	lslcc	r3, r3, #2
 802a642:	3002      	addcc	r0, #2
 802a644:	2b00      	cmp	r3, #0
 802a646:	db05      	blt.n	802a654 <__hi0bits+0x3c>
 802a648:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802a64c:	f100 0001 	add.w	r0, r0, #1
 802a650:	bf08      	it	eq
 802a652:	2020      	moveq	r0, #32
 802a654:	4770      	bx	lr

0802a656 <__lo0bits>:
 802a656:	6803      	ldr	r3, [r0, #0]
 802a658:	4602      	mov	r2, r0
 802a65a:	f013 0007 	ands.w	r0, r3, #7
 802a65e:	d00b      	beq.n	802a678 <__lo0bits+0x22>
 802a660:	07d9      	lsls	r1, r3, #31
 802a662:	d421      	bmi.n	802a6a8 <__lo0bits+0x52>
 802a664:	0798      	lsls	r0, r3, #30
 802a666:	bf49      	itett	mi
 802a668:	085b      	lsrmi	r3, r3, #1
 802a66a:	089b      	lsrpl	r3, r3, #2
 802a66c:	2001      	movmi	r0, #1
 802a66e:	6013      	strmi	r3, [r2, #0]
 802a670:	bf5c      	itt	pl
 802a672:	6013      	strpl	r3, [r2, #0]
 802a674:	2002      	movpl	r0, #2
 802a676:	4770      	bx	lr
 802a678:	b299      	uxth	r1, r3
 802a67a:	b909      	cbnz	r1, 802a680 <__lo0bits+0x2a>
 802a67c:	0c1b      	lsrs	r3, r3, #16
 802a67e:	2010      	movs	r0, #16
 802a680:	b2d9      	uxtb	r1, r3
 802a682:	b909      	cbnz	r1, 802a688 <__lo0bits+0x32>
 802a684:	3008      	adds	r0, #8
 802a686:	0a1b      	lsrs	r3, r3, #8
 802a688:	0719      	lsls	r1, r3, #28
 802a68a:	bf04      	itt	eq
 802a68c:	091b      	lsreq	r3, r3, #4
 802a68e:	3004      	addeq	r0, #4
 802a690:	0799      	lsls	r1, r3, #30
 802a692:	bf04      	itt	eq
 802a694:	089b      	lsreq	r3, r3, #2
 802a696:	3002      	addeq	r0, #2
 802a698:	07d9      	lsls	r1, r3, #31
 802a69a:	d403      	bmi.n	802a6a4 <__lo0bits+0x4e>
 802a69c:	085b      	lsrs	r3, r3, #1
 802a69e:	f100 0001 	add.w	r0, r0, #1
 802a6a2:	d003      	beq.n	802a6ac <__lo0bits+0x56>
 802a6a4:	6013      	str	r3, [r2, #0]
 802a6a6:	4770      	bx	lr
 802a6a8:	2000      	movs	r0, #0
 802a6aa:	4770      	bx	lr
 802a6ac:	2020      	movs	r0, #32
 802a6ae:	4770      	bx	lr

0802a6b0 <__i2b>:
 802a6b0:	b510      	push	{r4, lr}
 802a6b2:	460c      	mov	r4, r1
 802a6b4:	2101      	movs	r1, #1
 802a6b6:	f7ff ff07 	bl	802a4c8 <_Balloc>
 802a6ba:	4602      	mov	r2, r0
 802a6bc:	b928      	cbnz	r0, 802a6ca <__i2b+0x1a>
 802a6be:	4b05      	ldr	r3, [pc, #20]	@ (802a6d4 <__i2b+0x24>)
 802a6c0:	4805      	ldr	r0, [pc, #20]	@ (802a6d8 <__i2b+0x28>)
 802a6c2:	f240 1145 	movw	r1, #325	@ 0x145
 802a6c6:	f7fd ff57 	bl	8028578 <__assert_func>
 802a6ca:	2301      	movs	r3, #1
 802a6cc:	6144      	str	r4, [r0, #20]
 802a6ce:	6103      	str	r3, [r0, #16]
 802a6d0:	bd10      	pop	{r4, pc}
 802a6d2:	bf00      	nop
 802a6d4:	0803114f 	.word	0x0803114f
 802a6d8:	08031160 	.word	0x08031160

0802a6dc <__multiply>:
 802a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6e0:	4614      	mov	r4, r2
 802a6e2:	690a      	ldr	r2, [r1, #16]
 802a6e4:	6923      	ldr	r3, [r4, #16]
 802a6e6:	429a      	cmp	r2, r3
 802a6e8:	bfa8      	it	ge
 802a6ea:	4623      	movge	r3, r4
 802a6ec:	460f      	mov	r7, r1
 802a6ee:	bfa4      	itt	ge
 802a6f0:	460c      	movge	r4, r1
 802a6f2:	461f      	movge	r7, r3
 802a6f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a6f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802a6fc:	68a3      	ldr	r3, [r4, #8]
 802a6fe:	6861      	ldr	r1, [r4, #4]
 802a700:	eb0a 0609 	add.w	r6, sl, r9
 802a704:	42b3      	cmp	r3, r6
 802a706:	b085      	sub	sp, #20
 802a708:	bfb8      	it	lt
 802a70a:	3101      	addlt	r1, #1
 802a70c:	f7ff fedc 	bl	802a4c8 <_Balloc>
 802a710:	b930      	cbnz	r0, 802a720 <__multiply+0x44>
 802a712:	4602      	mov	r2, r0
 802a714:	4b44      	ldr	r3, [pc, #272]	@ (802a828 <__multiply+0x14c>)
 802a716:	4845      	ldr	r0, [pc, #276]	@ (802a82c <__multiply+0x150>)
 802a718:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802a71c:	f7fd ff2c 	bl	8028578 <__assert_func>
 802a720:	f100 0514 	add.w	r5, r0, #20
 802a724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802a728:	462b      	mov	r3, r5
 802a72a:	2200      	movs	r2, #0
 802a72c:	4543      	cmp	r3, r8
 802a72e:	d321      	bcc.n	802a774 <__multiply+0x98>
 802a730:	f107 0114 	add.w	r1, r7, #20
 802a734:	f104 0214 	add.w	r2, r4, #20
 802a738:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802a73c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802a740:	9302      	str	r3, [sp, #8]
 802a742:	1b13      	subs	r3, r2, r4
 802a744:	3b15      	subs	r3, #21
 802a746:	f023 0303 	bic.w	r3, r3, #3
 802a74a:	3304      	adds	r3, #4
 802a74c:	f104 0715 	add.w	r7, r4, #21
 802a750:	42ba      	cmp	r2, r7
 802a752:	bf38      	it	cc
 802a754:	2304      	movcc	r3, #4
 802a756:	9301      	str	r3, [sp, #4]
 802a758:	9b02      	ldr	r3, [sp, #8]
 802a75a:	9103      	str	r1, [sp, #12]
 802a75c:	428b      	cmp	r3, r1
 802a75e:	d80c      	bhi.n	802a77a <__multiply+0x9e>
 802a760:	2e00      	cmp	r6, #0
 802a762:	dd03      	ble.n	802a76c <__multiply+0x90>
 802a764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a768:	2b00      	cmp	r3, #0
 802a76a:	d05b      	beq.n	802a824 <__multiply+0x148>
 802a76c:	6106      	str	r6, [r0, #16]
 802a76e:	b005      	add	sp, #20
 802a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a774:	f843 2b04 	str.w	r2, [r3], #4
 802a778:	e7d8      	b.n	802a72c <__multiply+0x50>
 802a77a:	f8b1 a000 	ldrh.w	sl, [r1]
 802a77e:	f1ba 0f00 	cmp.w	sl, #0
 802a782:	d024      	beq.n	802a7ce <__multiply+0xf2>
 802a784:	f104 0e14 	add.w	lr, r4, #20
 802a788:	46a9      	mov	r9, r5
 802a78a:	f04f 0c00 	mov.w	ip, #0
 802a78e:	f85e 7b04 	ldr.w	r7, [lr], #4
 802a792:	f8d9 3000 	ldr.w	r3, [r9]
 802a796:	fa1f fb87 	uxth.w	fp, r7
 802a79a:	b29b      	uxth	r3, r3
 802a79c:	fb0a 330b 	mla	r3, sl, fp, r3
 802a7a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802a7a4:	f8d9 7000 	ldr.w	r7, [r9]
 802a7a8:	4463      	add	r3, ip
 802a7aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a7ae:	fb0a c70b 	mla	r7, sl, fp, ip
 802a7b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802a7b6:	b29b      	uxth	r3, r3
 802a7b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a7bc:	4572      	cmp	r2, lr
 802a7be:	f849 3b04 	str.w	r3, [r9], #4
 802a7c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a7c6:	d8e2      	bhi.n	802a78e <__multiply+0xb2>
 802a7c8:	9b01      	ldr	r3, [sp, #4]
 802a7ca:	f845 c003 	str.w	ip, [r5, r3]
 802a7ce:	9b03      	ldr	r3, [sp, #12]
 802a7d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802a7d4:	3104      	adds	r1, #4
 802a7d6:	f1b9 0f00 	cmp.w	r9, #0
 802a7da:	d021      	beq.n	802a820 <__multiply+0x144>
 802a7dc:	682b      	ldr	r3, [r5, #0]
 802a7de:	f104 0c14 	add.w	ip, r4, #20
 802a7e2:	46ae      	mov	lr, r5
 802a7e4:	f04f 0a00 	mov.w	sl, #0
 802a7e8:	f8bc b000 	ldrh.w	fp, [ip]
 802a7ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802a7f0:	fb09 770b 	mla	r7, r9, fp, r7
 802a7f4:	4457      	add	r7, sl
 802a7f6:	b29b      	uxth	r3, r3
 802a7f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a7fc:	f84e 3b04 	str.w	r3, [lr], #4
 802a800:	f85c 3b04 	ldr.w	r3, [ip], #4
 802a804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a808:	f8be 3000 	ldrh.w	r3, [lr]
 802a80c:	fb09 330a 	mla	r3, r9, sl, r3
 802a810:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802a814:	4562      	cmp	r2, ip
 802a816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a81a:	d8e5      	bhi.n	802a7e8 <__multiply+0x10c>
 802a81c:	9f01      	ldr	r7, [sp, #4]
 802a81e:	51eb      	str	r3, [r5, r7]
 802a820:	3504      	adds	r5, #4
 802a822:	e799      	b.n	802a758 <__multiply+0x7c>
 802a824:	3e01      	subs	r6, #1
 802a826:	e79b      	b.n	802a760 <__multiply+0x84>
 802a828:	0803114f 	.word	0x0803114f
 802a82c:	08031160 	.word	0x08031160

0802a830 <__pow5mult>:
 802a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a834:	4615      	mov	r5, r2
 802a836:	f012 0203 	ands.w	r2, r2, #3
 802a83a:	4607      	mov	r7, r0
 802a83c:	460e      	mov	r6, r1
 802a83e:	d007      	beq.n	802a850 <__pow5mult+0x20>
 802a840:	4c25      	ldr	r4, [pc, #148]	@ (802a8d8 <__pow5mult+0xa8>)
 802a842:	3a01      	subs	r2, #1
 802a844:	2300      	movs	r3, #0
 802a846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a84a:	f7ff fe9f 	bl	802a58c <__multadd>
 802a84e:	4606      	mov	r6, r0
 802a850:	10ad      	asrs	r5, r5, #2
 802a852:	d03d      	beq.n	802a8d0 <__pow5mult+0xa0>
 802a854:	69fc      	ldr	r4, [r7, #28]
 802a856:	b97c      	cbnz	r4, 802a878 <__pow5mult+0x48>
 802a858:	2010      	movs	r0, #16
 802a85a:	f7fd fecb 	bl	80285f4 <malloc>
 802a85e:	4602      	mov	r2, r0
 802a860:	61f8      	str	r0, [r7, #28]
 802a862:	b928      	cbnz	r0, 802a870 <__pow5mult+0x40>
 802a864:	4b1d      	ldr	r3, [pc, #116]	@ (802a8dc <__pow5mult+0xac>)
 802a866:	481e      	ldr	r0, [pc, #120]	@ (802a8e0 <__pow5mult+0xb0>)
 802a868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802a86c:	f7fd fe84 	bl	8028578 <__assert_func>
 802a870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a874:	6004      	str	r4, [r0, #0]
 802a876:	60c4      	str	r4, [r0, #12]
 802a878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802a87c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a880:	b94c      	cbnz	r4, 802a896 <__pow5mult+0x66>
 802a882:	f240 2171 	movw	r1, #625	@ 0x271
 802a886:	4638      	mov	r0, r7
 802a888:	f7ff ff12 	bl	802a6b0 <__i2b>
 802a88c:	2300      	movs	r3, #0
 802a88e:	f8c8 0008 	str.w	r0, [r8, #8]
 802a892:	4604      	mov	r4, r0
 802a894:	6003      	str	r3, [r0, #0]
 802a896:	f04f 0900 	mov.w	r9, #0
 802a89a:	07eb      	lsls	r3, r5, #31
 802a89c:	d50a      	bpl.n	802a8b4 <__pow5mult+0x84>
 802a89e:	4631      	mov	r1, r6
 802a8a0:	4622      	mov	r2, r4
 802a8a2:	4638      	mov	r0, r7
 802a8a4:	f7ff ff1a 	bl	802a6dc <__multiply>
 802a8a8:	4631      	mov	r1, r6
 802a8aa:	4680      	mov	r8, r0
 802a8ac:	4638      	mov	r0, r7
 802a8ae:	f7ff fe4b 	bl	802a548 <_Bfree>
 802a8b2:	4646      	mov	r6, r8
 802a8b4:	106d      	asrs	r5, r5, #1
 802a8b6:	d00b      	beq.n	802a8d0 <__pow5mult+0xa0>
 802a8b8:	6820      	ldr	r0, [r4, #0]
 802a8ba:	b938      	cbnz	r0, 802a8cc <__pow5mult+0x9c>
 802a8bc:	4622      	mov	r2, r4
 802a8be:	4621      	mov	r1, r4
 802a8c0:	4638      	mov	r0, r7
 802a8c2:	f7ff ff0b 	bl	802a6dc <__multiply>
 802a8c6:	6020      	str	r0, [r4, #0]
 802a8c8:	f8c0 9000 	str.w	r9, [r0]
 802a8cc:	4604      	mov	r4, r0
 802a8ce:	e7e4      	b.n	802a89a <__pow5mult+0x6a>
 802a8d0:	4630      	mov	r0, r6
 802a8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a8d6:	bf00      	nop
 802a8d8:	080311bc 	.word	0x080311bc
 802a8dc:	08030f46 	.word	0x08030f46
 802a8e0:	08031160 	.word	0x08031160

0802a8e4 <__lshift>:
 802a8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a8e8:	460c      	mov	r4, r1
 802a8ea:	6849      	ldr	r1, [r1, #4]
 802a8ec:	6923      	ldr	r3, [r4, #16]
 802a8ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a8f2:	68a3      	ldr	r3, [r4, #8]
 802a8f4:	4607      	mov	r7, r0
 802a8f6:	4691      	mov	r9, r2
 802a8f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a8fc:	f108 0601 	add.w	r6, r8, #1
 802a900:	42b3      	cmp	r3, r6
 802a902:	db0b      	blt.n	802a91c <__lshift+0x38>
 802a904:	4638      	mov	r0, r7
 802a906:	f7ff fddf 	bl	802a4c8 <_Balloc>
 802a90a:	4605      	mov	r5, r0
 802a90c:	b948      	cbnz	r0, 802a922 <__lshift+0x3e>
 802a90e:	4602      	mov	r2, r0
 802a910:	4b28      	ldr	r3, [pc, #160]	@ (802a9b4 <__lshift+0xd0>)
 802a912:	4829      	ldr	r0, [pc, #164]	@ (802a9b8 <__lshift+0xd4>)
 802a914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802a918:	f7fd fe2e 	bl	8028578 <__assert_func>
 802a91c:	3101      	adds	r1, #1
 802a91e:	005b      	lsls	r3, r3, #1
 802a920:	e7ee      	b.n	802a900 <__lshift+0x1c>
 802a922:	2300      	movs	r3, #0
 802a924:	f100 0114 	add.w	r1, r0, #20
 802a928:	f100 0210 	add.w	r2, r0, #16
 802a92c:	4618      	mov	r0, r3
 802a92e:	4553      	cmp	r3, sl
 802a930:	db33      	blt.n	802a99a <__lshift+0xb6>
 802a932:	6920      	ldr	r0, [r4, #16]
 802a934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a938:	f104 0314 	add.w	r3, r4, #20
 802a93c:	f019 091f 	ands.w	r9, r9, #31
 802a940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a948:	d02b      	beq.n	802a9a2 <__lshift+0xbe>
 802a94a:	f1c9 0e20 	rsb	lr, r9, #32
 802a94e:	468a      	mov	sl, r1
 802a950:	2200      	movs	r2, #0
 802a952:	6818      	ldr	r0, [r3, #0]
 802a954:	fa00 f009 	lsl.w	r0, r0, r9
 802a958:	4310      	orrs	r0, r2
 802a95a:	f84a 0b04 	str.w	r0, [sl], #4
 802a95e:	f853 2b04 	ldr.w	r2, [r3], #4
 802a962:	459c      	cmp	ip, r3
 802a964:	fa22 f20e 	lsr.w	r2, r2, lr
 802a968:	d8f3      	bhi.n	802a952 <__lshift+0x6e>
 802a96a:	ebac 0304 	sub.w	r3, ip, r4
 802a96e:	3b15      	subs	r3, #21
 802a970:	f023 0303 	bic.w	r3, r3, #3
 802a974:	3304      	adds	r3, #4
 802a976:	f104 0015 	add.w	r0, r4, #21
 802a97a:	4584      	cmp	ip, r0
 802a97c:	bf38      	it	cc
 802a97e:	2304      	movcc	r3, #4
 802a980:	50ca      	str	r2, [r1, r3]
 802a982:	b10a      	cbz	r2, 802a988 <__lshift+0xa4>
 802a984:	f108 0602 	add.w	r6, r8, #2
 802a988:	3e01      	subs	r6, #1
 802a98a:	4638      	mov	r0, r7
 802a98c:	612e      	str	r6, [r5, #16]
 802a98e:	4621      	mov	r1, r4
 802a990:	f7ff fdda 	bl	802a548 <_Bfree>
 802a994:	4628      	mov	r0, r5
 802a996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a99a:	f842 0f04 	str.w	r0, [r2, #4]!
 802a99e:	3301      	adds	r3, #1
 802a9a0:	e7c5      	b.n	802a92e <__lshift+0x4a>
 802a9a2:	3904      	subs	r1, #4
 802a9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 802a9a8:	f841 2f04 	str.w	r2, [r1, #4]!
 802a9ac:	459c      	cmp	ip, r3
 802a9ae:	d8f9      	bhi.n	802a9a4 <__lshift+0xc0>
 802a9b0:	e7ea      	b.n	802a988 <__lshift+0xa4>
 802a9b2:	bf00      	nop
 802a9b4:	0803114f 	.word	0x0803114f
 802a9b8:	08031160 	.word	0x08031160

0802a9bc <__mcmp>:
 802a9bc:	690a      	ldr	r2, [r1, #16]
 802a9be:	4603      	mov	r3, r0
 802a9c0:	6900      	ldr	r0, [r0, #16]
 802a9c2:	1a80      	subs	r0, r0, r2
 802a9c4:	b530      	push	{r4, r5, lr}
 802a9c6:	d10e      	bne.n	802a9e6 <__mcmp+0x2a>
 802a9c8:	3314      	adds	r3, #20
 802a9ca:	3114      	adds	r1, #20
 802a9cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802a9d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802a9d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802a9d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802a9dc:	4295      	cmp	r5, r2
 802a9de:	d003      	beq.n	802a9e8 <__mcmp+0x2c>
 802a9e0:	d205      	bcs.n	802a9ee <__mcmp+0x32>
 802a9e2:	f04f 30ff 	mov.w	r0, #4294967295
 802a9e6:	bd30      	pop	{r4, r5, pc}
 802a9e8:	42a3      	cmp	r3, r4
 802a9ea:	d3f3      	bcc.n	802a9d4 <__mcmp+0x18>
 802a9ec:	e7fb      	b.n	802a9e6 <__mcmp+0x2a>
 802a9ee:	2001      	movs	r0, #1
 802a9f0:	e7f9      	b.n	802a9e6 <__mcmp+0x2a>
	...

0802a9f4 <__mdiff>:
 802a9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9f8:	4689      	mov	r9, r1
 802a9fa:	4606      	mov	r6, r0
 802a9fc:	4611      	mov	r1, r2
 802a9fe:	4648      	mov	r0, r9
 802aa00:	4614      	mov	r4, r2
 802aa02:	f7ff ffdb 	bl	802a9bc <__mcmp>
 802aa06:	1e05      	subs	r5, r0, #0
 802aa08:	d112      	bne.n	802aa30 <__mdiff+0x3c>
 802aa0a:	4629      	mov	r1, r5
 802aa0c:	4630      	mov	r0, r6
 802aa0e:	f7ff fd5b 	bl	802a4c8 <_Balloc>
 802aa12:	4602      	mov	r2, r0
 802aa14:	b928      	cbnz	r0, 802aa22 <__mdiff+0x2e>
 802aa16:	4b3f      	ldr	r3, [pc, #252]	@ (802ab14 <__mdiff+0x120>)
 802aa18:	f240 2137 	movw	r1, #567	@ 0x237
 802aa1c:	483e      	ldr	r0, [pc, #248]	@ (802ab18 <__mdiff+0x124>)
 802aa1e:	f7fd fdab 	bl	8028578 <__assert_func>
 802aa22:	2301      	movs	r3, #1
 802aa24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802aa28:	4610      	mov	r0, r2
 802aa2a:	b003      	add	sp, #12
 802aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa30:	bfbc      	itt	lt
 802aa32:	464b      	movlt	r3, r9
 802aa34:	46a1      	movlt	r9, r4
 802aa36:	4630      	mov	r0, r6
 802aa38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802aa3c:	bfba      	itte	lt
 802aa3e:	461c      	movlt	r4, r3
 802aa40:	2501      	movlt	r5, #1
 802aa42:	2500      	movge	r5, #0
 802aa44:	f7ff fd40 	bl	802a4c8 <_Balloc>
 802aa48:	4602      	mov	r2, r0
 802aa4a:	b918      	cbnz	r0, 802aa54 <__mdiff+0x60>
 802aa4c:	4b31      	ldr	r3, [pc, #196]	@ (802ab14 <__mdiff+0x120>)
 802aa4e:	f240 2145 	movw	r1, #581	@ 0x245
 802aa52:	e7e3      	b.n	802aa1c <__mdiff+0x28>
 802aa54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802aa58:	6926      	ldr	r6, [r4, #16]
 802aa5a:	60c5      	str	r5, [r0, #12]
 802aa5c:	f109 0310 	add.w	r3, r9, #16
 802aa60:	f109 0514 	add.w	r5, r9, #20
 802aa64:	f104 0e14 	add.w	lr, r4, #20
 802aa68:	f100 0b14 	add.w	fp, r0, #20
 802aa6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802aa70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802aa74:	9301      	str	r3, [sp, #4]
 802aa76:	46d9      	mov	r9, fp
 802aa78:	f04f 0c00 	mov.w	ip, #0
 802aa7c:	9b01      	ldr	r3, [sp, #4]
 802aa7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 802aa82:	f853 af04 	ldr.w	sl, [r3, #4]!
 802aa86:	9301      	str	r3, [sp, #4]
 802aa88:	fa1f f38a 	uxth.w	r3, sl
 802aa8c:	4619      	mov	r1, r3
 802aa8e:	b283      	uxth	r3, r0
 802aa90:	1acb      	subs	r3, r1, r3
 802aa92:	0c00      	lsrs	r0, r0, #16
 802aa94:	4463      	add	r3, ip
 802aa96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802aa9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802aa9e:	b29b      	uxth	r3, r3
 802aaa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802aaa4:	4576      	cmp	r6, lr
 802aaa6:	f849 3b04 	str.w	r3, [r9], #4
 802aaaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802aaae:	d8e5      	bhi.n	802aa7c <__mdiff+0x88>
 802aab0:	1b33      	subs	r3, r6, r4
 802aab2:	3b15      	subs	r3, #21
 802aab4:	f023 0303 	bic.w	r3, r3, #3
 802aab8:	3415      	adds	r4, #21
 802aaba:	3304      	adds	r3, #4
 802aabc:	42a6      	cmp	r6, r4
 802aabe:	bf38      	it	cc
 802aac0:	2304      	movcc	r3, #4
 802aac2:	441d      	add	r5, r3
 802aac4:	445b      	add	r3, fp
 802aac6:	461e      	mov	r6, r3
 802aac8:	462c      	mov	r4, r5
 802aaca:	4544      	cmp	r4, r8
 802aacc:	d30e      	bcc.n	802aaec <__mdiff+0xf8>
 802aace:	f108 0103 	add.w	r1, r8, #3
 802aad2:	1b49      	subs	r1, r1, r5
 802aad4:	f021 0103 	bic.w	r1, r1, #3
 802aad8:	3d03      	subs	r5, #3
 802aada:	45a8      	cmp	r8, r5
 802aadc:	bf38      	it	cc
 802aade:	2100      	movcc	r1, #0
 802aae0:	440b      	add	r3, r1
 802aae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802aae6:	b191      	cbz	r1, 802ab0e <__mdiff+0x11a>
 802aae8:	6117      	str	r7, [r2, #16]
 802aaea:	e79d      	b.n	802aa28 <__mdiff+0x34>
 802aaec:	f854 1b04 	ldr.w	r1, [r4], #4
 802aaf0:	46e6      	mov	lr, ip
 802aaf2:	0c08      	lsrs	r0, r1, #16
 802aaf4:	fa1c fc81 	uxtah	ip, ip, r1
 802aaf8:	4471      	add	r1, lr
 802aafa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802aafe:	b289      	uxth	r1, r1
 802ab00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802ab04:	f846 1b04 	str.w	r1, [r6], #4
 802ab08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802ab0c:	e7dd      	b.n	802aaca <__mdiff+0xd6>
 802ab0e:	3f01      	subs	r7, #1
 802ab10:	e7e7      	b.n	802aae2 <__mdiff+0xee>
 802ab12:	bf00      	nop
 802ab14:	0803114f 	.word	0x0803114f
 802ab18:	08031160 	.word	0x08031160

0802ab1c <__d2b>:
 802ab1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ab20:	460f      	mov	r7, r1
 802ab22:	2101      	movs	r1, #1
 802ab24:	ec59 8b10 	vmov	r8, r9, d0
 802ab28:	4616      	mov	r6, r2
 802ab2a:	f7ff fccd 	bl	802a4c8 <_Balloc>
 802ab2e:	4604      	mov	r4, r0
 802ab30:	b930      	cbnz	r0, 802ab40 <__d2b+0x24>
 802ab32:	4602      	mov	r2, r0
 802ab34:	4b23      	ldr	r3, [pc, #140]	@ (802abc4 <__d2b+0xa8>)
 802ab36:	4824      	ldr	r0, [pc, #144]	@ (802abc8 <__d2b+0xac>)
 802ab38:	f240 310f 	movw	r1, #783	@ 0x30f
 802ab3c:	f7fd fd1c 	bl	8028578 <__assert_func>
 802ab40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802ab44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ab48:	b10d      	cbz	r5, 802ab4e <__d2b+0x32>
 802ab4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802ab4e:	9301      	str	r3, [sp, #4]
 802ab50:	f1b8 0300 	subs.w	r3, r8, #0
 802ab54:	d023      	beq.n	802ab9e <__d2b+0x82>
 802ab56:	4668      	mov	r0, sp
 802ab58:	9300      	str	r3, [sp, #0]
 802ab5a:	f7ff fd7c 	bl	802a656 <__lo0bits>
 802ab5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 802ab62:	b1d0      	cbz	r0, 802ab9a <__d2b+0x7e>
 802ab64:	f1c0 0320 	rsb	r3, r0, #32
 802ab68:	fa02 f303 	lsl.w	r3, r2, r3
 802ab6c:	430b      	orrs	r3, r1
 802ab6e:	40c2      	lsrs	r2, r0
 802ab70:	6163      	str	r3, [r4, #20]
 802ab72:	9201      	str	r2, [sp, #4]
 802ab74:	9b01      	ldr	r3, [sp, #4]
 802ab76:	61a3      	str	r3, [r4, #24]
 802ab78:	2b00      	cmp	r3, #0
 802ab7a:	bf0c      	ite	eq
 802ab7c:	2201      	moveq	r2, #1
 802ab7e:	2202      	movne	r2, #2
 802ab80:	6122      	str	r2, [r4, #16]
 802ab82:	b1a5      	cbz	r5, 802abae <__d2b+0x92>
 802ab84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802ab88:	4405      	add	r5, r0
 802ab8a:	603d      	str	r5, [r7, #0]
 802ab8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802ab90:	6030      	str	r0, [r6, #0]
 802ab92:	4620      	mov	r0, r4
 802ab94:	b003      	add	sp, #12
 802ab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ab9a:	6161      	str	r1, [r4, #20]
 802ab9c:	e7ea      	b.n	802ab74 <__d2b+0x58>
 802ab9e:	a801      	add	r0, sp, #4
 802aba0:	f7ff fd59 	bl	802a656 <__lo0bits>
 802aba4:	9b01      	ldr	r3, [sp, #4]
 802aba6:	6163      	str	r3, [r4, #20]
 802aba8:	3020      	adds	r0, #32
 802abaa:	2201      	movs	r2, #1
 802abac:	e7e8      	b.n	802ab80 <__d2b+0x64>
 802abae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802abb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802abb6:	6038      	str	r0, [r7, #0]
 802abb8:	6918      	ldr	r0, [r3, #16]
 802abba:	f7ff fd2d 	bl	802a618 <__hi0bits>
 802abbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802abc2:	e7e5      	b.n	802ab90 <__d2b+0x74>
 802abc4:	0803114f 	.word	0x0803114f
 802abc8:	08031160 	.word	0x08031160

0802abcc <__ssputs_r>:
 802abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802abd0:	688e      	ldr	r6, [r1, #8]
 802abd2:	461f      	mov	r7, r3
 802abd4:	42be      	cmp	r6, r7
 802abd6:	680b      	ldr	r3, [r1, #0]
 802abd8:	4682      	mov	sl, r0
 802abda:	460c      	mov	r4, r1
 802abdc:	4690      	mov	r8, r2
 802abde:	d82d      	bhi.n	802ac3c <__ssputs_r+0x70>
 802abe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802abe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802abe8:	d026      	beq.n	802ac38 <__ssputs_r+0x6c>
 802abea:	6965      	ldr	r5, [r4, #20]
 802abec:	6909      	ldr	r1, [r1, #16]
 802abee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802abf2:	eba3 0901 	sub.w	r9, r3, r1
 802abf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802abfa:	1c7b      	adds	r3, r7, #1
 802abfc:	444b      	add	r3, r9
 802abfe:	106d      	asrs	r5, r5, #1
 802ac00:	429d      	cmp	r5, r3
 802ac02:	bf38      	it	cc
 802ac04:	461d      	movcc	r5, r3
 802ac06:	0553      	lsls	r3, r2, #21
 802ac08:	d527      	bpl.n	802ac5a <__ssputs_r+0x8e>
 802ac0a:	4629      	mov	r1, r5
 802ac0c:	f7fd fd24 	bl	8028658 <_malloc_r>
 802ac10:	4606      	mov	r6, r0
 802ac12:	b360      	cbz	r0, 802ac6e <__ssputs_r+0xa2>
 802ac14:	6921      	ldr	r1, [r4, #16]
 802ac16:	464a      	mov	r2, r9
 802ac18:	f7fe fe19 	bl	802984e <memcpy>
 802ac1c:	89a3      	ldrh	r3, [r4, #12]
 802ac1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802ac22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ac26:	81a3      	strh	r3, [r4, #12]
 802ac28:	6126      	str	r6, [r4, #16]
 802ac2a:	6165      	str	r5, [r4, #20]
 802ac2c:	444e      	add	r6, r9
 802ac2e:	eba5 0509 	sub.w	r5, r5, r9
 802ac32:	6026      	str	r6, [r4, #0]
 802ac34:	60a5      	str	r5, [r4, #8]
 802ac36:	463e      	mov	r6, r7
 802ac38:	42be      	cmp	r6, r7
 802ac3a:	d900      	bls.n	802ac3e <__ssputs_r+0x72>
 802ac3c:	463e      	mov	r6, r7
 802ac3e:	6820      	ldr	r0, [r4, #0]
 802ac40:	4632      	mov	r2, r6
 802ac42:	4641      	mov	r1, r8
 802ac44:	f7fe fd24 	bl	8029690 <memmove>
 802ac48:	68a3      	ldr	r3, [r4, #8]
 802ac4a:	1b9b      	subs	r3, r3, r6
 802ac4c:	60a3      	str	r3, [r4, #8]
 802ac4e:	6823      	ldr	r3, [r4, #0]
 802ac50:	4433      	add	r3, r6
 802ac52:	6023      	str	r3, [r4, #0]
 802ac54:	2000      	movs	r0, #0
 802ac56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ac5a:	462a      	mov	r2, r5
 802ac5c:	f000 fc0a 	bl	802b474 <_realloc_r>
 802ac60:	4606      	mov	r6, r0
 802ac62:	2800      	cmp	r0, #0
 802ac64:	d1e0      	bne.n	802ac28 <__ssputs_r+0x5c>
 802ac66:	6921      	ldr	r1, [r4, #16]
 802ac68:	4650      	mov	r0, sl
 802ac6a:	f7ff fbe3 	bl	802a434 <_free_r>
 802ac6e:	230c      	movs	r3, #12
 802ac70:	f8ca 3000 	str.w	r3, [sl]
 802ac74:	89a3      	ldrh	r3, [r4, #12]
 802ac76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ac7a:	81a3      	strh	r3, [r4, #12]
 802ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 802ac80:	e7e9      	b.n	802ac56 <__ssputs_r+0x8a>
	...

0802ac84 <_svfiprintf_r>:
 802ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac88:	4698      	mov	r8, r3
 802ac8a:	898b      	ldrh	r3, [r1, #12]
 802ac8c:	061b      	lsls	r3, r3, #24
 802ac8e:	b09d      	sub	sp, #116	@ 0x74
 802ac90:	4607      	mov	r7, r0
 802ac92:	460d      	mov	r5, r1
 802ac94:	4614      	mov	r4, r2
 802ac96:	d510      	bpl.n	802acba <_svfiprintf_r+0x36>
 802ac98:	690b      	ldr	r3, [r1, #16]
 802ac9a:	b973      	cbnz	r3, 802acba <_svfiprintf_r+0x36>
 802ac9c:	2140      	movs	r1, #64	@ 0x40
 802ac9e:	f7fd fcdb 	bl	8028658 <_malloc_r>
 802aca2:	6028      	str	r0, [r5, #0]
 802aca4:	6128      	str	r0, [r5, #16]
 802aca6:	b930      	cbnz	r0, 802acb6 <_svfiprintf_r+0x32>
 802aca8:	230c      	movs	r3, #12
 802acaa:	603b      	str	r3, [r7, #0]
 802acac:	f04f 30ff 	mov.w	r0, #4294967295
 802acb0:	b01d      	add	sp, #116	@ 0x74
 802acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acb6:	2340      	movs	r3, #64	@ 0x40
 802acb8:	616b      	str	r3, [r5, #20]
 802acba:	2300      	movs	r3, #0
 802acbc:	9309      	str	r3, [sp, #36]	@ 0x24
 802acbe:	2320      	movs	r3, #32
 802acc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802acc4:	f8cd 800c 	str.w	r8, [sp, #12]
 802acc8:	2330      	movs	r3, #48	@ 0x30
 802acca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802ae68 <_svfiprintf_r+0x1e4>
 802acce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802acd2:	f04f 0901 	mov.w	r9, #1
 802acd6:	4623      	mov	r3, r4
 802acd8:	469a      	mov	sl, r3
 802acda:	f813 2b01 	ldrb.w	r2, [r3], #1
 802acde:	b10a      	cbz	r2, 802ace4 <_svfiprintf_r+0x60>
 802ace0:	2a25      	cmp	r2, #37	@ 0x25
 802ace2:	d1f9      	bne.n	802acd8 <_svfiprintf_r+0x54>
 802ace4:	ebba 0b04 	subs.w	fp, sl, r4
 802ace8:	d00b      	beq.n	802ad02 <_svfiprintf_r+0x7e>
 802acea:	465b      	mov	r3, fp
 802acec:	4622      	mov	r2, r4
 802acee:	4629      	mov	r1, r5
 802acf0:	4638      	mov	r0, r7
 802acf2:	f7ff ff6b 	bl	802abcc <__ssputs_r>
 802acf6:	3001      	adds	r0, #1
 802acf8:	f000 80a7 	beq.w	802ae4a <_svfiprintf_r+0x1c6>
 802acfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802acfe:	445a      	add	r2, fp
 802ad00:	9209      	str	r2, [sp, #36]	@ 0x24
 802ad02:	f89a 3000 	ldrb.w	r3, [sl]
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	f000 809f 	beq.w	802ae4a <_svfiprintf_r+0x1c6>
 802ad0c:	2300      	movs	r3, #0
 802ad0e:	f04f 32ff 	mov.w	r2, #4294967295
 802ad12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ad16:	f10a 0a01 	add.w	sl, sl, #1
 802ad1a:	9304      	str	r3, [sp, #16]
 802ad1c:	9307      	str	r3, [sp, #28]
 802ad1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ad22:	931a      	str	r3, [sp, #104]	@ 0x68
 802ad24:	4654      	mov	r4, sl
 802ad26:	2205      	movs	r2, #5
 802ad28:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad2c:	484e      	ldr	r0, [pc, #312]	@ (802ae68 <_svfiprintf_r+0x1e4>)
 802ad2e:	f7d5 fad7 	bl	80002e0 <memchr>
 802ad32:	9a04      	ldr	r2, [sp, #16]
 802ad34:	b9d8      	cbnz	r0, 802ad6e <_svfiprintf_r+0xea>
 802ad36:	06d0      	lsls	r0, r2, #27
 802ad38:	bf44      	itt	mi
 802ad3a:	2320      	movmi	r3, #32
 802ad3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad40:	0711      	lsls	r1, r2, #28
 802ad42:	bf44      	itt	mi
 802ad44:	232b      	movmi	r3, #43	@ 0x2b
 802ad46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad4a:	f89a 3000 	ldrb.w	r3, [sl]
 802ad4e:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad50:	d015      	beq.n	802ad7e <_svfiprintf_r+0xfa>
 802ad52:	9a07      	ldr	r2, [sp, #28]
 802ad54:	4654      	mov	r4, sl
 802ad56:	2000      	movs	r0, #0
 802ad58:	f04f 0c0a 	mov.w	ip, #10
 802ad5c:	4621      	mov	r1, r4
 802ad5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ad62:	3b30      	subs	r3, #48	@ 0x30
 802ad64:	2b09      	cmp	r3, #9
 802ad66:	d94b      	bls.n	802ae00 <_svfiprintf_r+0x17c>
 802ad68:	b1b0      	cbz	r0, 802ad98 <_svfiprintf_r+0x114>
 802ad6a:	9207      	str	r2, [sp, #28]
 802ad6c:	e014      	b.n	802ad98 <_svfiprintf_r+0x114>
 802ad6e:	eba0 0308 	sub.w	r3, r0, r8
 802ad72:	fa09 f303 	lsl.w	r3, r9, r3
 802ad76:	4313      	orrs	r3, r2
 802ad78:	9304      	str	r3, [sp, #16]
 802ad7a:	46a2      	mov	sl, r4
 802ad7c:	e7d2      	b.n	802ad24 <_svfiprintf_r+0xa0>
 802ad7e:	9b03      	ldr	r3, [sp, #12]
 802ad80:	1d19      	adds	r1, r3, #4
 802ad82:	681b      	ldr	r3, [r3, #0]
 802ad84:	9103      	str	r1, [sp, #12]
 802ad86:	2b00      	cmp	r3, #0
 802ad88:	bfbb      	ittet	lt
 802ad8a:	425b      	neglt	r3, r3
 802ad8c:	f042 0202 	orrlt.w	r2, r2, #2
 802ad90:	9307      	strge	r3, [sp, #28]
 802ad92:	9307      	strlt	r3, [sp, #28]
 802ad94:	bfb8      	it	lt
 802ad96:	9204      	strlt	r2, [sp, #16]
 802ad98:	7823      	ldrb	r3, [r4, #0]
 802ad9a:	2b2e      	cmp	r3, #46	@ 0x2e
 802ad9c:	d10a      	bne.n	802adb4 <_svfiprintf_r+0x130>
 802ad9e:	7863      	ldrb	r3, [r4, #1]
 802ada0:	2b2a      	cmp	r3, #42	@ 0x2a
 802ada2:	d132      	bne.n	802ae0a <_svfiprintf_r+0x186>
 802ada4:	9b03      	ldr	r3, [sp, #12]
 802ada6:	1d1a      	adds	r2, r3, #4
 802ada8:	681b      	ldr	r3, [r3, #0]
 802adaa:	9203      	str	r2, [sp, #12]
 802adac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802adb0:	3402      	adds	r4, #2
 802adb2:	9305      	str	r3, [sp, #20]
 802adb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802ae78 <_svfiprintf_r+0x1f4>
 802adb8:	7821      	ldrb	r1, [r4, #0]
 802adba:	2203      	movs	r2, #3
 802adbc:	4650      	mov	r0, sl
 802adbe:	f7d5 fa8f 	bl	80002e0 <memchr>
 802adc2:	b138      	cbz	r0, 802add4 <_svfiprintf_r+0x150>
 802adc4:	9b04      	ldr	r3, [sp, #16]
 802adc6:	eba0 000a 	sub.w	r0, r0, sl
 802adca:	2240      	movs	r2, #64	@ 0x40
 802adcc:	4082      	lsls	r2, r0
 802adce:	4313      	orrs	r3, r2
 802add0:	3401      	adds	r4, #1
 802add2:	9304      	str	r3, [sp, #16]
 802add4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802add8:	4824      	ldr	r0, [pc, #144]	@ (802ae6c <_svfiprintf_r+0x1e8>)
 802adda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802adde:	2206      	movs	r2, #6
 802ade0:	f7d5 fa7e 	bl	80002e0 <memchr>
 802ade4:	2800      	cmp	r0, #0
 802ade6:	d036      	beq.n	802ae56 <_svfiprintf_r+0x1d2>
 802ade8:	4b21      	ldr	r3, [pc, #132]	@ (802ae70 <_svfiprintf_r+0x1ec>)
 802adea:	bb1b      	cbnz	r3, 802ae34 <_svfiprintf_r+0x1b0>
 802adec:	9b03      	ldr	r3, [sp, #12]
 802adee:	3307      	adds	r3, #7
 802adf0:	f023 0307 	bic.w	r3, r3, #7
 802adf4:	3308      	adds	r3, #8
 802adf6:	9303      	str	r3, [sp, #12]
 802adf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802adfa:	4433      	add	r3, r6
 802adfc:	9309      	str	r3, [sp, #36]	@ 0x24
 802adfe:	e76a      	b.n	802acd6 <_svfiprintf_r+0x52>
 802ae00:	fb0c 3202 	mla	r2, ip, r2, r3
 802ae04:	460c      	mov	r4, r1
 802ae06:	2001      	movs	r0, #1
 802ae08:	e7a8      	b.n	802ad5c <_svfiprintf_r+0xd8>
 802ae0a:	2300      	movs	r3, #0
 802ae0c:	3401      	adds	r4, #1
 802ae0e:	9305      	str	r3, [sp, #20]
 802ae10:	4619      	mov	r1, r3
 802ae12:	f04f 0c0a 	mov.w	ip, #10
 802ae16:	4620      	mov	r0, r4
 802ae18:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ae1c:	3a30      	subs	r2, #48	@ 0x30
 802ae1e:	2a09      	cmp	r2, #9
 802ae20:	d903      	bls.n	802ae2a <_svfiprintf_r+0x1a6>
 802ae22:	2b00      	cmp	r3, #0
 802ae24:	d0c6      	beq.n	802adb4 <_svfiprintf_r+0x130>
 802ae26:	9105      	str	r1, [sp, #20]
 802ae28:	e7c4      	b.n	802adb4 <_svfiprintf_r+0x130>
 802ae2a:	fb0c 2101 	mla	r1, ip, r1, r2
 802ae2e:	4604      	mov	r4, r0
 802ae30:	2301      	movs	r3, #1
 802ae32:	e7f0      	b.n	802ae16 <_svfiprintf_r+0x192>
 802ae34:	ab03      	add	r3, sp, #12
 802ae36:	9300      	str	r3, [sp, #0]
 802ae38:	462a      	mov	r2, r5
 802ae3a:	4b0e      	ldr	r3, [pc, #56]	@ (802ae74 <_svfiprintf_r+0x1f0>)
 802ae3c:	a904      	add	r1, sp, #16
 802ae3e:	4638      	mov	r0, r7
 802ae40:	f7fd fe16 	bl	8028a70 <_printf_float>
 802ae44:	1c42      	adds	r2, r0, #1
 802ae46:	4606      	mov	r6, r0
 802ae48:	d1d6      	bne.n	802adf8 <_svfiprintf_r+0x174>
 802ae4a:	89ab      	ldrh	r3, [r5, #12]
 802ae4c:	065b      	lsls	r3, r3, #25
 802ae4e:	f53f af2d 	bmi.w	802acac <_svfiprintf_r+0x28>
 802ae52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ae54:	e72c      	b.n	802acb0 <_svfiprintf_r+0x2c>
 802ae56:	ab03      	add	r3, sp, #12
 802ae58:	9300      	str	r3, [sp, #0]
 802ae5a:	462a      	mov	r2, r5
 802ae5c:	4b05      	ldr	r3, [pc, #20]	@ (802ae74 <_svfiprintf_r+0x1f0>)
 802ae5e:	a904      	add	r1, sp, #16
 802ae60:	4638      	mov	r0, r7
 802ae62:	f7fe f88d 	bl	8028f80 <_printf_i>
 802ae66:	e7ed      	b.n	802ae44 <_svfiprintf_r+0x1c0>
 802ae68:	080312b8 	.word	0x080312b8
 802ae6c:	080312c2 	.word	0x080312c2
 802ae70:	08028a71 	.word	0x08028a71
 802ae74:	0802abcd 	.word	0x0802abcd
 802ae78:	080312be 	.word	0x080312be

0802ae7c <__sfputc_r>:
 802ae7c:	6893      	ldr	r3, [r2, #8]
 802ae7e:	3b01      	subs	r3, #1
 802ae80:	2b00      	cmp	r3, #0
 802ae82:	b410      	push	{r4}
 802ae84:	6093      	str	r3, [r2, #8]
 802ae86:	da08      	bge.n	802ae9a <__sfputc_r+0x1e>
 802ae88:	6994      	ldr	r4, [r2, #24]
 802ae8a:	42a3      	cmp	r3, r4
 802ae8c:	db01      	blt.n	802ae92 <__sfputc_r+0x16>
 802ae8e:	290a      	cmp	r1, #10
 802ae90:	d103      	bne.n	802ae9a <__sfputc_r+0x1e>
 802ae92:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ae96:	f7fe bb56 	b.w	8029546 <__swbuf_r>
 802ae9a:	6813      	ldr	r3, [r2, #0]
 802ae9c:	1c58      	adds	r0, r3, #1
 802ae9e:	6010      	str	r0, [r2, #0]
 802aea0:	7019      	strb	r1, [r3, #0]
 802aea2:	4608      	mov	r0, r1
 802aea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aea8:	4770      	bx	lr

0802aeaa <__sfputs_r>:
 802aeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aeac:	4606      	mov	r6, r0
 802aeae:	460f      	mov	r7, r1
 802aeb0:	4614      	mov	r4, r2
 802aeb2:	18d5      	adds	r5, r2, r3
 802aeb4:	42ac      	cmp	r4, r5
 802aeb6:	d101      	bne.n	802aebc <__sfputs_r+0x12>
 802aeb8:	2000      	movs	r0, #0
 802aeba:	e007      	b.n	802aecc <__sfputs_r+0x22>
 802aebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aec0:	463a      	mov	r2, r7
 802aec2:	4630      	mov	r0, r6
 802aec4:	f7ff ffda 	bl	802ae7c <__sfputc_r>
 802aec8:	1c43      	adds	r3, r0, #1
 802aeca:	d1f3      	bne.n	802aeb4 <__sfputs_r+0xa>
 802aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802aed0 <_vfiprintf_r>:
 802aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aed4:	460d      	mov	r5, r1
 802aed6:	b09d      	sub	sp, #116	@ 0x74
 802aed8:	4614      	mov	r4, r2
 802aeda:	4698      	mov	r8, r3
 802aedc:	4606      	mov	r6, r0
 802aede:	b118      	cbz	r0, 802aee8 <_vfiprintf_r+0x18>
 802aee0:	6a03      	ldr	r3, [r0, #32]
 802aee2:	b90b      	cbnz	r3, 802aee8 <_vfiprintf_r+0x18>
 802aee4:	f7fe f9f8 	bl	80292d8 <__sinit>
 802aee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802aeea:	07d9      	lsls	r1, r3, #31
 802aeec:	d405      	bmi.n	802aefa <_vfiprintf_r+0x2a>
 802aeee:	89ab      	ldrh	r3, [r5, #12]
 802aef0:	059a      	lsls	r2, r3, #22
 802aef2:	d402      	bmi.n	802aefa <_vfiprintf_r+0x2a>
 802aef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aef6:	f7fe fca8 	bl	802984a <__retarget_lock_acquire_recursive>
 802aefa:	89ab      	ldrh	r3, [r5, #12]
 802aefc:	071b      	lsls	r3, r3, #28
 802aefe:	d501      	bpl.n	802af04 <_vfiprintf_r+0x34>
 802af00:	692b      	ldr	r3, [r5, #16]
 802af02:	b99b      	cbnz	r3, 802af2c <_vfiprintf_r+0x5c>
 802af04:	4629      	mov	r1, r5
 802af06:	4630      	mov	r0, r6
 802af08:	f7fe fb5c 	bl	80295c4 <__swsetup_r>
 802af0c:	b170      	cbz	r0, 802af2c <_vfiprintf_r+0x5c>
 802af0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802af10:	07dc      	lsls	r4, r3, #31
 802af12:	d504      	bpl.n	802af1e <_vfiprintf_r+0x4e>
 802af14:	f04f 30ff 	mov.w	r0, #4294967295
 802af18:	b01d      	add	sp, #116	@ 0x74
 802af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af1e:	89ab      	ldrh	r3, [r5, #12]
 802af20:	0598      	lsls	r0, r3, #22
 802af22:	d4f7      	bmi.n	802af14 <_vfiprintf_r+0x44>
 802af24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802af26:	f7fe fc91 	bl	802984c <__retarget_lock_release_recursive>
 802af2a:	e7f3      	b.n	802af14 <_vfiprintf_r+0x44>
 802af2c:	2300      	movs	r3, #0
 802af2e:	9309      	str	r3, [sp, #36]	@ 0x24
 802af30:	2320      	movs	r3, #32
 802af32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802af36:	f8cd 800c 	str.w	r8, [sp, #12]
 802af3a:	2330      	movs	r3, #48	@ 0x30
 802af3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b0ec <_vfiprintf_r+0x21c>
 802af40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802af44:	f04f 0901 	mov.w	r9, #1
 802af48:	4623      	mov	r3, r4
 802af4a:	469a      	mov	sl, r3
 802af4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802af50:	b10a      	cbz	r2, 802af56 <_vfiprintf_r+0x86>
 802af52:	2a25      	cmp	r2, #37	@ 0x25
 802af54:	d1f9      	bne.n	802af4a <_vfiprintf_r+0x7a>
 802af56:	ebba 0b04 	subs.w	fp, sl, r4
 802af5a:	d00b      	beq.n	802af74 <_vfiprintf_r+0xa4>
 802af5c:	465b      	mov	r3, fp
 802af5e:	4622      	mov	r2, r4
 802af60:	4629      	mov	r1, r5
 802af62:	4630      	mov	r0, r6
 802af64:	f7ff ffa1 	bl	802aeaa <__sfputs_r>
 802af68:	3001      	adds	r0, #1
 802af6a:	f000 80a7 	beq.w	802b0bc <_vfiprintf_r+0x1ec>
 802af6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802af70:	445a      	add	r2, fp
 802af72:	9209      	str	r2, [sp, #36]	@ 0x24
 802af74:	f89a 3000 	ldrb.w	r3, [sl]
 802af78:	2b00      	cmp	r3, #0
 802af7a:	f000 809f 	beq.w	802b0bc <_vfiprintf_r+0x1ec>
 802af7e:	2300      	movs	r3, #0
 802af80:	f04f 32ff 	mov.w	r2, #4294967295
 802af84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802af88:	f10a 0a01 	add.w	sl, sl, #1
 802af8c:	9304      	str	r3, [sp, #16]
 802af8e:	9307      	str	r3, [sp, #28]
 802af90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802af94:	931a      	str	r3, [sp, #104]	@ 0x68
 802af96:	4654      	mov	r4, sl
 802af98:	2205      	movs	r2, #5
 802af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af9e:	4853      	ldr	r0, [pc, #332]	@ (802b0ec <_vfiprintf_r+0x21c>)
 802afa0:	f7d5 f99e 	bl	80002e0 <memchr>
 802afa4:	9a04      	ldr	r2, [sp, #16]
 802afa6:	b9d8      	cbnz	r0, 802afe0 <_vfiprintf_r+0x110>
 802afa8:	06d1      	lsls	r1, r2, #27
 802afaa:	bf44      	itt	mi
 802afac:	2320      	movmi	r3, #32
 802afae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802afb2:	0713      	lsls	r3, r2, #28
 802afb4:	bf44      	itt	mi
 802afb6:	232b      	movmi	r3, #43	@ 0x2b
 802afb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802afbc:	f89a 3000 	ldrb.w	r3, [sl]
 802afc0:	2b2a      	cmp	r3, #42	@ 0x2a
 802afc2:	d015      	beq.n	802aff0 <_vfiprintf_r+0x120>
 802afc4:	9a07      	ldr	r2, [sp, #28]
 802afc6:	4654      	mov	r4, sl
 802afc8:	2000      	movs	r0, #0
 802afca:	f04f 0c0a 	mov.w	ip, #10
 802afce:	4621      	mov	r1, r4
 802afd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802afd4:	3b30      	subs	r3, #48	@ 0x30
 802afd6:	2b09      	cmp	r3, #9
 802afd8:	d94b      	bls.n	802b072 <_vfiprintf_r+0x1a2>
 802afda:	b1b0      	cbz	r0, 802b00a <_vfiprintf_r+0x13a>
 802afdc:	9207      	str	r2, [sp, #28]
 802afde:	e014      	b.n	802b00a <_vfiprintf_r+0x13a>
 802afe0:	eba0 0308 	sub.w	r3, r0, r8
 802afe4:	fa09 f303 	lsl.w	r3, r9, r3
 802afe8:	4313      	orrs	r3, r2
 802afea:	9304      	str	r3, [sp, #16]
 802afec:	46a2      	mov	sl, r4
 802afee:	e7d2      	b.n	802af96 <_vfiprintf_r+0xc6>
 802aff0:	9b03      	ldr	r3, [sp, #12]
 802aff2:	1d19      	adds	r1, r3, #4
 802aff4:	681b      	ldr	r3, [r3, #0]
 802aff6:	9103      	str	r1, [sp, #12]
 802aff8:	2b00      	cmp	r3, #0
 802affa:	bfbb      	ittet	lt
 802affc:	425b      	neglt	r3, r3
 802affe:	f042 0202 	orrlt.w	r2, r2, #2
 802b002:	9307      	strge	r3, [sp, #28]
 802b004:	9307      	strlt	r3, [sp, #28]
 802b006:	bfb8      	it	lt
 802b008:	9204      	strlt	r2, [sp, #16]
 802b00a:	7823      	ldrb	r3, [r4, #0]
 802b00c:	2b2e      	cmp	r3, #46	@ 0x2e
 802b00e:	d10a      	bne.n	802b026 <_vfiprintf_r+0x156>
 802b010:	7863      	ldrb	r3, [r4, #1]
 802b012:	2b2a      	cmp	r3, #42	@ 0x2a
 802b014:	d132      	bne.n	802b07c <_vfiprintf_r+0x1ac>
 802b016:	9b03      	ldr	r3, [sp, #12]
 802b018:	1d1a      	adds	r2, r3, #4
 802b01a:	681b      	ldr	r3, [r3, #0]
 802b01c:	9203      	str	r2, [sp, #12]
 802b01e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b022:	3402      	adds	r4, #2
 802b024:	9305      	str	r3, [sp, #20]
 802b026:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b0fc <_vfiprintf_r+0x22c>
 802b02a:	7821      	ldrb	r1, [r4, #0]
 802b02c:	2203      	movs	r2, #3
 802b02e:	4650      	mov	r0, sl
 802b030:	f7d5 f956 	bl	80002e0 <memchr>
 802b034:	b138      	cbz	r0, 802b046 <_vfiprintf_r+0x176>
 802b036:	9b04      	ldr	r3, [sp, #16]
 802b038:	eba0 000a 	sub.w	r0, r0, sl
 802b03c:	2240      	movs	r2, #64	@ 0x40
 802b03e:	4082      	lsls	r2, r0
 802b040:	4313      	orrs	r3, r2
 802b042:	3401      	adds	r4, #1
 802b044:	9304      	str	r3, [sp, #16]
 802b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b04a:	4829      	ldr	r0, [pc, #164]	@ (802b0f0 <_vfiprintf_r+0x220>)
 802b04c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b050:	2206      	movs	r2, #6
 802b052:	f7d5 f945 	bl	80002e0 <memchr>
 802b056:	2800      	cmp	r0, #0
 802b058:	d03f      	beq.n	802b0da <_vfiprintf_r+0x20a>
 802b05a:	4b26      	ldr	r3, [pc, #152]	@ (802b0f4 <_vfiprintf_r+0x224>)
 802b05c:	bb1b      	cbnz	r3, 802b0a6 <_vfiprintf_r+0x1d6>
 802b05e:	9b03      	ldr	r3, [sp, #12]
 802b060:	3307      	adds	r3, #7
 802b062:	f023 0307 	bic.w	r3, r3, #7
 802b066:	3308      	adds	r3, #8
 802b068:	9303      	str	r3, [sp, #12]
 802b06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b06c:	443b      	add	r3, r7
 802b06e:	9309      	str	r3, [sp, #36]	@ 0x24
 802b070:	e76a      	b.n	802af48 <_vfiprintf_r+0x78>
 802b072:	fb0c 3202 	mla	r2, ip, r2, r3
 802b076:	460c      	mov	r4, r1
 802b078:	2001      	movs	r0, #1
 802b07a:	e7a8      	b.n	802afce <_vfiprintf_r+0xfe>
 802b07c:	2300      	movs	r3, #0
 802b07e:	3401      	adds	r4, #1
 802b080:	9305      	str	r3, [sp, #20]
 802b082:	4619      	mov	r1, r3
 802b084:	f04f 0c0a 	mov.w	ip, #10
 802b088:	4620      	mov	r0, r4
 802b08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b08e:	3a30      	subs	r2, #48	@ 0x30
 802b090:	2a09      	cmp	r2, #9
 802b092:	d903      	bls.n	802b09c <_vfiprintf_r+0x1cc>
 802b094:	2b00      	cmp	r3, #0
 802b096:	d0c6      	beq.n	802b026 <_vfiprintf_r+0x156>
 802b098:	9105      	str	r1, [sp, #20]
 802b09a:	e7c4      	b.n	802b026 <_vfiprintf_r+0x156>
 802b09c:	fb0c 2101 	mla	r1, ip, r1, r2
 802b0a0:	4604      	mov	r4, r0
 802b0a2:	2301      	movs	r3, #1
 802b0a4:	e7f0      	b.n	802b088 <_vfiprintf_r+0x1b8>
 802b0a6:	ab03      	add	r3, sp, #12
 802b0a8:	9300      	str	r3, [sp, #0]
 802b0aa:	462a      	mov	r2, r5
 802b0ac:	4b12      	ldr	r3, [pc, #72]	@ (802b0f8 <_vfiprintf_r+0x228>)
 802b0ae:	a904      	add	r1, sp, #16
 802b0b0:	4630      	mov	r0, r6
 802b0b2:	f7fd fcdd 	bl	8028a70 <_printf_float>
 802b0b6:	4607      	mov	r7, r0
 802b0b8:	1c78      	adds	r0, r7, #1
 802b0ba:	d1d6      	bne.n	802b06a <_vfiprintf_r+0x19a>
 802b0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b0be:	07d9      	lsls	r1, r3, #31
 802b0c0:	d405      	bmi.n	802b0ce <_vfiprintf_r+0x1fe>
 802b0c2:	89ab      	ldrh	r3, [r5, #12]
 802b0c4:	059a      	lsls	r2, r3, #22
 802b0c6:	d402      	bmi.n	802b0ce <_vfiprintf_r+0x1fe>
 802b0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b0ca:	f7fe fbbf 	bl	802984c <__retarget_lock_release_recursive>
 802b0ce:	89ab      	ldrh	r3, [r5, #12]
 802b0d0:	065b      	lsls	r3, r3, #25
 802b0d2:	f53f af1f 	bmi.w	802af14 <_vfiprintf_r+0x44>
 802b0d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b0d8:	e71e      	b.n	802af18 <_vfiprintf_r+0x48>
 802b0da:	ab03      	add	r3, sp, #12
 802b0dc:	9300      	str	r3, [sp, #0]
 802b0de:	462a      	mov	r2, r5
 802b0e0:	4b05      	ldr	r3, [pc, #20]	@ (802b0f8 <_vfiprintf_r+0x228>)
 802b0e2:	a904      	add	r1, sp, #16
 802b0e4:	4630      	mov	r0, r6
 802b0e6:	f7fd ff4b 	bl	8028f80 <_printf_i>
 802b0ea:	e7e4      	b.n	802b0b6 <_vfiprintf_r+0x1e6>
 802b0ec:	080312b8 	.word	0x080312b8
 802b0f0:	080312c2 	.word	0x080312c2
 802b0f4:	08028a71 	.word	0x08028a71
 802b0f8:	0802aeab 	.word	0x0802aeab
 802b0fc:	080312be 	.word	0x080312be

0802b100 <__sflush_r>:
 802b100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b108:	0716      	lsls	r6, r2, #28
 802b10a:	4605      	mov	r5, r0
 802b10c:	460c      	mov	r4, r1
 802b10e:	d454      	bmi.n	802b1ba <__sflush_r+0xba>
 802b110:	684b      	ldr	r3, [r1, #4]
 802b112:	2b00      	cmp	r3, #0
 802b114:	dc02      	bgt.n	802b11c <__sflush_r+0x1c>
 802b116:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b118:	2b00      	cmp	r3, #0
 802b11a:	dd48      	ble.n	802b1ae <__sflush_r+0xae>
 802b11c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b11e:	2e00      	cmp	r6, #0
 802b120:	d045      	beq.n	802b1ae <__sflush_r+0xae>
 802b122:	2300      	movs	r3, #0
 802b124:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b128:	682f      	ldr	r7, [r5, #0]
 802b12a:	6a21      	ldr	r1, [r4, #32]
 802b12c:	602b      	str	r3, [r5, #0]
 802b12e:	d030      	beq.n	802b192 <__sflush_r+0x92>
 802b130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b132:	89a3      	ldrh	r3, [r4, #12]
 802b134:	0759      	lsls	r1, r3, #29
 802b136:	d505      	bpl.n	802b144 <__sflush_r+0x44>
 802b138:	6863      	ldr	r3, [r4, #4]
 802b13a:	1ad2      	subs	r2, r2, r3
 802b13c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b13e:	b10b      	cbz	r3, 802b144 <__sflush_r+0x44>
 802b140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b142:	1ad2      	subs	r2, r2, r3
 802b144:	2300      	movs	r3, #0
 802b146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b148:	6a21      	ldr	r1, [r4, #32]
 802b14a:	4628      	mov	r0, r5
 802b14c:	47b0      	blx	r6
 802b14e:	1c43      	adds	r3, r0, #1
 802b150:	89a3      	ldrh	r3, [r4, #12]
 802b152:	d106      	bne.n	802b162 <__sflush_r+0x62>
 802b154:	6829      	ldr	r1, [r5, #0]
 802b156:	291d      	cmp	r1, #29
 802b158:	d82b      	bhi.n	802b1b2 <__sflush_r+0xb2>
 802b15a:	4a2a      	ldr	r2, [pc, #168]	@ (802b204 <__sflush_r+0x104>)
 802b15c:	410a      	asrs	r2, r1
 802b15e:	07d6      	lsls	r6, r2, #31
 802b160:	d427      	bmi.n	802b1b2 <__sflush_r+0xb2>
 802b162:	2200      	movs	r2, #0
 802b164:	6062      	str	r2, [r4, #4]
 802b166:	04d9      	lsls	r1, r3, #19
 802b168:	6922      	ldr	r2, [r4, #16]
 802b16a:	6022      	str	r2, [r4, #0]
 802b16c:	d504      	bpl.n	802b178 <__sflush_r+0x78>
 802b16e:	1c42      	adds	r2, r0, #1
 802b170:	d101      	bne.n	802b176 <__sflush_r+0x76>
 802b172:	682b      	ldr	r3, [r5, #0]
 802b174:	b903      	cbnz	r3, 802b178 <__sflush_r+0x78>
 802b176:	6560      	str	r0, [r4, #84]	@ 0x54
 802b178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b17a:	602f      	str	r7, [r5, #0]
 802b17c:	b1b9      	cbz	r1, 802b1ae <__sflush_r+0xae>
 802b17e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b182:	4299      	cmp	r1, r3
 802b184:	d002      	beq.n	802b18c <__sflush_r+0x8c>
 802b186:	4628      	mov	r0, r5
 802b188:	f7ff f954 	bl	802a434 <_free_r>
 802b18c:	2300      	movs	r3, #0
 802b18e:	6363      	str	r3, [r4, #52]	@ 0x34
 802b190:	e00d      	b.n	802b1ae <__sflush_r+0xae>
 802b192:	2301      	movs	r3, #1
 802b194:	4628      	mov	r0, r5
 802b196:	47b0      	blx	r6
 802b198:	4602      	mov	r2, r0
 802b19a:	1c50      	adds	r0, r2, #1
 802b19c:	d1c9      	bne.n	802b132 <__sflush_r+0x32>
 802b19e:	682b      	ldr	r3, [r5, #0]
 802b1a0:	2b00      	cmp	r3, #0
 802b1a2:	d0c6      	beq.n	802b132 <__sflush_r+0x32>
 802b1a4:	2b1d      	cmp	r3, #29
 802b1a6:	d001      	beq.n	802b1ac <__sflush_r+0xac>
 802b1a8:	2b16      	cmp	r3, #22
 802b1aa:	d11e      	bne.n	802b1ea <__sflush_r+0xea>
 802b1ac:	602f      	str	r7, [r5, #0]
 802b1ae:	2000      	movs	r0, #0
 802b1b0:	e022      	b.n	802b1f8 <__sflush_r+0xf8>
 802b1b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b1b6:	b21b      	sxth	r3, r3
 802b1b8:	e01b      	b.n	802b1f2 <__sflush_r+0xf2>
 802b1ba:	690f      	ldr	r7, [r1, #16]
 802b1bc:	2f00      	cmp	r7, #0
 802b1be:	d0f6      	beq.n	802b1ae <__sflush_r+0xae>
 802b1c0:	0793      	lsls	r3, r2, #30
 802b1c2:	680e      	ldr	r6, [r1, #0]
 802b1c4:	bf08      	it	eq
 802b1c6:	694b      	ldreq	r3, [r1, #20]
 802b1c8:	600f      	str	r7, [r1, #0]
 802b1ca:	bf18      	it	ne
 802b1cc:	2300      	movne	r3, #0
 802b1ce:	eba6 0807 	sub.w	r8, r6, r7
 802b1d2:	608b      	str	r3, [r1, #8]
 802b1d4:	f1b8 0f00 	cmp.w	r8, #0
 802b1d8:	dde9      	ble.n	802b1ae <__sflush_r+0xae>
 802b1da:	6a21      	ldr	r1, [r4, #32]
 802b1dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b1de:	4643      	mov	r3, r8
 802b1e0:	463a      	mov	r2, r7
 802b1e2:	4628      	mov	r0, r5
 802b1e4:	47b0      	blx	r6
 802b1e6:	2800      	cmp	r0, #0
 802b1e8:	dc08      	bgt.n	802b1fc <__sflush_r+0xfc>
 802b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b1f2:	81a3      	strh	r3, [r4, #12]
 802b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 802b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b1fc:	4407      	add	r7, r0
 802b1fe:	eba8 0800 	sub.w	r8, r8, r0
 802b202:	e7e7      	b.n	802b1d4 <__sflush_r+0xd4>
 802b204:	dfbffffe 	.word	0xdfbffffe

0802b208 <_fflush_r>:
 802b208:	b538      	push	{r3, r4, r5, lr}
 802b20a:	690b      	ldr	r3, [r1, #16]
 802b20c:	4605      	mov	r5, r0
 802b20e:	460c      	mov	r4, r1
 802b210:	b913      	cbnz	r3, 802b218 <_fflush_r+0x10>
 802b212:	2500      	movs	r5, #0
 802b214:	4628      	mov	r0, r5
 802b216:	bd38      	pop	{r3, r4, r5, pc}
 802b218:	b118      	cbz	r0, 802b222 <_fflush_r+0x1a>
 802b21a:	6a03      	ldr	r3, [r0, #32]
 802b21c:	b90b      	cbnz	r3, 802b222 <_fflush_r+0x1a>
 802b21e:	f7fe f85b 	bl	80292d8 <__sinit>
 802b222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b226:	2b00      	cmp	r3, #0
 802b228:	d0f3      	beq.n	802b212 <_fflush_r+0xa>
 802b22a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b22c:	07d0      	lsls	r0, r2, #31
 802b22e:	d404      	bmi.n	802b23a <_fflush_r+0x32>
 802b230:	0599      	lsls	r1, r3, #22
 802b232:	d402      	bmi.n	802b23a <_fflush_r+0x32>
 802b234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b236:	f7fe fb08 	bl	802984a <__retarget_lock_acquire_recursive>
 802b23a:	4628      	mov	r0, r5
 802b23c:	4621      	mov	r1, r4
 802b23e:	f7ff ff5f 	bl	802b100 <__sflush_r>
 802b242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b244:	07da      	lsls	r2, r3, #31
 802b246:	4605      	mov	r5, r0
 802b248:	d4e4      	bmi.n	802b214 <_fflush_r+0xc>
 802b24a:	89a3      	ldrh	r3, [r4, #12]
 802b24c:	059b      	lsls	r3, r3, #22
 802b24e:	d4e1      	bmi.n	802b214 <_fflush_r+0xc>
 802b250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b252:	f7fe fafb 	bl	802984c <__retarget_lock_release_recursive>
 802b256:	e7dd      	b.n	802b214 <_fflush_r+0xc>

0802b258 <__swhatbuf_r>:
 802b258:	b570      	push	{r4, r5, r6, lr}
 802b25a:	460c      	mov	r4, r1
 802b25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b260:	2900      	cmp	r1, #0
 802b262:	b096      	sub	sp, #88	@ 0x58
 802b264:	4615      	mov	r5, r2
 802b266:	461e      	mov	r6, r3
 802b268:	da0d      	bge.n	802b286 <__swhatbuf_r+0x2e>
 802b26a:	89a3      	ldrh	r3, [r4, #12]
 802b26c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b270:	f04f 0100 	mov.w	r1, #0
 802b274:	bf14      	ite	ne
 802b276:	2340      	movne	r3, #64	@ 0x40
 802b278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b27c:	2000      	movs	r0, #0
 802b27e:	6031      	str	r1, [r6, #0]
 802b280:	602b      	str	r3, [r5, #0]
 802b282:	b016      	add	sp, #88	@ 0x58
 802b284:	bd70      	pop	{r4, r5, r6, pc}
 802b286:	466a      	mov	r2, sp
 802b288:	f000 f8ac 	bl	802b3e4 <_fstat_r>
 802b28c:	2800      	cmp	r0, #0
 802b28e:	dbec      	blt.n	802b26a <__swhatbuf_r+0x12>
 802b290:	9901      	ldr	r1, [sp, #4]
 802b292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b29a:	4259      	negs	r1, r3
 802b29c:	4159      	adcs	r1, r3
 802b29e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b2a2:	e7eb      	b.n	802b27c <__swhatbuf_r+0x24>

0802b2a4 <__smakebuf_r>:
 802b2a4:	898b      	ldrh	r3, [r1, #12]
 802b2a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b2a8:	079d      	lsls	r5, r3, #30
 802b2aa:	4606      	mov	r6, r0
 802b2ac:	460c      	mov	r4, r1
 802b2ae:	d507      	bpl.n	802b2c0 <__smakebuf_r+0x1c>
 802b2b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b2b4:	6023      	str	r3, [r4, #0]
 802b2b6:	6123      	str	r3, [r4, #16]
 802b2b8:	2301      	movs	r3, #1
 802b2ba:	6163      	str	r3, [r4, #20]
 802b2bc:	b003      	add	sp, #12
 802b2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b2c0:	ab01      	add	r3, sp, #4
 802b2c2:	466a      	mov	r2, sp
 802b2c4:	f7ff ffc8 	bl	802b258 <__swhatbuf_r>
 802b2c8:	9f00      	ldr	r7, [sp, #0]
 802b2ca:	4605      	mov	r5, r0
 802b2cc:	4639      	mov	r1, r7
 802b2ce:	4630      	mov	r0, r6
 802b2d0:	f7fd f9c2 	bl	8028658 <_malloc_r>
 802b2d4:	b948      	cbnz	r0, 802b2ea <__smakebuf_r+0x46>
 802b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b2da:	059a      	lsls	r2, r3, #22
 802b2dc:	d4ee      	bmi.n	802b2bc <__smakebuf_r+0x18>
 802b2de:	f023 0303 	bic.w	r3, r3, #3
 802b2e2:	f043 0302 	orr.w	r3, r3, #2
 802b2e6:	81a3      	strh	r3, [r4, #12]
 802b2e8:	e7e2      	b.n	802b2b0 <__smakebuf_r+0xc>
 802b2ea:	89a3      	ldrh	r3, [r4, #12]
 802b2ec:	6020      	str	r0, [r4, #0]
 802b2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b2f2:	81a3      	strh	r3, [r4, #12]
 802b2f4:	9b01      	ldr	r3, [sp, #4]
 802b2f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b2fa:	b15b      	cbz	r3, 802b314 <__smakebuf_r+0x70>
 802b2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b300:	4630      	mov	r0, r6
 802b302:	f000 f881 	bl	802b408 <_isatty_r>
 802b306:	b128      	cbz	r0, 802b314 <__smakebuf_r+0x70>
 802b308:	89a3      	ldrh	r3, [r4, #12]
 802b30a:	f023 0303 	bic.w	r3, r3, #3
 802b30e:	f043 0301 	orr.w	r3, r3, #1
 802b312:	81a3      	strh	r3, [r4, #12]
 802b314:	89a3      	ldrh	r3, [r4, #12]
 802b316:	431d      	orrs	r5, r3
 802b318:	81a5      	strh	r5, [r4, #12]
 802b31a:	e7cf      	b.n	802b2bc <__smakebuf_r+0x18>

0802b31c <_putc_r>:
 802b31c:	b570      	push	{r4, r5, r6, lr}
 802b31e:	460d      	mov	r5, r1
 802b320:	4614      	mov	r4, r2
 802b322:	4606      	mov	r6, r0
 802b324:	b118      	cbz	r0, 802b32e <_putc_r+0x12>
 802b326:	6a03      	ldr	r3, [r0, #32]
 802b328:	b90b      	cbnz	r3, 802b32e <_putc_r+0x12>
 802b32a:	f7fd ffd5 	bl	80292d8 <__sinit>
 802b32e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b330:	07d8      	lsls	r0, r3, #31
 802b332:	d405      	bmi.n	802b340 <_putc_r+0x24>
 802b334:	89a3      	ldrh	r3, [r4, #12]
 802b336:	0599      	lsls	r1, r3, #22
 802b338:	d402      	bmi.n	802b340 <_putc_r+0x24>
 802b33a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b33c:	f7fe fa85 	bl	802984a <__retarget_lock_acquire_recursive>
 802b340:	68a3      	ldr	r3, [r4, #8]
 802b342:	3b01      	subs	r3, #1
 802b344:	2b00      	cmp	r3, #0
 802b346:	60a3      	str	r3, [r4, #8]
 802b348:	da05      	bge.n	802b356 <_putc_r+0x3a>
 802b34a:	69a2      	ldr	r2, [r4, #24]
 802b34c:	4293      	cmp	r3, r2
 802b34e:	db12      	blt.n	802b376 <_putc_r+0x5a>
 802b350:	b2eb      	uxtb	r3, r5
 802b352:	2b0a      	cmp	r3, #10
 802b354:	d00f      	beq.n	802b376 <_putc_r+0x5a>
 802b356:	6823      	ldr	r3, [r4, #0]
 802b358:	1c5a      	adds	r2, r3, #1
 802b35a:	6022      	str	r2, [r4, #0]
 802b35c:	701d      	strb	r5, [r3, #0]
 802b35e:	b2ed      	uxtb	r5, r5
 802b360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b362:	07da      	lsls	r2, r3, #31
 802b364:	d405      	bmi.n	802b372 <_putc_r+0x56>
 802b366:	89a3      	ldrh	r3, [r4, #12]
 802b368:	059b      	lsls	r3, r3, #22
 802b36a:	d402      	bmi.n	802b372 <_putc_r+0x56>
 802b36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b36e:	f7fe fa6d 	bl	802984c <__retarget_lock_release_recursive>
 802b372:	4628      	mov	r0, r5
 802b374:	bd70      	pop	{r4, r5, r6, pc}
 802b376:	4629      	mov	r1, r5
 802b378:	4622      	mov	r2, r4
 802b37a:	4630      	mov	r0, r6
 802b37c:	f7fe f8e3 	bl	8029546 <__swbuf_r>
 802b380:	4605      	mov	r5, r0
 802b382:	e7ed      	b.n	802b360 <_putc_r+0x44>

0802b384 <_raise_r>:
 802b384:	291f      	cmp	r1, #31
 802b386:	b538      	push	{r3, r4, r5, lr}
 802b388:	4605      	mov	r5, r0
 802b38a:	460c      	mov	r4, r1
 802b38c:	d904      	bls.n	802b398 <_raise_r+0x14>
 802b38e:	2316      	movs	r3, #22
 802b390:	6003      	str	r3, [r0, #0]
 802b392:	f04f 30ff 	mov.w	r0, #4294967295
 802b396:	bd38      	pop	{r3, r4, r5, pc}
 802b398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b39a:	b112      	cbz	r2, 802b3a2 <_raise_r+0x1e>
 802b39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b3a0:	b94b      	cbnz	r3, 802b3b6 <_raise_r+0x32>
 802b3a2:	4628      	mov	r0, r5
 802b3a4:	f000 f852 	bl	802b44c <_getpid_r>
 802b3a8:	4622      	mov	r2, r4
 802b3aa:	4601      	mov	r1, r0
 802b3ac:	4628      	mov	r0, r5
 802b3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b3b2:	f000 b839 	b.w	802b428 <_kill_r>
 802b3b6:	2b01      	cmp	r3, #1
 802b3b8:	d00a      	beq.n	802b3d0 <_raise_r+0x4c>
 802b3ba:	1c59      	adds	r1, r3, #1
 802b3bc:	d103      	bne.n	802b3c6 <_raise_r+0x42>
 802b3be:	2316      	movs	r3, #22
 802b3c0:	6003      	str	r3, [r0, #0]
 802b3c2:	2001      	movs	r0, #1
 802b3c4:	e7e7      	b.n	802b396 <_raise_r+0x12>
 802b3c6:	2100      	movs	r1, #0
 802b3c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b3cc:	4620      	mov	r0, r4
 802b3ce:	4798      	blx	r3
 802b3d0:	2000      	movs	r0, #0
 802b3d2:	e7e0      	b.n	802b396 <_raise_r+0x12>

0802b3d4 <raise>:
 802b3d4:	4b02      	ldr	r3, [pc, #8]	@ (802b3e0 <raise+0xc>)
 802b3d6:	4601      	mov	r1, r0
 802b3d8:	6818      	ldr	r0, [r3, #0]
 802b3da:	f7ff bfd3 	b.w	802b384 <_raise_r>
 802b3de:	bf00      	nop
 802b3e0:	2400007c 	.word	0x2400007c

0802b3e4 <_fstat_r>:
 802b3e4:	b538      	push	{r3, r4, r5, lr}
 802b3e6:	4d07      	ldr	r5, [pc, #28]	@ (802b404 <_fstat_r+0x20>)
 802b3e8:	2300      	movs	r3, #0
 802b3ea:	4604      	mov	r4, r0
 802b3ec:	4608      	mov	r0, r1
 802b3ee:	4611      	mov	r1, r2
 802b3f0:	602b      	str	r3, [r5, #0]
 802b3f2:	f7e6 ffcf 	bl	8012394 <_fstat>
 802b3f6:	1c43      	adds	r3, r0, #1
 802b3f8:	d102      	bne.n	802b400 <_fstat_r+0x1c>
 802b3fa:	682b      	ldr	r3, [r5, #0]
 802b3fc:	b103      	cbz	r3, 802b400 <_fstat_r+0x1c>
 802b3fe:	6023      	str	r3, [r4, #0]
 802b400:	bd38      	pop	{r3, r4, r5, pc}
 802b402:	bf00      	nop
 802b404:	2400b77c 	.word	0x2400b77c

0802b408 <_isatty_r>:
 802b408:	b538      	push	{r3, r4, r5, lr}
 802b40a:	4d06      	ldr	r5, [pc, #24]	@ (802b424 <_isatty_r+0x1c>)
 802b40c:	2300      	movs	r3, #0
 802b40e:	4604      	mov	r4, r0
 802b410:	4608      	mov	r0, r1
 802b412:	602b      	str	r3, [r5, #0]
 802b414:	f7e6 ffce 	bl	80123b4 <_isatty>
 802b418:	1c43      	adds	r3, r0, #1
 802b41a:	d102      	bne.n	802b422 <_isatty_r+0x1a>
 802b41c:	682b      	ldr	r3, [r5, #0]
 802b41e:	b103      	cbz	r3, 802b422 <_isatty_r+0x1a>
 802b420:	6023      	str	r3, [r4, #0]
 802b422:	bd38      	pop	{r3, r4, r5, pc}
 802b424:	2400b77c 	.word	0x2400b77c

0802b428 <_kill_r>:
 802b428:	b538      	push	{r3, r4, r5, lr}
 802b42a:	4d07      	ldr	r5, [pc, #28]	@ (802b448 <_kill_r+0x20>)
 802b42c:	2300      	movs	r3, #0
 802b42e:	4604      	mov	r4, r0
 802b430:	4608      	mov	r0, r1
 802b432:	4611      	mov	r1, r2
 802b434:	602b      	str	r3, [r5, #0]
 802b436:	f7e6 ff4b 	bl	80122d0 <_kill>
 802b43a:	1c43      	adds	r3, r0, #1
 802b43c:	d102      	bne.n	802b444 <_kill_r+0x1c>
 802b43e:	682b      	ldr	r3, [r5, #0]
 802b440:	b103      	cbz	r3, 802b444 <_kill_r+0x1c>
 802b442:	6023      	str	r3, [r4, #0]
 802b444:	bd38      	pop	{r3, r4, r5, pc}
 802b446:	bf00      	nop
 802b448:	2400b77c 	.word	0x2400b77c

0802b44c <_getpid_r>:
 802b44c:	f7e6 bf38 	b.w	80122c0 <_getpid>

0802b450 <__ascii_mbtowc>:
 802b450:	b082      	sub	sp, #8
 802b452:	b901      	cbnz	r1, 802b456 <__ascii_mbtowc+0x6>
 802b454:	a901      	add	r1, sp, #4
 802b456:	b142      	cbz	r2, 802b46a <__ascii_mbtowc+0x1a>
 802b458:	b14b      	cbz	r3, 802b46e <__ascii_mbtowc+0x1e>
 802b45a:	7813      	ldrb	r3, [r2, #0]
 802b45c:	600b      	str	r3, [r1, #0]
 802b45e:	7812      	ldrb	r2, [r2, #0]
 802b460:	1e10      	subs	r0, r2, #0
 802b462:	bf18      	it	ne
 802b464:	2001      	movne	r0, #1
 802b466:	b002      	add	sp, #8
 802b468:	4770      	bx	lr
 802b46a:	4610      	mov	r0, r2
 802b46c:	e7fb      	b.n	802b466 <__ascii_mbtowc+0x16>
 802b46e:	f06f 0001 	mvn.w	r0, #1
 802b472:	e7f8      	b.n	802b466 <__ascii_mbtowc+0x16>

0802b474 <_realloc_r>:
 802b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b478:	4680      	mov	r8, r0
 802b47a:	4615      	mov	r5, r2
 802b47c:	460c      	mov	r4, r1
 802b47e:	b921      	cbnz	r1, 802b48a <_realloc_r+0x16>
 802b480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b484:	4611      	mov	r1, r2
 802b486:	f7fd b8e7 	b.w	8028658 <_malloc_r>
 802b48a:	b92a      	cbnz	r2, 802b498 <_realloc_r+0x24>
 802b48c:	f7fe ffd2 	bl	802a434 <_free_r>
 802b490:	2400      	movs	r4, #0
 802b492:	4620      	mov	r0, r4
 802b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b498:	f000 f827 	bl	802b4ea <_malloc_usable_size_r>
 802b49c:	4285      	cmp	r5, r0
 802b49e:	4606      	mov	r6, r0
 802b4a0:	d802      	bhi.n	802b4a8 <_realloc_r+0x34>
 802b4a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802b4a6:	d8f4      	bhi.n	802b492 <_realloc_r+0x1e>
 802b4a8:	4629      	mov	r1, r5
 802b4aa:	4640      	mov	r0, r8
 802b4ac:	f7fd f8d4 	bl	8028658 <_malloc_r>
 802b4b0:	4607      	mov	r7, r0
 802b4b2:	2800      	cmp	r0, #0
 802b4b4:	d0ec      	beq.n	802b490 <_realloc_r+0x1c>
 802b4b6:	42b5      	cmp	r5, r6
 802b4b8:	462a      	mov	r2, r5
 802b4ba:	4621      	mov	r1, r4
 802b4bc:	bf28      	it	cs
 802b4be:	4632      	movcs	r2, r6
 802b4c0:	f7fe f9c5 	bl	802984e <memcpy>
 802b4c4:	4621      	mov	r1, r4
 802b4c6:	4640      	mov	r0, r8
 802b4c8:	f7fe ffb4 	bl	802a434 <_free_r>
 802b4cc:	463c      	mov	r4, r7
 802b4ce:	e7e0      	b.n	802b492 <_realloc_r+0x1e>

0802b4d0 <__ascii_wctomb>:
 802b4d0:	4603      	mov	r3, r0
 802b4d2:	4608      	mov	r0, r1
 802b4d4:	b141      	cbz	r1, 802b4e8 <__ascii_wctomb+0x18>
 802b4d6:	2aff      	cmp	r2, #255	@ 0xff
 802b4d8:	d904      	bls.n	802b4e4 <__ascii_wctomb+0x14>
 802b4da:	228a      	movs	r2, #138	@ 0x8a
 802b4dc:	601a      	str	r2, [r3, #0]
 802b4de:	f04f 30ff 	mov.w	r0, #4294967295
 802b4e2:	4770      	bx	lr
 802b4e4:	700a      	strb	r2, [r1, #0]
 802b4e6:	2001      	movs	r0, #1
 802b4e8:	4770      	bx	lr

0802b4ea <_malloc_usable_size_r>:
 802b4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b4ee:	1f18      	subs	r0, r3, #4
 802b4f0:	2b00      	cmp	r3, #0
 802b4f2:	bfbc      	itt	lt
 802b4f4:	580b      	ldrlt	r3, [r1, r0]
 802b4f6:	18c0      	addlt	r0, r0, r3
 802b4f8:	4770      	bx	lr
	...

0802b4fc <_init>:
 802b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b4fe:	bf00      	nop
 802b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b502:	bc08      	pop	{r3}
 802b504:	469e      	mov	lr, r3
 802b506:	4770      	bx	lr

0802b508 <_fini>:
 802b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b50a:	bf00      	nop
 802b50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b50e:	bc08      	pop	{r3}
 802b510:	469e      	mov	lr, r3
 802b512:	4770      	bx	lr
